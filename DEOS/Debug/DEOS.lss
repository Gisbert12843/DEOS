
DEOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  000026a8  0000273c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fa  00800222  00800222  0000275e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000275e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000640  00000000  00000000  000027fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005fba  00000000  00000000  00002e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002096  00000000  00000000  00008df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000360b  00000000  00000000  0000ae8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001154  00000000  00000000  0000e498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001719  00000000  00000000  0000f5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b0d  00000000  00000000  00010d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000648  00000000  00000000  00014812  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9d c2       	rjmp	.+1338   	; 0x53c <__ctors_end>
       2:	00 00       	nop
       4:	cb c2       	rjmp	.+1430   	; 0x59c <__bad_interrupt>
       6:	00 00       	nop
       8:	c9 c2       	rjmp	.+1426   	; 0x59c <__bad_interrupt>
       a:	00 00       	nop
       c:	c7 c2       	rjmp	.+1422   	; 0x59c <__bad_interrupt>
       e:	00 00       	nop
      10:	c5 c2       	rjmp	.+1418   	; 0x59c <__bad_interrupt>
      12:	00 00       	nop
      14:	c3 c2       	rjmp	.+1414   	; 0x59c <__bad_interrupt>
      16:	00 00       	nop
      18:	c1 c2       	rjmp	.+1410   	; 0x59c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bf c2       	rjmp	.+1406   	; 0x59c <__bad_interrupt>
      1e:	00 00       	nop
      20:	bd c2       	rjmp	.+1402   	; 0x59c <__bad_interrupt>
      22:	00 00       	nop
      24:	bb c2       	rjmp	.+1398   	; 0x59c <__bad_interrupt>
      26:	00 00       	nop
      28:	b9 c2       	rjmp	.+1394   	; 0x59c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b7 c2       	rjmp	.+1390   	; 0x59c <__bad_interrupt>
      2e:	00 00       	nop
      30:	b5 c2       	rjmp	.+1386   	; 0x59c <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__vector_13>
      38:	b1 c2       	rjmp	.+1378   	; 0x59c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	af c2       	rjmp	.+1374   	; 0x59c <__bad_interrupt>
      3e:	00 00       	nop
      40:	ad c2       	rjmp	.+1370   	; 0x59c <__bad_interrupt>
      42:	00 00       	nop
      44:	fa c4       	rjmp	.+2548   	; 0xa3a <__vector_17>
      46:	00 00       	nop
      48:	a9 c2       	rjmp	.+1362   	; 0x59c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a7 c2       	rjmp	.+1358   	; 0x59c <__bad_interrupt>
      4e:	00 00       	nop
      50:	a5 c2       	rjmp	.+1354   	; 0x59c <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c7       	rjmp	.+3706   	; 0xed0 <__vector_21>
      56:	00 00       	nop
      58:	a1 c2       	rjmp	.+1346   	; 0x59c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9f c2       	rjmp	.+1342   	; 0x59c <__bad_interrupt>
      5e:	00 00       	nop
      60:	9d c2       	rjmp	.+1338   	; 0x59c <__bad_interrupt>
      62:	00 00       	nop
      64:	bc c5       	rjmp	.+2936   	; 0xbde <__vector_25>
      66:	00 00       	nop
      68:	eb c5       	rjmp	.+3030   	; 0xc40 <__vector_26>
      6a:	00 00       	nop
      6c:	97 c2       	rjmp	.+1326   	; 0x59c <__bad_interrupt>
      6e:	00 00       	nop
      70:	95 c2       	rjmp	.+1322   	; 0x59c <__bad_interrupt>
      72:	00 00       	nop
      74:	93 c2       	rjmp	.+1318   	; 0x59c <__bad_interrupt>
      76:	00 00       	nop
      78:	91 c2       	rjmp	.+1314   	; 0x59c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8f c2       	rjmp	.+1310   	; 0x59c <__bad_interrupt>
      7e:	00 00       	nop
      80:	8d c2       	rjmp	.+1306   	; 0x59c <__bad_interrupt>
      82:	00 00       	nop
      84:	8b c2       	rjmp	.+1302   	; 0x59c <__bad_interrupt>
      86:	00 00       	nop
      88:	89 c2       	rjmp	.+1298   	; 0x59c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	87 c2       	rjmp	.+1294   	; 0x59c <__bad_interrupt>
      8e:	00 00       	nop
      90:	04 c6       	rjmp	.+3080   	; 0xc9a <__vector_36>
      92:	00 00       	nop
      94:	33 c6       	rjmp	.+3174   	; 0xcfc <__vector_37>
      96:	00 00       	nop
      98:	81 c2       	rjmp	.+1282   	; 0x59c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	7f c2       	rjmp	.+1278   	; 0x59c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	7d c2       	rjmp	.+1274   	; 0x59c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	7b c2       	rjmp	.+1270   	; 0x59c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	79 c2       	rjmp	.+1266   	; 0x59c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	77 c2       	rjmp	.+1262   	; 0x59c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	75 c2       	rjmp	.+1258   	; 0x59c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	73 c2       	rjmp	.+1254   	; 0x59c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	71 c2       	rjmp	.+1250   	; 0x59c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	6f c2       	rjmp	.+1246   	; 0x59c <__bad_interrupt>
      be:	00 00       	nop
      c0:	6d c2       	rjmp	.+1242   	; 0x59c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	6b c2       	rjmp	.+1238   	; 0x59c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	69 c2       	rjmp	.+1234   	; 0x59c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	45 c6       	rjmp	.+3210   	; 0xd58 <__vector_51>
      ce:	00 00       	nop
      d0:	74 c6       	rjmp	.+3304   	; 0xdba <__vector_52>
      d2:	00 00       	nop
      d4:	63 c2       	rjmp	.+1222   	; 0x59c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	9d c6       	rjmp	.+3386   	; 0xe14 <__vector_54>
      da:	00 00       	nop
      dc:	cc c6       	rjmp	.+3480   	; 0xe76 <__vector_55>
      de:	00 00       	nop
      e0:	5d c2       	rjmp	.+1210   	; 0x59c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	16 04       	cpc	r1, r6
      e6:	17 04       	cpc	r1, r7
      e8:	17 04       	cpc	r1, r7
      ea:	17 04       	cpc	r1, r7
      ec:	17 04       	cpc	r1, r7
      ee:	17 04       	cpc	r1, r7
      f0:	17 04       	cpc	r1, r7
      f2:	17 04       	cpc	r1, r7
      f4:	17 04       	cpc	r1, r7
      f6:	17 04       	cpc	r1, r7
      f8:	17 04       	cpc	r1, r7
      fa:	17 04       	cpc	r1, r7
      fc:	17 04       	cpc	r1, r7
      fe:	17 04       	cpc	r1, r7
     100:	17 04       	cpc	r1, r7
     102:	17 04       	cpc	r1, r7
     104:	17 04       	cpc	r1, r7
     106:	17 04       	cpc	r1, r7
     108:	0e 04       	cpc	r0, r14
     10a:	17 04       	cpc	r1, r7
     10c:	17 04       	cpc	r1, r7
     10e:	17 04       	cpc	r1, r7
     110:	17 04       	cpc	r1, r7
     112:	17 04       	cpc	r1, r7
     114:	10 04       	cpc	r1, r0
     116:	17 04       	cpc	r1, r7
     118:	17 04       	cpc	r1, r7
     11a:	0c 04       	cpc	r0, r12
     11c:	17 04       	cpc	r1, r7
     11e:	17 04       	cpc	r1, r7
     120:	17 04       	cpc	r1, r7
     122:	17 04       	cpc	r1, r7
     124:	16 04       	cpc	r1, r6
     126:	17 04       	cpc	r1, r7
     128:	17 04       	cpc	r1, r7
     12a:	17 04       	cpc	r1, r7
     12c:	17 04       	cpc	r1, r7
     12e:	17 04       	cpc	r1, r7
     130:	17 04       	cpc	r1, r7
     132:	17 04       	cpc	r1, r7
     134:	17 04       	cpc	r1, r7
     136:	17 04       	cpc	r1, r7
     138:	17 04       	cpc	r1, r7
     13a:	17 04       	cpc	r1, r7
     13c:	12 04       	cpc	r1, r2
     13e:	17 04       	cpc	r1, r7
     140:	17 04       	cpc	r1, r7
     142:	17 04       	cpc	r1, r7
     144:	17 04       	cpc	r1, r7
     146:	14 04       	cpc	r1, r4
     148:	08 04       	cpc	r0, r8
     14a:	17 04       	cpc	r1, r7
     14c:	17 04       	cpc	r1, r7
     14e:	17 04       	cpc	r1, r7
     150:	17 04       	cpc	r1, r7
     152:	17 04       	cpc	r1, r7
     154:	0a 04       	cpc	r0, r10

00000156 <__trampolines_end>:
     156:	43 61       	ori	r20, 0x13	; 19
     158:	6e 27       	eor	r22, r30
     15a:	74 20       	and	r7, r4
     15c:	70 6f       	ori	r23, 0xF0	; 240
     15e:	70 20       	and	r7, r0
     160:	66 72       	andi	r22, 0x26	; 38
     162:	6f 6d       	ori	r22, 0xDF	; 223
     164:	20 65       	ori	r18, 0x50	; 80
     166:	6d 70       	andi	r22, 0x0D	; 13
     168:	74 79       	andi	r23, 0x94	; 148
     16a:	20 72       	andi	r18, 0x20	; 32
     16c:	65 61       	ori	r22, 0x15	; 21
     16e:	64 79       	andi	r22, 0x94	; 148
     170:	20 71       	andi	r18, 0x10	; 16
     172:	75 65       	ori	r23, 0x55	; 85
     174:	75 65       	ori	r23, 0x55	; 85
	...

00000177 <__c.2283>:
     177:	43 61 6e 27 74 20 70 75 73 68 20 6f 6e 20 66 75     Can't push on fu
     187:	6c 6c 20 72 65 61 64 79 20 71 75 65 75 65 00        ll ready queue.

00000196 <__c.2073>:
     196:	20 20 20 20 20 20 20 20 00                                  .

0000019f <__c.2289>:
     19f:	5b 45 52 52 4f 52 5d 20 00                          [ERROR] .

000001a8 <__c.2283>:
     1a8:	20 53 74 61 63 6b 20 63 6f 6c 6c 69 64 65 73 20      Stack collides 
     1b8:	77 69 74 68 20 67 6c 6f 62 61 6c 20 76 61 72 73     with global vars
	...

000001c9 <__c.2281>:
     1c9:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     1d9:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     1e9:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     1f9:	2d 2d 0a 00                                         --..

000001fd <__c.2277>:
     1fd:	5b 49 4e 46 4f 5d 20 20 00                          [INFO]  .

00000206 <__c.2279>:
     206:	55 73 65 64 20 67 6c 6f 62 61 6c 20 76 61 72 73     Used global vars
     216:	3a 20 25 64 2f 25 64 20 62 79 74 65 73 00           : %d/%d bytes.

00000224 <__c.2273>:
     224:	5b 49 4e 46 4f 5d 20 20 00                          [INFO]  .

0000022d <__c.2275>:
     22d:	42 6f 6f 74 69 6e 67 20 44 45 4f 53 20 2e 2e 2e     Booting DEOS ...
	...

0000023e <__c.2271>:
     23e:	0a 0a 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ..##############
     24e:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
     25e:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
     26e:	23 23 23 23 0a 00                                   ####..

00000274 <__c.2269>:
     274:	42 6f 6f 74 69 6e 67 20 44 45 4f 53 20 2e 2e 2e     Booting DEOS ...
	...

00000285 <__c.2445>:
     285:	6f 73 5f 73 74 61 72 74 53 63 68 65 64 75 6c 65     os_startSchedule
     295:	72 28 29 20 74 65 72 6d 69 6e 61 74 65 64 20 61     r() terminated a
     2a5:	67 61 69 6e 73 74 20 61 6c 6c 20 6f 64 64 73 20     gainst all odds 
     2b5:	2d 20 73 63 61 72 79 20 73 74 75 66 66 2e 2e 2e     - scary stuff...
	...

000002c6 <__c.2440>:
     2c6:	54 68 65 72 65 20 69 73 20 6e 6f 20 69 64 6c 65     There is no idle
     2d6:	20 70 72 6f 63 00                                    proc.

000002dc <__c.2418>:
     2dc:	6f 73 5f 65 78 65 63 28 29 20 2d 3e 20 00           os_exec() -> .

000002ea <__c.2420>:
     2ea:	4e 6f 20 66 72 65 65 20 73 6c 6f 74 20 61 76 61     No free slot ava
     2fa:	69 6c 61 62 6c 65 0a 00                             ilable..

00000302 <__c.2384>:
     302:	43 68 65 63 6b 73 75 6d 20 6d 69 73 6d 61 74 63     Checksum mismatc
     312:	68 20 69 6e 20 70 72 6f 63 65 73 73 20 25 64 00     h in process %d.

00000322 <__c.2378>:
     322:	53 74 61 63 6b 20 70 6f 69 6e 74 65 72 20 6f 75     Stack pointer ou
     332:	74 20 6f 66 20 62 6f 75 6e 64 73 20 69 6e 20 70     t of bounds in p
     342:	72 6f 63 65 73 73 20 25 64 00                       rocess %d.

0000034c <__c.2371>:
     34c:	43 72 69 74 2e 20 53 65 63 74 69 6f 6e 20 20 20     Crit. Section   
     35c:	75 6e 64 65 72 66 6c 6f 77 00                       underflow.

00000366 <__c.2365>:
     366:	43 72 69 74 2e 20 53 65 63 74 69 6f 6e 20 20 20     Crit. Section   
     376:	6f 76 65 72 66 6c 6f 77 00                          overflow.

0000037f <__c.2436>:
     37f:	20 20 54 45 53 54 20 50 41 53 53 45 44 20 20 20       TEST PASSED   
	...

00000390 <__c.2431>:
     390:	53 63 68 65 64 2e 20 50 61 72 74 69 61 6c 00        Sched. Partial.

0000039f <__c.2429>:
     39f:	50 68 61 73 65 20 34 3a 00                          Phase 4:.

000003a8 <__c.2424>:
     3a8:	53 63 68 65 64 2e 20 41 6c 6c 00                    Sched. All.

000003b3 <__c.2422>:
     3b3:	50 68 61 73 65 20 33 3a 00                          Phase 3:.

000003bc <__c.2417>:
     3bc:	49 64 6c 65 00                                      Idle.

000003c1 <__c.2415>:
     3c1:	50 68 61 73 65 20 32 3a 00                          Phase 2:.

000003ca <__c.2410>:
     3ca:	53 74 72 61 74 65 67 69 65 73 00                    Strategies.

000003d5 <__c.2408>:
     3d5:	50 68 61 73 65 20 31 3a 00                          Phase 1:.

000003de <__c.2385>:
     3de:	49 64 6c 65 20 6e 6f 74 20 73 63 68 65 64 75 6c     Idle not schedul
     3ee:	65 64 00                                            ed.

000003f1 <__c.2383>:
     3f1:	44 79 6e 61 6d 69 63 50 72 69 6f 72 69 74 79 20     DynamicPriority 
     401:	52 6f 75 6e 64 52 6f 62 69 6e 3a 20 00              RoundRobin: .

0000040e <__c.2379>:
     40e:	52 6f 75 6e 64 52 6f 62 69 6e 3a 20 00              RoundRobin: .

0000041b <__c.2376>:
     41b:	4f 4b 00                                            OK.

0000041e <__c.2357>:
     41e:	4e 6f 74 20 69 6d 70 6c 2e 20 6f 72 20 69 64 6c     Not impl. or idl
     42e:	65 20 72 65 74 75 72 6e 65 64 00                    e returned.

00000439 <__c.2349>:
     439:	66 61 6c 73 65 6c 79 20 73 63 68 65 64 2e 00        falsely sched..

00000448 <__c.2346>:
     448:	6e 6f 74 20 73 63 68 65 64 75 6c 61 62 6c 65 00     not schedulable.

00000458 <__c.2343>:
     458:	45 72 72 6f 72 20 44 50 52 52 3a 20 00              Error DPRR: .

00000465 <__c.2339>:
     465:	45 72 72 6f 72 20 52 6f 75 6e 64 52 6f 62 69 6e     Error RoundRobin
     475:	3a 20 00                                            : .

00000478 <__c.2331>:
     478:	4f 4b 00                                            OK.

0000047b <__c.2320>:
     47b:	4e 6f 74 20 69 6d 70 6c 2e 20 6f 72 20 69 64 6c     Not impl. or idl
     48b:	65 20 72 65 74 75 72 6e 65 64 00                    e returned.

00000496 <__c.2311>:
     496:	4f 4b 00                                            OK.

00000499 <__c.2299>:
     499:	4e 6f 74 20 69 6d 70 6c 2e 20 6f 72 20 69 64 6c     Not impl. or idl
     4a9:	65 20 72 65 74 75 72 6e 65 64 00                    e returned.

000004b4 <__c.2292>:
     4b4:	44 79 6e 61 6d 69 63 50 72 69 6f 72 69 74 79 20     DynamicPriority 
     4c4:	52 6f 75 6e 64 52 6f 62 69 6e 00                    RoundRobin.

000004cf <__c.2288>:
     4cf:	52 6f 75 6e 64 52 6f 62 69 6e 00                    RoundRobin.

000004da <__c.2280>:
     4da:	49 6e 76 61 6c 69 64 20 73 74 72 61 74 65 67 79     Invalid strategy
	...

000004eb <scheduling>:
     4eb:	01 02 03 01 02 03 01 02 03 01 02 03 01 02 03 01     ................
     4fb:	02 03 01 02 03 01 02 03 01 02 03 01 02 03 01 02     ................
     50b:	01 02 01 03 02 01 03 01 02 01 03 02 01 03 01 02     ................
     51b:	01 03 02 01 03 01 02 01 03 02 01 03 01 02 01 03     ................
	...

0000052c <__ctors_start>:
     52c:	4c 09       	sbc	r20, r12
     52e:	ed 0f       	add	r30, r29
     530:	1b 10       	cpse	r1, r11
     532:	23 10       	cpse	r2, r3
     534:	2b 10       	cpse	r2, r11
     536:	33 10       	cpse	r3, r3
     538:	3b 10       	cpse	r3, r11
     53a:	43 10       	cpse	r4, r3

0000053c <__ctors_end>:
     53c:	11 24       	eor	r1, r1
     53e:	1f be       	out	0x3f, r1	; 63
     540:	cf ef       	ldi	r28, 0xFF	; 255
     542:	d1 e2       	ldi	r29, 0x21	; 33
     544:	de bf       	out	0x3e, r29	; 62
     546:	cd bf       	out	0x3d, r28	; 61
     548:	00 e0       	ldi	r16, 0x00	; 0
     54a:	0c bf       	out	0x3c, r16	; 60

0000054c <__do_copy_data>:
     54c:	12 e0       	ldi	r17, 0x02	; 2
     54e:	a0 e0       	ldi	r26, 0x00	; 0
     550:	b2 e0       	ldi	r27, 0x02	; 2
     552:	e8 ea       	ldi	r30, 0xA8	; 168
     554:	f6 e2       	ldi	r31, 0x26	; 38
     556:	00 e0       	ldi	r16, 0x00	; 0
     558:	0b bf       	out	0x3b, r16	; 59
     55a:	02 c0       	rjmp	.+4      	; 0x560 <__do_copy_data+0x14>
     55c:	07 90       	elpm	r0, Z+
     55e:	0d 92       	st	X+, r0
     560:	a2 32       	cpi	r26, 0x22	; 34
     562:	b1 07       	cpc	r27, r17
     564:	d9 f7       	brne	.-10     	; 0x55c <__do_copy_data+0x10>

00000566 <__do_clear_bss>:
     566:	24 e0       	ldi	r18, 0x04	; 4
     568:	a2 e2       	ldi	r26, 0x22	; 34
     56a:	b2 e0       	ldi	r27, 0x02	; 2
     56c:	01 c0       	rjmp	.+2      	; 0x570 <.do_clear_bss_start>

0000056e <.do_clear_bss_loop>:
     56e:	1d 92       	st	X+, r1

00000570 <.do_clear_bss_start>:
     570:	ac 31       	cpi	r26, 0x1C	; 28
     572:	b2 07       	cpc	r27, r18
     574:	e1 f7       	brne	.-8      	; 0x56e <.do_clear_bss_loop>

00000576 <__do_global_ctors>:
     576:	12 e0       	ldi	r17, 0x02	; 2
     578:	ce e9       	ldi	r28, 0x9E	; 158
     57a:	d2 e0       	ldi	r29, 0x02	; 2
     57c:	00 e0       	ldi	r16, 0x00	; 0
     57e:	06 c0       	rjmp	.+12     	; 0x58c <__do_global_ctors+0x16>
     580:	21 97       	sbiw	r28, 0x01	; 1
     582:	01 09       	sbc	r16, r1
     584:	80 2f       	mov	r24, r16
     586:	fe 01       	movw	r30, r28
     588:	0e 94 6d 10 	call	0x20da	; 0x20da <__tablejump2__>
     58c:	c6 39       	cpi	r28, 0x96	; 150
     58e:	d1 07       	cpc	r29, r17
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	08 07       	cpc	r16, r24
     594:	a9 f7       	brne	.-22     	; 0x580 <__do_global_ctors+0xa>
     596:	4f d5       	rcall	.+2718   	; 0x1036 <main>
     598:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <_exit>

0000059c <__bad_interrupt>:
     59c:	31 cd       	rjmp	.-1438   	; 0x0 <__vectors>

0000059e <lcd_enablePulse>:
			lcd_writeHexNibble(number >> nib);
		}
	}

	os_leaveCriticalSection();
}
     59e:	3a d6       	rcall	.+3188   	; 0x1214 <os_enterCriticalSection>
     5a0:	e2 e0       	ldi	r30, 0x02	; 2
     5a2:	f1 e0       	ldi	r31, 0x01	; 1
     5a4:	80 81       	ld	r24, Z
     5a6:	80 64       	ori	r24, 0x40	; 64
     5a8:	80 83       	st	Z, r24
     5aa:	85 e0       	ldi	r24, 0x05	; 5
     5ac:	8a 95       	dec	r24
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <lcd_enablePulse+0xe>
     5b0:	00 00       	nop
     5b2:	80 81       	ld	r24, Z
     5b4:	8f 7b       	andi	r24, 0xBF	; 191
     5b6:	80 83       	st	Z, r24
     5b8:	8f e8       	ldi	r24, 0x8F	; 143
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	f1 f7       	brne	.-4      	; 0x5bc <lcd_enablePulse+0x1e>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <lcd_enablePulse+0x24>
     5c2:	00 00       	nop
     5c4:	46 c6       	rjmp	.+3212   	; 0x1252 <os_leaveCriticalSection>
     5c6:	08 95       	ret

000005c8 <lcd_sendNibble>:
     5c8:	cf 93       	push	r28
     5ca:	c8 2f       	mov	r28, r24
     5cc:	23 d6       	rcall	.+3142   	; 0x1214 <os_enterCriticalSection>
     5ce:	c0 ff       	sbrs	r28, 0
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <lcd_sendNibble+0x12>
     5d2:	84 b3       	in	r24, 0x14	; 20
     5d4:	80 62       	ori	r24, 0x20	; 32
     5d6:	84 bb       	out	0x14, r24	; 20
     5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <lcd_sendNibble+0x18>
     5da:	84 b3       	in	r24, 0x14	; 20
     5dc:	8f 7d       	andi	r24, 0xDF	; 223
     5de:	84 bb       	out	0x14, r24	; 20
     5e0:	c1 ff       	sbrs	r28, 1
     5e2:	04 c0       	rjmp	.+8      	; 0x5ec <lcd_sendNibble+0x24>
     5e4:	8e b1       	in	r24, 0x0e	; 14
     5e6:	88 60       	ori	r24, 0x08	; 8
     5e8:	8e b9       	out	0x0e, r24	; 14
     5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <lcd_sendNibble+0x2a>
     5ec:	8e b1       	in	r24, 0x0e	; 14
     5ee:	87 7f       	andi	r24, 0xF7	; 247
     5f0:	8e b9       	out	0x0e, r24	; 14
     5f2:	c2 ff       	sbrs	r28, 2
     5f4:	06 c0       	rjmp	.+12     	; 0x602 <lcd_sendNibble+0x3a>
     5f6:	e2 e0       	ldi	r30, 0x02	; 2
     5f8:	f1 e0       	ldi	r31, 0x01	; 1
     5fa:	80 81       	ld	r24, Z
     5fc:	88 60       	ori	r24, 0x08	; 8
     5fe:	80 83       	st	Z, r24
     600:	05 c0       	rjmp	.+10     	; 0x60c <lcd_sendNibble+0x44>
     602:	e2 e0       	ldi	r30, 0x02	; 2
     604:	f1 e0       	ldi	r31, 0x01	; 1
     606:	80 81       	ld	r24, Z
     608:	87 7f       	andi	r24, 0xF7	; 247
     60a:	80 83       	st	Z, r24
     60c:	c3 ff       	sbrs	r28, 3
     60e:	06 c0       	rjmp	.+12     	; 0x61c <lcd_sendNibble+0x54>
     610:	e2 e0       	ldi	r30, 0x02	; 2
     612:	f1 e0       	ldi	r31, 0x01	; 1
     614:	80 81       	ld	r24, Z
     616:	80 61       	ori	r24, 0x10	; 16
     618:	80 83       	st	Z, r24
     61a:	05 c0       	rjmp	.+10     	; 0x626 <lcd_sendNibble+0x5e>
     61c:	e2 e0       	ldi	r30, 0x02	; 2
     61e:	f1 e0       	ldi	r31, 0x01	; 1
     620:	80 81       	ld	r24, Z
     622:	8f 7e       	andi	r24, 0xEF	; 239
     624:	80 83       	st	Z, r24
     626:	bb df       	rcall	.-138    	; 0x59e <lcd_enablePulse>
     628:	14 d6       	rcall	.+3112   	; 0x1252 <os_leaveCriticalSection>
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <lcd_printf_p>:
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	ae 01       	movw	r20, r28
     63c:	48 5f       	subi	r20, 0xF8	; 248
     63e:	5f 4f       	sbci	r21, 0xFF	; 255
     640:	da 01       	movw	r26, r20
     642:	6d 91       	ld	r22, X+
     644:	7d 91       	ld	r23, X+
     646:	ad 01       	movw	r20, r26
     648:	06 e1       	ldi	r16, 0x16	; 22
     64a:	14 e0       	ldi	r17, 0x04	; 4
     64c:	d8 01       	movw	r26, r16
     64e:	12 96       	adiw	r26, 0x02	; 2
     650:	ed 91       	ld	r30, X+
     652:	fc 91       	ld	r31, X
     654:	13 97       	sbiw	r26, 0x03	; 3
     656:	83 81       	ldd	r24, Z+3	; 0x03
     658:	88 60       	ori	r24, 0x08	; 8
     65a:	83 83       	std	Z+3, r24	; 0x03
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	92 e0       	ldi	r25, 0x02	; 2
     660:	0e 94 97 10 	call	0x212e	; 0x212e <vfprintf_P>
     664:	d8 01       	movw	r26, r16
     666:	12 96       	adiw	r26, 0x02	; 2
     668:	ed 91       	ld	r30, X+
     66a:	fc 91       	ld	r31, X
     66c:	13 97       	sbiw	r26, 0x03	; 3
     66e:	83 81       	ldd	r24, Z+3	; 0x03
     670:	87 7f       	andi	r24, 0xF7	; 247
     672:	83 83       	std	Z+3, r24	; 0x03
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	08 95       	ret

0000067e <lcd_sendCommand>:
     67e:	cf 93       	push	r28
     680:	c8 2f       	mov	r28, r24
     682:	c8 d5       	rcall	.+2960   	; 0x1214 <os_enterCriticalSection>
     684:	e2 e0       	ldi	r30, 0x02	; 2
     686:	f1 e0       	ldi	r31, 0x01	; 1
     688:	80 81       	ld	r24, Z
     68a:	8f 7d       	andi	r24, 0xDF	; 223
     68c:	80 83       	st	Z, r24
     68e:	8c 2f       	mov	r24, r28
     690:	82 95       	swap	r24
     692:	8f 70       	andi	r24, 0x0F	; 15
     694:	99 df       	rcall	.-206    	; 0x5c8 <lcd_sendNibble>
     696:	8c 2f       	mov	r24, r28
     698:	97 df       	rcall	.-210    	; 0x5c8 <lcd_sendNibble>
     69a:	85 ed       	ldi	r24, 0xD5	; 213
     69c:	8a 95       	dec	r24
     69e:	f1 f7       	brne	.-4      	; 0x69c <lcd_sendCommand+0x1e>
     6a0:	00 00       	nop
     6a2:	d7 d5       	rcall	.+2990   	; 0x1252 <os_leaveCriticalSection>
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <lcd_init>:
     6a8:	b5 d5       	rcall	.+2922   	; 0x1214 <os_enterCriticalSection>
     6aa:	e1 e0       	ldi	r30, 0x01	; 1
     6ac:	f1 e0       	ldi	r31, 0x01	; 1
     6ae:	80 81       	ld	r24, Z
     6b0:	88 67       	ori	r24, 0x78	; 120
     6b2:	80 83       	st	Z, r24
     6b4:	8d b1       	in	r24, 0x0d	; 13
     6b6:	88 60       	ori	r24, 0x08	; 8
     6b8:	8d b9       	out	0x0d, r24	; 13
     6ba:	83 b3       	in	r24, 0x13	; 19
     6bc:	80 62       	ori	r24, 0x20	; 32
     6be:	83 bb       	out	0x13, r24	; 19
     6c0:	80 b3       	in	r24, 0x10	; 16
     6c2:	81 60       	ori	r24, 0x01	; 1
     6c4:	80 bb       	out	0x10, r24	; 16
     6c6:	81 b3       	in	r24, 0x11	; 17
     6c8:	8e 7f       	andi	r24, 0xFE	; 254
     6ca:	81 bb       	out	0x11, r24	; 17
     6cc:	2f ef       	ldi	r18, 0xFF	; 255
     6ce:	80 e7       	ldi	r24, 0x70	; 112
     6d0:	92 e0       	ldi	r25, 0x02	; 2
     6d2:	21 50       	subi	r18, 0x01	; 1
     6d4:	80 40       	sbci	r24, 0x00	; 0
     6d6:	90 40       	sbci	r25, 0x00	; 0
     6d8:	e1 f7       	brne	.-8      	; 0x6d2 <lcd_init+0x2a>
     6da:	00 c0       	rjmp	.+0      	; 0x6dc <lcd_init+0x34>
     6dc:	00 00       	nop
     6de:	83 e0       	ldi	r24, 0x03	; 3
     6e0:	73 df       	rcall	.-282    	; 0x5c8 <lcd_sendNibble>
     6e2:	8f e1       	ldi	r24, 0x1F	; 31
     6e4:	9e e4       	ldi	r25, 0x4E	; 78
     6e6:	01 97       	sbiw	r24, 0x01	; 1
     6e8:	f1 f7       	brne	.-4      	; 0x6e6 <lcd_init+0x3e>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <lcd_init+0x44>
     6ec:	00 00       	nop
     6ee:	83 e0       	ldi	r24, 0x03	; 3
     6f0:	6b df       	rcall	.-298    	; 0x5c8 <lcd_sendNibble>
     6f2:	8f e1       	ldi	r24, 0x1F	; 31
     6f4:	93 e0       	ldi	r25, 0x03	; 3
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <lcd_init+0x4e>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <lcd_init+0x54>
     6fc:	00 00       	nop
     6fe:	83 e0       	ldi	r24, 0x03	; 3
     700:	63 df       	rcall	.-314    	; 0x5c8 <lcd_sendNibble>
     702:	8f e1       	ldi	r24, 0x1F	; 31
     704:	93 e0       	ldi	r25, 0x03	; 3
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	f1 f7       	brne	.-4      	; 0x706 <lcd_init+0x5e>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <lcd_init+0x64>
     70c:	00 00       	nop
     70e:	82 e0       	ldi	r24, 0x02	; 2
     710:	5b df       	rcall	.-330    	; 0x5c8 <lcd_sendNibble>
     712:	88 e2       	ldi	r24, 0x28	; 40
     714:	b4 df       	rcall	.-152    	; 0x67e <lcd_sendCommand>
     716:	8c e0       	ldi	r24, 0x0C	; 12
     718:	b2 df       	rcall	.-156    	; 0x67e <lcd_sendCommand>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	b0 df       	rcall	.-160    	; 0x67e <lcd_sendCommand>
     71e:	86 e0       	ldi	r24, 0x06	; 6
     720:	ae df       	rcall	.-164    	; 0x67e <lcd_sendCommand>
     722:	8f e1       	ldi	r24, 0x1F	; 31
     724:	9e e4       	ldi	r25, 0x4E	; 78
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <lcd_init+0x7e>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <lcd_init+0x84>
     72c:	00 00       	nop
     72e:	91 c5       	rjmp	.+2850   	; 0x1252 <os_leaveCriticalSection>
     730:	08 95       	ret

00000732 <lcd_clear>:
     732:	70 d5       	rcall	.+2784   	; 0x1214 <os_enterCriticalSection>
     734:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <charCtr>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	a1 df       	rcall	.-190    	; 0x67e <lcd_sendCommand>
     73c:	8f e3       	ldi	r24, 0x3F	; 63
     73e:	9f e1       	ldi	r25, 0x1F	; 31
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	f1 f7       	brne	.-4      	; 0x740 <lcd_clear+0xe>
     744:	00 c0       	rjmp	.+0      	; 0x746 <lcd_clear+0x14>
     746:	00 00       	nop
     748:	84 c5       	rjmp	.+2824   	; 0x1252 <os_leaveCriticalSection>
     74a:	08 95       	ret

0000074c <lcd_displayOn>:
     74c:	8c e0       	ldi	r24, 0x0C	; 12
     74e:	97 cf       	rjmp	.-210    	; 0x67e <lcd_sendCommand>
     750:	08 95       	ret

00000752 <lcd_displayOff>:
     752:	88 e0       	ldi	r24, 0x08	; 8
     754:	94 cf       	rjmp	.-216    	; 0x67e <lcd_sendCommand>
     756:	08 95       	ret

00000758 <lcd_blinkOn>:
     758:	8f e0       	ldi	r24, 0x0F	; 15
     75a:	91 cf       	rjmp	.-222    	; 0x67e <lcd_sendCommand>
     75c:	08 95       	ret

0000075e <lcd_goto>:
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	d8 2f       	mov	r29, r24
     764:	c6 2f       	mov	r28, r22
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	08 f0       	brcs	.+2      	; 0x76c <lcd_goto+0xe>
     76a:	d1 e0       	ldi	r29, 0x01	; 1
     76c:	53 d5       	rcall	.+2726   	; 0x1214 <os_enterCriticalSection>
     76e:	8c 2f       	mov	r24, r28
     770:	90 e4       	ldi	r25, 0x40	; 64
     772:	d9 9f       	mul	r29, r25
     774:	80 0d       	add	r24, r0
     776:	11 24       	eor	r1, r1
     778:	80 68       	ori	r24, 0x80	; 128
     77a:	81 df       	rcall	.-254    	; 0x67e <lcd_sendCommand>
     77c:	80 e1       	ldi	r24, 0x10	; 16
     77e:	d8 9f       	mul	r29, r24
     780:	c0 0d       	add	r28, r0
     782:	11 24       	eor	r1, r1
     784:	c0 93 7e 03 	sts	0x037E, r28	; 0x80037e <charCtr>
     788:	64 d5       	rcall	.+2760   	; 0x1252 <os_leaveCriticalSection>
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	08 95       	ret

00000790 <lcd_sendData>:
     790:	cf 93       	push	r28
     792:	c8 2f       	mov	r28, r24
     794:	3f d5       	rcall	.+2686   	; 0x1214 <os_enterCriticalSection>
     796:	e2 e0       	ldi	r30, 0x02	; 2
     798:	f1 e0       	ldi	r31, 0x01	; 1
     79a:	80 81       	ld	r24, Z
     79c:	80 62       	ori	r24, 0x20	; 32
     79e:	80 83       	st	Z, r24
     7a0:	8c 2f       	mov	r24, r28
     7a2:	82 95       	swap	r24
     7a4:	8f 70       	andi	r24, 0x0F	; 15
     7a6:	10 df       	rcall	.-480    	; 0x5c8 <lcd_sendNibble>
     7a8:	8c 2f       	mov	r24, r28
     7aa:	0e df       	rcall	.-484    	; 0x5c8 <lcd_sendNibble>
     7ac:	85 ed       	ldi	r24, 0xD5	; 213
     7ae:	8a 95       	dec	r24
     7b0:	f1 f7       	brne	.-4      	; 0x7ae <lcd_sendData+0x1e>
     7b2:	00 00       	nop
     7b4:	4e d5       	rcall	.+2716   	; 0x1252 <os_leaveCriticalSection>
     7b6:	cf 91       	pop	r28
     7b8:	08 95       	ret

000007ba <lcd_line1>:
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	cf cf       	rjmp	.-98     	; 0x75e <lcd_goto>
     7c0:	08 95       	ret

000007c2 <lcd_line2>:
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	cb cf       	rjmp	.-106    	; 0x75e <lcd_goto>
     7c8:	08 95       	ret

000007ca <lcd_writeChar>:
     7ca:	cf 93       	push	r28
     7cc:	c8 2f       	mov	r28, r24
     7ce:	22 d5       	rcall	.+2628   	; 0x1214 <os_enterCriticalSection>
     7d0:	ca 30       	cpi	r28, 0x0A	; 10
     7d2:	31 f4       	brne	.+12     	; 0x7e0 <lcd_writeChar+0x16>
     7d4:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <charCtr>
     7d8:	80 71       	andi	r24, 0x10	; 16
     7da:	80 5f       	subi	r24, 0xF0	; 240
     7dc:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <charCtr>
     7e0:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <charCtr>
     7e4:	80 31       	cpi	r24, 0x10	; 16
     7e6:	11 f4       	brne	.+4      	; 0x7ec <lcd_writeChar+0x22>
     7e8:	ec df       	rcall	.-40     	; 0x7c2 <lcd_line2>
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <lcd_writeChar+0x2a>
     7ec:	80 32       	cpi	r24, 0x20	; 32
     7ee:	11 f4       	brne	.+4      	; 0x7f4 <lcd_writeChar+0x2a>
     7f0:	a0 df       	rcall	.-192    	; 0x732 <lcd_clear>
     7f2:	e3 df       	rcall	.-58     	; 0x7ba <lcd_line1>
     7f4:	8c 2f       	mov	r24, r28
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	fc 01       	movw	r30, r24
     7fa:	e4 58       	subi	r30, 0x84	; 132
     7fc:	f1 09       	sbc	r31, r1
     7fe:	e9 33       	cpi	r30, 0x39	; 57
     800:	f1 05       	cpc	r31, r1
     802:	a8 f4       	brcc	.+42     	; 0x82e <lcd_writeChar+0x64>
     804:	88 27       	eor	r24, r24
     806:	ee 58       	subi	r30, 0x8E	; 142
     808:	ff 4f       	sbci	r31, 0xFF	; 255
     80a:	8f 4f       	sbci	r24, 0xFF	; 255
     80c:	0c 94 6d 10 	jmp	0x20da	; 0x20da <__tablejump2__>
     810:	cf ee       	ldi	r28, 0xEF	; 239
     812:	0d c0       	rjmp	.+26     	; 0x82e <lcd_writeChar+0x64>
     814:	c5 ef       	ldi	r28, 0xF5	; 245
     816:	0b c0       	rjmp	.+22     	; 0x82e <lcd_writeChar+0x64>
     818:	c2 ee       	ldi	r28, 0xE2	; 226
     81a:	09 c0       	rjmp	.+18     	; 0x82e <lcd_writeChar+0x64>
     81c:	cf ee       	ldi	r28, 0xEF	; 239
     81e:	07 c0       	rjmp	.+14     	; 0x82e <lcd_writeChar+0x64>
     820:	c5 ef       	ldi	r28, 0xF5	; 245
     822:	05 c0       	rjmp	.+10     	; 0x82e <lcd_writeChar+0x64>
     824:	cf ed       	ldi	r28, 0xDF	; 223
     826:	03 c0       	rjmp	.+6      	; 0x82e <lcd_writeChar+0x64>
     828:	c4 ee       	ldi	r28, 0xE4	; 228
     82a:	01 c0       	rjmp	.+2      	; 0x82e <lcd_writeChar+0x64>
     82c:	c1 ee       	ldi	r28, 0xE1	; 225
     82e:	8c 2f       	mov	r24, r28
     830:	af df       	rcall	.-162    	; 0x790 <lcd_sendData>
     832:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <charCtr>
     836:	8f 5f       	subi	r24, 0xFF	; 255
     838:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <charCtr>
     83c:	0a d5       	rcall	.+2580   	; 0x1252 <os_leaveCriticalSection>
     83e:	cf 91       	pop	r28
     840:	08 95       	ret

00000842 <lcd_stdioPutChar>:
     842:	c3 df       	rcall	.-122    	; 0x7ca <lcd_writeChar>
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	08 95       	ret

0000084a <lcd_writeProgString>:
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	ec 01       	movw	r28, r24
     854:	df d4       	rcall	.+2494   	; 0x1214 <os_enterCriticalSection>
     856:	02 c0       	rjmp	.+4      	; 0x85c <lcd_writeProgString+0x12>
     858:	b8 df       	rcall	.-144    	; 0x7ca <lcd_writeChar>
     85a:	e8 01       	movw	r28, r16
     85c:	8e 01       	movw	r16, r28
     85e:	0f 5f       	subi	r16, 0xFF	; 255
     860:	1f 4f       	sbci	r17, 0xFF	; 255
     862:	fe 01       	movw	r30, r28
     864:	84 91       	lpm	r24, Z
     866:	81 11       	cpse	r24, r1
     868:	f7 cf       	rjmp	.-18     	; 0x858 <lcd_writeProgString+0xe>
     86a:	f3 d4       	rcall	.+2534   	; 0x1252 <os_leaveCriticalSection>
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret

00000876 <lcd_writeDec>:
 *  Writes a 16 bit integer as a decimal number without leading 0s
 *
 *  \param number The number to be written.
 */
void lcd_writeDec(uint16_t number)
{
     876:	cf 92       	push	r12
     878:	df 92       	push	r13
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	ec 01       	movw	r28, r24
	if (!number)
     886:	89 2b       	or	r24, r25
     888:	19 f4       	brne	.+6      	; 0x890 <lcd_writeDec+0x1a>
	{
		lcd_writeChar('0');
     88a:	80 e3       	ldi	r24, 0x30	; 48
     88c:	9e df       	rcall	.-196    	; 0x7ca <lcd_writeChar>
	}

	uint32_t pos = 10000;
	uint8_t print = 0;

	os_enterCriticalSection();
     88e:	30 c0       	rjmp	.+96     	; 0x8f0 <lcd_writeDec+0x7a>
     890:	c1 d4       	rcall	.+2434   	; 0x1214 <os_enterCriticalSection>
		lcd_writeChar('0');
		return;
	}

	uint32_t pos = 10000;
	uint8_t print = 0;
     892:	10 e0       	ldi	r17, 0x00	; 0
	{
		lcd_writeChar('0');
		return;
	}

	uint32_t pos = 10000;
     894:	0f 2e       	mov	r0, r31
     896:	f0 e1       	ldi	r31, 0x10	; 16
     898:	cf 2e       	mov	r12, r31
     89a:	f7 e2       	ldi	r31, 0x27	; 39
     89c:	df 2e       	mov	r13, r31
     89e:	e1 2c       	mov	r14, r1
     8a0:	f1 2c       	mov	r15, r1
     8a2:	f0 2d       	mov	r31, r0

	os_enterCriticalSection();

	do
	{
		uint8_t const digit = number / pos;
     8a4:	be 01       	movw	r22, r28
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	a7 01       	movw	r20, r14
     8ac:	96 01       	movw	r18, r12
     8ae:	0e 94 4b 10 	call	0x2096	; 0x2096 <__udivmodsi4>
		number -= digit * pos;
     8b2:	42 2f       	mov	r20, r18
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	4c 9d       	mul	r20, r12
     8b8:	c0 01       	movw	r24, r0
     8ba:	4d 9d       	mul	r20, r13
     8bc:	90 0d       	add	r25, r0
     8be:	5c 9d       	mul	r21, r12
     8c0:	90 0d       	add	r25, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	c8 1b       	sub	r28, r24
     8c6:	d9 0b       	sbc	r29, r25
		if (print |= digit)
     8c8:	12 2b       	or	r17, r18
     8ca:	19 f0       	breq	.+6      	; 0x8d2 <lcd_writeDec+0x5c>
			lcd_writeChar(digit + '0');
     8cc:	80 e3       	ldi	r24, 0x30	; 48
     8ce:	82 0f       	add	r24, r18
     8d0:	7c df       	rcall	.-264    	; 0x7ca <lcd_writeChar>
	} while (pos /= 10);
     8d2:	c7 01       	movw	r24, r14
     8d4:	b6 01       	movw	r22, r12
     8d6:	2a e0       	ldi	r18, 0x0A	; 10
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e0       	ldi	r20, 0x00	; 0
     8dc:	50 e0       	ldi	r21, 0x00	; 0
     8de:	0e 94 4b 10 	call	0x2096	; 0x2096 <__udivmodsi4>
     8e2:	69 01       	movw	r12, r18
     8e4:	7a 01       	movw	r14, r20
     8e6:	23 2b       	or	r18, r19
     8e8:	24 2b       	or	r18, r20
     8ea:	25 2b       	or	r18, r21

	os_leaveCriticalSection();
     8ec:	d9 f6       	brne	.-74     	; 0x8a4 <lcd_writeDec+0x2e>
     8ee:	b1 d4       	rcall	.+2402   	; 0x1252 <os_leaveCriticalSection>
}
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	1f 91       	pop	r17
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	df 90       	pop	r13
     8fc:	cf 90       	pop	r12
     8fe:	08 95       	ret

00000900 <rq_isEmpty>:
 *  \param queue The queue it will check
 *  \return True if queue is empty, false if it's not empty
 */
bool rq_isEmpty(ready_queue_t *queue)
{
	return queue->head == queue->tail;
     900:	fc 01       	movw	r30, r24
     902:	21 85       	ldd	r18, Z+9	; 0x09
     904:	92 85       	ldd	r25, Z+10	; 0x0a
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	29 13       	cpse	r18, r25
     90a:	80 e0       	ldi	r24, 0x00	; 0
}
     90c:	08 95       	ret

0000090e <rq_pop>:
 *  \param queue The queue it will push to
 *  \param process The process that will be pushed
 *  \return Popped process id
 */
process_id_t rq_pop(ready_queue_t *queue)
{
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	ec 01       	movw	r28, r24
	if (rq_isEmpty(queue))
     914:	f5 df       	rcall	.-22     	; 0x900 <rq_isEmpty>
     916:	88 23       	and	r24, r24
     918:	39 f0       	breq	.+14     	; 0x928 <rq_pop+0x1a>
	{
		os_error("Can't pop from empty ready queue");
     91a:	86 e5       	ldi	r24, 0x56	; 86
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	9f 93       	push	r25
     920:	8f 93       	push	r24
     922:	ec d3       	rcall	.+2008   	; 0x10fc <os_errorPstr>
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
	}
	process_id_t process = queue->processes[queue->head];
     928:	99 85       	ldd	r25, Y+9	; 0x09
     92a:	29 2f       	mov	r18, r25
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	fe 01       	movw	r30, r28
     930:	e2 0f       	add	r30, r18
     932:	f3 1f       	adc	r31, r19
     934:	80 81       	ld	r24, Z
	queue->head = next(queue->head);
     936:	2f 5f       	subi	r18, 0xFF	; 255
     938:	3f 4f       	sbci	r19, 0xFF	; 255
     93a:	29 30       	cpi	r18, 0x09	; 9
     93c:	31 05       	cpc	r19, r1
     93e:	14 f4       	brge	.+4      	; 0x944 <rq_pop+0x36>
     940:	9f 5f       	subi	r25, 0xFF	; 255
     942:	01 c0       	rjmp	.+2      	; 0x946 <rq_pop+0x38>
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	99 87       	std	Y+9, r25	; 0x09
	return process;
}
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	08 95       	ret

0000094e <rq_isFull>:
 *  \param queue The queue it will check
 *  \return True if queue is full, false if it's not completely filled
 */
bool rq_isFull(ready_queue_t *queue)
{
	return next(queue->tail) == queue->head;
     94e:	fc 01       	movw	r30, r24
     950:	22 85       	ldd	r18, Z+10	; 0x0a
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	2f 5f       	subi	r18, 0xFF	; 255
     956:	3f 4f       	sbci	r19, 0xFF	; 255
     958:	29 30       	cpi	r18, 0x09	; 9
     95a:	31 05       	cpc	r19, r1
     95c:	14 f0       	brlt	.+4      	; 0x962 <rq_isFull+0x14>
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	fc 01       	movw	r30, r24
     964:	41 85       	ldd	r20, Z+9	; 0x09
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	24 17       	cp	r18, r20
     96c:	35 07       	cpc	r19, r21
     96e:	09 f0       	breq	.+2      	; 0x972 <rq_isFull+0x24>
     970:	80 e0       	ldi	r24, 0x00	; 0
}
     972:	08 95       	ret

00000974 <rq_push>:
 *
 *  \param queue The queue it will push to
 *  \param process The process that will be pushed
 */
void rq_push(ready_queue_t *queue, process_id_t process)
{
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	ec 01       	movw	r28, r24
     97c:	16 2f       	mov	r17, r22
	if (rq_isFull(queue))
     97e:	e7 df       	rcall	.-50     	; 0x94e <rq_isFull>
     980:	88 23       	and	r24, r24
     982:	39 f0       	breq	.+14     	; 0x992 <rq_push+0x1e>
	{
		os_error("Can't push on full ready queue");
     984:	87 e7       	ldi	r24, 0x77	; 119
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	9f 93       	push	r25
     98a:	8f 93       	push	r24
     98c:	b7 d3       	rcall	.+1902   	; 0x10fc <os_errorPstr>
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
	}
	queue->processes[queue->tail] = process;
     992:	2a 85       	ldd	r18, Y+10	; 0x0a
     994:	82 2f       	mov	r24, r18
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	fe 01       	movw	r30, r28
     99a:	e8 0f       	add	r30, r24
     99c:	f9 1f       	adc	r31, r25
     99e:	10 83       	st	Z, r17
	queue->tail = next(queue->tail);
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	09 97       	sbiw	r24, 0x09	; 9
     9a4:	14 f4       	brge	.+4      	; 0x9aa <rq_push+0x36>
     9a6:	2f 5f       	subi	r18, 0xFF	; 255
     9a8:	01 c0       	rjmp	.+2      	; 0x9ac <rq_push+0x38>
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	2a 87       	std	Y+10, r18	; 0x0a
}
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	08 95       	ret

000009b6 <rq_clear>:
 *
 *  \param queue The queue that should be emptied
 */
void rq_clear(ready_queue_t *queue)
{
	queue->head = 0;
     9b6:	fc 01       	movw	r30, r24
     9b8:	11 86       	std	Z+9, r1	; 0x09
	queue->tail = 0;
     9ba:	12 86       	std	Z+10, r1	; 0x0a
     9bc:	08 95       	ret

000009be <rq_remove>:
 *  \param queue The queue that should be removed from
 *  \param process The process that should be removed
 *  \return True if the process was removed, false if it wasn't found
 */
bool rq_remove(ready_queue_t *queue, process_id_t process)
{
     9be:	fc 01       	movw	r30, r24
	for (int i = queue->head; i != queue->tail; i = next(i))
     9c0:	21 85       	ldd	r18, Z+9	; 0x09
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	32 c0       	rjmp	.+100    	; 0xa2a <rq_remove+0x6c>
	{
		if (queue->processes[i] == process)
     9c6:	df 01       	movw	r26, r30
     9c8:	a2 0f       	add	r26, r18
     9ca:	b3 1f       	adc	r27, r19
     9cc:	5c 91       	ld	r21, X
     9ce:	56 13       	cpse	r21, r22
     9d0:	24 c0       	rjmp	.+72     	; 0xa1a <rq_remove+0x5c>
     9d2:	18 c0       	rjmp	.+48     	; 0xa04 <rq_remove+0x46>
		{
			for (int j = i; j != queue->tail; j = next(j))
			{
				queue->processes[j] = queue->processes[next(j)];
     9d4:	b9 01       	movw	r22, r18
     9d6:	6f 5f       	subi	r22, 0xFF	; 255
     9d8:	7f 4f       	sbci	r23, 0xFF	; 255
     9da:	69 30       	cpi	r22, 0x09	; 9
     9dc:	71 05       	cpc	r23, r1
     9de:	1c f0       	brlt	.+6      	; 0x9e6 <rq_remove+0x28>
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <rq_remove+0x2a>
     9e6:	db 01       	movw	r26, r22
     9e8:	ae 0f       	add	r26, r30
     9ea:	bf 1f       	adc	r27, r31
     9ec:	5c 91       	ld	r21, X
     9ee:	df 01       	movw	r26, r30
     9f0:	a2 0f       	add	r26, r18
     9f2:	b3 1f       	adc	r27, r19
     9f4:	5c 93       	st	X, r21
{
	for (int i = queue->head; i != queue->tail; i = next(i))
	{
		if (queue->processes[i] == process)
		{
			for (int j = i; j != queue->tail; j = next(j))
     9f6:	69 30       	cpi	r22, 0x09	; 9
     9f8:	71 05       	cpc	r23, r1
     9fa:	1c f0       	brlt	.+6      	; 0xa02 <rq_remove+0x44>
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	01 c0       	rjmp	.+2      	; 0xa04 <rq_remove+0x46>
     a02:	9b 01       	movw	r18, r22
     a04:	28 17       	cp	r18, r24
     a06:	39 07       	cpc	r19, r25
     a08:	29 f7       	brne	.-54     	; 0x9d4 <rq_remove+0x16>
			{
				queue->processes[j] = queue->processes[next(j)];
			}
			queue->tail = prev(queue->tail);
     a0a:	44 23       	and	r20, r20
     a0c:	11 f0       	breq	.+4      	; 0xa12 <rq_remove+0x54>
     a0e:	41 50       	subi	r20, 0x01	; 1
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <rq_remove+0x56>
     a12:	48 e0       	ldi	r20, 0x08	; 8
     a14:	42 87       	std	Z+10, r20	; 0x0a
			return true;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	08 95       	ret
 *  \param process The process that should be removed
 *  \return True if the process was removed, false if it wasn't found
 */
bool rq_remove(ready_queue_t *queue, process_id_t process)
{
	for (int i = queue->head; i != queue->tail; i = next(i))
     a1a:	c9 01       	movw	r24, r18
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	89 30       	cpi	r24, 0x09	; 9
     a24:	91 05       	cpc	r25, r1
     a26:	0c f4       	brge	.+2      	; 0xa2a <rq_remove+0x6c>
     a28:	9c 01       	movw	r18, r24
     a2a:	42 85       	ldd	r20, Z+10	; 0x0a
     a2c:	84 2f       	mov	r24, r20
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	28 17       	cp	r18, r24
     a32:	39 07       	cpc	r19, r25
     a34:	41 f6       	brne	.-112    	; 0x9c6 <rq_remove+0x8>
			}
			queue->tail = prev(queue->tail);
			return true;
		}
	}
	return false;
     a36:	80 e0       	ldi	r24, 0x00	; 0
}
     a38:	08 95       	ret

00000a3a <__vector_17>:
 */
void stopWatch_activateInterrupt(void)
{
    cbi(TCCR1B, CS10); // /8 prescaler	0
    sbi(TCCR1B, CS11); // /8 prescaler	1
    cbi(TCCR1B, CS12); // /8 prescaler	0
     a3a:	1f 92       	push	r1
     a3c:	0f 92       	push	r0
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	0f 92       	push	r0
     a42:	11 24       	eor	r1, r1
     a44:	8f 93       	push	r24
     a46:	9f 93       	push	r25
     a48:	af 93       	push	r26
     a4a:	bf 93       	push	r27
     a4c:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
     a50:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <__data_end+0x1>
     a54:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <__data_end+0x2>
     a58:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <__data_end+0x3>
     a5c:	90 58       	subi	r25, 0x80	; 128
     a5e:	af 4f       	sbci	r26, 0xFF	; 255
     a60:	bf 4f       	sbci	r27, 0xFF	; 255
     a62:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
     a66:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <__data_end+0x1>
     a6a:	a0 93 24 02 	sts	0x0224, r26	; 0x800224 <__data_end+0x2>
     a6e:	b0 93 25 02 	sts	0x0225, r27	; 0x800225 <__data_end+0x3>
     a72:	bf 91       	pop	r27
     a74:	af 91       	pop	r26
     a76:	9f 91       	pop	r25
     a78:	8f 91       	pop	r24
     a7a:	0f 90       	pop	r0
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	0f 90       	pop	r0
     a80:	1f 90       	pop	r1
     a82:	18 95       	reti

00000a84 <stopWatch_deactivateInterrupt>:
     a84:	e1 e8       	ldi	r30, 0x81	; 129
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	80 81       	ld	r24, Z
     a8a:	8e 7f       	andi	r24, 0xFE	; 254
     a8c:	80 83       	st	Z, r24
     a8e:	80 81       	ld	r24, Z
     a90:	8d 7f       	andi	r24, 0xFD	; 253
     a92:	80 83       	st	Z, r24
     a94:	80 81       	ld	r24, Z
     a96:	8b 7f       	andi	r24, 0xFB	; 251
     a98:	80 83       	st	Z, r24
     a9a:	08 95       	ret

00000a9c <stopWatch_init>:
 *  Initializes the stop watch
 */
void stopWatch_init(void)
{
    // Set Timer/Counter Control Registers to 0
    TCCR1A = 0x00; // Normal mode
     a9c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>

    // Set the Timer/Counter Register to 0
    TCNT1 = 0;
     aa0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     aa4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

    // Set the compare match value to 1 (1 microsecond)
    OCR1A = 1;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     ab0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>

    // Enable the Output Compare Match A interrupt
    TIMSK1 |= (1 << TOIE1);
     ab4:	ef e6       	ldi	r30, 0x6F	; 111
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	80 81       	ld	r24, Z
     aba:	81 60       	ori	r24, 0x01	; 1
     abc:	80 83       	st	Z, r24

    stopWatch_deactivateInterrupt();
     abe:	e2 cf       	rjmp	.-60     	; 0xa84 <stopWatch_deactivateInterrupt>
     ac0:	08 95       	ret

00000ac2 <usb2_init>:
 *
 *  \param str  The string to be written (a pointer to the first character).
 */
void terminal_writeString(char *str)
{
    usb2_writeString(str);
     ac2:	a8 d3       	rcall	.+1872   	; 0x1214 <os_enterCriticalSection>
     ac4:	83 e0       	ldi	r24, 0x03	; 3
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
     acc:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
     ad0:	e0 ed       	ldi	r30, 0xD0	; 208
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	80 81       	ld	r24, Z
     ad6:	8d 7f       	andi	r24, 0xFD	; 253
     ad8:	80 83       	st	Z, r24
     ada:	e1 ed       	ldi	r30, 0xD1	; 209
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	80 61       	ori	r24, 0x10	; 16
     ae2:	80 83       	st	Z, r24
     ae4:	80 81       	ld	r24, Z
     ae6:	88 60       	ori	r24, 0x08	; 8
     ae8:	80 83       	st	Z, r24
     aea:	b3 c3       	rjmp	.+1894   	; 0x1252 <os_leaveCriticalSection>
     aec:	08 95       	ret

00000aee <usb2_write>:
     aee:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
     af2:	95 ff       	sbrs	r25, 5
     af4:	fc cf       	rjmp	.-8      	; 0xaee <usb2_write>
     af6:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
     afa:	08 95       	ret

00000afc <usb2_writeProgString>:
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	8c 01       	movw	r16, r24
     b06:	86 d3       	rcall	.+1804   	; 0x1214 <os_enterCriticalSection>
     b08:	d0 e0       	ldi	r29, 0x00	; 0
     b0a:	0d c0       	rjmp	.+26     	; 0xb26 <usb2_writeProgString+0x2a>
     b0c:	f8 01       	movw	r30, r16
     b0e:	ed 0f       	add	r30, r29
     b10:	f1 1d       	adc	r31, r1
     b12:	c4 91       	lpm	r28, Z
     b14:	ca 30       	cpi	r28, 0x0A	; 10
     b16:	11 f4       	brne	.+4      	; 0xb1c <usb2_writeProgString+0x20>
     b18:	8d e0       	ldi	r24, 0x0D	; 13
     b1a:	e9 df       	rcall	.-46     	; 0xaee <usb2_write>
     b1c:	cc 23       	and	r28, r28
     b1e:	29 f0       	breq	.+10     	; 0xb2a <usb2_writeProgString+0x2e>
     b20:	8c 2f       	mov	r24, r28
     b22:	e5 df       	rcall	.-54     	; 0xaee <usb2_write>
     b24:	df 5f       	subi	r29, 0xFF	; 255
     b26:	df 3f       	cpi	r29, 0xFF	; 255
     b28:	89 f7       	brne	.-30     	; 0xb0c <usb2_writeProgString+0x10>
     b2a:	93 d3       	rcall	.+1830   	; 0x1252 <os_leaveCriticalSection>
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	08 95       	ret

00000b36 <terminal_init>:
     b36:	c5 df       	rcall	.-118    	; 0xac2 <usb2_init>
     b38:	8e e0       	ldi	r24, 0x0E	; 14
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <__iob+0x3>
     b40:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <__iob+0x2>
     b44:	08 95       	ret

00000b46 <terminal_writeChar>:
     b46:	cf 93       	push	r28
     b48:	c8 2f       	mov	r28, r24
     b4a:	8a 30       	cpi	r24, 0x0A	; 10
     b4c:	11 f4       	brne	.+4      	; 0xb52 <terminal_writeChar+0xc>
     b4e:	8d e0       	ldi	r24, 0x0D	; 13
     b50:	ce df       	rcall	.-100    	; 0xaee <usb2_write>
     b52:	8c 2f       	mov	r24, r28
     b54:	cc df       	rcall	.-104    	; 0xaee <usb2_write>
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret

00000b5a <terminal_writeProgString>:
 *
 *  \param pstr  The string to be written (a pointer to the first character).
 */
void terminal_writeProgString(const char *pstr)
{
	usb2_writeProgString(pstr);
     b5a:	d0 cf       	rjmp	.-96     	; 0xafc <usb2_writeProgString>
     b5c:	08 95       	ret

00000b5e <stdio_put_char>:

//----------------------------------------------------------------------------
// Configuration of stdio.h
//----------------------------------------------------------------------------
int stdio_put_char(char c, FILE *stream)
{
     b5e:	cf 93       	push	r28
     b60:	c8 2f       	mov	r28, r24
    os_enterCriticalSection();
     b62:	58 d3       	rcall	.+1712   	; 0x1214 <os_enterCriticalSection>

    terminal_writeChar(c);
     b64:	8c 2f       	mov	r24, r28
     b66:	ef df       	rcall	.-34     	; 0xb46 <terminal_writeChar>
    if (c == '\n') { terminal_writeProgString(PSTR("        ")); }
     b68:	ca 30       	cpi	r28, 0x0A	; 10
     b6a:	19 f4       	brne	.+6      	; 0xb72 <stdio_put_char+0x14>
     b6c:	86 e9       	ldi	r24, 0x96	; 150
     b6e:	91 e0       	ldi	r25, 0x01	; 1

    os_leaveCriticalSection();
     b70:	f4 df       	rcall	.-24     	; 0xb5a <terminal_writeProgString>
     b72:	6f d3       	rcall	.+1758   	; 0x1252 <os_leaveCriticalSection>
    return 0;
}
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	cf 91       	pop	r28
     b7a:	08 95       	ret

00000b7c <terminal_newLine>:
/*!
 *  Write a new line
 */
void terminal_newLine()
{
    terminal_writeChar('\n');
     b7c:	8a e0       	ldi	r24, 0x0A	; 10
     b7e:	e3 cf       	rjmp	.-58     	; 0xb46 <terminal_writeChar>
     b80:	08 95       	ret

00000b82 <terminal_log_printf_p>:
    os_leaveCriticalSection();
    return 0;
}

void terminal_log_printf_p(const char *prefix, const char *fmt, ...)
{
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
    os_enterCriticalSection();
     b8e:	42 d3       	rcall	.+1668   	; 0x1214 <os_enterCriticalSection>

    terminal_writeProgString(prefix);
     b90:	88 85       	ldd	r24, Y+8	; 0x08
     b92:	99 85       	ldd	r25, Y+9	; 0x09
     b94:	e2 df       	rcall	.-60     	; 0xb5a <terminal_writeProgString>

    va_list args;
    va_start(args, fmt);
    stdout->flags |= __SPGM;
     b96:	06 e1       	ldi	r16, 0x16	; 22
     b98:	14 e0       	ldi	r17, 0x04	; 4
     b9a:	d8 01       	movw	r26, r16
     b9c:	12 96       	adiw	r26, 0x02	; 2
     b9e:	ed 91       	ld	r30, X+
     ba0:	fc 91       	ld	r31, X
     ba2:	13 97       	sbiw	r26, 0x03	; 3
     ba4:	83 81       	ldd	r24, Z+3	; 0x03
     ba6:	88 60       	ori	r24, 0x08	; 8
     ba8:	83 83       	std	Z+3, r24	; 0x03
    vfprintf_P(stdout, fmt, args);
     baa:	ae 01       	movw	r20, r28
     bac:	44 5f       	subi	r20, 0xF4	; 244
     bae:	5f 4f       	sbci	r21, 0xFF	; 255
     bb0:	6a 85       	ldd	r22, Y+10	; 0x0a
     bb2:	7b 85       	ldd	r23, Y+11	; 0x0b
     bb4:	12 96       	adiw	r26, 0x02	; 2
     bb6:	8d 91       	ld	r24, X+
     bb8:	9c 91       	ld	r25, X
     bba:	13 97       	sbiw	r26, 0x03	; 3
     bbc:	0e 94 97 10 	call	0x212e	; 0x212e <vfprintf_P>
    stdout->flags &= ~__SPGM;
     bc0:	d8 01       	movw	r26, r16
     bc2:	12 96       	adiw	r26, 0x02	; 2
     bc4:	ed 91       	ld	r30, X+
     bc6:	fc 91       	ld	r31, X
     bc8:	13 97       	sbiw	r26, 0x03	; 3
     bca:	83 81       	ldd	r24, Z+3	; 0x03
     bcc:	87 7f       	andi	r24, 0xF7	; 247
    va_end(args);

    terminal_newLine();
     bce:	83 83       	std	Z+3, r24	; 0x03
     bd0:	d5 df       	rcall	.-86     	; 0xb7c <terminal_newLine>

    os_leaveCriticalSection();
     bd2:	3f d3       	rcall	.+1662   	; 0x1252 <os_leaveCriticalSection>
     bd4:	df 91       	pop	r29
}
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	08 95       	ret

00000bde <__vector_25>:
     bde:	1f 92       	push	r1
 * Disables the RX/TX ports to not provide the connected device with energy
 */
void uart2_disable()
{
	cbi(UART2_CONTROL, UART2_BIT_RXEN);
	cbi(UART2_CONTROL, UART2_BIT_TXEN);
     be0:	0f 92       	push	r0
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	0f 92       	push	r0
     be6:	11 24       	eor	r1, r1
     be8:	0b b6       	in	r0, 0x3b	; 59
     bea:	0f 92       	push	r0
     bec:	2f 93       	push	r18
     bee:	8f 93       	push	r24
     bf0:	9f 93       	push	r25
     bf2:	ef 93       	push	r30
     bf4:	ff 93       	push	r31
     bf6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     bfa:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     bfe:	8c 71       	andi	r24, 0x1C	; 28
     c00:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <UART0_RxHead>
     c04:	ef 5f       	subi	r30, 0xFF	; 255
     c06:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <UART0_RxTail>
     c0a:	e9 17       	cp	r30, r25
     c0c:	39 f0       	breq	.+14     	; 0xc1c <__vector_25+0x3e>
     c0e:	e0 93 77 03 	sts	0x0377, r30	; 0x800377 <UART0_RxHead>
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	e6 58       	subi	r30, 0x86	; 134
     c16:	fc 4f       	sbci	r31, 0xFC	; 252
     c18:	20 83       	st	Z, r18
     c1a:	01 c0       	rjmp	.+2      	; 0xc1e <__vector_25+0x40>
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <UART0_LastRxError>
     c22:	89 2b       	or	r24, r25
     c24:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <UART0_LastRxError>
     c28:	ff 91       	pop	r31
     c2a:	ef 91       	pop	r30
     c2c:	9f 91       	pop	r25
     c2e:	8f 91       	pop	r24
     c30:	2f 91       	pop	r18
     c32:	0f 90       	pop	r0
     c34:	0b be       	out	0x3b, r0	; 59
     c36:	0f 90       	pop	r0
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	0f 90       	pop	r0
     c3c:	1f 90       	pop	r1
     c3e:	18 95       	reti

00000c40 <__vector_26>:
     c40:	1f 92       	push	r1
     c42:	0f 92       	push	r0
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	0f 92       	push	r0
     c48:	11 24       	eor	r1, r1
     c4a:	0b b6       	in	r0, 0x3b	; 59
     c4c:	0f 92       	push	r0
     c4e:	8f 93       	push	r24
     c50:	9f 93       	push	r25
     c52:	ef 93       	push	r30
     c54:	ff 93       	push	r31
     c56:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <UART0_TxHead>
     c5a:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <UART0_TxTail>
     c5e:	98 17       	cp	r25, r24
     c60:	61 f0       	breq	.+24     	; 0xc7a <__vector_26+0x3a>
     c62:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <UART0_TxTail>
     c66:	ef 5f       	subi	r30, 0xFF	; 255
     c68:	e0 93 78 03 	sts	0x0378, r30	; 0x800378 <UART0_TxTail>
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	e6 58       	subi	r30, 0x86	; 134
     c70:	fc 4f       	sbci	r31, 0xFC	; 252
     c72:	80 81       	ld	r24, Z
     c74:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     c78:	05 c0       	rjmp	.+10     	; 0xc84 <__vector_26+0x44>
     c7a:	e1 ec       	ldi	r30, 0xC1	; 193
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	8f 7d       	andi	r24, 0xDF	; 223
     c82:	80 83       	st	Z, r24
     c84:	ff 91       	pop	r31
     c86:	ef 91       	pop	r30
     c88:	9f 91       	pop	r25
     c8a:	8f 91       	pop	r24
     c8c:	0f 90       	pop	r0
     c8e:	0b be       	out	0x3b, r0	; 59
     c90:	0f 90       	pop	r0
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	0f 90       	pop	r0
     c96:	1f 90       	pop	r1
     c98:	18 95       	reti

00000c9a <__vector_36>:
     c9a:	1f 92       	push	r1
     c9c:	0f 92       	push	r0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	0f 92       	push	r0
     ca2:	11 24       	eor	r1, r1
     ca4:	0b b6       	in	r0, 0x3b	; 59
     ca6:	0f 92       	push	r0
     ca8:	2f 93       	push	r18
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
     cb2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     cb6:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     cba:	8c 71       	andi	r24, 0x1C	; 28
     cbc:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <UART1_RxHead>
     cc0:	ef 5f       	subi	r30, 0xFF	; 255
     cc2:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <UART1_RxTail>
     cc6:	e9 17       	cp	r30, r25
     cc8:	39 f0       	breq	.+14     	; 0xcd8 <__vector_36+0x3e>
     cca:	e0 93 32 02 	sts	0x0232, r30	; 0x800232 <UART1_RxHead>
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	eb 5c       	subi	r30, 0xCB	; 203
     cd2:	fd 4f       	sbci	r31, 0xFD	; 253
     cd4:	20 83       	st	Z, r18
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <__vector_36+0x40>
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <UART1_LastRxError>
     cde:	89 2b       	or	r24, r25
     ce0:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <UART1_LastRxError>
     ce4:	ff 91       	pop	r31
     ce6:	ef 91       	pop	r30
     ce8:	9f 91       	pop	r25
     cea:	8f 91       	pop	r24
     cec:	2f 91       	pop	r18
     cee:	0f 90       	pop	r0
     cf0:	0b be       	out	0x3b, r0	; 59
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	0f 90       	pop	r0
     cf8:	1f 90       	pop	r1
     cfa:	18 95       	reti

00000cfc <__vector_37>:
     cfc:	1f 92       	push	r1
     cfe:	0f 92       	push	r0
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	0f 92       	push	r0
     d04:	11 24       	eor	r1, r1
     d06:	0b b6       	in	r0, 0x3b	; 59
     d08:	0f 92       	push	r0
     d0a:	8f 93       	push	r24
     d0c:	9f 93       	push	r25
     d0e:	ef 93       	push	r30
     d10:	ff 93       	push	r31
     d12:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <UART1_TxHead>
     d16:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <UART1_TxTail>
     d1a:	98 17       	cp	r25, r24
     d1c:	69 f0       	breq	.+26     	; 0xd38 <__vector_37+0x3c>
     d1e:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <UART1_TxTail>
     d22:	ef 5f       	subi	r30, 0xFF	; 255
     d24:	ef 73       	andi	r30, 0x3F	; 63
     d26:	e0 93 33 02 	sts	0x0233, r30	; 0x800233 <UART1_TxTail>
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	eb 5c       	subi	r30, 0xCB	; 203
     d2e:	fc 4f       	sbci	r31, 0xFC	; 252
     d30:	80 81       	ld	r24, Z
     d32:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     d36:	05 c0       	rjmp	.+10     	; 0xd42 <__vector_37+0x46>
     d38:	e9 ec       	ldi	r30, 0xC9	; 201
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8f 7d       	andi	r24, 0xDF	; 223
     d40:	80 83       	st	Z, r24
     d42:	ff 91       	pop	r31
     d44:	ef 91       	pop	r30
     d46:	9f 91       	pop	r25
     d48:	8f 91       	pop	r24
     d4a:	0f 90       	pop	r0
     d4c:	0b be       	out	0x3b, r0	; 59
     d4e:	0f 90       	pop	r0
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	0f 90       	pop	r0
     d54:	1f 90       	pop	r1
     d56:	18 95       	reti

00000d58 <__vector_51>:
     d58:	1f 92       	push	r1
     d5a:	0f 92       	push	r0
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	0f 92       	push	r0
     d60:	11 24       	eor	r1, r1
     d62:	0b b6       	in	r0, 0x3b	; 59
     d64:	0f 92       	push	r0
     d66:	2f 93       	push	r18
     d68:	8f 93       	push	r24
     d6a:	9f 93       	push	r25
     d6c:	ef 93       	push	r30
     d6e:	ff 93       	push	r31
     d70:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
     d74:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
     d78:	8c 71       	andi	r24, 0x1C	; 28
     d7a:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <UART2_RxHead>
     d7e:	ef 5f       	subi	r30, 0xFF	; 255
     d80:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <UART2_RxTail>
     d84:	e9 17       	cp	r30, r25
     d86:	39 f0       	breq	.+14     	; 0xd96 <__vector_51+0x3e>
     d88:	e0 93 2d 02 	sts	0x022D, r30	; 0x80022d <UART2_RxHead>
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	e0 5d       	subi	r30, 0xD0	; 208
     d90:	fd 4f       	sbci	r31, 0xFD	; 253
     d92:	20 83       	st	Z, r18
     d94:	01 c0       	rjmp	.+2      	; 0xd98 <__vector_51+0x40>
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <UART2_LastRxError>
     d9c:	89 2b       	or	r24, r25
     d9e:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <UART2_LastRxError>
     da2:	ff 91       	pop	r31
     da4:	ef 91       	pop	r30
     da6:	9f 91       	pop	r25
     da8:	8f 91       	pop	r24
     daa:	2f 91       	pop	r18
     dac:	0f 90       	pop	r0
     dae:	0b be       	out	0x3b, r0	; 59
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <__vector_52>:
     dba:	1f 92       	push	r1
     dbc:	0f 92       	push	r0
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	0f 92       	push	r0
     dc2:	11 24       	eor	r1, r1
     dc4:	0b b6       	in	r0, 0x3b	; 59
     dc6:	0f 92       	push	r0
     dc8:	8f 93       	push	r24
     dca:	9f 93       	push	r25
     dcc:	ef 93       	push	r30
     dce:	ff 93       	push	r31
     dd0:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <UART2_TxHead>
     dd4:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <UART2_TxTail>
     dd8:	98 17       	cp	r25, r24
     dda:	61 f0       	breq	.+24     	; 0xdf4 <__vector_52+0x3a>
     ddc:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <UART2_TxTail>
     de0:	ef 5f       	subi	r30, 0xFF	; 255
     de2:	e0 93 2e 02 	sts	0x022E, r30	; 0x80022e <UART2_TxTail>
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	e0 5d       	subi	r30, 0xD0	; 208
     dea:	fd 4f       	sbci	r31, 0xFD	; 253
     dec:	80 81       	ld	r24, Z
     dee:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
     df2:	05 c0       	rjmp	.+10     	; 0xdfe <__vector_52+0x44>
     df4:	e1 ed       	ldi	r30, 0xD1	; 209
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8f 7d       	andi	r24, 0xDF	; 223
     dfc:	80 83       	st	Z, r24
     dfe:	ff 91       	pop	r31
     e00:	ef 91       	pop	r30
     e02:	9f 91       	pop	r25
     e04:	8f 91       	pop	r24
     e06:	0f 90       	pop	r0
     e08:	0b be       	out	0x3b, r0	; 59
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0
     e10:	1f 90       	pop	r1
     e12:	18 95       	reti

00000e14 <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
     e14:	1f 92       	push	r1
     e16:	0f 92       	push	r0
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	0f 92       	push	r0
     e1c:	11 24       	eor	r1, r1
     e1e:	0b b6       	in	r0, 0x3b	; 59
     e20:	0f 92       	push	r0
     e22:	2f 93       	push	r18
     e24:	8f 93       	push	r24
     e26:	9f 93       	push	r25
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART3_STATUS;
     e2c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
    data = UART3_DATA;
     e30:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
     e34:	8c 71       	andi	r24, 0x1C	; 28
            
    /* calculate buffer index */ 
    tmphead = ( UART3_RxHead + 1) & UART3_RX_BUFFER_MASK;
     e36:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <UART3_RxHead>
     e3a:	ef 5f       	subi	r30, 0xFF	; 255
    
    if ( tmphead == UART3_RxTail ) {
     e3c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <UART3_RxTail>
     e40:	e9 17       	cp	r30, r25
     e42:	39 f0       	breq	.+14     	; 0xe52 <__vector_54+0x3e>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART3_RxHead = tmphead;
     e44:	e0 93 28 02 	sts	0x0228, r30	; 0x800228 <UART3_RxHead>
        /* store received data in buffer */
        UART3_RxBuf[tmphead] = data;
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	e5 5d       	subi	r30, 0xD5	; 213
     e4c:	fd 4f       	sbci	r31, 0xFD	; 253
     e4e:	20 83       	st	Z, r18
     e50:	01 c0       	rjmp	.+2      	; 0xe54 <__vector_54+0x40>
    /* calculate buffer index */ 
    tmphead = ( UART3_RxHead + 1) & UART3_RX_BUFFER_MASK;
    
    if ( tmphead == UART3_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     e52:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART3_RxHead = tmphead;
        /* store received data in buffer */
        UART3_RxBuf[tmphead] = data;
    }
    UART3_LastRxError |= lastRxError;   
     e54:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <UART3_LastRxError>
     e58:	89 2b       	or	r24, r25
     e5a:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <UART3_LastRxError>
}
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	9f 91       	pop	r25
     e64:	8f 91       	pop	r24
     e66:	2f 91       	pop	r18
     e68:	0f 90       	pop	r0
     e6a:	0b be       	out	0x3b, r0	; 59
     e6c:	0f 90       	pop	r0
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	0f 90       	pop	r0
     e72:	1f 90       	pop	r1
     e74:	18 95       	reti

00000e76 <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
     e76:	1f 92       	push	r1
     e78:	0f 92       	push	r0
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	0f 92       	push	r0
     e7e:	11 24       	eor	r1, r1
     e80:	0b b6       	in	r0, 0x3b	; 59
     e82:	0f 92       	push	r0
     e84:	8f 93       	push	r24
     e86:	9f 93       	push	r25
     e88:	ef 93       	push	r30
     e8a:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART3_TxHead != UART3_TxTail) {
     e8c:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <UART3_TxHead>
     e90:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <UART3_TxTail>
     e94:	98 17       	cp	r25, r24
     e96:	61 f0       	breq	.+24     	; 0xeb0 <__vector_55+0x3a>
        /* calculate and store new buffer index */
        tmptail = (UART3_TxTail + 1) & UART3_TX_BUFFER_MASK;
     e98:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <UART3_TxTail>
     e9c:	ef 5f       	subi	r30, 0xFF	; 255
        UART3_TxTail = tmptail;
     e9e:	e0 93 29 02 	sts	0x0229, r30	; 0x800229 <UART3_TxTail>
        /* get one byte from buffer and write it to UART */
        UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	e5 5d       	subi	r30, 0xD5	; 213
     ea6:	fd 4f       	sbci	r31, 0xFD	; 253
     ea8:	80 81       	ld	r24, Z
     eaa:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
     eae:	05 c0       	rjmp	.+10     	; 0xeba <__vector_55+0x44>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART3_CONTROL &= ~_BV(UART3_UDRIE);
     eb0:	e1 e3       	ldi	r30, 0x31	; 49
     eb2:	f1 e0       	ldi	r31, 0x01	; 1
     eb4:	80 81       	ld	r24, Z
     eb6:	8f 7d       	andi	r24, 0xDF	; 223
     eb8:	80 83       	st	Z, r24
    }
}
     eba:	ff 91       	pop	r31
     ebc:	ef 91       	pop	r30
     ebe:	9f 91       	pop	r25
     ec0:	8f 91       	pop	r24
     ec2:	0f 90       	pop	r0
     ec4:	0b be       	out	0x3b, r0	; 59
     ec6:	0f 90       	pop	r0
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	0f 90       	pop	r0
     ecc:	1f 90       	pop	r1
     ece:	18 95       	reti

00000ed0 <__vector_21>:

/*!
 *  ISR that counts the number of occurred Timer 0 compare matches for the getSystemTime function mainly used in delayMs.
 */
ISR(TIMER0_COMPA_vect)
{
     ed0:	1f 92       	push	r1
     ed2:	0f 92       	push	r0
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	0f 92       	push	r0
     ed8:	11 24       	eor	r1, r1
     eda:	8f 93       	push	r24
     edc:	9f 93       	push	r25
     ede:	af 93       	push	r26
     ee0:	bf 93       	push	r27
	++os_coarseSystemTime;
     ee2:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <os_coarseSystemTime>
     ee6:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <os_coarseSystemTime+0x1>
     eea:	a0 91 81 03 	lds	r26, 0x0381	; 0x800381 <os_coarseSystemTime+0x2>
     eee:	b0 91 82 03 	lds	r27, 0x0382	; 0x800382 <os_coarseSystemTime+0x3>
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	a1 1d       	adc	r26, r1
     ef6:	b1 1d       	adc	r27, r1
     ef8:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <os_coarseSystemTime>
     efc:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <os_coarseSystemTime+0x1>
     f00:	a0 93 81 03 	sts	0x0381, r26	; 0x800381 <os_coarseSystemTime+0x2>
     f04:	b0 93 82 03 	sts	0x0382, r27	; 0x800382 <os_coarseSystemTime+0x3>
}
     f08:	bf 91       	pop	r27
     f0a:	af 91       	pop	r26
     f0c:	9f 91       	pop	r25
     f0e:	8f 91       	pop	r24
     f10:	0f 90       	pop	r0
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	0f 90       	pop	r0
     f16:	1f 90       	pop	r1
     f18:	18 95       	reti

00000f1a <initSystemTime>:
/*!
 *  Initializes Timer 0 as system clock
 */
void initSystemTime(void)
{
	os_coarseSystemTime = 0;
     f1a:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <os_coarseSystemTime>
     f1e:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <os_coarseSystemTime+0x1>
     f22:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <os_coarseSystemTime+0x2>
     f26:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <os_coarseSystemTime+0x3>

	// Init timer 0 with prescaler 64
	sbi(TCCR0B, CS00);
     f2a:	85 b5       	in	r24, 0x25	; 37
     f2c:	81 60       	ori	r24, 0x01	; 1
     f2e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS01);
     f30:	85 b5       	in	r24, 0x25	; 37
     f32:	82 60       	ori	r24, 0x02	; 2
     f34:	85 bd       	out	0x25, r24	; 37
	cbi(TCCR0B, CS02);
     f36:	85 b5       	in	r24, 0x25	; 37
     f38:	8b 7f       	andi	r24, 0xFB	; 251
     f3a:	85 bd       	out	0x25, r24	; 37

	// CTC mode
	sbi(TCCR0A, WGM01);
     f3c:	84 b5       	in	r24, 0x24	; 36
     f3e:	82 60       	ori	r24, 0x02	; 2
     f40:	84 bd       	out	0x24, r24	; 36

	// Compare Match after 61 timer ticks = 1ms
	OCR0A = TIMER_OCR;
     f42:	89 ef       	ldi	r24, 0xF9	; 249
     f44:	87 bd       	out	0x27, r24	; 39
	sbi(TIMSK0, OCIE0A);
     f46:	ee e6       	ldi	r30, 0x6E	; 110
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	82 60       	ori	r24, 0x02	; 2
     f4e:	80 83       	st	Z, r24
     f50:	08 95       	ret

00000f52 <getSystemTime_ms>:
 */
time_t getSystemTime_ms(void)
{
	// In case interrupts are off we check the OCF manually, clear it and
	// increment os_coarseSystemTime to avoid freezing the system time
	if (!gbi(SREG, 7) && gbi(TIFR0, OCF0A))
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	07 fc       	sbrc	r0, 7
     f56:	18 c0       	rjmp	.+48     	; 0xf88 <getSystemTime_ms+0x36>
     f58:	a9 9b       	sbis	0x15, 1	; 21
     f5a:	16 c0       	rjmp	.+44     	; 0xf88 <getSystemTime_ms+0x36>
	{
		sbi(TIFR0, OCF0A);
     f5c:	85 b3       	in	r24, 0x15	; 21
     f5e:	82 60       	ori	r24, 0x02	; 2
     f60:	85 bb       	out	0x15, r24	; 21
		++os_coarseSystemTime;
     f62:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <os_coarseSystemTime>
     f66:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <os_coarseSystemTime+0x1>
     f6a:	a0 91 81 03 	lds	r26, 0x0381	; 0x800381 <os_coarseSystemTime+0x2>
     f6e:	b0 91 82 03 	lds	r27, 0x0382	; 0x800382 <os_coarseSystemTime+0x3>
     f72:	01 96       	adiw	r24, 0x01	; 1
     f74:	a1 1d       	adc	r26, r1
     f76:	b1 1d       	adc	r27, r1
     f78:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <os_coarseSystemTime>
     f7c:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <os_coarseSystemTime+0x1>
     f80:	a0 93 81 03 	sts	0x0381, r26	; 0x800381 <os_coarseSystemTime+0x2>
     f84:	b0 93 82 03 	sts	0x0382, r27	; 0x800382 <os_coarseSystemTime+0x3>
	}

	// Synchronize access to os_coarseSystemTime
	uint8_t ie = gbi(SREG, 7);
     f88:	8f b7       	in	r24, 0x3f	; 63
     f8a:	28 2f       	mov	r18, r24
     f8c:	22 1f       	adc	r18, r18
     f8e:	22 27       	eor	r18, r18
     f90:	22 1f       	adc	r18, r18
	cli();
     f92:	f8 94       	cli
	time_t t = os_coarseSystemTime;
     f94:	60 91 7f 03 	lds	r22, 0x037F	; 0x80037f <os_coarseSystemTime>
     f98:	70 91 80 03 	lds	r23, 0x0380	; 0x800380 <os_coarseSystemTime+0x1>
     f9c:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <os_coarseSystemTime+0x2>
     fa0:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <os_coarseSystemTime+0x3>
	if (ie)
     fa4:	22 23       	and	r18, r18
     fa6:	09 f0       	breq	.+2      	; 0xfaa <getSystemTime_ms+0x58>
	{
		sei();
     fa8:	78 94       	sei
	}

	return t;
}
     faa:	08 95       	ret

00000fac <delayMs>:
 *  in order to get the destination time. Then, we wait until a temporary variable reaches this value.
 *
 *  \param ms  The time to be waited in milliseconds (max. 65535)
 */
void delayMs(uint16_t ms)
{
     fac:	cf 92       	push	r12
     fae:	df 92       	push	r13
     fb0:	ef 92       	push	r14
     fb2:	ff 92       	push	r15
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
#ifdef RUNNING_WITH_SIMULATOR
	return;
#endif

	if (ms == 0)
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	d1 f0       	breq	.+52     	; 0xff4 <delayMs+0x48>
     fc0:	ec 01       	movw	r28, r24
	{
		return;
	}
	time_t startTime = getSystemTime_ms();
     fc2:	c7 df       	rcall	.-114    	; 0xf52 <getSystemTime_ms>
     fc4:	6b 01       	movw	r12, r22
     fc6:	7c 01       	movw	r14, r24

	while (getSystemTime_ms() - startTime < ms)
     fc8:	06 c0       	rjmp	.+12     	; 0xfd6 <delayMs+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fca:	8f e8       	ldi	r24, 0x8F	; 143
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <delayMs+0x22>
     fd2:	00 c0       	rjmp	.+0      	; 0xfd4 <delayMs+0x28>
     fd4:	00 00       	nop
     fd6:	bd df       	rcall	.-134    	; 0xf52 <getSystemTime_ms>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	8c 19       	sub	r24, r12
     fde:	9d 09       	sbc	r25, r13
     fe0:	ae 09       	sbc	r26, r14
     fe2:	bf 09       	sbc	r27, r15
     fe4:	8e 01       	movw	r16, r28
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	80 17       	cp	r24, r16
     fec:	91 07       	cpc	r25, r17
     fee:	a2 07       	cpc	r26, r18
     ff0:	b3 07       	cpc	r27, r19
     ff2:	58 f3       	brcs	.-42     	; 0xfca <delayMs+0x1e>
	{
		_delay_us(100);
	}
}
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	ff 90       	pop	r15
     ffe:	ef 90       	pop	r14
    1000:	df 90       	pop	r13
    1002:	cf 90       	pop	r12
    1004:	08 95       	ret

00001006 <assertPstr>:
 *
 *  \param exp The boolean expression that is expected to be true.
 *  \param errormsg The string that shall be shown as an error message if the given expression is false as progmem string.
 */
void assertPstr(bool exp, const char *errormsg, ...)
{
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	9f 81       	ldd	r25, Y+7	; 0x07
    1010:	28 85       	ldd	r18, Y+8	; 0x08
	if (!exp)
    1012:	8e 81       	ldd	r24, Y+6	; 0x06
    1014:	81 11       	cpse	r24, r1
    1016:	0c c0       	rjmp	.+24     	; 0x1030 <assertPstr+0x2a>
	{
		va_list args;
		va_start(args, errormsg);
    1018:	ae 01       	movw	r20, r28
    101a:	47 5f       	subi	r20, 0xF7	; 247
    101c:	5f 4f       	sbci	r21, 0xFF	; 255
		os_errorPstr(errormsg, args);
    101e:	5f 93       	push	r21
    1020:	4f 93       	push	r20
    1022:	2f 93       	push	r18
    1024:	9f 93       	push	r25
    1026:	6a d0       	rcall	.+212    	; 0x10fc <os_errorPstr>
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
		va_end(args);
	}
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	08 95       	ret

00001036 <main>:
//! Program's entry point
int main(void)
{
	// Give the operating system a chance to initialize its private data.
	// This also registers and starts the idle program.
	os_init();
    1036:	21 d0       	rcall	.+66     	; 0x107a <os_init>

	// os_init shows a boot message
	// Wait and clear the LCD
	delayMs(600);
    1038:	88 e5       	ldi	r24, 0x58	; 88
    103a:	92 e0       	ldi	r25, 0x02	; 2
	lcd_clear();
    103c:	b7 df       	rcall	.-146    	; 0xfac <delayMs>
    103e:	79 db       	rcall	.-2318   	; 0x732 <lcd_clear>

	// Start the operating system
	os_startScheduler();
    1040:	3c d1       	rcall	.+632    	; 0x12ba <os_startScheduler>
    1042:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	08 95       	ret

00001048 <os_initTimer>:
    1048:	e0 eb       	ldi	r30, 0xB0	; 176
 *  Initializes the used timers.
 */
void os_initTimer(void)
{
	// Init timer 2 (Scheduler)
	sbi(TCCR2A, WGM21); // Clear on timer compare match
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	82 60       	ori	r24, 0x02	; 2
    1050:	80 83       	st	Z, r24

	sbi(TCCR2B, CS22);	 // Prescaler 1024  1
    1052:	e1 eb       	ldi	r30, 0xB1	; 177
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	84 60       	ori	r24, 0x04	; 4
    105a:	80 83       	st	Z, r24
	sbi(TCCR2B, CS21);	 // Prescaler 1024  1
    105c:	80 81       	ld	r24, Z
    105e:	82 60       	ori	r24, 0x02	; 2
    1060:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20);	 // Prescaler 1024  1
    1062:	80 81       	ld	r24, Z
    1064:	81 60       	ori	r24, 0x01	; 1
    1066:	80 83       	st	Z, r24
	sbi(TIMSK2, OCIE2A); // Enable interrupt
    1068:	e0 e7       	ldi	r30, 0x70	; 112
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	82 60       	ori	r24, 0x02	; 2
    1070:	80 83       	st	Z, r24
	OCR2A = 60;
    1072:	8c e3       	ldi	r24, 0x3C	; 60
    1074:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
    1078:	08 95       	ret

0000107a <os_init>:
 *  Readies stack, scheduler and heap for first use. Additionally, the LCD is initialized. In order to do those tasks,
 *  it calls the subfunction os_initScheduler().
 */
void os_init()
{
	initSystemTime();
    107a:	4f df       	rcall	.-354    	; 0xf1a <initSystemTime>
	os_initTimer();
    107c:	e5 df       	rcall	.-54     	; 0x1048 <os_initTimer>
	stopWatch_init();
    107e:	0e dd       	rcall	.-1508   	; 0xa9c <stopWatch_init>

	// Init LCD display
	lcd_init();
    1080:	13 db       	rcall	.-2522   	; 0x6a8 <lcd_init>
	terminal_init();
    1082:	59 dd       	rcall	.-1358   	; 0xb36 <terminal_init>

	// display on
	lcd_displayOn();
    1084:	63 db       	rcall	.-2362   	; 0x74c <lcd_displayOn>
    1086:	55 db       	rcall	.-2390   	; 0x732 <lcd_clear>
	lcd_clear();
    1088:	84 e7       	ldi	r24, 0x74	; 116

	lcd_writeProgString(PSTR("Booting DEOS ..."));
    108a:	92 e0       	ldi	r25, 0x02	; 2
    108c:	de db       	rcall	.-2116   	; 0x84a <lcd_writeProgString>
    108e:	8e e3       	ldi	r24, 0x3E	; 62
    1090:	92 e0       	ldi	r25, 0x02	; 2

	terminal_writeProgString(PSTR("\n\n##################################################\n"));
    1092:	63 dd       	rcall	.-1338   	; 0xb5a <terminal_writeProgString>
    1094:	8d e2       	ldi	r24, 0x2D	; 45
    1096:	92 e0       	ldi	r25, 0x02	; 2
	INFO("Booting DEOS ...");
    1098:	9f 93       	push	r25
    109a:	8f 93       	push	r24
    109c:	84 e2       	ldi	r24, 0x24	; 36
    109e:	92 e0       	ldi	r25, 0x02	; 2
    10a0:	9f 93       	push	r25
    10a2:	8f 93       	push	r24
    10a4:	6e dd       	rcall	.-1316   	; 0xb82 <terminal_log_printf_p>
    10a6:	83 e0       	ldi	r24, 0x03	; 3
    10a8:	8f 93       	push	r24
    10aa:	88 ee       	ldi	r24, 0xE8	; 232
	INFO("Used global vars: %d/%d bytes", (uint16_t)&__heap_start - AVR_SRAM_START, STACK_OFFSET);
    10ac:	8f 93       	push	r24
    10ae:	8c e1       	ldi	r24, 0x1C	; 28
    10b0:	92 e0       	ldi	r25, 0x02	; 2
    10b2:	9f 93       	push	r25
    10b4:	8f 93       	push	r24
    10b6:	86 e0       	ldi	r24, 0x06	; 6
    10b8:	92 e0       	ldi	r25, 0x02	; 2
    10ba:	9f 93       	push	r25
    10bc:	8f 93       	push	r24
    10be:	8d ef       	ldi	r24, 0xFD	; 253
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	9f 93       	push	r25
    10c4:	8f 93       	push	r24
    10c6:	5d dd       	rcall	.-1350   	; 0xb82 <terminal_log_printf_p>
    10c8:	89 ec       	ldi	r24, 0xC9	; 201
    10ca:	91 e0       	ldi	r25, 0x01	; 1
	terminal_writeProgString(PSTR("--------------------------------------------------\n"));
    10cc:	46 dd       	rcall	.-1396   	; 0xb5a <terminal_writeProgString>
    10ce:	88 ea       	ldi	r24, 0xA8	; 168
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	9f 93       	push	r25

	// Security check if the stack crushes global variables
	assert((uint16_t)&__heap_start < AVR_SRAM_START + STACK_OFFSET, " Stack collides with global vars");
    10d4:	8f 93       	push	r24
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	2c e1       	ldi	r18, 0x1C	; 28
    10da:	34 e0       	ldi	r19, 0x04	; 4
    10dc:	28 3e       	cpi	r18, 0xE8	; 232
    10de:	35 40       	sbci	r19, 0x05	; 5
    10e0:	08 f0       	brcs	.+2      	; 0x10e4 <os_init+0x6a>
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	8f 93       	push	r24
    10e6:	8f df       	rcall	.-226    	; 0x1006 <assertPstr>
    10e8:	fb d1       	rcall	.+1014   	; 0x14e0 <os_initScheduler>
    10ea:	8d b7       	in	r24, 0x3d	; 61

	os_initScheduler();
    10ec:	9e b7       	in	r25, 0x3e	; 62
    10ee:	0f 96       	adiw	r24, 0x0f	; 15
}
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	9e bf       	out	0x3e, r25	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	8d bf       	out	0x3d, r24	; 61
    10fa:	08 95       	ret

000010fc <os_errorPstr>:
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	cd b7       	in	r28, 0x3d	; 61
 *
 *  \param msg The error to be displayed as progmem string
 *  \param ... Formatting arguments for the error message
 */
void os_errorPstr(const char *msg, ...)
{
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	1e 81       	ldd	r17, Y+6	; 0x06
    1106:	0f 81       	ldd	r16, Y+7	; 0x07
	cli();
    1108:	f8 94       	cli

	// Make sure we have enough stack left for sure (we can mess with it because we won't go out of this function)
	SP = BOTTOM_OF_MAIN_STACK;
    110a:	8f ef       	ldi	r24, 0xFF	; 255
    110c:	91 e2       	ldi	r25, 0x21	; 33
    110e:	9e bf       	out	0x3e, r25	; 62
    1110:	8d bf       	out	0x3d, r24	; 61

	// Clear display and write error message
	lcd_clear();
    1112:	0f db       	rcall	.-2530   	; 0x732 <lcd_clear>

	// Print error message to lcd (variadic arguments)
	va_list args;
	va_start(args, msg);
    1114:	ce 01       	movw	r24, r28
    1116:	08 96       	adiw	r24, 0x08	; 8
	lcd_printf_p(msg, args);
    1118:	9f 93       	push	r25
    111a:	8f 93       	push	r24
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	86 da       	rcall	.-2804   	; 0x62e <lcd_printf_p>
	va_end(args);

	// Print error message to terminal (variadic arguments)
	va_start(args, msg);
    1122:	ce 01       	movw	r24, r28
    1124:	08 96       	adiw	r24, 0x08	; 8
	terminal_log_printf_p(PSTR("[ERROR] "), msg, args);
    1126:	9f 93       	push	r25
    1128:	8f 93       	push	r24
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	8f e9       	ldi	r24, 0x9F	; 159
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	9f 93       	push	r25
    1134:	8f 93       	push	r24
    1136:	25 dd       	rcall	.-1462   	; 0xb82 <terminal_log_printf_p>
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
	va_end(args);

	// Catch system in this infinite loop and play a small animation to indicate an error
	while (1)
	{
		lcd_displayOn();
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	04 db       	rcall	.-2552   	; 0x74c <lcd_displayOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1144:	9f ef       	ldi	r25, 0xFF	; 255
    1146:	2d e3       	ldi	r18, 0x3D	; 61
    1148:	89 e4       	ldi	r24, 0x49	; 73
    114a:	91 50       	subi	r25, 0x01	; 1
    114c:	20 40       	sbci	r18, 0x00	; 0
    114e:	80 40       	sbci	r24, 0x00	; 0
    1150:	e1 f7       	brne	.-8      	; 0x114a <os_errorPstr+0x4e>
    1152:	00 c0       	rjmp	.+0      	; 0x1154 <os_errorPstr+0x58>
		_delay_ms(1500);
		lcd_displayOff();
    1154:	00 00       	nop
    1156:	fd da       	rcall	.-2566   	; 0x752 <lcd_displayOff>
    1158:	9f ef       	ldi	r25, 0xFF	; 255
    115a:	21 ee       	ldi	r18, 0xE1	; 225
    115c:	84 e0       	ldi	r24, 0x04	; 4
    115e:	91 50       	subi	r25, 0x01	; 1
    1160:	20 40       	sbci	r18, 0x00	; 0
    1162:	80 40       	sbci	r24, 0x00	; 0
    1164:	e1 f7       	brne	.-8      	; 0x115e <os_errorPstr+0x62>
    1166:	00 c0       	rjmp	.+0      	; 0x1168 <os_errorPstr+0x6c>
    1168:	00 00       	nop
    116a:	eb cf       	rjmp	.-42     	; 0x1142 <os_errorPstr+0x46>

0000116c <prog0>:

/*!
 *  This is the idle program. The idle process owns all the memory
 *  and processor time no other process wants to have.
 */
PROGRAM(0, AUTOSTART)
    116c:	c0 e0       	ldi	r28, 0x00	; 0
    116e:	d0 e0       	ldi	r29, 0x00	; 0
    1170:	06 c0       	rjmp	.+12     	; 0x117e <prog0+0x12>
    1172:	8e e2       	ldi	r24, 0x2E	; 46
    1174:	2a db       	rcall	.-2476   	; 0x7ca <lcd_writeChar>
    1176:	84 e6       	ldi	r24, 0x64	; 100
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	18 df       	rcall	.-464    	; 0xfac <delayMs>
    117c:	21 96       	adiw	r28, 0x01	; 1
    117e:	c3 30       	cpi	r28, 0x03	; 3
    1180:	d1 05       	cpc	r29, r1
    1182:	bc f3       	brlt	.-18     	; 0x1172 <prog0+0x6>
    1184:	d6 da       	rcall	.-2644   	; 0x732 <lcd_clear>
    1186:	84 e6       	ldi	r24, 0x64	; 100
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	10 df       	rcall	.-480    	; 0xfac <delayMs>
    118c:	ef cf       	rjmp	.-34     	; 0x116c <prog0>

0000118e <addressOfProgram>:
    118e:	bc 01       	movw	r22, r24
    1190:	99 0f       	add	r25, r25
    1192:	88 0b       	sbc	r24, r24
    1194:	99 0b       	sbc	r25, r25
    1196:	08 95       	ret

00001198 <os_checkAutostartProgram>:
    1198:	21 e0       	ldi	r18, 0x01	; 1
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <os_checkAutostartProgram+0xa>
    119e:	22 0f       	add	r18, r18
    11a0:	33 1f       	adc	r19, r19
    11a2:	8a 95       	dec	r24
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <os_checkAutostartProgram+0x6>
    11a6:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <os_autostart>
    11aa:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <os_autostart+0x1>
    11ae:	28 23       	and	r18, r24
    11b0:	39 23       	and	r19, r25
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	23 2b       	or	r18, r19
    11b6:	09 f4       	brne	.+2      	; 0x11ba <os_checkAutostartProgram+0x22>
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	08 95       	ret

000011bc <os_lookupProgramFunction>:
    11bc:	80 31       	cpi	r24, 0x10	; 16
    11be:	48 f4       	brcc	.+18     	; 0x11d2 <os_lookupProgramFunction+0x16>
    11c0:	e8 2f       	mov	r30, r24
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	ee 0f       	add	r30, r30
    11c6:	ff 1f       	adc	r31, r31
    11c8:	ed 54       	subi	r30, 0x4D	; 77
    11ca:	fc 4f       	sbci	r31, 0xFC	; 252
    11cc:	80 81       	ld	r24, Z
    11ce:	91 81       	ldd	r25, Z+1	; 0x01
    11d0:	08 95       	ret
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	08 95       	ret

000011d8 <os_getProcessSlot>:
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	9c 01       	movw	r18, r24
    11dc:	22 0f       	add	r18, r18
    11de:	33 1f       	adc	r19, r19
    11e0:	82 0f       	add	r24, r18
    11e2:	93 1f       	adc	r25, r19
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	8d 57       	subi	r24, 0x7D	; 125
    11ea:	9c 4f       	sbci	r25, 0xFC	; 252
    11ec:	08 95       	ret

000011ee <os_getProgramSlot>:
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	8d 54       	subi	r24, 0x4D	; 77
    11f6:	9c 4f       	sbci	r25, 0xFC	; 252
    11f8:	08 95       	ret

000011fa <os_getCurrentProc>:
    11fa:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <currentProc>
    11fe:	08 95       	ret

00001200 <os_setSchedulingStrategy>:
    1200:	cf 93       	push	r28
    1202:	c8 2f       	mov	r28, r24
    1204:	89 d3       	rcall	.+1810   	; 0x1918 <os_resetSchedulingInformation>
    1206:	c0 93 7b 03 	sts	0x037B, r28	; 0x80037b <currSchedStrat>
    120a:	cf 91       	pop	r28
    120c:	08 95       	ret

0000120e <os_getSchedulingStrategy>:
    120e:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <currSchedStrat>
    1212:	08 95       	ret

00001214 <os_enterCriticalSection>:
    1214:	cf 93       	push	r28
    1216:	cf b7       	in	r28, 0x3f	; 63
    1218:	cc 1f       	adc	r28, r28
    121a:	cc 27       	eor	r28, r28
    121c:	cc 1f       	adc	r28, r28
    121e:	f8 94       	cli
    1220:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <criticalSectionCount>
    1224:	8f 3f       	cpi	r24, 0xFF	; 255
    1226:	41 f4       	brne	.+16     	; 0x1238 <os_enterCriticalSection+0x24>
    1228:	86 e6       	ldi	r24, 0x66	; 102
    122a:	93 e0       	ldi	r25, 0x03	; 3
    122c:	9f 93       	push	r25
    122e:	8f 93       	push	r24
    1230:	65 df       	rcall	.-310    	; 0x10fc <os_errorPstr>
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	03 c0       	rjmp	.+6      	; 0x123e <os_enterCriticalSection+0x2a>
    1238:	8f 5f       	subi	r24, 0xFF	; 255
    123a:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <criticalSectionCount>
    123e:	e0 e7       	ldi	r30, 0x70	; 112
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	8d 7f       	andi	r24, 0xFD	; 253
    1246:	80 83       	st	Z, r24
    1248:	cc 23       	and	r28, r28
    124a:	09 f0       	breq	.+2      	; 0x124e <os_enterCriticalSection+0x3a>
    124c:	78 94       	sei
    124e:	cf 91       	pop	r28
    1250:	08 95       	ret

00001252 <os_leaveCriticalSection>:
    1252:	cf 93       	push	r28
    1254:	cf b7       	in	r28, 0x3f	; 63
    1256:	cc 1f       	adc	r28, r28
    1258:	cc 27       	eor	r28, r28
    125a:	cc 1f       	adc	r28, r28
    125c:	f8 94       	cli
    125e:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <criticalSectionCount>
    1262:	81 11       	cpse	r24, r1
    1264:	08 c0       	rjmp	.+16     	; 0x1276 <os_leaveCriticalSection+0x24>
    1266:	8c e4       	ldi	r24, 0x4C	; 76
    1268:	93 e0       	ldi	r25, 0x03	; 3
    126a:	9f 93       	push	r25
    126c:	8f 93       	push	r24
    126e:	46 df       	rcall	.-372    	; 0x10fc <os_errorPstr>
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	03 c0       	rjmp	.+6      	; 0x127c <os_leaveCriticalSection+0x2a>
    1276:	81 50       	subi	r24, 0x01	; 1
    1278:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <criticalSectionCount>
    127c:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <criticalSectionCount>
    1280:	81 11       	cpse	r24, r1
    1282:	05 c0       	rjmp	.+10     	; 0x128e <os_leaveCriticalSection+0x3c>
    1284:	e0 e7       	ldi	r30, 0x70	; 112
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	82 60       	ori	r24, 0x02	; 2
    128c:	80 83       	st	Z, r24
    128e:	cc 23       	and	r28, r28
    1290:	09 f0       	breq	.+2      	; 0x1294 <os_leaveCriticalSection+0x42>
    1292:	78 94       	sei
    1294:	cf 91       	pop	r28
    1296:	08 95       	ret

00001298 <registerProgram0>:
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	a9 df       	rcall	.-174    	; 0x11ee <os_getProgramSlot>
    129c:	26 eb       	ldi	r18, 0xB6	; 182
    129e:	38 e0       	ldi	r19, 0x08	; 8
    12a0:	fc 01       	movw	r30, r24
    12a2:	31 83       	std	Z+1, r19	; 0x01
    12a4:	20 83       	st	Z, r18
    12a6:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <os_autostart>
    12aa:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <os_autostart+0x1>
    12ae:	81 60       	ori	r24, 0x01	; 1
    12b0:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <os_autostart+0x1>
    12b4:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <os_autostart>
    12b8:	08 95       	ret

000012ba <os_startScheduler>:
 *  function to start the concurrent execution of the applications.
 */
void os_startScheduler(void)
{
	 // Set currentProc to idle process
	 currentProc = 0;
    12ba:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <currentProc>

	 // Set the state of the now chosen process to running
	 os_processes[currentProc].state = OS_PS_RUNNING;
    12be:	e3 e8       	ldi	r30, 0x83	; 131
    12c0:	f3 e0       	ldi	r31, 0x03	; 3
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	81 83       	std	Z+1, r24	; 0x01

	 // Set SP on the stack of the idle process, this will cause the idle process to start running,
	 // as the SP now points onto the idle functions address
	 SP = os_processes[currentProc].sp.as_int;
    12c6:	82 81       	ldd	r24, Z+2	; 0x02
    12c8:	93 81       	ldd	r25, Z+3	; 0x03
    12ca:	9e bf       	out	0x3e, r25	; 62
    12cc:	8d bf       	out	0x3d, r24	; 61

	 // Load initial context and start the idle process
	 restoreContext();
    12ce:	0f 90       	pop	r0
    12d0:	1f 90       	pop	r1
    12d2:	2f 90       	pop	r2
    12d4:	3f 90       	pop	r3
    12d6:	4f 90       	pop	r4
    12d8:	5f 90       	pop	r5
    12da:	6f 90       	pop	r6
    12dc:	7f 90       	pop	r7
    12de:	8f 90       	pop	r8
    12e0:	9f 90       	pop	r9
    12e2:	af 90       	pop	r10
    12e4:	bf 90       	pop	r11
    12e6:	cf 90       	pop	r12
    12e8:	df 90       	pop	r13
    12ea:	ef 90       	pop	r14
    12ec:	ff 90       	pop	r15
    12ee:	0f 91       	pop	r16
    12f0:	1f 91       	pop	r17
    12f2:	2f 91       	pop	r18
    12f4:	3f 91       	pop	r19
    12f6:	4f 91       	pop	r20
    12f8:	5f 91       	pop	r21
    12fa:	6f 91       	pop	r22
    12fc:	7f 91       	pop	r23
    12fe:	8f 91       	pop	r24
    1300:	9f 91       	pop	r25
    1302:	af 91       	pop	r26
    1304:	bf 91       	pop	r27
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	ef 91       	pop	r30
    130c:	ff 91       	pop	r31
    130e:	ff bf       	out	0x3f, r31	; 63
    1310:	ff 91       	pop	r31
    1312:	18 95       	reti

	 os_error("os_startScheduler() terminated against all odds - scary stuff...");
    1314:	85 e8       	ldi	r24, 0x85	; 133
    1316:	92 e0       	ldi	r25, 0x02	; 2
    1318:	9f 93       	push	r25
    131a:	8f 93       	push	r24
    131c:	ef de       	rcall	.-546    	; 0x10fc <os_errorPstr>
	 // You should never get here, as the scheduler must not terminate
	

}
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	08 95       	ret

00001324 <os_getStackChecksum>:
	// Be aware of cases where the whole stack is less than 10 bytes
	// (although this actually won't happen due to the call to saveContext() beforehand, which always puts 33 bytes on to the stack already)
	
	
	stack_checksum_t checksum = 0;
	uint8_t *stack_bottom = (uint8_t *)(uintptr_t)PROCESS_STACK_BOTTOM(pid);
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	27 e6       	ldi	r18, 0x67	; 103
    1328:	33 e0       	ldi	r19, 0x03	; 3
    132a:	82 9f       	mul	r24, r18
    132c:	a0 01       	movw	r20, r0
    132e:	83 9f       	mul	r24, r19
    1330:	50 0d       	add	r21, r0
    1332:	92 9f       	mul	r25, r18
    1334:	50 0d       	add	r21, r0
    1336:	11 24       	eor	r1, r1
    1338:	2f e1       	ldi	r18, 0x1F	; 31
    133a:	31 e2       	ldi	r19, 0x21	; 33
    133c:	24 1b       	sub	r18, r20
    133e:	35 0b       	sbc	r19, r21
	uint8_t *stack_top = (uint8_t *)(uintptr_t)(os_processes[pid].sp.as_int);
    1340:	fc 01       	movw	r30, r24
    1342:	ee 0f       	add	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	e8 0f       	add	r30, r24
    1348:	f9 1f       	adc	r31, r25
    134a:	ee 0f       	add	r30, r30
    134c:	ff 1f       	adc	r31, r31
    134e:	ed 57       	subi	r30, 0x7D	; 125
    1350:	fc 4f       	sbci	r31, 0xFC	; 252
    1352:	42 81       	ldd	r20, Z+2	; 0x02
    1354:	53 81       	ldd	r21, Z+3	; 0x03
	uint8_t stack_size = stack_bottom - stack_top;
    1356:	24 1b       	sub	r18, r20

	if (stack_size >= 16)
    1358:	20 31       	cpi	r18, 0x10	; 16
    135a:	78 f4       	brcc	.+30     	; 0x137a <os_getStackChecksum+0x56>
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	17 c0       	rjmp	.+46     	; 0x1390 <os_getStackChecksum+0x6c>
	{
		for (uint8_t i = 0; i < 16; i++)
		{
			checksum ^= stack_top[i * (stack_size / 16)];
    1362:	32 2f       	mov	r19, r18
    1364:	32 95       	swap	r19
    1366:	3f 70       	andi	r19, 0x0F	; 15
    1368:	fa 01       	movw	r30, r20
    136a:	39 9f       	mul	r19, r25
    136c:	e0 0d       	add	r30, r0
    136e:	f1 1d       	adc	r31, r1
    1370:	11 24       	eor	r1, r1
    1372:	30 81       	ld	r19, Z
    1374:	83 27       	eor	r24, r19
	uint8_t *stack_top = (uint8_t *)(uintptr_t)(os_processes[pid].sp.as_int);
	uint8_t stack_size = stack_bottom - stack_top;

	if (stack_size >= 16)
	{
		for (uint8_t i = 0; i < 16; i++)
    1376:	9f 5f       	subi	r25, 0xFF	; 255
    1378:	02 c0       	rjmp	.+4      	; 0x137e <os_getStackChecksum+0x5a>
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 31       	cpi	r25, 0x10	; 16
    1380:	80 f3       	brcs	.-32     	; 0x1362 <os_getStackChecksum+0x3e>
    1382:	08 95       	ret
	}
	else
	{
		for (uint8_t i = 0; i < stack_size; i++)
		{
			checksum ^= stack_top[i];
    1384:	fa 01       	movw	r30, r20
    1386:	e9 0f       	add	r30, r25
    1388:	f1 1d       	adc	r31, r1
    138a:	30 81       	ld	r19, Z
    138c:	83 27       	eor	r24, r19
			checksum ^= stack_top[i * (stack_size / 16)];
		}
	}
	else
	{
		for (uint8_t i = 0; i < stack_size; i++)
    138e:	9f 5f       	subi	r25, 0xFF	; 255
    1390:	92 17       	cp	r25, r18
    1392:	c0 f3       	brcs	.-16     	; 0x1384 <os_getStackChecksum+0x60>
		}
	}

	return checksum;

}
    1394:	08 95       	ret

00001396 <os_exec>:
 *                  strategies.
 *  \return The index of the new process (throws error on failure and returns
 *          INVALID_PROCESS as specified in defines.h).
 */
process_id_t os_exec(program_id_t programID, priority_t priority)
{
    1396:	ef 92       	push	r14
    1398:	ff 92       	push	r15
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	e8 2e       	mov	r14, r24
    13a4:	f6 2e       	mov	r15, r22
	// 1. Enter a critical section
	os_enterCriticalSection();
    13a6:	36 df       	rcall	.-404    	; 0x1214 <os_enterCriticalSection>

	// 2. Find free slot in os_processes array
	int free_slot = -1;

	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    13a8:	c0 e0       	ldi	r28, 0x00	; 0
    13aa:	d0 e0       	ldi	r29, 0x00	; 0
    13ac:	0d c0       	rjmp	.+26     	; 0x13c8 <os_exec+0x32>
	{
		if (os_processes[i].state == OS_PS_UNUSED)
    13ae:	fe 01       	movw	r30, r28
    13b0:	ee 0f       	add	r30, r30
    13b2:	ff 1f       	adc	r31, r31
    13b4:	ec 0f       	add	r30, r28
    13b6:	fd 1f       	adc	r31, r29
    13b8:	ee 0f       	add	r30, r30
    13ba:	ff 1f       	adc	r31, r31
    13bc:	ed 57       	subi	r30, 0x7D	; 125
    13be:	fc 4f       	sbci	r31, 0xFC	; 252
    13c0:	81 81       	ldd	r24, Z+1	; 0x01
    13c2:	88 23       	and	r24, r24
    13c4:	31 f0       	breq	.+12     	; 0x13d2 <os_exec+0x3c>
	os_enterCriticalSection();

	// 2. Find free slot in os_processes array
	int free_slot = -1;

	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    13c6:	21 96       	adiw	r28, 0x01	; 1
    13c8:	c8 30       	cpi	r28, 0x08	; 8
    13ca:	d1 05       	cpc	r29, r1
    13cc:	84 f3       	brlt	.-32     	; 0x13ae <os_exec+0x18>
{
	// 1. Enter a critical section
	os_enterCriticalSection();

	// 2. Find free slot in os_processes array
	int free_slot = -1;
    13ce:	cf ef       	ldi	r28, 0xFF	; 255
    13d0:	df ef       	ldi	r29, 0xFF	; 255
			break;
		}
	}


	if (free_slot == -1)
    13d2:	cf 3f       	cpi	r28, 0xFF	; 255
    13d4:	8f ef       	ldi	r24, 0xFF	; 255
    13d6:	d8 07       	cpc	r29, r24
    13d8:	81 f4       	brne	.+32     	; 0x13fa <os_exec+0x64>
	{
		// os_error("No free slot available");
		terminal_log_printf_p(PSTR("os_exec() -> "), PSTR("No free slot available\n"));
    13da:	8a ee       	ldi	r24, 0xEA	; 234
    13dc:	92 e0       	ldi	r25, 0x02	; 2
    13de:	9f 93       	push	r25
    13e0:	8f 93       	push	r24
    13e2:	8c ed       	ldi	r24, 0xDC	; 220
    13e4:	92 e0       	ldi	r25, 0x02	; 2
    13e6:	9f 93       	push	r25
    13e8:	8f 93       	push	r24
		os_leaveCriticalSection();
    13ea:	cb db       	rcall	.-2154   	; 0xb82 <terminal_log_printf_p>
    13ec:	32 df       	rcall	.-412    	; 0x1252 <os_leaveCriticalSection>
		return INVALID_PROCESS;
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	1f ef       	ldi	r17, 0xFF	; 255
    13f8:	6b c0       	rjmp	.+214    	; 0x14d0 <os_exec+0x13a>
		os_leaveCriticalSection();
		return INVALID_PROCESS;
	}

	// 4. Save ProgramID and the process' state (and some more)
	os_processes[free_slot].progID = programID;
    13fa:	8e 01       	movw	r16, r28
    13fc:	00 0f       	add	r16, r16
    13fe:	11 1f       	adc	r17, r17
    1400:	0c 0f       	add	r16, r28
    1402:	1d 1f       	adc	r17, r29
    1404:	00 0f       	add	r16, r16
    1406:	11 1f       	adc	r17, r17
    1408:	0d 57       	subi	r16, 0x7D	; 125
    140a:	1c 4f       	sbci	r17, 0xFC	; 252
    140c:	d8 01       	movw	r26, r16
    140e:	ec 92       	st	X, r14
	os_processes[free_slot].state = OS_PS_READY;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	11 96       	adiw	r26, 0x01	; 1
    1414:	8c 93       	st	X, r24
    1416:	11 97       	sbiw	r26, 0x01	; 1
	os_processes[free_slot].priority = priority;
    1418:	14 96       	adiw	r26, 0x04	; 4
    141a:	fc 92       	st	X, r15
    141c:	14 97       	sbiw	r26, 0x04	; 4

	// Initialize the stack pointer
	os_processes[free_slot].sp.as_int = PROCESS_STACK_BOTTOM(free_slot);
    141e:	87 e6       	ldi	r24, 0x67	; 103
    1420:	93 e0       	ldi	r25, 0x03	; 3
    1422:	c8 9f       	mul	r28, r24
    1424:	90 01       	movw	r18, r0
    1426:	c9 9f       	mul	r28, r25
    1428:	30 0d       	add	r19, r0
    142a:	d8 9f       	mul	r29, r24
    142c:	30 0d       	add	r19, r0
    142e:	11 24       	eor	r1, r1
    1430:	8f e1       	ldi	r24, 0x1F	; 31
    1432:	91 e2       	ldi	r25, 0x21	; 33
    1434:	7c 01       	movw	r14, r24
    1436:	e2 1a       	sub	r14, r18
    1438:	f3 0a       	sbc	r15, r19

	// 5.1 push the address of the function to the stack
	// Note for task 2: use address of os_dispatcher instead

	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)(addressOfProgram(function));
    143a:	c7 01       	movw	r24, r14
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	13 96       	adiw	r26, 0x03	; 3
    1440:	9c 93       	st	X, r25
    1442:	8e 93       	st	-X, r24
    1444:	12 97       	sbiw	r26, 0x02	; 2
    1446:	8e e0       	ldi	r24, 0x0E	; 14
    1448:	9c e0       	ldi	r25, 0x0C	; 12
    144a:	a1 de       	rcall	.-702    	; 0x118e <addressOfProgram>
    144c:	f7 01       	movw	r30, r14
    144e:	60 83       	st	Z, r22
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 8));
    1450:	d8 01       	movw	r26, r16
    1452:	12 96       	adiw	r26, 0x02	; 2
    1454:	ed 91       	ld	r30, X+
    1456:	fc 91       	ld	r31, X
    1458:	13 97       	sbiw	r26, 0x03	; 3
    145a:	9f 01       	movw	r18, r30
    145c:	21 50       	subi	r18, 0x01	; 1
    145e:	31 09       	sbc	r19, r1
    1460:	13 96       	adiw	r26, 0x03	; 3
    1462:	3c 93       	st	X, r19
    1464:	2e 93       	st	-X, r18
    1466:	12 97       	sbiw	r26, 0x02	; 2
    1468:	70 83       	st	Z, r23
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 16));
    146a:	12 96       	adiw	r26, 0x02	; 2
    146c:	ed 91       	ld	r30, X+
    146e:	fc 91       	ld	r31, X
    1470:	13 97       	sbiw	r26, 0x03	; 3
    1472:	9f 01       	movw	r18, r30
    1474:	21 50       	subi	r18, 0x01	; 1
    1476:	31 09       	sbc	r19, r1
    1478:	13 96       	adiw	r26, 0x03	; 3
    147a:	3c 93       	st	X, r19
    147c:	2e 93       	st	-X, r18
    147e:	12 97       	sbiw	r26, 0x02	; 2
    1480:	80 83       	st	Z, r24

	// 5.2 leave space on the process stack for register entries
	for (uint8_t i = 0; i < 33; i++)
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	12 c0       	rjmp	.+36     	; 0x14aa <os_exec+0x114>
	{
		*os_processes[free_slot].sp.as_ptr-- = 0;
    1486:	fe 01       	movw	r30, r28
    1488:	ee 0f       	add	r30, r30
    148a:	ff 1f       	adc	r31, r31
    148c:	ec 0f       	add	r30, r28
    148e:	fd 1f       	adc	r31, r29
    1490:	ee 0f       	add	r30, r30
    1492:	ff 1f       	adc	r31, r31
    1494:	ed 57       	subi	r30, 0x7D	; 125
    1496:	fc 4f       	sbci	r31, 0xFC	; 252
    1498:	a2 81       	ldd	r26, Z+2	; 0x02
    149a:	b3 81       	ldd	r27, Z+3	; 0x03
    149c:	9d 01       	movw	r18, r26
    149e:	21 50       	subi	r18, 0x01	; 1
    14a0:	31 09       	sbc	r19, r1
    14a2:	33 83       	std	Z+3, r19	; 0x03
    14a4:	22 83       	std	Z+2, r18	; 0x02
    14a6:	1c 92       	st	X, r1
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)(addressOfProgram(function));
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 8));
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 16));

	// 5.2 leave space on the process stack for register entries
	for (uint8_t i = 0; i < 33; i++)
    14a8:	8f 5f       	subi	r24, 0xFF	; 255
    14aa:	81 32       	cpi	r24, 0x21	; 33
	{
		*os_processes[free_slot].sp.as_ptr-- = 0;
	}

	// For task 2: Save the stack checksum
	os_processes[free_slot].checksum = os_getStackChecksum(free_slot);
    14ac:	60 f3       	brcs	.-40     	; 0x1486 <os_exec+0xf0>
    14ae:	1c 2f       	mov	r17, r28
    14b0:	8c 2f       	mov	r24, r28
    14b2:	38 df       	rcall	.-400    	; 0x1324 <os_getStackChecksum>
    14b4:	fe 01       	movw	r30, r28
    14b6:	ee 0f       	add	r30, r30
    14b8:	ff 1f       	adc	r31, r31
    14ba:	ec 0f       	add	r30, r28
    14bc:	fd 1f       	adc	r31, r29
    14be:	ee 0f       	add	r30, r30
    14c0:	ff 1f       	adc	r31, r31
    14c2:	ed 57       	subi	r30, 0x7D	; 125

	os_resetProcessSchedulingInformation(os_getSchedulingStrategy(), free_slot);
    14c4:	fc 4f       	sbci	r31, 0xFC	; 252
    14c6:	85 83       	std	Z+5, r24	; 0x05
    14c8:	a2 de       	rcall	.-700    	; 0x120e <os_getSchedulingStrategy>
    14ca:	6c 2f       	mov	r22, r28
    14cc:	fe d1       	rcall	.+1020   	; 0x18ca <os_resetProcessSchedulingInformation>

	// 6. Leave Critical Section
	os_leaveCriticalSection();
    14ce:	c1 de       	rcall	.-638    	; 0x1252 <os_leaveCriticalSection>
    14d0:	81 2f       	mov	r24, r17
	return free_slot;
	
	
	

}
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	08 95       	ret

000014e0 <os_initScheduler>:
    14e0:	cf 93       	push	r28
 *  In order for the scheduler to work properly, it must have the chance to
 *  initialize its internal data-structures and register and start the idle
 *  program.
 */
void os_initScheduler(void)
{
    14e2:	df 93       	push	r29
	// 1.
	// As the processes are just being initialized, all slots should be unused so far.
	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	0b c0       	rjmp	.+22     	; 0x1500 <os_initScheduler+0x20>
	{
		os_processes[i].state = OS_PS_UNUSED;
    14ea:	fc 01       	movw	r30, r24
    14ec:	ee 0f       	add	r30, r30
    14ee:	ff 1f       	adc	r31, r31
    14f0:	e8 0f       	add	r30, r24
    14f2:	f9 1f       	adc	r31, r25
    14f4:	ee 0f       	add	r30, r30
    14f6:	ff 1f       	adc	r31, r31
    14f8:	ed 57       	subi	r30, 0x7D	; 125
    14fa:	fc 4f       	sbci	r31, 0xFC	; 252
    14fc:	11 82       	std	Z+1, r1	; 0x01
 */
void os_initScheduler(void)
{
	// 1.
	// As the processes are just being initialized, all slots should be unused so far.
	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    14fe:	01 96       	adiw	r24, 0x01	; 1
    1500:	88 30       	cpi	r24, 0x08	; 8
    1502:	91 05       	cpc	r25, r1
    1504:	94 f3       	brlt	.-28     	; 0x14ea <os_initScheduler+0xa>
    1506:	c0 e0       	ldi	r28, 0x00	; 0
    1508:	d0 e0       	ldi	r29, 0x00	; 0
    150a:	08 c0       	rjmp	.+16     	; 0x151c <os_initScheduler+0x3c>
	}

	// Start all registered programs, which a flagged as autostart (i.e. call os_exec on them).
	for (int i = 0; i < MAX_NUMBER_OF_PROGRAMS; i++)
	{
		if (os_checkAutostartProgram(i))
    150c:	8c 2f       	mov	r24, r28
    150e:	44 de       	rcall	.-888    	; 0x1198 <os_checkAutostartProgram>
    1510:	88 23       	and	r24, r24
    1512:	19 f0       	breq	.+6      	; 0x151a <os_initScheduler+0x3a>
		{
			os_exec(i, DEFAULT_PRIORITY);
    1514:	62 e0       	ldi	r22, 0x02	; 2
    1516:	8c 2f       	mov	r24, r28
    1518:	3e df       	rcall	.-388    	; 0x1396 <os_exec>
	{
		os_processes[i].state = OS_PS_UNUSED;
	}

	// Start all registered programs, which a flagged as autostart (i.e. call os_exec on them).
	for (int i = 0; i < MAX_NUMBER_OF_PROGRAMS; i++)
    151a:	21 96       	adiw	r28, 0x01	; 1
    151c:	c0 31       	cpi	r28, 0x10	; 16
    151e:	d1 05       	cpc	r29, r1
    1520:	ac f3       	brlt	.-22     	; 0x150c <os_initScheduler+0x2c>
		{
			os_exec(i, DEFAULT_PRIORITY);
		}

	}
	os_resetSchedulingInformation(currSchedStrat);
    1522:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <currSchedStrat>
    1526:	f8 d1       	rcall	.+1008   	; 0x1918 <os_resetSchedulingInformation>

	delayMs(3000);
    1528:	88 eb       	ldi	r24, 0xB8	; 184
    152a:	9b e0       	ldi	r25, 0x0B	; 11
    152c:	3f dd       	rcall	.-1410   	; 0xfac <delayMs>
    152e:	20 91 b3 03 	lds	r18, 0x03B3	; 0x8003b3 <os_programs>

	// Uncomment:
	assert(os_programs[0] != NULL, "There is no idle proc");
    1532:	30 91 b4 03 	lds	r19, 0x03B4	; 0x8003b4 <os_programs+0x1>
    1536:	86 ec       	ldi	r24, 0xC6	; 198
    1538:	92 e0       	ldi	r25, 0x02	; 2
    153a:	9f 93       	push	r25
    153c:	8f 93       	push	r24
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	23 2b       	or	r18, r19
    1542:	09 f4       	brne	.+2      	; 0x1546 <os_initScheduler+0x66>
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	8f 93       	push	r24
    1548:	5e dd       	rcall	.-1348   	; 0x1006 <assertPstr>
    154a:	0f 90       	pop	r0
}
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	08 95       	ret

00001556 <os_isStackInBounds>:
    1556:	8f 92       	push	r8
 *
 *  \param pid The ID of the process for which the stack pointer has to be checked.
 *  \return True if the stack pointer is still in its bounds.
 */
bool os_isStackInBounds(process_id_t pid)
{
    1558:	9f 92       	push	r9
    155a:	af 92       	push	r10
    155c:	bf 92       	push	r11
    155e:	cf 92       	push	r12
    1560:	df 92       	push	r13
    1562:	ef 92       	push	r14
    1564:	ff 92       	push	r15
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
	if (os_processes[pid].sp.as_int > PROCESS_STACK_BOTTOM(pid) || os_processes[pid].sp.as_int < PROCESS_STACK_BOTTOM(pid) - STACK_SIZE_PROC)
    156a:	48 2f       	mov	r20, r24
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	fa 01       	movw	r30, r20
    1570:	ee 0f       	add	r30, r30
    1572:	ff 1f       	adc	r31, r31
    1574:	e4 0f       	add	r30, r20
    1576:	f5 1f       	adc	r31, r21
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	ed 57       	subi	r30, 0x7D	; 125
    157e:	fc 4f       	sbci	r31, 0xFC	; 252
    1580:	c2 80       	ldd	r12, Z+2	; 0x02
    1582:	d3 80       	ldd	r13, Z+3	; 0x03
    1584:	e1 2c       	mov	r14, r1
    1586:	f1 2c       	mov	r15, r1
    1588:	9a 01       	movw	r18, r20
    158a:	a7 e6       	ldi	r26, 0x67	; 103
    158c:	b3 e0       	ldi	r27, 0x03	; 3
    158e:	ad d5       	rcall	.+2906   	; 0x20ea <__umulhisi3>
    1590:	0f e1       	ldi	r16, 0x1F	; 31
    1592:	11 e2       	ldi	r17, 0x21	; 33
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	06 1b       	sub	r16, r22
    159a:	17 0b       	sbc	r17, r23
    159c:	28 0b       	sbc	r18, r24
    159e:	39 0b       	sbc	r19, r25
    15a0:	0c 15       	cp	r16, r12
    15a2:	1d 05       	cpc	r17, r13
    15a4:	2e 05       	cpc	r18, r14
    15a6:	3f 05       	cpc	r19, r15
    15a8:	88 f0       	brcs	.+34     	; 0x15cc <os_isStackInBounds+0x76>
    15aa:	08 eb       	ldi	r16, 0xB8	; 184
    15ac:	1d e1       	ldi	r17, 0x1D	; 29
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	48 01       	movw	r8, r16
    15b4:	59 01       	movw	r10, r18
    15b6:	86 1a       	sub	r8, r22
    15b8:	97 0a       	sbc	r9, r23
    15ba:	a8 0a       	sbc	r10, r24
    15bc:	b9 0a       	sbc	r11, r25
    15be:	c8 14       	cp	r12, r8
    15c0:	d9 04       	cpc	r13, r9
    15c2:	ea 04       	cpc	r14, r10
    15c4:	fb 04       	cpc	r15, r11
    15c6:	20 f4       	brcc	.+8      	; 0x15d0 <os_isStackInBounds+0x7a>
	{
		return false;
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	03 c0       	rjmp	.+6      	; 0x15d2 <os_isStackInBounds+0x7c>
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	01 c0       	rjmp	.+2      	; 0x15d2 <os_isStackInBounds+0x7c>
	}
	return true;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
}
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	ef 90       	pop	r14
    15da:	df 90       	pop	r13
    15dc:	cf 90       	pop	r12
    15de:	bf 90       	pop	r11
    15e0:	af 90       	pop	r10
    15e2:	9f 90       	pop	r9
    15e4:	8f 90       	pop	r8
    15e6:	08 95       	ret

000015e8 <__vector_13>:
ISR(TIMER2_COMPA_vect)
{
	// 1. Is implicitly done

	// 2. Save runtime-context of recently current process using the well-known macro
	saveContext();
    15e8:	ff 93       	push	r31
    15ea:	ff b7       	in	r31, 0x3f	; 63
    15ec:	ff 93       	push	r31
    15ee:	ef 93       	push	r30
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	bf 93       	push	r27
    15f6:	af 93       	push	r26
    15f8:	9f 93       	push	r25
    15fa:	8f 93       	push	r24
    15fc:	7f 93       	push	r23
    15fe:	6f 93       	push	r22
    1600:	5f 93       	push	r21
    1602:	4f 93       	push	r20
    1604:	3f 93       	push	r19
    1606:	2f 93       	push	r18
    1608:	1f 93       	push	r17
    160a:	0f 93       	push	r16
    160c:	ff 92       	push	r15
    160e:	ef 92       	push	r14
    1610:	df 92       	push	r13
    1612:	cf 92       	push	r12
    1614:	bf 92       	push	r11
    1616:	af 92       	push	r10
    1618:	9f 92       	push	r9
    161a:	8f 92       	push	r8
    161c:	7f 92       	push	r7
    161e:	6f 92       	push	r6
    1620:	5f 92       	push	r5
    1622:	4f 92       	push	r4
    1624:	3f 92       	push	r3
    1626:	2f 92       	push	r2
    1628:	1f 92       	push	r1
    162a:	11 24       	eor	r1, r1
    162c:	0f 92       	push	r0

	// 3. Save stack pointer of current process
	os_processes[currentProc].sp.as_int = SP;
    162e:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <currentProc>
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	2d b7       	in	r18, 0x3d	; 61
    1636:	3e b7       	in	r19, 0x3e	; 62
    1638:	fc 01       	movw	r30, r24
    163a:	ee 0f       	add	r30, r30
    163c:	ff 1f       	adc	r31, r31
    163e:	e8 0f       	add	r30, r24
    1640:	f9 1f       	adc	r31, r25
    1642:	ee 0f       	add	r30, r30
    1644:	ff 1f       	adc	r31, r31
    1646:	ed 57       	subi	r30, 0x7D	; 125
    1648:	fc 4f       	sbci	r31, 0xFC	; 252
    164a:	33 83       	std	Z+3, r19	; 0x03
    164c:	22 83       	std	Z+2, r18	; 0x02

	// 4. Set stack pointer onto ISR-Stack
	SP = BOTTOM_OF_ISR_STACK;
    164e:	8f ed       	ldi	r24, 0xDF	; 223
    1650:	91 e2       	ldi	r25, 0x21	; 33
    1652:	9e bf       	out	0x3e, r25	; 62
    1654:	8d bf       	out	0x3d, r24	; 61

	// 5. Set process state to ready
	if (os_processes[currentProc].state == OS_PS_RUNNING)
    1656:	10 91 7c 03 	lds	r17, 0x037C	; 0x80037c <currentProc>
    165a:	c1 2f       	mov	r28, r17
    165c:	d0 e0       	ldi	r29, 0x00	; 0
    165e:	fe 01       	movw	r30, r28
    1660:	ee 0f       	add	r30, r30
    1662:	ff 1f       	adc	r31, r31
    1664:	ec 0f       	add	r30, r28
    1666:	fd 1f       	adc	r31, r29
    1668:	ee 0f       	add	r30, r30
    166a:	ff 1f       	adc	r31, r31
    166c:	ed 57       	subi	r30, 0x7D	; 125
    166e:	fc 4f       	sbci	r31, 0xFC	; 252
    1670:	81 81       	ldd	r24, Z+1	; 0x01
    1672:	82 30       	cpi	r24, 0x02	; 2
    1674:	59 f4       	brne	.+22     	; 0x168c <__vector_13+0xa4>
	{
		os_processes[currentProc].state = OS_PS_READY;
    1676:	fe 01       	movw	r30, r28
    1678:	ee 0f       	add	r30, r30
    167a:	ff 1f       	adc	r31, r31
    167c:	ec 0f       	add	r30, r28
    167e:	fd 1f       	adc	r31, r29
    1680:	ee 0f       	add	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	ed 57       	subi	r30, 0x7D	; 125
    1686:	fc 4f       	sbci	r31, 0xFC	; 252
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	81 83       	std	Z+1, r24	; 0x01
	}
	// Note for task 2: Only set to ready if it is currently running because of os_kill

	// In task 2: Save the processes stack checksum
	os_processes[currentProc].checksum = os_getStackChecksum(currentProc);
    168c:	81 2f       	mov	r24, r17
    168e:	4a de       	rcall	.-876    	; 0x1324 <os_getStackChecksum>
    1690:	9e 01       	movw	r18, r28
    1692:	22 0f       	add	r18, r18
    1694:	33 1f       	adc	r19, r19
    1696:	c2 0f       	add	r28, r18
    1698:	d3 1f       	adc	r29, r19
    169a:	cc 0f       	add	r28, r28
    169c:	dd 1f       	adc	r29, r29
    169e:	cd 57       	subi	r28, 0x7D	; 125
    16a0:	dc 4f       	sbci	r29, 0xFC	; 252
    16a2:	8d 83       	std	Y+5, r24	; 0x05

	// In task 2: Check if the stack pointer has an invalid value
	if (!os_isStackInBounds(currentProc))
    16a4:	81 2f       	mov	r24, r17
    16a6:	57 df       	rcall	.-338    	; 0x1556 <os_isStackInBounds>
    16a8:	81 11       	cpse	r24, r1
    16aa:	0b c0       	rjmp	.+22     	; 0x16c2 <__vector_13+0xda>
	{
		os_error("Stack pointer out of bounds in process %d", currentProc);
    16ac:	1f 92       	push	r1
    16ae:	1f 93       	push	r17
    16b0:	82 e2       	ldi	r24, 0x22	; 34
    16b2:	93 e0       	ldi	r25, 0x03	; 3
    16b4:	9f 93       	push	r25
    16b6:	8f 93       	push	r24
    16b8:	21 dd       	rcall	.-1470   	; 0x10fc <os_errorPstr>
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
	}

	// 6. Find next process using the set scheduling strategy

	switch (os_getSchedulingStrategy())
    16c0:	0f 90       	pop	r0
    16c2:	a5 dd       	rcall	.-1206   	; 0x120e <os_getSchedulingStrategy>
    16c4:	88 23       	and	r24, r24
    16c6:	19 f0       	breq	.+6      	; 0x16ce <__vector_13+0xe6>
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	49 f0       	breq	.+18     	; 0x16de <__vector_13+0xf6>
    16cc:	10 c0       	rjmp	.+32     	; 0x16ee <__vector_13+0x106>
	{
		case OS_SS_ROUND_ROBIN:
		currentProc = os_scheduler_RoundRobin(os_processes, currentProc);
    16ce:	60 91 7c 03 	lds	r22, 0x037C	; 0x80037c <currentProc>
    16d2:	83 e8       	ldi	r24, 0x83	; 131
    16d4:	93 e0       	ldi	r25, 0x03	; 3
    16d6:	bf d0       	rcall	.+382    	; 0x1856 <os_scheduler_RoundRobin>
    16d8:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <currentProc>
		break;
		case OS_SS_DYNAMIC_PRIORITY_ROUND_ROBIN:
		currentProc = os_scheduler_DynamicPriorityRoundRobin(os_processes, currentProc);
    16dc:	0a c0       	rjmp	.+20     	; 0x16f2 <__vector_13+0x10a>
    16de:	60 91 7c 03 	lds	r22, 0x037C	; 0x80037c <currentProc>
    16e2:	83 e8       	ldi	r24, 0x83	; 131
    16e4:	93 e0       	ldi	r25, 0x03	; 3
    16e6:	40 d1       	rcall	.+640    	; 0x1968 <os_scheduler_DynamicPriorityRoundRobin>
    16e8:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <currentProc>
		break;
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <__vector_13+0x10a>
		default:
		currentProc = 0;
    16ee:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <currentProc>
		break;
	}

	// In task 2: Check if the checksum changed since the process was interrupted
	if (os_processes[currentProc].checksum != os_getStackChecksum(currentProc))
    16f2:	c0 91 7c 03 	lds	r28, 0x037C	; 0x80037c <currentProc>
    16f6:	8c 2f       	mov	r24, r28
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	fc 01       	movw	r30, r24
    16fc:	ee 0f       	add	r30, r30
    16fe:	ff 1f       	adc	r31, r31
    1700:	e8 0f       	add	r30, r24
    1702:	f9 1f       	adc	r31, r25
    1704:	ee 0f       	add	r30, r30
    1706:	ff 1f       	adc	r31, r31
    1708:	ed 57       	subi	r30, 0x7D	; 125
    170a:	fc 4f       	sbci	r31, 0xFC	; 252
    170c:	d5 81       	ldd	r29, Z+5	; 0x05
    170e:	8c 2f       	mov	r24, r28
    1710:	09 de       	rcall	.-1006   	; 0x1324 <os_getStackChecksum>
    1712:	d8 17       	cp	r29, r24
    1714:	59 f0       	breq	.+22     	; 0x172c <__vector_13+0x144>
	{
		os_error("Checksum mismatch in process %d", currentProc);
    1716:	1f 92       	push	r1
    1718:	cf 93       	push	r28
    171a:	82 e0       	ldi	r24, 0x02	; 2
    171c:	93 e0       	ldi	r25, 0x03	; 3
    171e:	9f 93       	push	r25
    1720:	8f 93       	push	r24
    1722:	ec dc       	rcall	.-1576   	; 0x10fc <os_errorPstr>
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <currentProc>
	}

	// 7. Set the state of the now chosen process to running
	os_processes[currentProc].state = OS_PS_RUNNING;
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	fc 01       	movw	r30, r24
    1734:	ee 0f       	add	r30, r30
    1736:	ff 1f       	adc	r31, r31
    1738:	df 01       	movw	r26, r30
    173a:	a8 0f       	add	r26, r24
    173c:	b9 1f       	adc	r27, r25
    173e:	aa 0f       	add	r26, r26
    1740:	bb 1f       	adc	r27, r27
    1742:	ad 57       	subi	r26, 0x7D	; 125
    1744:	bc 4f       	sbci	r27, 0xFC	; 252
    1746:	22 e0       	ldi	r18, 0x02	; 2
    1748:	11 96       	adiw	r26, 0x01	; 1
    174a:	2c 93       	st	X, r18
    174c:	11 97       	sbiw	r26, 0x01	; 1
    174e:	fd 01       	movw	r30, r26

	// 8. Set SP to where it was when the resuming process was interrupted
	SP = os_processes[currentProc].sp.as_int;
    1750:	82 81       	ldd	r24, Z+2	; 0x02
    1752:	93 81       	ldd	r25, Z+3	; 0x03
    1754:	9e bf       	out	0x3e, r25	; 62
    1756:	8d bf       	out	0x3d, r24	; 61
    1758:	0f 90       	pop	r0

	// 9. Restore runtime context using the well-known macro.
	// This will cause the process to continue where it was interrupted.
	// Any code after the macro won't be executed as it has an reti() instruction at the end.
	restoreContext();
    175a:	1f 90       	pop	r1
    175c:	2f 90       	pop	r2
    175e:	3f 90       	pop	r3
    1760:	4f 90       	pop	r4
    1762:	5f 90       	pop	r5
    1764:	6f 90       	pop	r6
    1766:	7f 90       	pop	r7
    1768:	8f 90       	pop	r8
    176a:	9f 90       	pop	r9
    176c:	af 90       	pop	r10
    176e:	bf 90       	pop	r11
    1770:	cf 90       	pop	r12
    1772:	df 90       	pop	r13
    1774:	ef 90       	pop	r14
    1776:	ff 90       	pop	r15
    1778:	0f 91       	pop	r16
    177a:	1f 91       	pop	r17
    177c:	2f 91       	pop	r18
    177e:	3f 91       	pop	r19
    1780:	4f 91       	pop	r20
    1782:	5f 91       	pop	r21
    1784:	6f 91       	pop	r22
    1786:	7f 91       	pop	r23
    1788:	8f 91       	pop	r24
    178a:	9f 91       	pop	r25
    178c:	af 91       	pop	r26
    178e:	bf 91       	pop	r27
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	ef 91       	pop	r30
    1796:	ff 91       	pop	r31
    1798:	ff bf       	out	0x3f, r31	; 63
    179a:	ff 91       	pop	r31
    179c:	18 95       	reti

0000179e <os_yield>:
    179e:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <criticalSectionCount>
/*!
 * Triggers scheduler to schedule another process.
 */
void os_yield()
{
	if (criticalSectionCount != 0)
    17a2:	81 11       	cpse	r24, r1
    17a4:	04 c0       	rjmp	.+8      	; 0x17ae <os_yield+0x10>
	{
		return;
	}
	cli();
    17a6:	f8 94       	cli
	TCNT2 = 0;
    17a8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
	TIMER2_COMPA_vect();
    17ac:	1d cf       	rjmp	.-454    	; 0x15e8 <__vector_13>
    17ae:	08 95       	ret

000017b0 <os_kill>:
 *
 *  \param pid The process id of the process to be killed
 *  \return True, if the killing process was successful
 */
bool os_kill(process_id_t pid)
{
    17b0:	cf 93       	push	r28
	
	// If the pid is invalid, return false
	if (pid >= MAX_NUMBER_OF_PROCESSES || pid == 0 || os_processes[pid].state == OS_PS_UNUSED)
    17b2:	9f ef       	ldi	r25, 0xFF	; 255
    17b4:	98 0f       	add	r25, r24
    17b6:	97 30       	cpi	r25, 0x07	; 7
    17b8:	60 f5       	brcc	.+88     	; 0x1812 <os_kill+0x62>
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	f9 01       	movw	r30, r18
    17c0:	ee 0f       	add	r30, r30
    17c2:	ff 1f       	adc	r31, r31
    17c4:	e2 0f       	add	r30, r18
    17c6:	f3 1f       	adc	r31, r19
    17c8:	ee 0f       	add	r30, r30
    17ca:	ff 1f       	adc	r31, r31
    17cc:	ed 57       	subi	r30, 0x7D	; 125
    17ce:	fc 4f       	sbci	r31, 0xFC	; 252
    17d0:	91 81       	ldd	r25, Z+1	; 0x01
    17d2:	99 23       	and	r25, r25
    17d4:	01 f1       	breq	.+64     	; 0x1816 <os_kill+0x66>
    17d6:	c8 2f       	mov	r28, r24
	{
		return false;
	}
	os_enterCriticalSection();
    17d8:	1d dd       	rcall	.-1478   	; 0x1214 <os_enterCriticalSection>

	os_getProcessSlot(pid)->state = OS_PS_UNUSED;
    17da:	8c 2f       	mov	r24, r28
    17dc:	fd dc       	rcall	.-1542   	; 0x11d8 <os_getProcessSlot>
    17de:	fc 01       	movw	r30, r24

	// Tidy up the scheduler
	// (Process needs to be removed from ready queue of DPRR)

	os_resetProcessSchedulingInformation(os_getSchedulingStrategy(), pid);
    17e0:	11 82       	std	Z+1, r1	; 0x01
    17e2:	15 dd       	rcall	.-1494   	; 0x120e <os_getSchedulingStrategy>
    17e4:	6c 2f       	mov	r22, r28

	// If the process kills itself, we mustn't return
	if (os_getCurrentProc() == pid)
    17e6:	71 d0       	rcall	.+226    	; 0x18ca <os_resetProcessSchedulingInformation>
    17e8:	08 dd       	rcall	.-1520   	; 0x11fa <os_getCurrentProc>
    17ea:	c8 13       	cpse	r28, r24
	{
		criticalSectionCount = 1;
    17ec:	0e c0       	rjmp	.+28     	; 0x180a <os_kill+0x5a>
    17ee:	81 e0       	ldi	r24, 0x01	; 1
		os_leaveCriticalSection();
    17f0:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <criticalSectionCount>
		sei();
		os_yield();
    17f4:	2e dd       	rcall	.-1444   	; 0x1252 <os_leaveCriticalSection>
    17f6:	78 94       	sei
		while (1)
			printf("Penis");
    17f8:	d2 df       	rcall	.-92     	; 0x179e <os_yield>
    17fa:	8c e1       	ldi	r24, 0x1C	; 28
    17fc:	92 e0       	ldi	r25, 0x02	; 2
    17fe:	9f 93       	push	r25
    1800:	8f 93       	push	r24
    1802:	82 d4       	rcall	.+2308   	; 0x2108 <printf>
    1804:	0f 90       	pop	r0
	}
	os_leaveCriticalSection();
    1806:	0f 90       	pop	r0
    1808:	f8 cf       	rjmp	.-16     	; 0x17fa <os_kill+0x4a>
	os_yield();
    180a:	23 dd       	rcall	.-1466   	; 0x1252 <os_leaveCriticalSection>
    180c:	c8 df       	rcall	.-112    	; 0x179e <os_yield>

	return true;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	03 c0       	rjmp	.+6      	; 0x1818 <os_kill+0x68>
{
	
	// If the pid is invalid, return false
	if (pid >= MAX_NUMBER_OF_PROCESSES || pid == 0 || os_processes[pid].state == OS_PS_UNUSED)
	{
		return false;
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	01 c0       	rjmp	.+2      	; 0x1818 <os_kill+0x68>
    1816:	80 e0       	ldi	r24, 0x00	; 0
	os_leaveCriticalSection();
	os_yield();

	return true;

}
    1818:	cf 91       	pop	r28
    181a:	08 95       	ret

0000181c <os_dispatcher>:
 * This wrapper enables the possibility to perform a few necessary steps after the actual process
 * function has finished.
 */
void os_dispatcher()
{
	process_id_t currentProc = os_getCurrentProc();
    181c:	ee dc       	rcall	.-1572   	; 0x11fa <os_getCurrentProc>
    181e:	c8 2f       	mov	r28, r24
	program_t *function = os_lookupProgramFunction(os_processes[currentProc].progID);
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	fc 01       	movw	r30, r24
    1824:	ee 0f       	add	r30, r30
    1826:	ff 1f       	adc	r31, r31
    1828:	e8 0f       	add	r30, r24
    182a:	f9 1f       	adc	r31, r25
    182c:	ee 0f       	add	r30, r30
    182e:	ff 1f       	adc	r31, r31
    1830:	ed 57       	subi	r30, 0x7D	; 125
    1832:	fc 4f       	sbci	r31, 0xFC	; 252
    1834:	80 81       	ld	r24, Z
    1836:	c2 dc       	rcall	.-1660   	; 0x11bc <os_lookupProgramFunction>
	
	if (function != NULL)
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	11 f0       	breq	.+4      	; 0x1840 <os_dispatcher+0x24>
	function();
    183c:	fc 01       	movw	r30, r24


	os_kill(currentProc);
    183e:	19 95       	eicall
    1840:	8c 2f       	mov	r24, r28


	os_yield();
    1842:	b6 df       	rcall	.-148    	; 0x17b0 <os_kill>
    1844:	ac df       	rcall	.-168    	; 0x179e <os_yield>
	while (1)
		printf("Penis");
    1846:	8c e1       	ldi	r24, 0x1C	; 28
    1848:	92 e0       	ldi	r25, 0x02	; 2
    184a:	9f 93       	push	r25
    184c:	8f 93       	push	r24
    184e:	5c d4       	rcall	.+2232   	; 0x2108 <printf>
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	f8 cf       	rjmp	.-16     	; 0x1846 <os_dispatcher+0x2a>

00001856 <os_scheduler_RoundRobin>:
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the even strategy.
 */
process_id_t os_scheduler_RoundRobin(process_t const processes[], process_id_t current)
{
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	ec 01       	movw	r28, r24

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process

	// Return resulting process id
	
	process_id_t currentProc = os_getCurrentProc();
    185c:	ce dc       	rcall	.-1636   	; 0x11fa <os_getCurrentProc>

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	98 0f       	add	r25, r24
    1862:	0f c0       	rjmp	.+30     	; 0x1882 <os_scheduler_RoundRobin+0x2c>
	{
		if (processes[i].state == OS_PS_READY)
    1864:	29 2f       	mov	r18, r25
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	f9 01       	movw	r30, r18
    186a:	ee 0f       	add	r30, r30
    186c:	ff 1f       	adc	r31, r31
    186e:	e2 0f       	add	r30, r18
    1870:	f3 1f       	adc	r31, r19
    1872:	ee 0f       	add	r30, r30
    1874:	ff 1f       	adc	r31, r31
    1876:	ec 0f       	add	r30, r28
    1878:	fd 1f       	adc	r31, r29
    187a:	21 81       	ldd	r18, Z+1	; 0x01
    187c:	21 30       	cpi	r18, 0x01	; 1
    187e:	f9 f0       	breq	.+62     	; 0x18be <os_scheduler_RoundRobin+0x68>
	// Return resulting process id
	
	process_id_t currentProc = os_getCurrentProc();

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
    1880:	9f 5f       	subi	r25, 0xFF	; 255
    1882:	98 30       	cpi	r25, 0x08	; 8
    1884:	78 f3       	brcs	.-34     	; 0x1864 <os_scheduler_RoundRobin+0xe>
    1886:	91 e0       	ldi	r25, 0x01	; 1
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <os_scheduler_RoundRobin+0x52>
			return i; // Return resulting process id
		}
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
	{
		if (processes[i].state == OS_PS_READY)
    188a:	29 2f       	mov	r18, r25
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	f9 01       	movw	r30, r18
    1890:	ee 0f       	add	r30, r30
    1892:	ff 1f       	adc	r31, r31
    1894:	e2 0f       	add	r30, r18
    1896:	f3 1f       	adc	r31, r19
    1898:	ee 0f       	add	r30, r30
    189a:	ff 1f       	adc	r31, r31
    189c:	ec 0f       	add	r30, r28
    189e:	fd 1f       	adc	r31, r29
    18a0:	21 81       	ldd	r18, Z+1	; 0x01
    18a2:	21 30       	cpi	r18, 0x01	; 1
    18a4:	71 f0       	breq	.+28     	; 0x18c2 <os_scheduler_RoundRobin+0x6c>
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
		}
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
    18a6:	9f 5f       	subi	r25, 0xFF	; 255
    18a8:	49 2f       	mov	r20, r25
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	2f 5f       	subi	r18, 0xFF	; 255
    18b2:	3f 4f       	sbci	r19, 0xFF	; 255
    18b4:	42 17       	cp	r20, r18
    18b6:	53 07       	cpc	r21, r19
    18b8:	44 f3       	brlt	.-48     	; 0x188a <os_scheduler_RoundRobin+0x34>
			return i; // Return resulting process id
		}
	}

	// If no process except idle process ready, choose idle process
	return 0; // Return resulting process id
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	03 c0       	rjmp	.+6      	; 0x18c4 <os_scheduler_RoundRobin+0x6e>
	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
	{
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
    18be:	89 2f       	mov	r24, r25
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <os_scheduler_RoundRobin+0x6e>
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
	{
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
    18c2:	89 2f       	mov	r24, r25
	}

	// If no process except idle process ready, choose idle process
	return 0; // Return resulting process id

}
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	08 95       	ret

000018ca <os_resetProcessSchedulingInformation>:
 *
 * \param strategy The scheduling strategy currently in use
 * \param id  The process slot to erase state for
 */
void os_resetProcessSchedulingInformation(scheduling_strategy_t strategy, process_id_t id)
{
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
	
	if (strategy == OS_SS_ROUND_ROBIN)
    18ce:	88 23       	and	r24, r24
    18d0:	01 f1       	breq	.+64     	; 0x1912 <os_resetProcessSchedulingInformation+0x48>
    18d2:	d6 2f       	mov	r29, r22
    18d4:	c0 e0       	ldi	r28, 0x00	; 0
    18d6:	09 c0       	rjmp	.+18     	; 0x18ea <os_resetProcessSchedulingInformation+0x20>
		return;
	}

	for (uint8_t i = OS_PRIO_HIGH; i <= OS_PRIO_LOW; i++)
	{
		rq_remove(&(schedulingInfo.queues_ready[i]), id);
    18d8:	2b e0       	ldi	r18, 0x0B	; 11
    18da:	c2 9f       	mul	r28, r18
    18dc:	c0 01       	movw	r24, r0
    18de:	11 24       	eor	r1, r1
    18e0:	6d 2f       	mov	r22, r29
    18e2:	8b 52       	subi	r24, 0x2B	; 43
    18e4:	9c 4f       	sbci	r25, 0xFC	; 252
    18e6:	6b d8       	rcall	.-3882   	; 0x9be <rq_remove>
	if (strategy == OS_SS_ROUND_ROBIN)
	{
		return;
	}

	for (uint8_t i = OS_PRIO_HIGH; i <= OS_PRIO_LOW; i++)
    18e8:	cf 5f       	subi	r28, 0xFF	; 255
    18ea:	c3 30       	cpi	r28, 0x03	; 3
    18ec:	a8 f3       	brcs	.-22     	; 0x18d8 <os_resetProcessSchedulingInformation+0xe>
	{
		rq_remove(&(schedulingInfo.queues_ready[i]), id);
	}
	if (os_getProcessSlot(id)->state == OS_PS_READY)
    18ee:	8d 2f       	mov	r24, r29
    18f0:	73 dc       	rcall	.-1818   	; 0x11d8 <os_getProcessSlot>
    18f2:	fc 01       	movw	r30, r24
    18f4:	81 81       	ldd	r24, Z+1	; 0x01
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	61 f4       	brne	.+24     	; 0x1912 <os_resetProcessSchedulingInformation+0x48>
	rq_push(&(schedulingInfo.queues_ready[os_getProcessSlot(id)->priority]), id);
    18fa:	8d 2f       	mov	r24, r29
    18fc:	6d dc       	rcall	.-1830   	; 0x11d8 <os_getProcessSlot>
    18fe:	fc 01       	movw	r30, r24
    1900:	84 81       	ldd	r24, Z+4	; 0x04
    1902:	fb e0       	ldi	r31, 0x0B	; 11
    1904:	8f 9f       	mul	r24, r31
    1906:	c0 01       	movw	r24, r0
    1908:	11 24       	eor	r1, r1
    190a:	6d 2f       	mov	r22, r29
    190c:	8b 52       	subi	r24, 0x2B	; 43
    190e:	9c 4f       	sbci	r25, 0xFC	; 252
    1910:	31 d8       	rcall	.-3998   	; 0x974 <rq_push>
}
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <os_resetSchedulingInformation>:
 *  and is done when the strategy is changed through os_setSchedulingStrategy
 *
 * \param strategy  The strategy to reset information for
 */
void os_resetSchedulingInformation(scheduling_strategy_t strategy)
{
    1918:	cf 93       	push	r28
	 if (strategy == OS_SS_ROUND_ROBIN)
    191a:	88 23       	and	r24, r24
    191c:	19 f1       	breq	.+70     	; 0x1964 <os_resetSchedulingInformation+0x4c>
    191e:	c0 e0       	ldi	r28, 0x00	; 0
    1920:	08 c0       	rjmp	.+16     	; 0x1932 <os_resetSchedulingInformation+0x1a>
	 else
	 //terminal_log_printf_p(PSTR("os_resetSchedulingInformation() -> "), PSTR("Resetting scheduling information\n"));

	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
	 {
		 rq_clear(&schedulingInfo.queues_ready[i]);
    1922:	2b e0       	ldi	r18, 0x0B	; 11
    1924:	c2 9f       	mul	r28, r18
    1926:	c0 01       	movw	r24, r0
    1928:	11 24       	eor	r1, r1
    192a:	8b 52       	subi	r24, 0x2B	; 43
    192c:	9c 4f       	sbci	r25, 0xFC	; 252
    192e:	43 d8       	rcall	.-3962   	; 0x9b6 <rq_clear>
		return;
	 }
	 else
	 //terminal_log_printf_p(PSTR("os_resetSchedulingInformation() -> "), PSTR("Resetting scheduling information\n"));

	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
    1930:	cf 5f       	subi	r28, 0xFF	; 255
    1932:	c3 30       	cpi	r28, 0x03	; 3
    1934:	b0 f3       	brcs	.-20     	; 0x1922 <os_resetSchedulingInformation+0xa>
    1936:	c1 e0       	ldi	r28, 0x01	; 1
    1938:	13 c0       	rjmp	.+38     	; 0x1960 <os_resetSchedulingInformation+0x48>
		 rq_clear(&schedulingInfo.queues_ready[i]);
	 }

	 for (process_id_t pid = 1; pid < MAX_NUMBER_OF_PROCESSES; pid++)
	 {
		 if (os_getProcessSlot(pid)->state == OS_PS_READY)
    193a:	8c 2f       	mov	r24, r28
    193c:	4d dc       	rcall	.-1894   	; 0x11d8 <os_getProcessSlot>
    193e:	fc 01       	movw	r30, r24
    1940:	81 81       	ldd	r24, Z+1	; 0x01
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	61 f4       	brne	.+24     	; 0x195e <os_resetSchedulingInformation+0x46>
		 {
			 rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(pid)->priority], pid);
    1946:	8c 2f       	mov	r24, r28
    1948:	47 dc       	rcall	.-1906   	; 0x11d8 <os_getProcessSlot>
    194a:	fc 01       	movw	r30, r24
    194c:	84 81       	ldd	r24, Z+4	; 0x04
    194e:	fb e0       	ldi	r31, 0x0B	; 11
    1950:	8f 9f       	mul	r24, r31
    1952:	c0 01       	movw	r24, r0
    1954:	11 24       	eor	r1, r1
    1956:	6c 2f       	mov	r22, r28
    1958:	8b 52       	subi	r24, 0x2B	; 43
    195a:	9c 4f       	sbci	r25, 0xFC	; 252
    195c:	0b d8       	rcall	.-4074   	; 0x974 <rq_push>
	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
	 {
		 rq_clear(&schedulingInfo.queues_ready[i]);
	 }

	 for (process_id_t pid = 1; pid < MAX_NUMBER_OF_PROCESSES; pid++)
    195e:	cf 5f       	subi	r28, 0xFF	; 255
    1960:	c8 30       	cpi	r28, 0x08	; 8
    1962:	58 f3       	brcs	.-42     	; 0x193a <os_resetSchedulingInformation+0x22>
		 if (os_getProcessSlot(pid)->state == OS_PS_READY)
		 {
			 rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(pid)->priority], pid);
		 }
	 }
}
    1964:	cf 91       	pop	r28
    1966:	08 95       	ret

00001968 <os_scheduler_DynamicPriorityRoundRobin>:
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the dynamic priority round-robin strategy.
 */
process_id_t os_scheduler_DynamicPriorityRoundRobin(process_t const processes[], process_id_t current)
{
    1968:	df 92       	push	r13
    196a:	ef 92       	push	r14
    196c:	ff 92       	push	r15
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	d6 2e       	mov	r13, r22

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    1978:	c0 e0       	ldi	r28, 0x00	; 0
    197a:	d0 e0       	ldi	r29, 0x00	; 0
    197c:	21 c0       	rjmp	.+66     	; 0x19c0 <os_scheduler_DynamicPriorityRoundRobin+0x58>
	{

		if (!rq_isEmpty(&schedulingInfo.queues_ready[i + 1]))
    197e:	7e 01       	movw	r14, r28
    1980:	2f ef       	ldi	r18, 0xFF	; 255
    1982:	e2 1a       	sub	r14, r18
    1984:	f2 0a       	sbc	r15, r18
    1986:	8b e0       	ldi	r24, 0x0B	; 11
    1988:	8e 9d       	mul	r24, r14
    198a:	80 01       	movw	r16, r0
    198c:	8f 9d       	mul	r24, r15
    198e:	10 0d       	add	r17, r0
    1990:	11 24       	eor	r1, r1
    1992:	0b 52       	subi	r16, 0x2B	; 43
    1994:	1c 4f       	sbci	r17, 0xFC	; 252
    1996:	c8 01       	movw	r24, r16
    1998:	0e 94 80 04 	call	0x900	; 0x900 <rq_isEmpty>
    199c:	81 11       	cpse	r24, r1
    199e:	0f c0       	rjmp	.+30     	; 0x19be <os_scheduler_DynamicPriorityRoundRobin+0x56>
		{
			process_id_t pid = rq_pop(&schedulingInfo.queues_ready[i + 1]);
    19a0:	c8 01       	movw	r24, r16
    19a2:	0e 94 87 04 	call	0x90e	; 0x90e <rq_pop>

			rq_push(&schedulingInfo.queues_ready[i], pid);
    19a6:	9b e0       	ldi	r25, 0x0B	; 11
    19a8:	9c 9f       	mul	r25, r28
    19aa:	90 01       	movw	r18, r0
    19ac:	9d 9f       	mul	r25, r29
    19ae:	30 0d       	add	r19, r0
    19b0:	11 24       	eor	r1, r1
    19b2:	68 2f       	mov	r22, r24
    19b4:	c9 01       	movw	r24, r18
    19b6:	8b 52       	subi	r24, 0x2B	; 43
    19b8:	9c 4f       	sbci	r25, 0xFC	; 252
    19ba:	0e 94 ba 04 	call	0x974	; 0x974 <rq_push>
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the dynamic priority round-robin strategy.
 */
process_id_t os_scheduler_DynamicPriorityRoundRobin(process_t const processes[], process_id_t current)
{
    19be:	e7 01       	movw	r28, r14

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    19c0:	c2 30       	cpi	r28, 0x02	; 2
    19c2:	d1 05       	cpc	r29, r1
    19c4:	e4 f2       	brlt	.-72     	; 0x197e <os_scheduler_DynamicPriorityRoundRobin+0x16>
		else
		{		}
	}

	// 2. Push current process to the ready queue
	if (os_getProcessSlot(current)->state == OS_PS_READY)
    19c6:	8d 2d       	mov	r24, r13
    19c8:	07 dc       	rcall	.-2034   	; 0x11d8 <os_getProcessSlot>
    19ca:	fc 01       	movw	r30, r24
    19cc:	81 81       	ldd	r24, Z+1	; 0x01
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	69 f4       	brne	.+26     	; 0x19ec <os_scheduler_DynamicPriorityRoundRobin+0x84>
	{
		rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(current)->priority], current);
    19d2:	8d 2d       	mov	r24, r13
    19d4:	01 dc       	rcall	.-2046   	; 0x11d8 <os_getProcessSlot>
    19d6:	fc 01       	movw	r30, r24
    19d8:	84 81       	ldd	r24, Z+4	; 0x04
    19da:	fb e0       	ldi	r31, 0x0B	; 11
    19dc:	8f 9f       	mul	r24, r31
    19de:	c0 01       	movw	r24, r0
    19e0:	11 24       	eor	r1, r1
    19e2:	6d 2d       	mov	r22, r13
    19e4:	8b 52       	subi	r24, 0x2B	; 43
    19e6:	9c 4f       	sbci	r25, 0xFC	; 252
    19e8:	0e 94 ba 04 	call	0x974	; 0x974 <rq_push>

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    19ec:	c0 e0       	ldi	r28, 0x00	; 0
    19ee:	d0 e0       	ldi	r29, 0x00	; 0
    19f0:	12 c0       	rjmp	.+36     	; 0x1a16 <os_scheduler_DynamicPriorityRoundRobin+0xae>
	}
	
	// 3. Get next process from ready queue
	for (int i = 0; i < PRIORITY_COUNT; i++)
	{
		if (!rq_isEmpty(&schedulingInfo.queues_ready[i]))
    19f2:	8b e0       	ldi	r24, 0x0B	; 11
    19f4:	8c 9f       	mul	r24, r28
    19f6:	80 01       	movw	r16, r0
    19f8:	8d 9f       	mul	r24, r29
    19fa:	10 0d       	add	r17, r0
    19fc:	11 24       	eor	r1, r1
    19fe:	0b 52       	subi	r16, 0x2B	; 43
    1a00:	1c 4f       	sbci	r17, 0xFC	; 252
    1a02:	c8 01       	movw	r24, r16
    1a04:	0e 94 80 04 	call	0x900	; 0x900 <rq_isEmpty>
    1a08:	81 11       	cpse	r24, r1
    1a0a:	04 c0       	rjmp	.+8      	; 0x1a14 <os_scheduler_DynamicPriorityRoundRobin+0xac>
		{

			process_id_t next_pid = rq_pop(&schedulingInfo.queues_ready[i]);
    1a0c:	c8 01       	movw	r24, r16
    1a0e:	0e 94 87 04 	call	0x90e	; 0x90e <rq_pop>
			return next_pid;
    1a12:	05 c0       	rjmp	.+10     	; 0x1a1e <os_scheduler_DynamicPriorityRoundRobin+0xb6>
	{
		rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(current)->priority], current);
	}
	
	// 3. Get next process from ready queue
	for (int i = 0; i < PRIORITY_COUNT; i++)
    1a14:	21 96       	adiw	r28, 0x01	; 1
    1a16:	c3 30       	cpi	r28, 0x03	; 3
    1a18:	d1 05       	cpc	r29, r1
    1a1a:	5c f3       	brlt	.-42     	; 0x19f2 <os_scheduler_DynamicPriorityRoundRobin+0x8a>
		}

	}

	// If no process is ready, return idle process (0)
	return 0;
    1a1c:	80 e0       	ldi	r24, 0x00	; 0

}
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	ff 90       	pop	r15
    1a28:	ef 90       	pop	r14
    1a2a:	df 90       	pop	r13
    1a2c:	08 95       	ret

00001a2e <strategyImplemented>:
PROGRAM(6, DONTSTART)
{
    testProgram(6);
}

PROGRAM(7, DONTSTART)
    1a2e:	ff 92       	push	r15
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	e0 97       	sbiw	r28, 0x30	; 48
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	cd bf       	out	0x3d, r28	; 61
    1a48:	f1 2c       	mov	r15, r1
    1a4a:	18 c0       	rjmp	.+48     	; 0x1a7c <strategyImplemented+0x4e>
    1a4c:	0f 2d       	mov	r16, r15
    1a4e:	10 e0       	ldi	r17, 0x00	; 0
    1a50:	8f 2d       	mov	r24, r15
    1a52:	c2 db       	rcall	.-2172   	; 0x11d8 <os_getProcessSlot>
    1a54:	fc 01       	movw	r30, r24
    1a56:	d8 01       	movw	r26, r16
    1a58:	aa 0f       	add	r26, r26
    1a5a:	bb 1f       	adc	r27, r27
    1a5c:	a0 0f       	add	r26, r16
    1a5e:	b1 1f       	adc	r27, r17
    1a60:	aa 0f       	add	r26, r26
    1a62:	bb 1f       	adc	r27, r27
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	8c 0f       	add	r24, r28
    1a6a:	9d 1f       	adc	r25, r29
    1a6c:	a8 0f       	add	r26, r24
    1a6e:	b9 1f       	adc	r27, r25
    1a70:	96 e0       	ldi	r25, 0x06	; 6
    1a72:	01 90       	ld	r0, Z+
    1a74:	0d 92       	st	X+, r0
    1a76:	9a 95       	dec	r25
    1a78:	e1 f7       	brne	.-8      	; 0x1a72 <strategyImplemented+0x44>
    1a7a:	f3 94       	inc	r15
    1a7c:	97 e0       	ldi	r25, 0x07	; 7
    1a7e:	9f 15       	cp	r25, r15
    1a80:	28 f7       	brcc	.-54     	; 0x1a4c <strategyImplemented+0x1e>
    1a82:	c5 db       	rcall	.-2166   	; 0x120e <os_getSchedulingStrategy>
    1a84:	88 23       	and	r24, r24
    1a86:	19 f0       	breq	.+6      	; 0x1a8e <strategyImplemented+0x60>
    1a88:	81 30       	cpi	r24, 0x01	; 1
    1a8a:	41 f0       	breq	.+16     	; 0x1a9c <strategyImplemented+0x6e>
    1a8c:	0e c0       	rjmp	.+28     	; 0x1aaa <strategyImplemented+0x7c>
    1a8e:	b5 db       	rcall	.-2198   	; 0x11fa <os_getCurrentProc>
    1a90:	68 2f       	mov	r22, r24
    1a92:	ce 01       	movw	r24, r28
    1a94:	01 96       	adiw	r24, 0x01	; 1
    1a96:	df de       	rcall	.-578    	; 0x1856 <os_scheduler_RoundRobin>
    1a98:	18 2f       	mov	r17, r24
    1a9a:	0e c0       	rjmp	.+28     	; 0x1ab8 <strategyImplemented+0x8a>
    1a9c:	ae db       	rcall	.-2212   	; 0x11fa <os_getCurrentProc>
    1a9e:	68 2f       	mov	r22, r24
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	01 96       	adiw	r24, 0x01	; 1
    1aa4:	61 df       	rcall	.-318    	; 0x1968 <os_scheduler_DynamicPriorityRoundRobin>
    1aa6:	18 2f       	mov	r17, r24
    1aa8:	07 c0       	rjmp	.+14     	; 0x1ab8 <strategyImplemented+0x8a>
    1aaa:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1aae:	8a ed       	ldi	r24, 0xDA	; 218
    1ab0:	94 e0       	ldi	r25, 0x04	; 4
    1ab2:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1ab6:	ff cf       	rjmp	.-2      	; 0x1ab6 <strategyImplemented+0x88>
    1ab8:	aa db       	rcall	.-2220   	; 0x120e <os_getSchedulingStrategy>
    1aba:	2e df       	rcall	.-420    	; 0x1918 <os_resetSchedulingInformation>
    1abc:	11 11       	cpse	r17, r1
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <strategyImplemented+0x96>
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <strategyImplemented+0x98>
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	e0 96       	adiw	r28, 0x30	; 48
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	1f 91       	pop	r17
    1ad8:	0f 91       	pop	r16
    1ada:	ff 90       	pop	r15
    1adc:	08 95       	ret

00001ade <setActiveStrategy>:
    1ade:	cf 93       	push	r28
    1ae0:	88 23       	and	r24, r24
    1ae2:	19 f0       	breq	.+6      	; 0x1aea <setActiveStrategy+0xc>
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	49 f0       	breq	.+18     	; 0x1afa <setActiveStrategy+0x1c>
    1ae8:	10 c0       	rjmp	.+32     	; 0x1b0a <setActiveStrategy+0x2c>
    1aea:	8f ec       	ldi	r24, 0xCF	; 207
    1aec:	94 e0       	ldi	r25, 0x04	; 4
    1aee:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	85 db       	rcall	.-2294   	; 0x1200 <os_setSchedulingStrategy>
    1af6:	c0 e0       	ldi	r28, 0x00	; 0
    1af8:	09 c0       	rjmp	.+18     	; 0x1b0c <setActiveStrategy+0x2e>
    1afa:	84 eb       	ldi	r24, 0xB4	; 180
    1afc:	94 e0       	ldi	r25, 0x04	; 4
    1afe:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	7d db       	rcall	.-2310   	; 0x1200 <os_setSchedulingStrategy>
    1b06:	c1 e0       	ldi	r28, 0x01	; 1
    1b08:	01 c0       	rjmp	.+2      	; 0x1b0c <setActiveStrategy+0x2e>
    1b0a:	c0 e0       	ldi	r28, 0x00	; 0
    1b0c:	80 ed       	ldi	r24, 0xD0	; 208
    1b0e:	97 e0       	ldi	r25, 0x07	; 7
    1b10:	4d da       	rcall	.-2918   	; 0xfac <delayMs>
    1b12:	8c 2f       	mov	r24, r28
    1b14:	cf 91       	pop	r28
    1b16:	08 95       	ret

00001b18 <performStrategyTest>:
    1b18:	cf 93       	push	r28
    1b1a:	c8 2f       	mov	r28, r24
    1b1c:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1b20:	8c 2f       	mov	r24, r28
    1b22:	dd df       	rcall	.-70     	; 0x1ade <setActiveStrategy>
    1b24:	c8 2f       	mov	r28, r24
    1b26:	83 df       	rcall	.-250    	; 0x1a2e <strategyImplemented>
    1b28:	81 11       	cpse	r24, r1
    1b2a:	0a c0       	rjmp	.+20     	; 0x1b40 <performStrategyTest+0x28>
    1b2c:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1b30:	89 e9       	ldi	r24, 0x99	; 153
    1b32:	94 e0       	ldi	r25, 0x04	; 4
    1b34:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1b38:	80 ed       	ldi	r24, 0xD0	; 208
    1b3a:	97 e0       	ldi	r25, 0x07	; 7
    1b3c:	37 da       	rcall	.-2962   	; 0xfac <delayMs>
    1b3e:	67 c0       	rjmp	.+206    	; 0x1c0e <performStrategyTest+0xf6>
    1b40:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <i>
    1b44:	0c c0       	rjmp	.+24     	; 0x1b5e <performStrategyTest+0x46>
    1b46:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <i>
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	8e 0f       	add	r24, r30
    1b4e:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <i>
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	ea 50       	subi	r30, 0x0A	; 10
    1b56:	fc 4f       	sbci	r31, 0xFC	; 252
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	80 83       	st	Z, r24
    1b5c:	45 dd       	rcall	.-1398   	; 0x15e8 <__vector_13>
    1b5e:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <i>
    1b62:	80 32       	cpi	r24, 0x20	; 32
    1b64:	80 f3       	brcs	.-32     	; 0x1b46 <performStrategyTest+0x2e>
    1b66:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1b6a:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <i>
    1b6e:	0e c0       	rjmp	.+28     	; 0x1b8c <performStrategyTest+0x74>
    1b70:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <i>
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	ea 50       	subi	r30, 0x0A	; 10
    1b78:	fc 4f       	sbci	r31, 0xFC	; 252
    1b7a:	80 81       	ld	r24, Z
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 3b 04 	call	0x876	; 0x876 <lcd_writeDec>
    1b82:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <i>
    1b86:	8f 5f       	subi	r24, 0xFF	; 255
    1b88:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <i>
    1b8c:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <i>
    1b90:	80 32       	cpi	r24, 0x20	; 32
    1b92:	70 f3       	brcs	.-36     	; 0x1b70 <performStrategyTest+0x58>
    1b94:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <i>
    1b98:	33 c0       	rjmp	.+102    	; 0x1c00 <performStrategyTest+0xe8>
    1b9a:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <i>
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	ea 50       	subi	r30, 0x0A	; 10
    1ba2:	fc 4f       	sbci	r31, 0xFC	; 252
    1ba4:	80 81       	ld	r24, Z
    1ba6:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <i>
    1baa:	20 e2       	ldi	r18, 0x20	; 32
    1bac:	c2 9f       	mul	r28, r18
    1bae:	f0 01       	movw	r30, r0
    1bb0:	11 24       	eor	r1, r1
    1bb2:	e9 0f       	add	r30, r25
    1bb4:	f1 1d       	adc	r31, r1
    1bb6:	e5 51       	subi	r30, 0x15	; 21
    1bb8:	fb 4f       	sbci	r31, 0xFB	; 251
    1bba:	e4 91       	lpm	r30, Z
    1bbc:	8e 17       	cp	r24, r30
    1bbe:	71 f0       	breq	.+28     	; 0x1bdc <performStrategyTest+0xc4>
    1bc0:	60 91 7d 03 	lds	r22, 0x037D	; 0x80037d <i>
    1bc4:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <i>
    1bc8:	6f 70       	andi	r22, 0x0F	; 15
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 31       	cpi	r25, 0x10	; 16
    1bce:	08 f4       	brcc	.+2      	; 0x1bd2 <performStrategyTest+0xba>
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	0e 94 af 03 	call	0x75e	; 0x75e <lcd_goto>
    1bd6:	0e 94 ac 03 	call	0x758	; 0x758 <lcd_blinkOn>
    1bda:	ff cf       	rjmp	.-2      	; 0x1bda <performStrategyTest+0xc2>
    1bdc:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <i>
    1be0:	8f 31       	cpi	r24, 0x1F	; 31
    1be2:	49 f4       	brne	.+18     	; 0x1bf6 <performStrategyTest+0xde>
    1be4:	80 ed       	ldi	r24, 0xD0	; 208
    1be6:	97 e0       	ldi	r25, 0x07	; 7
    1be8:	e1 d9       	rcall	.-3134   	; 0xfac <delayMs>
    1bea:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1bee:	86 e9       	ldi	r24, 0x96	; 150
    1bf0:	94 e0       	ldi	r25, 0x04	; 4
    1bf2:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1bf6:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <i>
    1bfa:	8f 5f       	subi	r24, 0xFF	; 255
    1bfc:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <i>
    1c00:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <i>
    1c04:	80 32       	cpi	r24, 0x20	; 32
    1c06:	48 f2       	brcs	.-110    	; 0x1b9a <performStrategyTest+0x82>
    1c08:	80 ed       	ldi	r24, 0xD0	; 208
    1c0a:	97 e0       	ldi	r25, 0x07	; 7
    1c0c:	cf d9       	rcall	.-3170   	; 0xfac <delayMs>
    1c0e:	cf 91       	pop	r28
    1c10:	08 95       	ret

00001c12 <performSchedulabilityTest>:
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	18 2f       	mov	r17, r24
    1c1c:	d6 2f       	mov	r29, r22
    1c1e:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1c22:	81 2f       	mov	r24, r17
    1c24:	5c df       	rcall	.-328    	; 0x1ade <setActiveStrategy>
    1c26:	03 df       	rcall	.-506    	; 0x1a2e <strategyImplemented>
    1c28:	81 11       	cpse	r24, r1
    1c2a:	3d c0       	rjmp	.+122    	; 0x1ca6 <performSchedulabilityTest+0x94>
    1c2c:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1c30:	8b e7       	ldi	r24, 0x7B	; 123
    1c32:	94 e0       	ldi	r25, 0x04	; 4
    1c34:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1c38:	80 ed       	ldi	r24, 0xD0	; 208
    1c3a:	97 e0       	ldi	r25, 0x07	; 7
    1c3c:	b7 d9       	rcall	.-3218   	; 0xfac <delayMs>
    1c3e:	7c c0       	rjmp	.+248    	; 0x1d38 <performSchedulabilityTest+0x126>
    1c40:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <i>
    1c44:	0c c0       	rjmp	.+24     	; 0x1c5e <performSchedulabilityTest+0x4c>
    1c46:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <i>
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	8e 0f       	add	r24, r30
    1c4e:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <i>
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	ea 50       	subi	r30, 0x0A	; 10
    1c56:	fc 4f       	sbci	r31, 0xFC	; 252
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	80 83       	st	Z, r24
    1c5c:	c5 dc       	rcall	.-1654   	; 0x15e8 <__vector_13>
    1c5e:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <i>
    1c62:	80 32       	cpi	r24, 0x20	; 32
    1c64:	80 f3       	brcs	.-32     	; 0x1c46 <performSchedulabilityTest+0x34>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	0e c0       	rjmp	.+28     	; 0x1c86 <performSchedulabilityTest+0x74>
    1c6a:	e8 2f       	mov	r30, r24
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	ea 50       	subi	r30, 0x0A	; 10
    1c70:	fc 4f       	sbci	r31, 0xFC	; 252
    1c72:	90 81       	ld	r25, Z
    1c74:	21 e0       	ldi	r18, 0x01	; 1
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <performSchedulabilityTest+0x6c>
    1c7a:	22 0f       	add	r18, r18
    1c7c:	33 1f       	adc	r19, r19
    1c7e:	9a 95       	dec	r25
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <performSchedulabilityTest+0x68>
    1c82:	c2 2b       	or	r28, r18
    1c84:	8f 5f       	subi	r24, 0xFF	; 255
    1c86:	80 32       	cpi	r24, 0x20	; 32
    1c88:	80 f3       	brcs	.-32     	; 0x1c6a <performSchedulabilityTest+0x58>
    1c8a:	cd 13       	cpse	r28, r29
    1c8c:	0a c0       	rjmp	.+20     	; 0x1ca2 <performSchedulabilityTest+0x90>
    1c8e:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1c92:	88 e7       	ldi	r24, 0x78	; 120
    1c94:	94 e0       	ldi	r25, 0x04	; 4
    1c96:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1c9a:	80 ed       	ldi	r24, 0xD0	; 208
    1c9c:	97 e0       	ldi	r25, 0x07	; 7
    1c9e:	86 d9       	rcall	.-3316   	; 0xfac <delayMs>
    1ca0:	4b c0       	rjmp	.+150    	; 0x1d38 <performSchedulabilityTest+0x126>
    1ca2:	0f 5f       	subi	r16, 0xFF	; 255
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <performSchedulabilityTest+0x98>
    1ca6:	00 e0       	ldi	r16, 0x00	; 0
    1ca8:	c0 e0       	ldi	r28, 0x00	; 0
    1caa:	03 30       	cpi	r16, 0x03	; 3
    1cac:	48 f2       	brcs	.-110    	; 0x1c40 <performSchedulabilityTest+0x2e>
    1cae:	0c 2f       	mov	r16, r28
    1cb0:	00 95       	com	r16
    1cb2:	0d 23       	and	r16, r29
    1cb4:	d0 95       	com	r29
    1cb6:	cd 23       	and	r28, r29
    1cb8:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1cbc:	11 23       	and	r17, r17
    1cbe:	19 f0       	breq	.+6      	; 0x1cc6 <performSchedulabilityTest+0xb4>
    1cc0:	11 30       	cpi	r17, 0x01	; 1
    1cc2:	31 f0       	breq	.+12     	; 0x1cd0 <performSchedulabilityTest+0xbe>
    1cc4:	09 c0       	rjmp	.+18     	; 0x1cd8 <performSchedulabilityTest+0xc6>
    1cc6:	85 e6       	ldi	r24, 0x65	; 101
    1cc8:	94 e0       	ldi	r25, 0x04	; 4
    1cca:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1cce:	04 c0       	rjmp	.+8      	; 0x1cd8 <performSchedulabilityTest+0xc6>
    1cd0:	88 e5       	ldi	r24, 0x58	; 88
    1cd2:	94 e0       	ldi	r25, 0x04	; 4
    1cd4:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1cd8:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <lcd_line2>
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	29 c0       	rjmp	.+82     	; 0x1d32 <performSchedulabilityTest+0x120>
    1ce0:	20 2f       	mov	r18, r16
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	08 2e       	mov	r0, r24
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <performSchedulabilityTest+0xda>
    1ce8:	35 95       	asr	r19
    1cea:	27 95       	ror	r18
    1cec:	0a 94       	dec	r0
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <performSchedulabilityTest+0xd6>
    1cf0:	20 ff       	sbrs	r18, 0
    1cf2:	0a c0       	rjmp	.+20     	; 0x1d08 <performSchedulabilityTest+0xf6>
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	0e 94 3b 04 	call	0x876	; 0x876 <lcd_writeDec>
    1cfa:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <lcd_line2>
    1cfe:	88 e4       	ldi	r24, 0x48	; 72
    1d00:	94 e0       	ldi	r25, 0x04	; 4
    1d02:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1d06:	17 c0       	rjmp	.+46     	; 0x1d36 <performSchedulabilityTest+0x124>
    1d08:	2c 2f       	mov	r18, r28
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	08 2e       	mov	r0, r24
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <performSchedulabilityTest+0x102>
    1d10:	35 95       	asr	r19
    1d12:	27 95       	ror	r18
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <performSchedulabilityTest+0xfe>
    1d18:	20 ff       	sbrs	r18, 0
    1d1a:	0a c0       	rjmp	.+20     	; 0x1d30 <performSchedulabilityTest+0x11e>
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	0e 94 3b 04 	call	0x876	; 0x876 <lcd_writeDec>
    1d22:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <lcd_line2>
    1d26:	89 e3       	ldi	r24, 0x39	; 57
    1d28:	94 e0       	ldi	r25, 0x04	; 4
    1d2a:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1d2e:	03 c0       	rjmp	.+6      	; 0x1d36 <performSchedulabilityTest+0x124>
    1d30:	8f 5f       	subi	r24, 0xFF	; 255
    1d32:	88 30       	cpi	r24, 0x08	; 8
    1d34:	a8 f2       	brcs	.-86     	; 0x1ce0 <performSchedulabilityTest+0xce>
    1d36:	ff cf       	rjmp	.-2      	; 0x1d36 <performSchedulabilityTest+0x124>
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	1f 91       	pop	r17
    1d3e:	0f 91       	pop	r16
    1d40:	08 95       	ret

00001d42 <performScheduleIdleTest>:
    1d42:	ef 92       	push	r14
    1d44:	ff 92       	push	r15
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	28 97       	sbiw	r28, 0x08	; 8
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	18 2f       	mov	r17, r24
    1d60:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1d64:	81 2f       	mov	r24, r17
    1d66:	bb de       	rcall	.-650    	; 0x1ade <setActiveStrategy>
    1d68:	62 de       	rcall	.-828    	; 0x1a2e <strategyImplemented>
    1d6a:	81 11       	cpse	r24, r1
    1d6c:	1d c0       	rjmp	.+58     	; 0x1da8 <performScheduleIdleTest+0x66>
    1d6e:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1d72:	8e e1       	ldi	r24, 0x1E	; 30
    1d74:	94 e0       	ldi	r25, 0x04	; 4
    1d76:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1d7a:	80 ed       	ldi	r24, 0xD0	; 208
    1d7c:	97 e0       	ldi	r25, 0x07	; 7
    1d7e:	16 d9       	rcall	.-3540   	; 0xfac <delayMs>
    1d80:	63 c0       	rjmp	.+198    	; 0x1e48 <performScheduleIdleTest+0x106>
    1d82:	e0 2e       	mov	r14, r16
    1d84:	f1 2c       	mov	r15, r1
    1d86:	80 2f       	mov	r24, r16
    1d88:	27 da       	rcall	.-2994   	; 0x11d8 <os_getProcessSlot>
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	81 81       	ldd	r24, Z+1	; 0x01
    1d8e:	e1 e0       	ldi	r30, 0x01	; 1
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	ec 0f       	add	r30, r28
    1d94:	fd 1f       	adc	r31, r29
    1d96:	ee 0d       	add	r30, r14
    1d98:	ff 1d       	adc	r31, r15
    1d9a:	80 83       	st	Z, r24
    1d9c:	80 2f       	mov	r24, r16
    1d9e:	1c da       	rcall	.-3016   	; 0x11d8 <os_getProcessSlot>
    1da0:	fc 01       	movw	r30, r24
    1da2:	11 82       	std	Z+1, r1	; 0x01
    1da4:	0f 5f       	subi	r16, 0xFF	; 255
    1da6:	01 c0       	rjmp	.+2      	; 0x1daa <performScheduleIdleTest+0x68>
    1da8:	00 e0       	ldi	r16, 0x00	; 0
    1daa:	08 30       	cpi	r16, 0x08	; 8
    1dac:	50 f3       	brcs	.-44     	; 0x1d82 <performScheduleIdleTest+0x40>
    1dae:	81 2f       	mov	r24, r17
    1db0:	b3 dd       	rcall	.-1178   	; 0x1918 <os_resetSchedulingInformation>
    1db2:	00 e0       	ldi	r16, 0x00	; 0
    1db4:	f1 2c       	mov	r15, r1
    1db6:	13 c0       	rjmp	.+38     	; 0x1dde <performScheduleIdleTest+0x9c>
    1db8:	11 23       	and	r17, r17
    1dba:	19 f0       	breq	.+6      	; 0x1dc2 <performScheduleIdleTest+0x80>
    1dbc:	11 30       	cpi	r17, 0x01	; 1
    1dbe:	39 f0       	breq	.+14     	; 0x1dce <performScheduleIdleTest+0x8c>
    1dc0:	0b c0       	rjmp	.+22     	; 0x1dd8 <performScheduleIdleTest+0x96>
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	09 da       	rcall	.-3054   	; 0x11d8 <os_getProcessSlot>
    1dc6:	60 2f       	mov	r22, r16
    1dc8:	46 dd       	rcall	.-1396   	; 0x1856 <os_scheduler_RoundRobin>
    1dca:	f8 2e       	mov	r15, r24
    1dcc:	05 c0       	rjmp	.+10     	; 0x1dd8 <performScheduleIdleTest+0x96>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	03 da       	rcall	.-3066   	; 0x11d8 <os_getProcessSlot>
    1dd2:	60 2f       	mov	r22, r16
    1dd4:	c9 dd       	rcall	.-1134   	; 0x1968 <os_scheduler_DynamicPriorityRoundRobin>
    1dd6:	f8 2e       	mov	r15, r24
    1dd8:	f1 10       	cpse	r15, r1
    1dda:	03 c0       	rjmp	.+6      	; 0x1de2 <performScheduleIdleTest+0xa0>
    1ddc:	0f 5f       	subi	r16, 0xFF	; 255
    1dde:	08 30       	cpi	r16, 0x08	; 8
    1de0:	58 f3       	brcs	.-42     	; 0x1db8 <performScheduleIdleTest+0x76>
    1de2:	00 e0       	ldi	r16, 0x00	; 0
    1de4:	0c c0       	rjmp	.+24     	; 0x1dfe <performScheduleIdleTest+0xbc>
    1de6:	80 2f       	mov	r24, r16
    1de8:	f7 d9       	rcall	.-3090   	; 0x11d8 <os_getProcessSlot>
    1dea:	e1 e0       	ldi	r30, 0x01	; 1
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	ec 0f       	add	r30, r28
    1df0:	fd 1f       	adc	r31, r29
    1df2:	e0 0f       	add	r30, r16
    1df4:	f1 1d       	adc	r31, r1
    1df6:	20 81       	ld	r18, Z
    1df8:	fc 01       	movw	r30, r24
    1dfa:	21 83       	std	Z+1, r18	; 0x01
    1dfc:	0f 5f       	subi	r16, 0xFF	; 255
    1dfe:	08 30       	cpi	r16, 0x08	; 8
    1e00:	90 f3       	brcs	.-28     	; 0x1de6 <performScheduleIdleTest+0xa4>
    1e02:	81 2f       	mov	r24, r17
    1e04:	89 dd       	rcall	.-1262   	; 0x1918 <os_resetSchedulingInformation>
    1e06:	f1 10       	cpse	r15, r1
    1e08:	0a c0       	rjmp	.+20     	; 0x1e1e <performScheduleIdleTest+0xdc>
    1e0a:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1e0e:	8b e1       	ldi	r24, 0x1B	; 27
    1e10:	94 e0       	ldi	r25, 0x04	; 4
    1e12:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1e16:	88 ee       	ldi	r24, 0xE8	; 232
    1e18:	93 e0       	ldi	r25, 0x03	; 3
    1e1a:	c8 d8       	rcall	.-3696   	; 0xfac <delayMs>
    1e1c:	15 c0       	rjmp	.+42     	; 0x1e48 <performScheduleIdleTest+0x106>
    1e1e:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1e22:	11 23       	and	r17, r17
    1e24:	19 f0       	breq	.+6      	; 0x1e2c <performScheduleIdleTest+0xea>
    1e26:	11 30       	cpi	r17, 0x01	; 1
    1e28:	31 f0       	breq	.+12     	; 0x1e36 <performScheduleIdleTest+0xf4>
    1e2a:	09 c0       	rjmp	.+18     	; 0x1e3e <performScheduleIdleTest+0xfc>
    1e2c:	8e e0       	ldi	r24, 0x0E	; 14
    1e2e:	94 e0       	ldi	r25, 0x04	; 4
    1e30:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1e34:	04 c0       	rjmp	.+8      	; 0x1e3e <performScheduleIdleTest+0xfc>
    1e36:	81 ef       	ldi	r24, 0xF1	; 241
    1e38:	93 e0       	ldi	r25, 0x03	; 3
    1e3a:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1e3e:	8e ed       	ldi	r24, 0xDE	; 222
    1e40:	93 e0       	ldi	r25, 0x03	; 3
    1e42:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1e46:	ff cf       	rjmp	.-2      	; 0x1e46 <performScheduleIdleTest+0x104>
    1e48:	28 96       	adiw	r28, 0x08	; 8
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	1f 91       	pop	r17
    1e5a:	0f 91       	pop	r16
    1e5c:	ff 90       	pop	r15
    1e5e:	ef 90       	pop	r14
    1e60:	08 95       	ret

00001e62 <prog1>:
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	1f 92       	push	r1
    1e68:	1f 92       	push	r1
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	e1 eb       	ldi	r30, 0xB1	; 177
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	8b 7f       	andi	r24, 0xFB	; 251
    1e76:	80 83       	st	Z, r24
    1e78:	80 81       	ld	r24, Z
    1e7a:	8d 7f       	andi	r24, 0xFD	; 253
    1e7c:	80 83       	st	Z, r24
    1e7e:	80 81       	ld	r24, Z
    1e80:	8e 7f       	andi	r24, 0xFE	; 254
    1e82:	80 83       	st	Z, r24
    1e84:	ba d9       	rcall	.-3212   	; 0x11fa <os_getCurrentProc>
    1e86:	a8 d9       	rcall	.-3248   	; 0x11d8 <os_getProcessSlot>
    1e88:	fc 01       	movw	r30, r24
    1e8a:	14 82       	std	Z+4, r1	; 0x04
    1e8c:	61 e0       	ldi	r22, 0x01	; 1
    1e8e:	82 e0       	ldi	r24, 0x02	; 2
    1e90:	82 da       	rcall	.-2812   	; 0x1396 <os_exec>
    1e92:	62 e0       	ldi	r22, 0x02	; 2
    1e94:	83 e0       	ldi	r24, 0x03	; 3
    1e96:	7f da       	rcall	.-2818   	; 0x1396 <os_exec>
    1e98:	19 82       	std	Y+1, r1	; 0x01
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	8a 83       	std	Y+2, r24	; 0x02
    1e9e:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1ea2:	0e 94 dd 03 	call	0x7ba	; 0x7ba <lcd_line1>
    1ea6:	85 ed       	ldi	r24, 0xD5	; 213
    1ea8:	93 e0       	ldi	r25, 0x03	; 3
    1eaa:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1eae:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <lcd_line2>
    1eb2:	8a ec       	ldi	r24, 0xCA	; 202
    1eb4:	93 e0       	ldi	r25, 0x03	; 3
    1eb6:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1eba:	80 ed       	ldi	r24, 0xD0	; 208
    1ebc:	97 e0       	ldi	r25, 0x07	; 7
    1ebe:	76 d8       	rcall	.-3860   	; 0xfac <delayMs>
    1ec0:	10 e0       	ldi	r17, 0x00	; 0
    1ec2:	09 c0       	rjmp	.+18     	; 0x1ed6 <prog1+0x74>
    1ec4:	e1 e0       	ldi	r30, 0x01	; 1
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	ec 0f       	add	r30, r28
    1eca:	fd 1f       	adc	r31, r29
    1ecc:	e1 0f       	add	r30, r17
    1ece:	f1 1d       	adc	r31, r1
    1ed0:	80 81       	ld	r24, Z
    1ed2:	22 de       	rcall	.-956    	; 0x1b18 <performStrategyTest>
    1ed4:	1f 5f       	subi	r17, 0xFF	; 255
    1ed6:	12 30       	cpi	r17, 0x02	; 2
    1ed8:	a8 f3       	brcs	.-22     	; 0x1ec4 <prog1+0x62>
    1eda:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1ede:	0e 94 dd 03 	call	0x7ba	; 0x7ba <lcd_line1>
    1ee2:	81 ec       	ldi	r24, 0xC1	; 193
    1ee4:	93 e0       	ldi	r25, 0x03	; 3
    1ee6:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1eea:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <lcd_line2>
    1eee:	8c eb       	ldi	r24, 0xBC	; 188
    1ef0:	93 e0       	ldi	r25, 0x03	; 3
    1ef2:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1ef6:	80 ed       	ldi	r24, 0xD0	; 208
    1ef8:	97 e0       	ldi	r25, 0x07	; 7
    1efa:	58 d8       	rcall	.-3920   	; 0xfac <delayMs>
    1efc:	10 e0       	ldi	r17, 0x00	; 0
    1efe:	09 c0       	rjmp	.+18     	; 0x1f12 <prog1+0xb0>
    1f00:	e1 e0       	ldi	r30, 0x01	; 1
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	ec 0f       	add	r30, r28
    1f06:	fd 1f       	adc	r31, r29
    1f08:	e1 0f       	add	r30, r17
    1f0a:	f1 1d       	adc	r31, r1
    1f0c:	80 81       	ld	r24, Z
    1f0e:	19 df       	rcall	.-462    	; 0x1d42 <performScheduleIdleTest>
    1f10:	1f 5f       	subi	r17, 0xFF	; 255
    1f12:	12 30       	cpi	r17, 0x02	; 2
    1f14:	a8 f3       	brcs	.-22     	; 0x1f00 <prog1+0x9e>
    1f16:	62 e0       	ldi	r22, 0x02	; 2
    1f18:	84 e0       	ldi	r24, 0x04	; 4
    1f1a:	3d da       	rcall	.-2950   	; 0x1396 <os_exec>
    1f1c:	62 e0       	ldi	r22, 0x02	; 2
    1f1e:	85 e0       	ldi	r24, 0x05	; 5
    1f20:	3a da       	rcall	.-2956   	; 0x1396 <os_exec>
    1f22:	62 e0       	ldi	r22, 0x02	; 2
    1f24:	86 e0       	ldi	r24, 0x06	; 6
    1f26:	37 da       	rcall	.-2962   	; 0x1396 <os_exec>
    1f28:	62 e0       	ldi	r22, 0x02	; 2
    1f2a:	87 e0       	ldi	r24, 0x07	; 7
    1f2c:	34 da       	rcall	.-2968   	; 0x1396 <os_exec>
    1f2e:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1f32:	0e 94 dd 03 	call	0x7ba	; 0x7ba <lcd_line1>
    1f36:	83 eb       	ldi	r24, 0xB3	; 179
    1f38:	93 e0       	ldi	r25, 0x03	; 3
    1f3a:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1f3e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <lcd_line2>
    1f42:	88 ea       	ldi	r24, 0xA8	; 168
    1f44:	93 e0       	ldi	r25, 0x03	; 3
    1f46:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1f4a:	80 ed       	ldi	r24, 0xD0	; 208
    1f4c:	97 e0       	ldi	r25, 0x07	; 7
    1f4e:	2e d8       	rcall	.-4004   	; 0xfac <delayMs>
    1f50:	10 e0       	ldi	r17, 0x00	; 0
    1f52:	0a c0       	rjmp	.+20     	; 0x1f68 <prog1+0x106>
    1f54:	e1 e0       	ldi	r30, 0x01	; 1
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	ec 0f       	add	r30, r28
    1f5a:	fd 1f       	adc	r31, r29
    1f5c:	e1 0f       	add	r30, r17
    1f5e:	f1 1d       	adc	r31, r1
    1f60:	6e ef       	ldi	r22, 0xFE	; 254
    1f62:	80 81       	ld	r24, Z
    1f64:	56 de       	rcall	.-852    	; 0x1c12 <performSchedulabilityTest>
    1f66:	1f 5f       	subi	r17, 0xFF	; 255
    1f68:	12 30       	cpi	r17, 0x02	; 2
    1f6a:	a0 f3       	brcs	.-24     	; 0x1f54 <prog1+0xf2>
    1f6c:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1f70:	0e 94 dd 03 	call	0x7ba	; 0x7ba <lcd_line1>
    1f74:	8f e9       	ldi	r24, 0x9F	; 159
    1f76:	93 e0       	ldi	r25, 0x03	; 3
    1f78:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1f7c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <lcd_line2>
    1f80:	80 e9       	ldi	r24, 0x90	; 144
    1f82:	93 e0       	ldi	r25, 0x03	; 3
    1f84:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1f88:	80 ed       	ldi	r24, 0xD0	; 208
    1f8a:	97 e0       	ldi	r25, 0x07	; 7
    1f8c:	0f d8       	rcall	.-4066   	; 0xfac <delayMs>
    1f8e:	83 e0       	ldi	r24, 0x03	; 3
    1f90:	23 d9       	rcall	.-3514   	; 0x11d8 <os_getProcessSlot>
    1f92:	fc 01       	movw	r30, r24
    1f94:	11 82       	std	Z+1, r1	; 0x01
    1f96:	10 e0       	ldi	r17, 0x00	; 0
    1f98:	0d c0       	rjmp	.+26     	; 0x1fb4 <prog1+0x152>
    1f9a:	e1 e0       	ldi	r30, 0x01	; 1
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	ec 0f       	add	r30, r28
    1fa0:	fd 1f       	adc	r31, r29
    1fa2:	e1 0f       	add	r30, r17
    1fa4:	f1 1d       	adc	r31, r1
    1fa6:	00 81       	ld	r16, Z
    1fa8:	80 2f       	mov	r24, r16
    1faa:	b6 dc       	rcall	.-1684   	; 0x1918 <os_resetSchedulingInformation>
    1fac:	66 ef       	ldi	r22, 0xF6	; 246
    1fae:	80 2f       	mov	r24, r16
    1fb0:	30 de       	rcall	.-928    	; 0x1c12 <performSchedulabilityTest>
    1fb2:	1f 5f       	subi	r17, 0xFF	; 255
    1fb4:	12 30       	cpi	r17, 0x02	; 2
    1fb6:	88 f3       	brcs	.-30     	; 0x1f9a <prog1+0x138>
    1fb8:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1fbc:	8f e7       	ldi	r24, 0x7F	; 127
    1fbe:	93 e0       	ldi	r25, 0x03	; 3
    1fc0:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_writeProgString>
    1fc4:	88 ee       	ldi	r24, 0xE8	; 232
    1fc6:	93 e0       	ldi	r25, 0x03	; 3
    1fc8:	0e 94 d6 07 	call	0xfac	; 0xfac <delayMs>
    1fcc:	0e 94 99 03 	call	0x732	; 0x732 <lcd_clear>
    1fd0:	88 ee       	ldi	r24, 0xE8	; 232
    1fd2:	93 e0       	ldi	r25, 0x03	; 3
    1fd4:	0e 94 d6 07 	call	0xfac	; 0xfac <delayMs>
    1fd8:	ef cf       	rjmp	.-34     	; 0x1fb8 <prog1+0x156>

00001fda <registerProgram1>:
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	08 d9       	rcall	.-3568   	; 0x11ee <os_getProgramSlot>
    1fde:	21 e3       	ldi	r18, 0x31	; 49
    1fe0:	3f e0       	ldi	r19, 0x0F	; 15
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	31 83       	std	Z+1, r19	; 0x01
    1fe6:	20 83       	st	Z, r18
    1fe8:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <os_autostart>
    1fec:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <os_autostart+0x1>
    1ff0:	82 60       	ori	r24, 0x02	; 2
    1ff2:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <os_autostart+0x1>
    1ff6:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <os_autostart>
    1ffa:	08 95       	ret

00001ffc <testProgram>:
    1ffc:	c8 2f       	mov	r28, r24
    1ffe:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <i>
    2002:	80 32       	cpi	r24, 0x20	; 32
    2004:	50 f4       	brcc	.+20     	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    2006:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <i>
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	8e 0f       	add	r24, r30
    200e:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <i>
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	ea 50       	subi	r30, 0x0A	; 10
    2016:	fc 4f       	sbci	r31, 0xFC	; 252
    2018:	c0 83       	st	Z, r28
    201a:	e6 da       	rcall	.-2612   	; 0x15e8 <__vector_13>
    201c:	f0 cf       	rjmp	.-32     	; 0x1ffe <testProgram+0x2>

0000201e <prog2>:
    201e:	82 e0       	ldi	r24, 0x02	; 2
    2020:	ed df       	rcall	.-38     	; 0x1ffc <testProgram>

00002022 <prog3>:
    2022:	83 e0       	ldi	r24, 0x03	; 3
    2024:	eb df       	rcall	.-42     	; 0x1ffc <testProgram>

00002026 <prog4>:
    2026:	84 e0       	ldi	r24, 0x04	; 4
    2028:	e9 df       	rcall	.-46     	; 0x1ffc <testProgram>

0000202a <prog5>:
    202a:	85 e0       	ldi	r24, 0x05	; 5
    202c:	e7 df       	rcall	.-50     	; 0x1ffc <testProgram>

0000202e <prog6>:
    202e:	86 e0       	ldi	r24, 0x06	; 6
    2030:	e5 df       	rcall	.-54     	; 0x1ffc <testProgram>

00002032 <prog7>:
    2032:	87 e0       	ldi	r24, 0x07	; 7
    2034:	e3 df       	rcall	.-58     	; 0x1ffc <testProgram>

00002036 <registerProgram2>:
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	da d8       	rcall	.-3660   	; 0x11ee <os_getProgramSlot>
    203a:	2f e0       	ldi	r18, 0x0F	; 15
    203c:	30 e1       	ldi	r19, 0x10	; 16
    203e:	fc 01       	movw	r30, r24
    2040:	31 83       	std	Z+1, r19	; 0x01
    2042:	20 83       	st	Z, r18
    2044:	08 95       	ret

00002046 <registerProgram3>:
    2046:	83 e0       	ldi	r24, 0x03	; 3
    2048:	d2 d8       	rcall	.-3676   	; 0x11ee <os_getProgramSlot>
    204a:	21 e1       	ldi	r18, 0x11	; 17
    204c:	30 e1       	ldi	r19, 0x10	; 16
    204e:	fc 01       	movw	r30, r24
    2050:	31 83       	std	Z+1, r19	; 0x01
    2052:	20 83       	st	Z, r18
    2054:	08 95       	ret

00002056 <registerProgram4>:
    2056:	84 e0       	ldi	r24, 0x04	; 4
    2058:	ca d8       	rcall	.-3692   	; 0x11ee <os_getProgramSlot>
    205a:	23 e1       	ldi	r18, 0x13	; 19
    205c:	30 e1       	ldi	r19, 0x10	; 16
    205e:	fc 01       	movw	r30, r24
    2060:	31 83       	std	Z+1, r19	; 0x01
    2062:	20 83       	st	Z, r18
    2064:	08 95       	ret

00002066 <registerProgram5>:
    2066:	85 e0       	ldi	r24, 0x05	; 5
    2068:	c2 d8       	rcall	.-3708   	; 0x11ee <os_getProgramSlot>
    206a:	25 e1       	ldi	r18, 0x15	; 21
    206c:	30 e1       	ldi	r19, 0x10	; 16
    206e:	fc 01       	movw	r30, r24
    2070:	31 83       	std	Z+1, r19	; 0x01
    2072:	20 83       	st	Z, r18
    2074:	08 95       	ret

00002076 <registerProgram6>:
    2076:	86 e0       	ldi	r24, 0x06	; 6
    2078:	ba d8       	rcall	.-3724   	; 0x11ee <os_getProgramSlot>
    207a:	27 e1       	ldi	r18, 0x17	; 23
    207c:	30 e1       	ldi	r19, 0x10	; 16
    207e:	fc 01       	movw	r30, r24
    2080:	31 83       	std	Z+1, r19	; 0x01
    2082:	20 83       	st	Z, r18
    2084:	08 95       	ret

00002086 <registerProgram7>:
    2086:	87 e0       	ldi	r24, 0x07	; 7
    2088:	b2 d8       	rcall	.-3740   	; 0x11ee <os_getProgramSlot>
    208a:	29 e1       	ldi	r18, 0x19	; 25
    208c:	30 e1       	ldi	r19, 0x10	; 16
    208e:	fc 01       	movw	r30, r24
    2090:	31 83       	std	Z+1, r19	; 0x01
    2092:	20 83       	st	Z, r18
    2094:	08 95       	ret

00002096 <__udivmodsi4>:
    2096:	a1 e2       	ldi	r26, 0x21	; 33
    2098:	1a 2e       	mov	r1, r26
    209a:	aa 1b       	sub	r26, r26
    209c:	bb 1b       	sub	r27, r27
    209e:	fd 01       	movw	r30, r26
    20a0:	0d c0       	rjmp	.+26     	; 0x20bc <__udivmodsi4_ep>

000020a2 <__udivmodsi4_loop>:
    20a2:	aa 1f       	adc	r26, r26
    20a4:	bb 1f       	adc	r27, r27
    20a6:	ee 1f       	adc	r30, r30
    20a8:	ff 1f       	adc	r31, r31
    20aa:	a2 17       	cp	r26, r18
    20ac:	b3 07       	cpc	r27, r19
    20ae:	e4 07       	cpc	r30, r20
    20b0:	f5 07       	cpc	r31, r21
    20b2:	20 f0       	brcs	.+8      	; 0x20bc <__udivmodsi4_ep>
    20b4:	a2 1b       	sub	r26, r18
    20b6:	b3 0b       	sbc	r27, r19
    20b8:	e4 0b       	sbc	r30, r20
    20ba:	f5 0b       	sbc	r31, r21

000020bc <__udivmodsi4_ep>:
    20bc:	66 1f       	adc	r22, r22
    20be:	77 1f       	adc	r23, r23
    20c0:	88 1f       	adc	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	1a 94       	dec	r1
    20c6:	69 f7       	brne	.-38     	; 0x20a2 <__udivmodsi4_loop>
    20c8:	60 95       	com	r22
    20ca:	70 95       	com	r23
    20cc:	80 95       	com	r24
    20ce:	90 95       	com	r25
    20d0:	9b 01       	movw	r18, r22
    20d2:	ac 01       	movw	r20, r24
    20d4:	bd 01       	movw	r22, r26
    20d6:	cf 01       	movw	r24, r30
    20d8:	08 95       	ret

000020da <__tablejump2__>:
    20da:	ee 0f       	add	r30, r30
    20dc:	ff 1f       	adc	r31, r31
    20de:	88 1f       	adc	r24, r24
    20e0:	8b bf       	out	0x3b, r24	; 59
    20e2:	07 90       	elpm	r0, Z+
    20e4:	f6 91       	elpm	r31, Z
    20e6:	e0 2d       	mov	r30, r0
    20e8:	19 94       	eijmp

000020ea <__umulhisi3>:
    20ea:	a2 9f       	mul	r26, r18
    20ec:	b0 01       	movw	r22, r0
    20ee:	b3 9f       	mul	r27, r19
    20f0:	c0 01       	movw	r24, r0
    20f2:	a3 9f       	mul	r26, r19
    20f4:	70 0d       	add	r23, r0
    20f6:	81 1d       	adc	r24, r1
    20f8:	11 24       	eor	r1, r1
    20fa:	91 1d       	adc	r25, r1
    20fc:	b2 9f       	mul	r27, r18
    20fe:	70 0d       	add	r23, r0
    2100:	81 1d       	adc	r24, r1
    2102:	11 24       	eor	r1, r1
    2104:	91 1d       	adc	r25, r1
    2106:	08 95       	ret

00002108 <printf>:
    2108:	cf 93       	push	r28
    210a:	df 93       	push	r29
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	ae 01       	movw	r20, r28
    2112:	4a 5f       	subi	r20, 0xFA	; 250
    2114:	5f 4f       	sbci	r21, 0xFF	; 255
    2116:	fa 01       	movw	r30, r20
    2118:	61 91       	ld	r22, Z+
    211a:	71 91       	ld	r23, Z+
    211c:	af 01       	movw	r20, r30
    211e:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <__iob+0x2>
    2122:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <__iob+0x3>
    2126:	11 d0       	rcall	.+34     	; 0x214a <vfprintf>
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	08 95       	ret

0000212e <vfprintf_P>:
    212e:	cf 93       	push	r28
    2130:	df 93       	push	r29
    2132:	ec 01       	movw	r28, r24
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	88 60       	ori	r24, 0x08	; 8
    2138:	8b 83       	std	Y+3, r24	; 0x03
    213a:	ce 01       	movw	r24, r28
    213c:	06 d0       	rcall	.+12     	; 0x214a <vfprintf>
    213e:	2b 81       	ldd	r18, Y+3	; 0x03
    2140:	27 7f       	andi	r18, 0xF7	; 247
    2142:	2b 83       	std	Y+3, r18	; 0x03
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <vfprintf>:
    214a:	2f 92       	push	r2
    214c:	3f 92       	push	r3
    214e:	4f 92       	push	r4
    2150:	5f 92       	push	r5
    2152:	6f 92       	push	r6
    2154:	7f 92       	push	r7
    2156:	8f 92       	push	r8
    2158:	9f 92       	push	r9
    215a:	af 92       	push	r10
    215c:	bf 92       	push	r11
    215e:	cf 92       	push	r12
    2160:	df 92       	push	r13
    2162:	ef 92       	push	r14
    2164:	ff 92       	push	r15
    2166:	0f 93       	push	r16
    2168:	1f 93       	push	r17
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	2b 97       	sbiw	r28, 0x0b	; 11
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	6c 01       	movw	r12, r24
    2180:	7b 01       	movw	r14, r22
    2182:	8a 01       	movw	r16, r20
    2184:	fc 01       	movw	r30, r24
    2186:	17 82       	std	Z+7, r1	; 0x07
    2188:	16 82       	std	Z+6, r1	; 0x06
    218a:	83 81       	ldd	r24, Z+3	; 0x03
    218c:	81 ff       	sbrs	r24, 1
    218e:	bf c1       	rjmp	.+894    	; 0x250e <__stack+0x30f>
    2190:	ce 01       	movw	r24, r28
    2192:	01 96       	adiw	r24, 0x01	; 1
    2194:	3c 01       	movw	r6, r24
    2196:	f6 01       	movw	r30, r12
    2198:	93 81       	ldd	r25, Z+3	; 0x03
    219a:	f7 01       	movw	r30, r14
    219c:	93 fd       	sbrc	r25, 3
    219e:	85 91       	lpm	r24, Z+
    21a0:	93 ff       	sbrs	r25, 3
    21a2:	81 91       	ld	r24, Z+
    21a4:	7f 01       	movw	r14, r30
    21a6:	88 23       	and	r24, r24
    21a8:	09 f4       	brne	.+2      	; 0x21ac <vfprintf+0x62>
    21aa:	ad c1       	rjmp	.+858    	; 0x2506 <__stack+0x307>
    21ac:	85 32       	cpi	r24, 0x25	; 37
    21ae:	39 f4       	brne	.+14     	; 0x21be <vfprintf+0x74>
    21b0:	93 fd       	sbrc	r25, 3
    21b2:	85 91       	lpm	r24, Z+
    21b4:	93 ff       	sbrs	r25, 3
    21b6:	81 91       	ld	r24, Z+
    21b8:	7f 01       	movw	r14, r30
    21ba:	85 32       	cpi	r24, 0x25	; 37
    21bc:	21 f4       	brne	.+8      	; 0x21c6 <vfprintf+0x7c>
    21be:	b6 01       	movw	r22, r12
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	d6 d1       	rcall	.+940    	; 0x2570 <fputc>
    21c4:	e8 cf       	rjmp	.-48     	; 0x2196 <vfprintf+0x4c>
    21c6:	91 2c       	mov	r9, r1
    21c8:	21 2c       	mov	r2, r1
    21ca:	31 2c       	mov	r3, r1
    21cc:	ff e1       	ldi	r31, 0x1F	; 31
    21ce:	f3 15       	cp	r31, r3
    21d0:	d8 f0       	brcs	.+54     	; 0x2208 <__stack+0x9>
    21d2:	8b 32       	cpi	r24, 0x2B	; 43
    21d4:	79 f0       	breq	.+30     	; 0x21f4 <vfprintf+0xaa>
    21d6:	38 f4       	brcc	.+14     	; 0x21e6 <vfprintf+0x9c>
    21d8:	80 32       	cpi	r24, 0x20	; 32
    21da:	79 f0       	breq	.+30     	; 0x21fa <vfprintf+0xb0>
    21dc:	83 32       	cpi	r24, 0x23	; 35
    21de:	a1 f4       	brne	.+40     	; 0x2208 <__stack+0x9>
    21e0:	23 2d       	mov	r18, r3
    21e2:	20 61       	ori	r18, 0x10	; 16
    21e4:	1d c0       	rjmp	.+58     	; 0x2220 <__stack+0x21>
    21e6:	8d 32       	cpi	r24, 0x2D	; 45
    21e8:	61 f0       	breq	.+24     	; 0x2202 <__stack+0x3>
    21ea:	80 33       	cpi	r24, 0x30	; 48
    21ec:	69 f4       	brne	.+26     	; 0x2208 <__stack+0x9>
    21ee:	23 2d       	mov	r18, r3
    21f0:	21 60       	ori	r18, 0x01	; 1
    21f2:	16 c0       	rjmp	.+44     	; 0x2220 <__stack+0x21>
    21f4:	83 2d       	mov	r24, r3
    21f6:	82 60       	ori	r24, 0x02	; 2
    21f8:	38 2e       	mov	r3, r24
    21fa:	e3 2d       	mov	r30, r3
    21fc:	e4 60       	ori	r30, 0x04	; 4
    21fe:	3e 2e       	mov	r3, r30
    2200:	2a c0       	rjmp	.+84     	; 0x2256 <__stack+0x57>
    2202:	f3 2d       	mov	r31, r3
    2204:	f8 60       	ori	r31, 0x08	; 8
    2206:	1d c0       	rjmp	.+58     	; 0x2242 <__stack+0x43>
    2208:	37 fc       	sbrc	r3, 7
    220a:	2d c0       	rjmp	.+90     	; 0x2266 <__stack+0x67>
    220c:	20 ed       	ldi	r18, 0xD0	; 208
    220e:	28 0f       	add	r18, r24
    2210:	2a 30       	cpi	r18, 0x0A	; 10
    2212:	40 f0       	brcs	.+16     	; 0x2224 <__stack+0x25>
    2214:	8e 32       	cpi	r24, 0x2E	; 46
    2216:	b9 f4       	brne	.+46     	; 0x2246 <__stack+0x47>
    2218:	36 fc       	sbrc	r3, 6
    221a:	75 c1       	rjmp	.+746    	; 0x2506 <__stack+0x307>
    221c:	23 2d       	mov	r18, r3
    221e:	20 64       	ori	r18, 0x40	; 64
    2220:	32 2e       	mov	r3, r18
    2222:	19 c0       	rjmp	.+50     	; 0x2256 <__stack+0x57>
    2224:	36 fe       	sbrs	r3, 6
    2226:	06 c0       	rjmp	.+12     	; 0x2234 <__stack+0x35>
    2228:	8a e0       	ldi	r24, 0x0A	; 10
    222a:	98 9e       	mul	r9, r24
    222c:	20 0d       	add	r18, r0
    222e:	11 24       	eor	r1, r1
    2230:	92 2e       	mov	r9, r18
    2232:	11 c0       	rjmp	.+34     	; 0x2256 <__stack+0x57>
    2234:	ea e0       	ldi	r30, 0x0A	; 10
    2236:	2e 9e       	mul	r2, r30
    2238:	20 0d       	add	r18, r0
    223a:	11 24       	eor	r1, r1
    223c:	22 2e       	mov	r2, r18
    223e:	f3 2d       	mov	r31, r3
    2240:	f0 62       	ori	r31, 0x20	; 32
    2242:	3f 2e       	mov	r3, r31
    2244:	08 c0       	rjmp	.+16     	; 0x2256 <__stack+0x57>
    2246:	8c 36       	cpi	r24, 0x6C	; 108
    2248:	21 f4       	brne	.+8      	; 0x2252 <__stack+0x53>
    224a:	83 2d       	mov	r24, r3
    224c:	80 68       	ori	r24, 0x80	; 128
    224e:	38 2e       	mov	r3, r24
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <__stack+0x57>
    2252:	88 36       	cpi	r24, 0x68	; 104
    2254:	41 f4       	brne	.+16     	; 0x2266 <__stack+0x67>
    2256:	f7 01       	movw	r30, r14
    2258:	93 fd       	sbrc	r25, 3
    225a:	85 91       	lpm	r24, Z+
    225c:	93 ff       	sbrs	r25, 3
    225e:	81 91       	ld	r24, Z+
    2260:	7f 01       	movw	r14, r30
    2262:	81 11       	cpse	r24, r1
    2264:	b3 cf       	rjmp	.-154    	; 0x21cc <vfprintf+0x82>
    2266:	98 2f       	mov	r25, r24
    2268:	9f 7d       	andi	r25, 0xDF	; 223
    226a:	95 54       	subi	r25, 0x45	; 69
    226c:	93 30       	cpi	r25, 0x03	; 3
    226e:	28 f4       	brcc	.+10     	; 0x227a <__stack+0x7b>
    2270:	0c 5f       	subi	r16, 0xFC	; 252
    2272:	1f 4f       	sbci	r17, 0xFF	; 255
    2274:	9f e3       	ldi	r25, 0x3F	; 63
    2276:	99 83       	std	Y+1, r25	; 0x01
    2278:	0d c0       	rjmp	.+26     	; 0x2294 <__stack+0x95>
    227a:	83 36       	cpi	r24, 0x63	; 99
    227c:	31 f0       	breq	.+12     	; 0x228a <__stack+0x8b>
    227e:	83 37       	cpi	r24, 0x73	; 115
    2280:	71 f0       	breq	.+28     	; 0x229e <__stack+0x9f>
    2282:	83 35       	cpi	r24, 0x53	; 83
    2284:	09 f0       	breq	.+2      	; 0x2288 <__stack+0x89>
    2286:	55 c0       	rjmp	.+170    	; 0x2332 <__stack+0x133>
    2288:	20 c0       	rjmp	.+64     	; 0x22ca <__stack+0xcb>
    228a:	f8 01       	movw	r30, r16
    228c:	80 81       	ld	r24, Z
    228e:	89 83       	std	Y+1, r24	; 0x01
    2290:	0e 5f       	subi	r16, 0xFE	; 254
    2292:	1f 4f       	sbci	r17, 0xFF	; 255
    2294:	88 24       	eor	r8, r8
    2296:	83 94       	inc	r8
    2298:	91 2c       	mov	r9, r1
    229a:	53 01       	movw	r10, r6
    229c:	12 c0       	rjmp	.+36     	; 0x22c2 <__stack+0xc3>
    229e:	28 01       	movw	r4, r16
    22a0:	f2 e0       	ldi	r31, 0x02	; 2
    22a2:	4f 0e       	add	r4, r31
    22a4:	51 1c       	adc	r5, r1
    22a6:	f8 01       	movw	r30, r16
    22a8:	a0 80       	ld	r10, Z
    22aa:	b1 80       	ldd	r11, Z+1	; 0x01
    22ac:	36 fe       	sbrs	r3, 6
    22ae:	03 c0       	rjmp	.+6      	; 0x22b6 <__stack+0xb7>
    22b0:	69 2d       	mov	r22, r9
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <__stack+0xbb>
    22b6:	6f ef       	ldi	r22, 0xFF	; 255
    22b8:	7f ef       	ldi	r23, 0xFF	; 255
    22ba:	c5 01       	movw	r24, r10
    22bc:	4e d1       	rcall	.+668    	; 0x255a <strnlen>
    22be:	4c 01       	movw	r8, r24
    22c0:	82 01       	movw	r16, r4
    22c2:	f3 2d       	mov	r31, r3
    22c4:	ff 77       	andi	r31, 0x7F	; 127
    22c6:	3f 2e       	mov	r3, r31
    22c8:	15 c0       	rjmp	.+42     	; 0x22f4 <__stack+0xf5>
    22ca:	28 01       	movw	r4, r16
    22cc:	22 e0       	ldi	r18, 0x02	; 2
    22ce:	42 0e       	add	r4, r18
    22d0:	51 1c       	adc	r5, r1
    22d2:	f8 01       	movw	r30, r16
    22d4:	a0 80       	ld	r10, Z
    22d6:	b1 80       	ldd	r11, Z+1	; 0x01
    22d8:	36 fe       	sbrs	r3, 6
    22da:	03 c0       	rjmp	.+6      	; 0x22e2 <__stack+0xe3>
    22dc:	69 2d       	mov	r22, r9
    22de:	70 e0       	ldi	r23, 0x00	; 0
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <__stack+0xe7>
    22e2:	6f ef       	ldi	r22, 0xFF	; 255
    22e4:	7f ef       	ldi	r23, 0xFF	; 255
    22e6:	c5 01       	movw	r24, r10
    22e8:	2d d1       	rcall	.+602    	; 0x2544 <strnlen_P>
    22ea:	4c 01       	movw	r8, r24
    22ec:	f3 2d       	mov	r31, r3
    22ee:	f0 68       	ori	r31, 0x80	; 128
    22f0:	3f 2e       	mov	r3, r31
    22f2:	82 01       	movw	r16, r4
    22f4:	33 fc       	sbrc	r3, 3
    22f6:	19 c0       	rjmp	.+50     	; 0x232a <__stack+0x12b>
    22f8:	82 2d       	mov	r24, r2
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	88 16       	cp	r8, r24
    22fe:	99 06       	cpc	r9, r25
    2300:	a0 f4       	brcc	.+40     	; 0x232a <__stack+0x12b>
    2302:	b6 01       	movw	r22, r12
    2304:	80 e2       	ldi	r24, 0x20	; 32
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	33 d1       	rcall	.+614    	; 0x2570 <fputc>
    230a:	2a 94       	dec	r2
    230c:	f5 cf       	rjmp	.-22     	; 0x22f8 <__stack+0xf9>
    230e:	f5 01       	movw	r30, r10
    2310:	37 fc       	sbrc	r3, 7
    2312:	85 91       	lpm	r24, Z+
    2314:	37 fe       	sbrs	r3, 7
    2316:	81 91       	ld	r24, Z+
    2318:	5f 01       	movw	r10, r30
    231a:	b6 01       	movw	r22, r12
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	28 d1       	rcall	.+592    	; 0x2570 <fputc>
    2320:	21 10       	cpse	r2, r1
    2322:	2a 94       	dec	r2
    2324:	21 e0       	ldi	r18, 0x01	; 1
    2326:	82 1a       	sub	r8, r18
    2328:	91 08       	sbc	r9, r1
    232a:	81 14       	cp	r8, r1
    232c:	91 04       	cpc	r9, r1
    232e:	79 f7       	brne	.-34     	; 0x230e <__stack+0x10f>
    2330:	e1 c0       	rjmp	.+450    	; 0x24f4 <__stack+0x2f5>
    2332:	84 36       	cpi	r24, 0x64	; 100
    2334:	11 f0       	breq	.+4      	; 0x233a <__stack+0x13b>
    2336:	89 36       	cpi	r24, 0x69	; 105
    2338:	39 f5       	brne	.+78     	; 0x2388 <__stack+0x189>
    233a:	f8 01       	movw	r30, r16
    233c:	37 fe       	sbrs	r3, 7
    233e:	07 c0       	rjmp	.+14     	; 0x234e <__stack+0x14f>
    2340:	60 81       	ld	r22, Z
    2342:	71 81       	ldd	r23, Z+1	; 0x01
    2344:	82 81       	ldd	r24, Z+2	; 0x02
    2346:	93 81       	ldd	r25, Z+3	; 0x03
    2348:	0c 5f       	subi	r16, 0xFC	; 252
    234a:	1f 4f       	sbci	r17, 0xFF	; 255
    234c:	08 c0       	rjmp	.+16     	; 0x235e <__stack+0x15f>
    234e:	60 81       	ld	r22, Z
    2350:	71 81       	ldd	r23, Z+1	; 0x01
    2352:	07 2e       	mov	r0, r23
    2354:	00 0c       	add	r0, r0
    2356:	88 0b       	sbc	r24, r24
    2358:	99 0b       	sbc	r25, r25
    235a:	0e 5f       	subi	r16, 0xFE	; 254
    235c:	1f 4f       	sbci	r17, 0xFF	; 255
    235e:	f3 2d       	mov	r31, r3
    2360:	ff 76       	andi	r31, 0x6F	; 111
    2362:	3f 2e       	mov	r3, r31
    2364:	97 ff       	sbrs	r25, 7
    2366:	09 c0       	rjmp	.+18     	; 0x237a <__stack+0x17b>
    2368:	90 95       	com	r25
    236a:	80 95       	com	r24
    236c:	70 95       	com	r23
    236e:	61 95       	neg	r22
    2370:	7f 4f       	sbci	r23, 0xFF	; 255
    2372:	8f 4f       	sbci	r24, 0xFF	; 255
    2374:	9f 4f       	sbci	r25, 0xFF	; 255
    2376:	f0 68       	ori	r31, 0x80	; 128
    2378:	3f 2e       	mov	r3, r31
    237a:	2a e0       	ldi	r18, 0x0A	; 10
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	a3 01       	movw	r20, r6
    2380:	33 d1       	rcall	.+614    	; 0x25e8 <__ultoa_invert>
    2382:	88 2e       	mov	r8, r24
    2384:	86 18       	sub	r8, r6
    2386:	44 c0       	rjmp	.+136    	; 0x2410 <__stack+0x211>
    2388:	85 37       	cpi	r24, 0x75	; 117
    238a:	31 f4       	brne	.+12     	; 0x2398 <__stack+0x199>
    238c:	23 2d       	mov	r18, r3
    238e:	2f 7e       	andi	r18, 0xEF	; 239
    2390:	b2 2e       	mov	r11, r18
    2392:	2a e0       	ldi	r18, 0x0A	; 10
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	25 c0       	rjmp	.+74     	; 0x23e2 <__stack+0x1e3>
    2398:	93 2d       	mov	r25, r3
    239a:	99 7f       	andi	r25, 0xF9	; 249
    239c:	b9 2e       	mov	r11, r25
    239e:	8f 36       	cpi	r24, 0x6F	; 111
    23a0:	c1 f0       	breq	.+48     	; 0x23d2 <__stack+0x1d3>
    23a2:	18 f4       	brcc	.+6      	; 0x23aa <__stack+0x1ab>
    23a4:	88 35       	cpi	r24, 0x58	; 88
    23a6:	79 f0       	breq	.+30     	; 0x23c6 <__stack+0x1c7>
    23a8:	ae c0       	rjmp	.+348    	; 0x2506 <__stack+0x307>
    23aa:	80 37       	cpi	r24, 0x70	; 112
    23ac:	19 f0       	breq	.+6      	; 0x23b4 <__stack+0x1b5>
    23ae:	88 37       	cpi	r24, 0x78	; 120
    23b0:	21 f0       	breq	.+8      	; 0x23ba <__stack+0x1bb>
    23b2:	a9 c0       	rjmp	.+338    	; 0x2506 <__stack+0x307>
    23b4:	e9 2f       	mov	r30, r25
    23b6:	e0 61       	ori	r30, 0x10	; 16
    23b8:	be 2e       	mov	r11, r30
    23ba:	b4 fe       	sbrs	r11, 4
    23bc:	0d c0       	rjmp	.+26     	; 0x23d8 <__stack+0x1d9>
    23be:	fb 2d       	mov	r31, r11
    23c0:	f4 60       	ori	r31, 0x04	; 4
    23c2:	bf 2e       	mov	r11, r31
    23c4:	09 c0       	rjmp	.+18     	; 0x23d8 <__stack+0x1d9>
    23c6:	34 fe       	sbrs	r3, 4
    23c8:	0a c0       	rjmp	.+20     	; 0x23de <__stack+0x1df>
    23ca:	29 2f       	mov	r18, r25
    23cc:	26 60       	ori	r18, 0x06	; 6
    23ce:	b2 2e       	mov	r11, r18
    23d0:	06 c0       	rjmp	.+12     	; 0x23de <__stack+0x1df>
    23d2:	28 e0       	ldi	r18, 0x08	; 8
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	05 c0       	rjmp	.+10     	; 0x23e2 <__stack+0x1e3>
    23d8:	20 e1       	ldi	r18, 0x10	; 16
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <__stack+0x1e3>
    23de:	20 e1       	ldi	r18, 0x10	; 16
    23e0:	32 e0       	ldi	r19, 0x02	; 2
    23e2:	f8 01       	movw	r30, r16
    23e4:	b7 fe       	sbrs	r11, 7
    23e6:	07 c0       	rjmp	.+14     	; 0x23f6 <__stack+0x1f7>
    23e8:	60 81       	ld	r22, Z
    23ea:	71 81       	ldd	r23, Z+1	; 0x01
    23ec:	82 81       	ldd	r24, Z+2	; 0x02
    23ee:	93 81       	ldd	r25, Z+3	; 0x03
    23f0:	0c 5f       	subi	r16, 0xFC	; 252
    23f2:	1f 4f       	sbci	r17, 0xFF	; 255
    23f4:	06 c0       	rjmp	.+12     	; 0x2402 <__stack+0x203>
    23f6:	60 81       	ld	r22, Z
    23f8:	71 81       	ldd	r23, Z+1	; 0x01
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	0e 5f       	subi	r16, 0xFE	; 254
    2400:	1f 4f       	sbci	r17, 0xFF	; 255
    2402:	a3 01       	movw	r20, r6
    2404:	f1 d0       	rcall	.+482    	; 0x25e8 <__ultoa_invert>
    2406:	88 2e       	mov	r8, r24
    2408:	86 18       	sub	r8, r6
    240a:	fb 2d       	mov	r31, r11
    240c:	ff 77       	andi	r31, 0x7F	; 127
    240e:	3f 2e       	mov	r3, r31
    2410:	36 fe       	sbrs	r3, 6
    2412:	0d c0       	rjmp	.+26     	; 0x242e <__stack+0x22f>
    2414:	23 2d       	mov	r18, r3
    2416:	2e 7f       	andi	r18, 0xFE	; 254
    2418:	a2 2e       	mov	r10, r18
    241a:	89 14       	cp	r8, r9
    241c:	58 f4       	brcc	.+22     	; 0x2434 <__stack+0x235>
    241e:	34 fe       	sbrs	r3, 4
    2420:	0b c0       	rjmp	.+22     	; 0x2438 <__stack+0x239>
    2422:	32 fc       	sbrc	r3, 2
    2424:	09 c0       	rjmp	.+18     	; 0x2438 <__stack+0x239>
    2426:	83 2d       	mov	r24, r3
    2428:	8e 7e       	andi	r24, 0xEE	; 238
    242a:	a8 2e       	mov	r10, r24
    242c:	05 c0       	rjmp	.+10     	; 0x2438 <__stack+0x239>
    242e:	b8 2c       	mov	r11, r8
    2430:	a3 2c       	mov	r10, r3
    2432:	03 c0       	rjmp	.+6      	; 0x243a <__stack+0x23b>
    2434:	b8 2c       	mov	r11, r8
    2436:	01 c0       	rjmp	.+2      	; 0x243a <__stack+0x23b>
    2438:	b9 2c       	mov	r11, r9
    243a:	a4 fe       	sbrs	r10, 4
    243c:	0f c0       	rjmp	.+30     	; 0x245c <__stack+0x25d>
    243e:	fe 01       	movw	r30, r28
    2440:	e8 0d       	add	r30, r8
    2442:	f1 1d       	adc	r31, r1
    2444:	80 81       	ld	r24, Z
    2446:	80 33       	cpi	r24, 0x30	; 48
    2448:	21 f4       	brne	.+8      	; 0x2452 <__stack+0x253>
    244a:	9a 2d       	mov	r25, r10
    244c:	99 7e       	andi	r25, 0xE9	; 233
    244e:	a9 2e       	mov	r10, r25
    2450:	09 c0       	rjmp	.+18     	; 0x2464 <__stack+0x265>
    2452:	a2 fe       	sbrs	r10, 2
    2454:	06 c0       	rjmp	.+12     	; 0x2462 <__stack+0x263>
    2456:	b3 94       	inc	r11
    2458:	b3 94       	inc	r11
    245a:	04 c0       	rjmp	.+8      	; 0x2464 <__stack+0x265>
    245c:	8a 2d       	mov	r24, r10
    245e:	86 78       	andi	r24, 0x86	; 134
    2460:	09 f0       	breq	.+2      	; 0x2464 <__stack+0x265>
    2462:	b3 94       	inc	r11
    2464:	a3 fc       	sbrc	r10, 3
    2466:	10 c0       	rjmp	.+32     	; 0x2488 <__stack+0x289>
    2468:	a0 fe       	sbrs	r10, 0
    246a:	06 c0       	rjmp	.+12     	; 0x2478 <__stack+0x279>
    246c:	b2 14       	cp	r11, r2
    246e:	80 f4       	brcc	.+32     	; 0x2490 <__stack+0x291>
    2470:	28 0c       	add	r2, r8
    2472:	92 2c       	mov	r9, r2
    2474:	9b 18       	sub	r9, r11
    2476:	0d c0       	rjmp	.+26     	; 0x2492 <__stack+0x293>
    2478:	b2 14       	cp	r11, r2
    247a:	58 f4       	brcc	.+22     	; 0x2492 <__stack+0x293>
    247c:	b6 01       	movw	r22, r12
    247e:	80 e2       	ldi	r24, 0x20	; 32
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	76 d0       	rcall	.+236    	; 0x2570 <fputc>
    2484:	b3 94       	inc	r11
    2486:	f8 cf       	rjmp	.-16     	; 0x2478 <__stack+0x279>
    2488:	b2 14       	cp	r11, r2
    248a:	18 f4       	brcc	.+6      	; 0x2492 <__stack+0x293>
    248c:	2b 18       	sub	r2, r11
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <__stack+0x295>
    2490:	98 2c       	mov	r9, r8
    2492:	21 2c       	mov	r2, r1
    2494:	a4 fe       	sbrs	r10, 4
    2496:	0f c0       	rjmp	.+30     	; 0x24b6 <__stack+0x2b7>
    2498:	b6 01       	movw	r22, r12
    249a:	80 e3       	ldi	r24, 0x30	; 48
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	68 d0       	rcall	.+208    	; 0x2570 <fputc>
    24a0:	a2 fe       	sbrs	r10, 2
    24a2:	16 c0       	rjmp	.+44     	; 0x24d0 <__stack+0x2d1>
    24a4:	a1 fc       	sbrc	r10, 1
    24a6:	03 c0       	rjmp	.+6      	; 0x24ae <__stack+0x2af>
    24a8:	88 e7       	ldi	r24, 0x78	; 120
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <__stack+0x2b3>
    24ae:	88 e5       	ldi	r24, 0x58	; 88
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	b6 01       	movw	r22, r12
    24b4:	0c c0       	rjmp	.+24     	; 0x24ce <__stack+0x2cf>
    24b6:	8a 2d       	mov	r24, r10
    24b8:	86 78       	andi	r24, 0x86	; 134
    24ba:	51 f0       	breq	.+20     	; 0x24d0 <__stack+0x2d1>
    24bc:	a1 fe       	sbrs	r10, 1
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <__stack+0x2c5>
    24c0:	8b e2       	ldi	r24, 0x2B	; 43
    24c2:	01 c0       	rjmp	.+2      	; 0x24c6 <__stack+0x2c7>
    24c4:	80 e2       	ldi	r24, 0x20	; 32
    24c6:	a7 fc       	sbrc	r10, 7
    24c8:	8d e2       	ldi	r24, 0x2D	; 45
    24ca:	b6 01       	movw	r22, r12
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	50 d0       	rcall	.+160    	; 0x2570 <fputc>
    24d0:	89 14       	cp	r8, r9
    24d2:	30 f4       	brcc	.+12     	; 0x24e0 <__stack+0x2e1>
    24d4:	b6 01       	movw	r22, r12
    24d6:	80 e3       	ldi	r24, 0x30	; 48
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	4a d0       	rcall	.+148    	; 0x2570 <fputc>
    24dc:	9a 94       	dec	r9
    24de:	f8 cf       	rjmp	.-16     	; 0x24d0 <__stack+0x2d1>
    24e0:	8a 94       	dec	r8
    24e2:	f3 01       	movw	r30, r6
    24e4:	e8 0d       	add	r30, r8
    24e6:	f1 1d       	adc	r31, r1
    24e8:	80 81       	ld	r24, Z
    24ea:	b6 01       	movw	r22, r12
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	40 d0       	rcall	.+128    	; 0x2570 <fputc>
    24f0:	81 10       	cpse	r8, r1
    24f2:	f6 cf       	rjmp	.-20     	; 0x24e0 <__stack+0x2e1>
    24f4:	22 20       	and	r2, r2
    24f6:	09 f4       	brne	.+2      	; 0x24fa <__stack+0x2fb>
    24f8:	4e ce       	rjmp	.-868    	; 0x2196 <vfprintf+0x4c>
    24fa:	b6 01       	movw	r22, r12
    24fc:	80 e2       	ldi	r24, 0x20	; 32
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	37 d0       	rcall	.+110    	; 0x2570 <fputc>
    2502:	2a 94       	dec	r2
    2504:	f7 cf       	rjmp	.-18     	; 0x24f4 <__stack+0x2f5>
    2506:	f6 01       	movw	r30, r12
    2508:	86 81       	ldd	r24, Z+6	; 0x06
    250a:	97 81       	ldd	r25, Z+7	; 0x07
    250c:	02 c0       	rjmp	.+4      	; 0x2512 <__stack+0x313>
    250e:	8f ef       	ldi	r24, 0xFF	; 255
    2510:	9f ef       	ldi	r25, 0xFF	; 255
    2512:	2b 96       	adiw	r28, 0x0b	; 11
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	de bf       	out	0x3e, r29	; 62
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	cd bf       	out	0x3d, r28	; 61
    251e:	df 91       	pop	r29
    2520:	cf 91       	pop	r28
    2522:	1f 91       	pop	r17
    2524:	0f 91       	pop	r16
    2526:	ff 90       	pop	r15
    2528:	ef 90       	pop	r14
    252a:	df 90       	pop	r13
    252c:	cf 90       	pop	r12
    252e:	bf 90       	pop	r11
    2530:	af 90       	pop	r10
    2532:	9f 90       	pop	r9
    2534:	8f 90       	pop	r8
    2536:	7f 90       	pop	r7
    2538:	6f 90       	pop	r6
    253a:	5f 90       	pop	r5
    253c:	4f 90       	pop	r4
    253e:	3f 90       	pop	r3
    2540:	2f 90       	pop	r2
    2542:	08 95       	ret

00002544 <strnlen_P>:
    2544:	fc 01       	movw	r30, r24
    2546:	05 90       	lpm	r0, Z+
    2548:	61 50       	subi	r22, 0x01	; 1
    254a:	70 40       	sbci	r23, 0x00	; 0
    254c:	01 10       	cpse	r0, r1
    254e:	d8 f7       	brcc	.-10     	; 0x2546 <strnlen_P+0x2>
    2550:	80 95       	com	r24
    2552:	90 95       	com	r25
    2554:	8e 0f       	add	r24, r30
    2556:	9f 1f       	adc	r25, r31
    2558:	08 95       	ret

0000255a <strnlen>:
    255a:	fc 01       	movw	r30, r24
    255c:	61 50       	subi	r22, 0x01	; 1
    255e:	70 40       	sbci	r23, 0x00	; 0
    2560:	01 90       	ld	r0, Z+
    2562:	01 10       	cpse	r0, r1
    2564:	d8 f7       	brcc	.-10     	; 0x255c <strnlen+0x2>
    2566:	80 95       	com	r24
    2568:	90 95       	com	r25
    256a:	8e 0f       	add	r24, r30
    256c:	9f 1f       	adc	r25, r31
    256e:	08 95       	ret

00002570 <fputc>:
    2570:	0f 93       	push	r16
    2572:	1f 93       	push	r17
    2574:	cf 93       	push	r28
    2576:	df 93       	push	r29
    2578:	fb 01       	movw	r30, r22
    257a:	23 81       	ldd	r18, Z+3	; 0x03
    257c:	21 fd       	sbrc	r18, 1
    257e:	03 c0       	rjmp	.+6      	; 0x2586 <fputc+0x16>
    2580:	8f ef       	ldi	r24, 0xFF	; 255
    2582:	9f ef       	ldi	r25, 0xFF	; 255
    2584:	2c c0       	rjmp	.+88     	; 0x25de <fputc+0x6e>
    2586:	22 ff       	sbrs	r18, 2
    2588:	16 c0       	rjmp	.+44     	; 0x25b6 <fputc+0x46>
    258a:	46 81       	ldd	r20, Z+6	; 0x06
    258c:	57 81       	ldd	r21, Z+7	; 0x07
    258e:	24 81       	ldd	r18, Z+4	; 0x04
    2590:	35 81       	ldd	r19, Z+5	; 0x05
    2592:	42 17       	cp	r20, r18
    2594:	53 07       	cpc	r21, r19
    2596:	44 f4       	brge	.+16     	; 0x25a8 <fputc+0x38>
    2598:	a0 81       	ld	r26, Z
    259a:	b1 81       	ldd	r27, Z+1	; 0x01
    259c:	9d 01       	movw	r18, r26
    259e:	2f 5f       	subi	r18, 0xFF	; 255
    25a0:	3f 4f       	sbci	r19, 0xFF	; 255
    25a2:	31 83       	std	Z+1, r19	; 0x01
    25a4:	20 83       	st	Z, r18
    25a6:	8c 93       	st	X, r24
    25a8:	26 81       	ldd	r18, Z+6	; 0x06
    25aa:	37 81       	ldd	r19, Z+7	; 0x07
    25ac:	2f 5f       	subi	r18, 0xFF	; 255
    25ae:	3f 4f       	sbci	r19, 0xFF	; 255
    25b0:	37 83       	std	Z+7, r19	; 0x07
    25b2:	26 83       	std	Z+6, r18	; 0x06
    25b4:	14 c0       	rjmp	.+40     	; 0x25de <fputc+0x6e>
    25b6:	8b 01       	movw	r16, r22
    25b8:	ec 01       	movw	r28, r24
    25ba:	fb 01       	movw	r30, r22
    25bc:	00 84       	ldd	r0, Z+8	; 0x08
    25be:	f1 85       	ldd	r31, Z+9	; 0x09
    25c0:	e0 2d       	mov	r30, r0
    25c2:	19 95       	eicall
    25c4:	89 2b       	or	r24, r25
    25c6:	e1 f6       	brne	.-72     	; 0x2580 <fputc+0x10>
    25c8:	d8 01       	movw	r26, r16
    25ca:	16 96       	adiw	r26, 0x06	; 6
    25cc:	8d 91       	ld	r24, X+
    25ce:	9c 91       	ld	r25, X
    25d0:	17 97       	sbiw	r26, 0x07	; 7
    25d2:	01 96       	adiw	r24, 0x01	; 1
    25d4:	17 96       	adiw	r26, 0x07	; 7
    25d6:	9c 93       	st	X, r25
    25d8:	8e 93       	st	-X, r24
    25da:	16 97       	sbiw	r26, 0x06	; 6
    25dc:	ce 01       	movw	r24, r28
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	08 95       	ret

000025e8 <__ultoa_invert>:
    25e8:	fa 01       	movw	r30, r20
    25ea:	aa 27       	eor	r26, r26
    25ec:	28 30       	cpi	r18, 0x08	; 8
    25ee:	51 f1       	breq	.+84     	; 0x2644 <__ultoa_invert+0x5c>
    25f0:	20 31       	cpi	r18, 0x10	; 16
    25f2:	81 f1       	breq	.+96     	; 0x2654 <__ultoa_invert+0x6c>
    25f4:	e8 94       	clt
    25f6:	6f 93       	push	r22
    25f8:	6e 7f       	andi	r22, 0xFE	; 254
    25fa:	6e 5f       	subi	r22, 0xFE	; 254
    25fc:	7f 4f       	sbci	r23, 0xFF	; 255
    25fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2600:	9f 4f       	sbci	r25, 0xFF	; 255
    2602:	af 4f       	sbci	r26, 0xFF	; 255
    2604:	b1 e0       	ldi	r27, 0x01	; 1
    2606:	3e d0       	rcall	.+124    	; 0x2684 <__ultoa_invert+0x9c>
    2608:	b4 e0       	ldi	r27, 0x04	; 4
    260a:	3c d0       	rcall	.+120    	; 0x2684 <__ultoa_invert+0x9c>
    260c:	67 0f       	add	r22, r23
    260e:	78 1f       	adc	r23, r24
    2610:	89 1f       	adc	r24, r25
    2612:	9a 1f       	adc	r25, r26
    2614:	a1 1d       	adc	r26, r1
    2616:	68 0f       	add	r22, r24
    2618:	79 1f       	adc	r23, r25
    261a:	8a 1f       	adc	r24, r26
    261c:	91 1d       	adc	r25, r1
    261e:	a1 1d       	adc	r26, r1
    2620:	6a 0f       	add	r22, r26
    2622:	71 1d       	adc	r23, r1
    2624:	81 1d       	adc	r24, r1
    2626:	91 1d       	adc	r25, r1
    2628:	a1 1d       	adc	r26, r1
    262a:	20 d0       	rcall	.+64     	; 0x266c <__ultoa_invert+0x84>
    262c:	09 f4       	brne	.+2      	; 0x2630 <__ultoa_invert+0x48>
    262e:	68 94       	set
    2630:	3f 91       	pop	r19
    2632:	2a e0       	ldi	r18, 0x0A	; 10
    2634:	26 9f       	mul	r18, r22
    2636:	11 24       	eor	r1, r1
    2638:	30 19       	sub	r19, r0
    263a:	30 5d       	subi	r19, 0xD0	; 208
    263c:	31 93       	st	Z+, r19
    263e:	de f6       	brtc	.-74     	; 0x25f6 <__ultoa_invert+0xe>
    2640:	cf 01       	movw	r24, r30
    2642:	08 95       	ret
    2644:	46 2f       	mov	r20, r22
    2646:	47 70       	andi	r20, 0x07	; 7
    2648:	40 5d       	subi	r20, 0xD0	; 208
    264a:	41 93       	st	Z+, r20
    264c:	b3 e0       	ldi	r27, 0x03	; 3
    264e:	0f d0       	rcall	.+30     	; 0x266e <__ultoa_invert+0x86>
    2650:	c9 f7       	brne	.-14     	; 0x2644 <__ultoa_invert+0x5c>
    2652:	f6 cf       	rjmp	.-20     	; 0x2640 <__ultoa_invert+0x58>
    2654:	46 2f       	mov	r20, r22
    2656:	4f 70       	andi	r20, 0x0F	; 15
    2658:	40 5d       	subi	r20, 0xD0	; 208
    265a:	4a 33       	cpi	r20, 0x3A	; 58
    265c:	18 f0       	brcs	.+6      	; 0x2664 <__ultoa_invert+0x7c>
    265e:	49 5d       	subi	r20, 0xD9	; 217
    2660:	31 fd       	sbrc	r19, 1
    2662:	40 52       	subi	r20, 0x20	; 32
    2664:	41 93       	st	Z+, r20
    2666:	02 d0       	rcall	.+4      	; 0x266c <__ultoa_invert+0x84>
    2668:	a9 f7       	brne	.-22     	; 0x2654 <__ultoa_invert+0x6c>
    266a:	ea cf       	rjmp	.-44     	; 0x2640 <__ultoa_invert+0x58>
    266c:	b4 e0       	ldi	r27, 0x04	; 4
    266e:	a6 95       	lsr	r26
    2670:	97 95       	ror	r25
    2672:	87 95       	ror	r24
    2674:	77 95       	ror	r23
    2676:	67 95       	ror	r22
    2678:	ba 95       	dec	r27
    267a:	c9 f7       	brne	.-14     	; 0x266e <__ultoa_invert+0x86>
    267c:	00 97       	sbiw	r24, 0x00	; 0
    267e:	61 05       	cpc	r22, r1
    2680:	71 05       	cpc	r23, r1
    2682:	08 95       	ret
    2684:	9b 01       	movw	r18, r22
    2686:	ac 01       	movw	r20, r24
    2688:	0a 2e       	mov	r0, r26
    268a:	06 94       	lsr	r0
    268c:	57 95       	ror	r21
    268e:	47 95       	ror	r20
    2690:	37 95       	ror	r19
    2692:	27 95       	ror	r18
    2694:	ba 95       	dec	r27
    2696:	c9 f7       	brne	.-14     	; 0x268a <__ultoa_invert+0xa2>
    2698:	62 0f       	add	r22, r18
    269a:	73 1f       	adc	r23, r19
    269c:	84 1f       	adc	r24, r20
    269e:	95 1f       	adc	r25, r21
    26a0:	a0 1d       	adc	r26, r0
    26a2:	08 95       	ret

000026a4 <_exit>:
    26a4:	f8 94       	cli

000026a6 <__stop_program>:
    26a6:	ff cf       	rjmp	.-2      	; 0x26a6 <__stop_program>

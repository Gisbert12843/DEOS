
DEOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800200  000029e0  00002a74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025a  0080032e  0080032e  00002ba2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002ba2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006d0  00000000  00000000  00002c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000069a1  00000000  00000000  00003310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024aa  00000000  00000000  00009cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003a34  00000000  00000000  0000c15b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001374  00000000  00000000  0000fb90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a76  00000000  00000000  00010f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000042df  00000000  00000000  0001297a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000678  00000000  00000000  00016c59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	02 c2       	rjmp	.+1028   	; 0x406 <__ctors_end>
       2:	00 00       	nop
       4:	31 c2       	rjmp	.+1122   	; 0x468 <__bad_interrupt>
       6:	00 00       	nop
       8:	2f c2       	rjmp	.+1118   	; 0x468 <__bad_interrupt>
       a:	00 00       	nop
       c:	2d c2       	rjmp	.+1114   	; 0x468 <__bad_interrupt>
       e:	00 00       	nop
      10:	2b c2       	rjmp	.+1110   	; 0x468 <__bad_interrupt>
      12:	00 00       	nop
      14:	29 c2       	rjmp	.+1106   	; 0x468 <__bad_interrupt>
      16:	00 00       	nop
      18:	27 c2       	rjmp	.+1102   	; 0x468 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	25 c2       	rjmp	.+1098   	; 0x468 <__bad_interrupt>
      1e:	00 00       	nop
      20:	23 c2       	rjmp	.+1094   	; 0x468 <__bad_interrupt>
      22:	00 00       	nop
      24:	21 c2       	rjmp	.+1090   	; 0x468 <__bad_interrupt>
      26:	00 00       	nop
      28:	1f c2       	rjmp	.+1086   	; 0x468 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	1d c2       	rjmp	.+1082   	; 0x468 <__bad_interrupt>
      2e:	00 00       	nop
      30:	1b c2       	rjmp	.+1078   	; 0x468 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__vector_13>
      38:	17 c2       	rjmp	.+1070   	; 0x468 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	15 c2       	rjmp	.+1066   	; 0x468 <__bad_interrupt>
      3e:	00 00       	nop
      40:	13 c2       	rjmp	.+1062   	; 0x468 <__bad_interrupt>
      42:	00 00       	nop
      44:	f1 c7       	rjmp	.+4066   	; 0x1028 <__vector_17>
      46:	00 00       	nop
      48:	0f c2       	rjmp	.+1054   	; 0x468 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0d c2       	rjmp	.+1050   	; 0x468 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0b c2       	rjmp	.+1046   	; 0x468 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__vector_21>
      58:	07 c2       	rjmp	.+1038   	; 0x468 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	05 c2       	rjmp	.+1034   	; 0x468 <__bad_interrupt>
      5e:	00 00       	nop
      60:	03 c2       	rjmp	.+1030   	; 0x468 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__vector_25>
      68:	0c 94 17 09 	jmp	0x122e	; 0x122e <__vector_26>
      6c:	fd c1       	rjmp	.+1018   	; 0x468 <__bad_interrupt>
      6e:	00 00       	nop
      70:	fb c1       	rjmp	.+1014   	; 0x468 <__bad_interrupt>
      72:	00 00       	nop
      74:	f9 c1       	rjmp	.+1010   	; 0x468 <__bad_interrupt>
      76:	00 00       	nop
      78:	f7 c1       	rjmp	.+1006   	; 0x468 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f5 c1       	rjmp	.+1002   	; 0x468 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f3 c1       	rjmp	.+998    	; 0x468 <__bad_interrupt>
      82:	00 00       	nop
      84:	f1 c1       	rjmp	.+994    	; 0x468 <__bad_interrupt>
      86:	00 00       	nop
      88:	ef c1       	rjmp	.+990    	; 0x468 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ed c1       	rjmp	.+986    	; 0x468 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__vector_36>
      94:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__vector_37>
      98:	e7 c1       	rjmp	.+974    	; 0x468 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e5 c1       	rjmp	.+970    	; 0x468 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e3 c1       	rjmp	.+966    	; 0x468 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e1 c1       	rjmp	.+962    	; 0x468 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	df c1       	rjmp	.+958    	; 0x468 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	dd c1       	rjmp	.+954    	; 0x468 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	db c1       	rjmp	.+950    	; 0x468 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d9 c1       	rjmp	.+946    	; 0x468 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d7 c1       	rjmp	.+942    	; 0x468 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d5 c1       	rjmp	.+938    	; 0x468 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d3 c1       	rjmp	.+934    	; 0x468 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d1 c1       	rjmp	.+930    	; 0x468 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	cf c1       	rjmp	.+926    	; 0x468 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__vector_51>
      d0:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__vector_52>
      d4:	c9 c1       	rjmp	.+914    	; 0x468 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__vector_54>
      dc:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__vector_55>
      e0:	c3 c1       	rjmp	.+902    	; 0x468 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f8 06       	cpc	r15, r24
      e6:	f9 06       	cpc	r15, r25
      e8:	f9 06       	cpc	r15, r25
      ea:	f9 06       	cpc	r15, r25
      ec:	f9 06       	cpc	r15, r25
      ee:	f9 06       	cpc	r15, r25
      f0:	f9 06       	cpc	r15, r25
      f2:	f9 06       	cpc	r15, r25
      f4:	f9 06       	cpc	r15, r25
      f6:	f9 06       	cpc	r15, r25
      f8:	f9 06       	cpc	r15, r25
      fa:	f9 06       	cpc	r15, r25
      fc:	f9 06       	cpc	r15, r25
      fe:	f9 06       	cpc	r15, r25
     100:	f9 06       	cpc	r15, r25
     102:	f9 06       	cpc	r15, r25
     104:	f9 06       	cpc	r15, r25
     106:	f9 06       	cpc	r15, r25
     108:	f0 06       	cpc	r15, r16
     10a:	f9 06       	cpc	r15, r25
     10c:	f9 06       	cpc	r15, r25
     10e:	f9 06       	cpc	r15, r25
     110:	f9 06       	cpc	r15, r25
     112:	f9 06       	cpc	r15, r25
     114:	f2 06       	cpc	r15, r18
     116:	f9 06       	cpc	r15, r25
     118:	f9 06       	cpc	r15, r25
     11a:	ee 06       	cpc	r14, r30
     11c:	f9 06       	cpc	r15, r25
     11e:	f9 06       	cpc	r15, r25
     120:	f9 06       	cpc	r15, r25
     122:	f9 06       	cpc	r15, r25
     124:	f8 06       	cpc	r15, r24
     126:	f9 06       	cpc	r15, r25
     128:	f9 06       	cpc	r15, r25
     12a:	f9 06       	cpc	r15, r25
     12c:	f9 06       	cpc	r15, r25
     12e:	f9 06       	cpc	r15, r25
     130:	f9 06       	cpc	r15, r25
     132:	f9 06       	cpc	r15, r25
     134:	f9 06       	cpc	r15, r25
     136:	f9 06       	cpc	r15, r25
     138:	f9 06       	cpc	r15, r25
     13a:	f9 06       	cpc	r15, r25
     13c:	f4 06       	cpc	r15, r20
     13e:	f9 06       	cpc	r15, r25
     140:	f9 06       	cpc	r15, r25
     142:	f9 06       	cpc	r15, r25
     144:	f9 06       	cpc	r15, r25
     146:	f6 06       	cpc	r15, r22
     148:	ea 06       	cpc	r14, r26
     14a:	f9 06       	cpc	r15, r25
     14c:	f9 06       	cpc	r15, r25
     14e:	f9 06       	cpc	r15, r25
     150:	f9 06       	cpc	r15, r25
     152:	f9 06       	cpc	r15, r25
     154:	ec 06       	cpc	r14, r28

00000156 <__trampolines_end>:
     156:	43 61       	ori	r20, 0x13	; 19
     158:	6e 27       	eor	r22, r30
     15a:	74 20       	and	r7, r4
     15c:	70 6f       	ori	r23, 0xF0	; 240
     15e:	70 20       	and	r7, r0
     160:	66 72       	andi	r22, 0x26	; 38
     162:	6f 6d       	ori	r22, 0xDF	; 223
     164:	20 65       	ori	r18, 0x50	; 80
     166:	6d 70       	andi	r22, 0x0D	; 13
     168:	74 79       	andi	r23, 0x94	; 148
     16a:	20 72       	andi	r18, 0x20	; 32
     16c:	65 61       	ori	r22, 0x15	; 21
     16e:	64 79       	andi	r22, 0x94	; 148
     170:	20 71       	andi	r18, 0x10	; 16
     172:	75 65       	ori	r23, 0x55	; 85
     174:	75 65       	ori	r23, 0x55	; 85
	...

00000177 <__c.2283>:
     177:	43 61 6e 27 74 20 70 75 73 68 20 6f 6e 20 66 75     Can't push on fu
     187:	6c 6c 20 72 65 61 64 79 20 71 75 65 75 65 00        ll ready queue.

00000196 <__c.2073>:
     196:	20 20 20 20 20 20 20 20 00                                  .

0000019f <__c.2289>:
     19f:	5b 45 52 52 4f 52 5d 20 00                          [ERROR] .

000001a8 <__c.2283>:
     1a8:	20 53 74 61 63 6b 20 63 6f 6c 6c 69 64 65 73 20      Stack collides 
     1b8:	77 69 74 68 20 67 6c 6f 62 61 6c 20 76 61 72 73     with global vars
	...

000001c9 <__c.2281>:
     1c9:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     1d9:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     1e9:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     1f9:	2d 2d 0a 00                                         --..

000001fd <__c.2277>:
     1fd:	5b 49 4e 46 4f 5d 20 20 00                          [INFO]  .

00000206 <__c.2279>:
     206:	55 73 65 64 20 67 6c 6f 62 61 6c 20 76 61 72 73     Used global vars
     216:	3a 20 25 64 2f 25 64 20 62 79 74 65 73 00           : %d/%d bytes.

00000224 <__c.2273>:
     224:	5b 49 4e 46 4f 5d 20 20 00                          [INFO]  .

0000022d <__c.2275>:
     22d:	42 6f 6f 74 69 6e 67 20 44 45 4f 53 20 2e 2e 2e     Booting DEOS ...
	...

0000023e <__c.2271>:
     23e:	0a 0a 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ..##############
     24e:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
     25e:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
     26e:	23 23 23 23 0a 00                                   ####..

00000274 <__c.2269>:
     274:	42 6f 6f 74 69 6e 67 20 44 45 4f 53 20 2e 2e 2e     Booting DEOS ...
	...

00000285 <__c.2445>:
     285:	6f 73 5f 73 74 61 72 74 53 63 68 65 64 75 6c 65     os_startSchedule
     295:	72 28 29 20 74 65 72 6d 69 6e 61 74 65 64 20 61     r() terminated a
     2a5:	67 61 69 6e 73 74 20 61 6c 6c 20 6f 64 64 73 20     gainst all odds 
     2b5:	2d 20 73 63 61 72 79 20 73 74 75 66 66 2e 2e 2e     - scary stuff...
	...

000002c6 <__c.2440>:
     2c6:	54 68 65 72 65 20 69 73 20 6e 6f 20 69 64 6c 65     There is no idle
     2d6:	20 70 72 6f 63 00                                    proc.

000002dc <__c.2418>:
     2dc:	6f 73 5f 65 78 65 63 28 29 20 2d 3e 20 00           os_exec() -> .

000002ea <__c.2420>:
     2ea:	4e 6f 20 66 72 65 65 20 73 6c 6f 74 20 61 76 61     No free slot ava
     2fa:	69 6c 61 62 6c 65 0a 00                             ilable..

00000302 <__c.2384>:
     302:	43 68 65 63 6b 73 75 6d 20 6d 69 73 6d 61 74 63     Checksum mismatc
     312:	68 20 69 6e 20 70 72 6f 63 65 73 73 20 25 64 00     h in process %d.

00000322 <__c.2378>:
     322:	53 74 61 63 6b 20 70 6f 69 6e 74 65 72 20 6f 75     Stack pointer ou
     332:	74 20 6f 66 20 62 6f 75 6e 64 73 20 69 6e 20 70     t of bounds in p
     342:	72 6f 63 65 73 73 20 25 64 00                       rocess %d.

0000034c <__c.2371>:
     34c:	43 72 69 74 2e 20 53 65 63 74 69 6f 6e 20 20 20     Crit. Section   
     35c:	75 6e 64 65 72 66 6c 6f 77 00                       underflow.

00000366 <__c.2365>:
     366:	43 72 69 74 2e 20 53 65 63 74 69 6f 6e 20 20 20     Crit. Section   
     376:	6f 76 65 72 66 6c 6f 77 00                          overflow.

0000037f <__c.2373>:
     37f:	20 54 65 73 74 20 66 69 6e 69 73 68 65 64 00         Test finished.

0000038e <__c.2369>:
     38e:	50 68 61 73 65 20 35 3a 20 20 72 65 66 65 72 2d     Phase 5:  refer-
     39e:	65 6e 63 65 20 66 72 61 6d 65 20 00                 ence frame .

000003aa <__c.2367>:
     3aa:	4f 4b 00                                            OK.

000003ad <__c.2365>:
     3ad:	20 20 20 20 2d 2d 3e 20 20 3c 2d 2d 00                  -->  <--.

000003ba <__c.2363>:
     3ba:	50 68 61 73 65 20 34 3a 00                          Phase 4:.

000003c3 <__c.2357>:
     3c3:	50 68 61 73 65 20 33 3a 00                          Phase 3:.

000003cc <__c.2351>:
     3cc:	4c 45 44 20 4f 66 66 00                             LED Off.

000003d4 <__c.2345>:
     3d4:	4c 45 44 20 4f 6e 00                                LED On.

000003db <__c.2343>:
     3db:	50 68 61 73 65 20 32 3a 00                          Phase 2:.

000003e4 <__c.2337>:
     3e4:	4f 6e 62 6f 61 72 64 20 4c 45 44 00                 Onboard LED.

000003f0 <__c.2335>:
     3f0:	50 68 61 73 65 20 31 3a 20 54 6f 67 67 6c 65 00     Phase 1: Toggle.

00000400 <__ctors_start>:
     400:	ad 0c       	add	r10, r13
     402:	7e 10       	cpse	r7, r14
     404:	8f 10       	cpse	r8, r15

00000406 <__ctors_end>:
     406:	11 24       	eor	r1, r1
     408:	1f be       	out	0x3f, r1	; 63
     40a:	cf ef       	ldi	r28, 0xFF	; 255
     40c:	d1 e2       	ldi	r29, 0x21	; 33
     40e:	de bf       	out	0x3e, r29	; 62
     410:	cd bf       	out	0x3d, r28	; 61
     412:	00 e0       	ldi	r16, 0x00	; 0
     414:	0c bf       	out	0x3c, r16	; 60

00000416 <__do_copy_data>:
     416:	13 e0       	ldi	r17, 0x03	; 3
     418:	a0 e0       	ldi	r26, 0x00	; 0
     41a:	b2 e0       	ldi	r27, 0x02	; 2
     41c:	e0 ee       	ldi	r30, 0xE0	; 224
     41e:	f9 e2       	ldi	r31, 0x29	; 41
     420:	00 e0       	ldi	r16, 0x00	; 0
     422:	0b bf       	out	0x3b, r16	; 59
     424:	02 c0       	rjmp	.+4      	; 0x42a <__do_copy_data+0x14>
     426:	07 90       	elpm	r0, Z+
     428:	0d 92       	st	X+, r0
     42a:	ae 32       	cpi	r26, 0x2E	; 46
     42c:	b1 07       	cpc	r27, r17
     42e:	d9 f7       	brne	.-10     	; 0x426 <__do_copy_data+0x10>

00000430 <__do_clear_bss>:
     430:	25 e0       	ldi	r18, 0x05	; 5
     432:	ae e2       	ldi	r26, 0x2E	; 46
     434:	b3 e0       	ldi	r27, 0x03	; 3
     436:	01 c0       	rjmp	.+2      	; 0x43a <.do_clear_bss_start>

00000438 <.do_clear_bss_loop>:
     438:	1d 92       	st	X+, r1

0000043a <.do_clear_bss_start>:
     43a:	a8 38       	cpi	r26, 0x88	; 136
     43c:	b2 07       	cpc	r27, r18
     43e:	e1 f7       	brne	.-8      	; 0x438 <.do_clear_bss_loop>

00000440 <__do_global_ctors>:
     440:	12 e0       	ldi	r17, 0x02	; 2
     442:	c3 e0       	ldi	r28, 0x03	; 3
     444:	d2 e0       	ldi	r29, 0x02	; 2
     446:	00 e0       	ldi	r16, 0x00	; 0
     448:	06 c0       	rjmp	.+12     	; 0x456 <__do_global_ctors+0x16>
     44a:	21 97       	sbiw	r28, 0x01	; 1
     44c:	01 09       	sbc	r16, r1
     44e:	80 2f       	mov	r24, r16
     450:	fe 01       	movw	r30, r28
     452:	0e 94 b2 11 	call	0x2364	; 0x2364 <__tablejump2__>
     456:	c0 30       	cpi	r28, 0x00	; 0
     458:	d1 07       	cpc	r29, r17
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	08 07       	cpc	r16, r24
     45e:	a9 f7       	brne	.-22     	; 0x44a <__do_global_ctors+0xa>
     460:	0e 94 83 0b 	call	0x1706	; 0x1706 <main>
     464:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <_exit>

00000468 <__bad_interrupt>:
     468:	cb cd       	rjmp	.-1130   	; 0x0 <__vectors>

0000046a <rfAdapter_init>:
 * \return True if the communication has been initialized
 */
uint8_t rfAdapter_isInitialized()
{
	return rfAdapter_initialized;
}
     46a:	c7 d1       	rcall	.+910    	; 0x7fa <serialAdapter_init>
     46c:	84 b1       	in	r24, 0x04	; 4
     46e:	80 68       	ori	r24, 0x80	; 128
     470:	84 b9       	out	0x04, r24	; 4
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <__data_end>
     478:	89 e2       	ldi	r24, 0x29	; 41
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	0c 94 03 12 	jmp	0x2406	; 0x2406 <puts>
     480:	08 95       	ret

00000482 <rfAdapter_worker>:
/*!
 *  Main task of adapter
 */
void rfAdapter_worker()
{
	serialAdapter_worker();
     482:	55 c2       	rjmp	.+1194   	; 0x92e <serialAdapter_worker>
     484:	08 95       	ret

00000486 <rfAdapter_receiveSetLed>:
 *  \param data Payload of received frame
 */
void rfAdapter_receiveSetLed(cmd_setLed_t *data)
{
	//printf("rfAdapter_receiveSetLed()");
	if ((bool)data->enable)
     486:	fc 01       	movw	r30, r24
     488:	80 81       	ld	r24, Z
     48a:	88 23       	and	r24, r24
     48c:	21 f0       	breq	.+8      	; 0x496 <rfAdapter_receiveSetLed+0x10>
	{
		PORTB |= (1 << PB7); //on
     48e:	85 b1       	in	r24, 0x05	; 5
     490:	80 68       	ori	r24, 0x80	; 128
     492:	85 b9       	out	0x05, r24	; 5
     494:	08 95       	ret
	}
	else
	{
		PORTB &= ~(1 << PB7); //off
     496:	85 b1       	in	r24, 0x05	; 5
     498:	8f 77       	andi	r24, 0x7F	; 127
     49a:	85 b9       	out	0x05, r24	; 5
     49c:	08 95       	ret

0000049e <rfAdapter_receiveToggleLed>:
 *  Handler that's called when command CMD_TOGGLE_LED was received
 */
void rfAdapter_receiveToggleLed()
{
	//printf("rfAdapter_receiveToggleLed()");
	PORTB ^= (1 << PB7);
     49e:	85 b1       	in	r24, 0x05	; 5
     4a0:	80 58       	subi	r24, 0x80	; 128
     4a2:	85 b9       	out	0x05, r24	; 5
     4a4:	08 95       	ret

000004a6 <rfAdapter_receiveLcdClear>:
 *  Handler that's called when command CMD_LCD_CLEAR was received
 */
void rfAdapter_receiveLcdClear()
{
	//printf("rfAdapter_receiveLcdClear()");
	PORTB &= ~(1 << PB7);
     4a6:	85 b1       	in	r24, 0x05	; 5
     4a8:	8f 77       	andi	r24, 0x7F	; 127
     4aa:	85 b9       	out	0x05, r24	; 5
     4ac:	08 95       	ret

000004ae <rfAdapter_receiveLcdGoto>:
 *  \param data Payload of received frame
 */
void rfAdapter_receiveLcdGoto(cmd_lcdGoto_t *data)
{
	//printf("rfAdapter_receiveLcdGoto()");
	lcd_goto(data->x,data->y);
     4ae:	fc 01       	movw	r30, r24
     4b0:	61 81       	ldd	r22, Z+1	; 0x01
     4b2:	80 81       	ld	r24, Z
     4b4:	36 c4       	rjmp	.+2156   	; 0xd22 <lcd_goto>
     4b6:	08 95       	ret

000004b8 <rfAdapter_receiveLcdPrint>:
 *  Handler that's called when command CMD_LCD_PRINT was received
 *
 *  \param data Payload of received frame
 */
void rfAdapter_receiveLcdPrint(cmd_lcdPrint_t *data)
{
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	a1 97       	sbiw	r28, 0x21	; 33
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	f8 94       	cli
     4ca:	de bf       	out	0x3e, r29	; 62
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	cd bf       	out	0x3d, r28	; 61
	//printf("rfAdapter_receiveLcdPrint()");

	char buffer[33];
	if(data->length >32)
     4d0:	fc 01       	movw	r30, r24
     4d2:	40 81       	ld	r20, Z
     4d4:	41 32       	cpi	r20, 0x21	; 33
     4d6:	a8 f4       	brcc	.+42     	; 0x502 <rfAdapter_receiveLcdPrint+0x4a>
     4d8:	8c 01       	movw	r16, r24
		return;
	memcpy(&buffer,&(data->message),data->length);
     4da:	bc 01       	movw	r22, r24
     4dc:	6f 5f       	subi	r22, 0xFF	; 255
     4de:	7f 4f       	sbci	r23, 0xFF	; 255
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	ce 01       	movw	r24, r28
     4e4:	01 96       	adiw	r24, 0x01	; 1
     4e6:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <memcpy>
	buffer[data->length] = '\0';
     4ea:	f8 01       	movw	r30, r16
     4ec:	80 81       	ld	r24, Z
     4ee:	e1 e0       	ldi	r30, 0x01	; 1
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	ec 0f       	add	r30, r28
     4f4:	fd 1f       	adc	r31, r29
     4f6:	e8 0f       	add	r30, r24
     4f8:	f1 1d       	adc	r31, r1
     4fa:	10 82       	st	Z, r1
	lcd_writeString(&buffer[0]);
     4fc:	ce 01       	movw	r24, r28
     4fe:	01 96       	adiw	r24, 0x01	; 1
     500:	86 d4       	rcall	.+2316   	; 0xe0e <lcd_writeString>
}
     502:	a1 96       	adiw	r28, 0x21	; 33
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	de bf       	out	0x3e, r29	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	cd bf       	out	0x3d, r28	; 61
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	08 95       	ret

00000518 <serialAdapter_processFrame>:
 *  Is called on command frame receive
 *
 *  \param frame Received frame
 */
void serialAdapter_processFrame(frame_t *frame)
{
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ec 01       	movw	r28, r24
	printf("serialAdapter_processFrame()\n");
     51e:	8a e3       	ldi	r24, 0x3A	; 58
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	0e 94 03 12 	call	0x2406	; 0x2406 <puts>
	printf("\tlength:%d\n", frame->header.length);
     526:	8c 81       	ldd	r24, Y+4	; 0x04
     528:	1f 92       	push	r1
     52a:	8f 93       	push	r24
     52c:	87 e5       	ldi	r24, 0x57	; 87
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	9f 93       	push	r25
     532:	8f 93       	push	r24
     534:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <printf>

	if(frame->header.length > COMM_MAX_PAYLOAD_LENGTH + sizeof(uint8_t) || frame->header.length < sizeof(command_t))
     538:	9c 81       	ldd	r25, Y+4	; 0x04
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	89 0f       	add	r24, r25
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	81 33       	cpi	r24, 0x31	; 49
     548:	b0 f5       	brcc	.+108    	; 0x5b6 <serialAdapter_processFrame+0x9e>
		return;
		
	switch(frame->innerFrame.command)
     54a:	8d 81       	ldd	r24, Y+5	; 0x05
     54c:	80 31       	cpi	r24, 0x10	; 16
     54e:	f9 f0       	breq	.+62     	; 0x58e <serialAdapter_processFrame+0x76>
     550:	28 f4       	brcc	.+10     	; 0x55c <serialAdapter_processFrame+0x44>
     552:	81 30       	cpi	r24, 0x01	; 1
     554:	41 f0       	breq	.+16     	; 0x566 <serialAdapter_processFrame+0x4e>
     556:	82 30       	cpi	r24, 0x02	; 2
     558:	89 f0       	breq	.+34     	; 0x57c <serialAdapter_processFrame+0x64>
     55a:	2d c0       	rjmp	.+90     	; 0x5b6 <serialAdapter_processFrame+0x9e>
     55c:	81 31       	cpi	r24, 0x11	; 17
     55e:	01 f1       	breq	.+64     	; 0x5a0 <serialAdapter_processFrame+0x88>
     560:	82 31       	cpi	r24, 0x12	; 18
     562:	21 f1       	breq	.+72     	; 0x5ac <serialAdapter_processFrame+0x94>
     564:	28 c0       	rjmp	.+80     	; 0x5b6 <serialAdapter_processFrame+0x9e>
	{
		case CMD_SET_LED:
		{
			printf("CMD_SET_LED\n");
     566:	83 e6       	ldi	r24, 0x63	; 99
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	0e 94 03 12 	call	0x2406	; 0x2406 <puts>
			if(frame->header.length-sizeof(command_t) != sizeof(cmd_setLed_t))
     56e:	8c 81       	ldd	r24, Y+4	; 0x04
     570:	82 30       	cpi	r24, 0x02	; 2
     572:	09 f5       	brne	.+66     	; 0x5b6 <serialAdapter_processFrame+0x9e>
				return;
			else
				rfAdapter_receiveSetLed((cmd_setLed_t*)&(frame->innerFrame.payload));		
     574:	ce 01       	movw	r24, r28
     576:	06 96       	adiw	r24, 0x06	; 6
     578:	86 df       	rcall	.-244    	; 0x486 <rfAdapter_receiveSetLed>
		
		}
		break;
     57a:	1d c0       	rjmp	.+58     	; 0x5b6 <serialAdapter_processFrame+0x9e>
		case CMD_TOGGLE_LED:
		{
			printf("CMD_TOGGLE_LED\n");
     57c:	8f e6       	ldi	r24, 0x6F	; 111
     57e:	92 e0       	ldi	r25, 0x02	; 2
     580:	0e 94 03 12 	call	0x2406	; 0x2406 <puts>
			if(frame->header.length-sizeof(command_t) != 0)
     584:	8c 81       	ldd	r24, Y+4	; 0x04
     586:	81 30       	cpi	r24, 0x01	; 1
				return;
			else
				rfAdapter_receiveToggleLed();
     588:	b1 f4       	brne	.+44     	; 0x5b6 <serialAdapter_processFrame+0x9e>
     58a:	89 df       	rcall	.-238    	; 0x49e <rfAdapter_receiveToggleLed>
		}
		break;
     58c:	14 c0       	rjmp	.+40     	; 0x5b6 <serialAdapter_processFrame+0x9e>
		
		case CMD_LCD_CLEAR:
		{
			printf("CMD_LCD_CLEAR\n");
     58e:	8e e7       	ldi	r24, 0x7E	; 126
     590:	92 e0       	ldi	r25, 0x02	; 2
     592:	0e 94 03 12 	call	0x2406	; 0x2406 <puts>
			if(frame->header.length-sizeof(command_t) != 0)
     596:	8c 81       	ldd	r24, Y+4	; 0x04
     598:	81 30       	cpi	r24, 0x01	; 1
				return;
			else
				rfAdapter_receiveLcdClear();
     59a:	69 f4       	brne	.+26     	; 0x5b6 <serialAdapter_processFrame+0x9e>
     59c:	84 df       	rcall	.-248    	; 0x4a6 <rfAdapter_receiveLcdClear>

		}
		break;
     59e:	0b c0       	rjmp	.+22     	; 0x5b6 <serialAdapter_processFrame+0x9e>
		
		case CMD_LCD_GOTO:
		{
			if(frame->header.length-sizeof(command_t) != sizeof(cmd_lcdGoto_t))
     5a0:	93 30       	cpi	r25, 0x03	; 3
				return;
			else
				rfAdapter_receiveLcdGoto((cmd_lcdGoto_t*)&(frame->innerFrame.payload));
     5a2:	49 f4       	brne	.+18     	; 0x5b6 <serialAdapter_processFrame+0x9e>
     5a4:	ce 01       	movw	r24, r28
     5a6:	06 96       	adiw	r24, 0x06	; 6
     5a8:	82 df       	rcall	.-252    	; 0x4ae <rfAdapter_receiveLcdGoto>
			//printf("CMD_LCD_GOTO\n");

		}
		break;
     5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <serialAdapter_processFrame+0x9e>
		
		case CMD_LCD_PRINT:
		{
			if(frame->header.length-sizeof(command_t) != sizeof(cmd_lcdPrint_t))
     5ac:	92 32       	cpi	r25, 0x22	; 34
				return;
			else
				rfAdapter_receiveLcdPrint((cmd_lcdPrint_t*)&(frame->innerFrame.payload));
     5ae:	19 f4       	brne	.+6      	; 0x5b6 <serialAdapter_processFrame+0x9e>
     5b0:	ce 01       	movw	r24, r28
     5b2:	06 96       	adiw	r24, 0x06	; 6
     5b4:	81 df       	rcall	.-254    	; 0x4b8 <rfAdapter_receiveLcdPrint>
		}
		break;
		
		default: return;
	}
}
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <rfAdapter_sendSetLed>:
 *
 *  \param destAddr Where to send the frame
 *  \param enable Whether the receiver should enable or disable their led
 */
void rfAdapter_sendSetLed(address_t destAddr, bool enable)
{
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	e1 97       	sbiw	r28, 0x31	; 49
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
	//printf("rfAdapter_sendSetLed()");
	
	inner_frame_t inner_frame;
	inner_frame.command = CMD_SET_LED;
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	99 83       	std	Y+1, r25	; 0x01
	inner_frame.payload[0] = (uint8_t)enable;
     5d4:	6a 83       	std	Y+2, r22	; 0x02
	
	serialAdapter_writeFrame(destAddr,sizeof(inner_frame),&inner_frame);
     5d6:	ae 01       	movw	r20, r28
     5d8:	4f 5f       	subi	r20, 0xFF	; 255
     5da:	5f 4f       	sbci	r21, 0xFF	; 255
     5dc:	61 e3       	ldi	r22, 0x31	; 49
     5de:	44 d1       	rcall	.+648    	; 0x868 <serialAdapter_writeFrame>
}
     5e0:	e1 96       	adiw	r28, 0x31	; 49
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	de bf       	out	0x3e, r29	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	cd bf       	out	0x3d, r28	; 61
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	08 95       	ret

000005f2 <rfAdapter_sendToggleLed>:
 *  Sends a frame with command CMD_TOGGLE_LED
 *
 *  \param destAddr Where to send the frame
 */
void rfAdapter_sendToggleLed(address_t destAddr)
{
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	e1 97       	sbiw	r28, 0x31	; 49
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
     608:	18 2f       	mov	r17, r24
	printf("rfAdapter_sendToggleLed()\n");
     60a:	8c e8       	ldi	r24, 0x8C	; 140
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	0e 94 03 12 	call	0x2406	; 0x2406 <puts>

	inner_frame_t inner_frame;
	inner_frame.command = CMD_TOGGLE_LED;
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	89 83       	std	Y+1, r24	; 0x01
	
	serialAdapter_writeFrame(destAddr,sizeof(command_t),&inner_frame);
     616:	ae 01       	movw	r20, r28
     618:	4f 5f       	subi	r20, 0xFF	; 255
     61a:	5f 4f       	sbci	r21, 0xFF	; 255
     61c:	61 e0       	ldi	r22, 0x01	; 1
     61e:	81 2f       	mov	r24, r17
     620:	23 d1       	rcall	.+582    	; 0x868 <serialAdapter_writeFrame>
}
     622:	e1 96       	adiw	r28, 0x31	; 49
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	f8 94       	cli
     628:	de bf       	out	0x3e, r29	; 62
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	1f 91       	pop	r17
     634:	08 95       	ret

00000636 <rfAdapter_sendLcdClear>:
 *  Sends a frame with command CMD_LCD_CLEAR
 *
 *  \param destAddr Where to send the frame
 */
void rfAdapter_sendLcdClear(address_t destAddr)
{
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	e1 97       	sbiw	r28, 0x31	; 49
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
	//printf("rfAdapter_sendLcdClear()");
	inner_frame_t inner_frame;
	inner_frame.command = CMD_LCD_CLEAR;
     64a:	90 e1       	ldi	r25, 0x10	; 16
     64c:	99 83       	std	Y+1, r25	; 0x01
	
	serialAdapter_writeFrame(destAddr,sizeof(inner_frame),&inner_frame);
     64e:	ae 01       	movw	r20, r28
     650:	4f 5f       	subi	r20, 0xFF	; 255
     652:	5f 4f       	sbci	r21, 0xFF	; 255
     654:	61 e3       	ldi	r22, 0x31	; 49
     656:	08 d1       	rcall	.+528    	; 0x868 <serialAdapter_writeFrame>
}
     658:	e1 96       	adiw	r28, 0x31	; 49
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <rfAdapter_sendLcdGoto>:
 *  \param destAddr Where to send the frame
 *  \param x Which column should be selected by the receiver
 *  \param y Which row should be selected by the receiver
 */
void rfAdapter_sendLcdGoto(address_t destAddr, uint8_t x, uint8_t y)
{
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	e1 97       	sbiw	r28, 0x31	; 49
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	de bf       	out	0x3e, r29	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	cd bf       	out	0x3d, r28	; 61
	//printf("rfAdapter_sendLcdGoto()");
	inner_frame_t inner_frame;
	inner_frame.command = CMD_LCD_GOTO;
     67e:	91 e1       	ldi	r25, 0x11	; 17
     680:	99 83       	std	Y+1, r25	; 0x01
	
	 cmd_lcdGoto_t cmd;
	 cmd.x =x;
	 cmd.y =y;
	 memcpy(&inner_frame.payload, &cmd, sizeof(cmd));
     682:	6a 83       	std	Y+2, r22	; 0x02
     684:	4b 83       	std	Y+3, r20	; 0x03
	
	serialAdapter_writeFrame(destAddr,sizeof(inner_frame),&inner_frame);}
     686:	ae 01       	movw	r20, r28
     688:	4f 5f       	subi	r20, 0xFF	; 255
     68a:	5f 4f       	sbci	r21, 0xFF	; 255
     68c:	61 e3       	ldi	r22, 0x31	; 49
     68e:	ec d0       	rcall	.+472    	; 0x868 <serialAdapter_writeFrame>
     690:	e1 96       	adiw	r28, 0x31	; 49
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <rfAdapter_sendLcdPrint>:
 *
 *  \param destAddr Where to send the frame
 *  \param message Which message should be printed on receiver side
 */
void rfAdapter_sendLcdPrint(address_t destAddr, const char *message)
{
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	c4 55       	subi	r28, 0x54	; 84
     6ae:	d1 09       	sbc	r29, r1
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
     6ba:	18 2f       	mov	r17, r24
     6bc:	65 96       	adiw	r28, 0x15	; 21
     6be:	7f af       	std	Y+63, r23	; 0x3f
     6c0:	6e af       	std	Y+62, r22	; 0x3e
     6c2:	65 97       	sbiw	r28, 0x15	; 21
	//printf("rfAdapter_sendLcdPrint()");
	inner_frame_t inner_frame;
	inner_frame.command = CMD_LCD_PRINT;
     6c4:	22 e1       	ldi	r18, 0x12	; 18
     6c6:	29 83       	std	Y+1, r18	; 0x01
	
	cmd_lcdPrint_t cmd;
	cmd.length = strlen(message);
     6c8:	a6 2f       	mov	r26, r22
     6ca:	b7 2f       	mov	r27, r23
     6cc:	fd 01       	movw	r30, r26
     6ce:	01 90       	ld	r0, Z+
     6d0:	00 20       	and	r0, r0
     6d2:	e9 f7       	brne	.-6      	; 0x6ce <rfAdapter_sendLcdPrint+0x2c>
     6d4:	31 97       	sbiw	r30, 0x01	; 1
     6d6:	ea 1b       	sub	r30, r26
     6d8:	fb 0b       	sbc	r31, r27
     6da:	ea ab       	std	Y+50, r30	; 0x32
	memcpy(&cmd.message, &message,cmd.length );
     6dc:	4e 2f       	mov	r20, r30
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	be 01       	movw	r22, r28
     6e2:	6d 5a       	subi	r22, 0xAD	; 173
     6e4:	7f 4f       	sbci	r23, 0xFF	; 255
     6e6:	ce 01       	movw	r24, r28
     6e8:	c3 96       	adiw	r24, 0x33	; 51
     6ea:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <memcpy>
	
	memcpy(&inner_frame.payload, &cmd, sizeof(cmd));
     6ee:	81 e2       	ldi	r24, 0x21	; 33
     6f0:	fe 01       	movw	r30, r28
     6f2:	f2 96       	adiw	r30, 0x32	; 50
     6f4:	de 01       	movw	r26, r28
     6f6:	12 96       	adiw	r26, 0x02	; 2
     6f8:	01 90       	ld	r0, Z+
     6fa:	0d 92       	st	X+, r0
     6fc:	8a 95       	dec	r24
     6fe:	e1 f7       	brne	.-8      	; 0x6f8 <rfAdapter_sendLcdPrint+0x56>
	
	serialAdapter_writeFrame(destAddr,sizeof(inner_frame),&inner_frame);
     700:	ae 01       	movw	r20, r28
     702:	4f 5f       	subi	r20, 0xFF	; 255
     704:	5f 4f       	sbci	r21, 0xFF	; 255
     706:	61 e3       	ldi	r22, 0x31	; 49
     708:	81 2f       	mov	r24, r17
     70a:	ae d0       	rcall	.+348    	; 0x868 <serialAdapter_writeFrame>
}
     70c:	cc 5a       	subi	r28, 0xAC	; 172
     70e:	df 4f       	sbci	r29, 0xFF	; 255
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	08 95       	ret

00000722 <rfAdapter_sendLcdPrintProcMem>:
 *
 *  \param destAddr Where to send the frame
 *  \param message Which message should be printed on receiver side as address to program memory. Use PSTR for creating strings on program memory
 */
void rfAdapter_sendLcdPrintProcMem(address_t destAddr, const char *message)
{
     722:	ff 92       	push	r15
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	c2 58       	subi	r28, 0x82	; 130
     732:	d1 09       	sbc	r29, r1
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	de bf       	out	0x3e, r29	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	cd bf       	out	0x3d, r28	; 61
     73e:	f8 2e       	mov	r15, r24
	//printf("rfAdapter_sendLcdPrintProcMem()");
    inner_frame_t inner_frame;
    inner_frame.command = CMD_LCD_PRINT;
     740:	82 e1       	ldi	r24, 0x12	; 18
     742:	89 83       	std	Y+1, r24	; 0x01

    // Temporary buffer to hold the string from program memory
    char buffer[COMM_MAX_PAYLOAD_LENGTH];
    
    // Copy the string from program memory to the buffer
    strncpy_P(buffer, message, sizeof(buffer) - 1);
     744:	8e 01       	movw	r16, r28
     746:	0d 5a       	subi	r16, 0xAD	; 173
     748:	1f 4f       	sbci	r17, 0xFF	; 255
     74a:	4f e2       	ldi	r20, 0x2F	; 47
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	c8 01       	movw	r24, r16
     750:	0e 94 c9 11 	call	0x2392	; 0x2392 <strncpy_P>
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
     754:	f8 01       	movw	r30, r16
     756:	17 a6       	std	Z+47, r1	; 0x2f

    // Populate the command structure
    cmd.length = strlen(buffer);
     758:	01 90       	ld	r0, Z+
     75a:	00 20       	and	r0, r0
     75c:	e9 f7       	brne	.-6      	; 0x758 <rfAdapter_sendLcdPrintProcMem+0x36>
     75e:	31 97       	sbiw	r30, 0x01	; 1
     760:	e0 1b       	sub	r30, r16
     762:	f1 0b       	sbc	r31, r17
     764:	ea ab       	std	Y+50, r30	; 0x32
    strncpy(cmd.message, buffer, sizeof(cmd.message) - 1);
     766:	4f e1       	ldi	r20, 0x1F	; 31
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	b8 01       	movw	r22, r16
     76c:	ce 01       	movw	r24, r28
     76e:	c3 96       	adiw	r24, 0x33	; 51
     770:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <strncpy>
    cmd.message[sizeof(cmd.message) - 1] = '\0'; // Ensure null termination
     774:	63 96       	adiw	r28, 0x13	; 19
     776:	1f ae       	std	Y+63, r1	; 0x3f
     778:	63 97       	sbiw	r28, 0x13	; 19

    // Copy the command structure to the inner frame payload
    memcpy(&inner_frame.payload, &cmd, sizeof(cmd));
     77a:	81 e2       	ldi	r24, 0x21	; 33
     77c:	fe 01       	movw	r30, r28
     77e:	f2 96       	adiw	r30, 0x32	; 50
     780:	de 01       	movw	r26, r28
     782:	12 96       	adiw	r26, 0x02	; 2
     784:	01 90       	ld	r0, Z+
     786:	0d 92       	st	X+, r0
     788:	8a 95       	dec	r24
     78a:	e1 f7       	brne	.-8      	; 0x784 <rfAdapter_sendLcdPrintProcMem+0x62>

    // Send the frame
    serialAdapter_writeFrame(destAddr, sizeof(inner_frame), &inner_frame);
     78c:	ae 01       	movw	r20, r28
     78e:	4f 5f       	subi	r20, 0xFF	; 255
     790:	5f 4f       	sbci	r21, 0xFF	; 255
     792:	61 e3       	ldi	r22, 0x31	; 49
     794:	8f 2d       	mov	r24, r15
     796:	68 d0       	rcall	.+208    	; 0x868 <serialAdapter_writeFrame>
     798:	ce 57       	subi	r28, 0x7E	; 126
     79a:	df 4f       	sbci	r29, 0xFF	; 255
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	ff 90       	pop	r15
     7b0:	08 95       	ret

000007b2 <serialAdapter_hasTimeout>:
{
	while (xbee_getNumberOfBytesReceived() == 0)
	{
		os_yield();
	}
}
     7b2:	8f 92       	push	r8
     7b4:	9f 92       	push	r9
     7b6:	af 92       	push	r10
     7b8:	bf 92       	push	r11
     7ba:	cf 92       	push	r12
     7bc:	df 92       	push	r13
     7be:	ef 92       	push	r14
     7c0:	ff 92       	push	r15
     7c2:	4b 01       	movw	r8, r22
     7c4:	5c 01       	movw	r10, r24
     7c6:	69 01       	movw	r12, r18
     7c8:	7a 01       	movw	r14, r20
     7ca:	2b d7       	rcall	.+3670   	; 0x1622 <getSystemTime_ms>
     7cc:	dc 01       	movw	r26, r24
     7ce:	cb 01       	movw	r24, r22
     7d0:	88 19       	sub	r24, r8
     7d2:	99 09       	sbc	r25, r9
     7d4:	aa 09       	sbc	r26, r10
     7d6:	bb 09       	sbc	r27, r11
     7d8:	21 e0       	ldi	r18, 0x01	; 1
     7da:	8c 15       	cp	r24, r12
     7dc:	9d 05       	cpc	r25, r13
     7de:	ae 05       	cpc	r26, r14
     7e0:	bf 05       	cpc	r27, r15
     7e2:	08 f4       	brcc	.+2      	; 0x7e6 <serialAdapter_hasTimeout+0x34>
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	82 2f       	mov	r24, r18
     7e8:	ff 90       	pop	r15
     7ea:	ef 90       	pop	r14
     7ec:	df 90       	pop	r13
     7ee:	cf 90       	pop	r12
     7f0:	bf 90       	pop	r11
     7f2:	af 90       	pop	r10
     7f4:	9f 90       	pop	r9
     7f6:	8f 90       	pop	r8
     7f8:	08 95       	ret

000007fa <serialAdapter_init>:
/*!
 *  Initializes the serialAdapter and their dependencies
 */
void serialAdapter_init(void)
{
	printf("serialAdapter_init\n");
     7fa:	86 ea       	ldi	r24, 0xA6	; 166
     7fc:	92 e0       	ldi	r25, 0x02	; 2
     7fe:	0e 94 03 12 	call	0x2406	; 0x2406 <puts>
	xbee_init();
     802:	2c c1       	rjmp	.+600    	; 0xa5c <xbee_init>
     804:	08 95       	ret

00000806 <serialAdapter_waitForData>:
 *  \param byteCount Count of bytes that need to arrive so that the function will unblock
 *  \param frameTimestamp Start time of the first byte arrived from which the timeout will be calculated on
 *  \return False when it times out.
 */
bool serialAdapter_waitForData(uint8_t length, time_t frameTimestamp)
{
     806:	cf 92       	push	r12
     808:	df 92       	push	r13
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	cf 93       	push	r28
     810:	c8 2f       	mov	r28, r24
     812:	6a 01       	movw	r12, r20
     814:	7b 01       	movw	r14, r22
    while (uart0_getrxcount() < length)
     816:	0b c0       	rjmp	.+22     	; 0x82e <serialAdapter_waitForData+0x28>
    {
        if (serialAdapter_hasTimeout(frameTimestamp, SERIAL_ADAPTER_READ_TIMEOUT_MS))
     818:	24 ef       	ldi	r18, 0xF4	; 244
     81a:	31 e0       	ldi	r19, 0x01	; 1
     81c:	40 e0       	ldi	r20, 0x00	; 0
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	c7 01       	movw	r24, r14
     822:	b6 01       	movw	r22, r12
     824:	c6 df       	rcall	.-116    	; 0x7b2 <serialAdapter_hasTimeout>
     826:	81 11       	cpse	r24, r1
     828:	0a c0       	rjmp	.+20     	; 0x83e <serialAdapter_waitForData+0x38>
        {
            return false;
        }
        os_yield();
     82a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <os_yield>
 *  \param frameTimestamp Start time of the first byte arrived from which the timeout will be calculated on
 *  \return False when it times out.
 */
bool serialAdapter_waitForData(uint8_t length, time_t frameTimestamp)
{
    while (uart0_getrxcount() < length)
     82e:	2c d5       	rcall	.+2648   	; 0x1288 <uart0_getrxcount>
     830:	2c 2f       	mov	r18, r28
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	82 17       	cp	r24, r18
     836:	93 07       	cpc	r25, r19
     838:	7c f3       	brlt	.-34     	; 0x818 <serialAdapter_waitForData+0x12>
        {
            return false;
        }
        os_yield();
    }
    return true;
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	01 c0       	rjmp	.+2      	; 0x840 <serialAdapter_waitForData+0x3a>
{
    while (uart0_getrxcount() < length)
    {
        if (serialAdapter_hasTimeout(frameTimestamp, SERIAL_ADAPTER_READ_TIMEOUT_MS))
        {
            return false;
     83e:	80 e0       	ldi	r24, 0x00	; 0
        }
        os_yield();
    }
    return true;
}
     840:	cf 91       	pop	r28
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	08 95       	ret

0000084c <serialAdapter_calculateChecksum>:
 *  \param checksum pointer to a checksum that will be updated
 *  \param data buffer on which the checksum will be calculated
 *  \param length size of the given buffer
 */
void serialAdapter_calculateChecksum(checksum_t *checksum, void *data, uint8_t length)
{
     84c:	fc 01       	movw	r30, r24
	for (uint8_t i = 0; i < length; i++)
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	08 c0       	rjmp	.+16     	; 0x862 <serialAdapter_calculateChecksum+0x16>
	{
		*checksum ^= ((uint8_t *)data)[i];
     852:	db 01       	movw	r26, r22
     854:	a9 0f       	add	r26, r25
     856:	b1 1d       	adc	r27, r1
     858:	2c 91       	ld	r18, X
     85a:	80 81       	ld	r24, Z
     85c:	28 27       	eor	r18, r24
     85e:	20 83       	st	Z, r18
 *  \param data buffer on which the checksum will be calculated
 *  \param length size of the given buffer
 */
void serialAdapter_calculateChecksum(checksum_t *checksum, void *data, uint8_t length)
{
	for (uint8_t i = 0; i < length; i++)
     860:	9f 5f       	subi	r25, 0xFF	; 255
     862:	94 17       	cp	r25, r20
     864:	b0 f3       	brcs	.-20     	; 0x852 <serialAdapter_calculateChecksum+0x6>
	{
		*checksum ^= ((uint8_t *)data)[i];
	}
}
     866:	08 95       	ret

00000868 <serialAdapter_writeFrame>:
 *  \param destAddr where to send the frame to
 *  \param length how many bytes the innerFrame has
 *  \param innerFrame buffer as payload of the frame
 */
void serialAdapter_writeFrame(address_t destAddr, inner_frame_length_t length, inner_frame_t *innerFrame)
{
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
     874:	28 97       	sbiw	r28, 0x08	; 8
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	cd bf       	out	0x3d, r28	; 61
     880:	08 2f       	mov	r16, r24
     882:	16 2f       	mov	r17, r22
     884:	58 87       	std	Y+8, r21	; 0x08
     886:	4f 83       	std	Y+7, r20	; 0x07
	printf("serialAdapter_writeFrame()\n");
     888:	89 eb       	ldi	r24, 0xB9	; 185
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	0e 94 03 12 	call	0x2406	; 0x2406 <puts>
	printf("\tinner_length:%d\n", length);
     890:	1f 92       	push	r1
     892:	1f 93       	push	r17
     894:	84 ed       	ldi	r24, 0xD4	; 212
     896:	92 e0       	ldi	r25, 0x02	; 2
     898:	9f 93       	push	r25
     89a:	8f 93       	push	r24
     89c:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <printf>

	// Prepare header
	frame_header_t newHeader;
	newHeader.destAddr = destAddr;
     8a0:	0c 83       	std	Y+4, r16	; 0x04
	newHeader.length = length;
     8a2:	1d 83       	std	Y+5, r17	; 0x05
	newHeader.srcAddr = serialAdapter_address;
     8a4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     8a8:	8b 83       	std	Y+3, r24	; 0x03
	newHeader.startFlag = serialAdapter_startFlag;
     8aa:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <serialAdapter_startFlag>
     8ae:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <serialAdapter_startFlag+0x1>
     8b2:	9a 83       	std	Y+2, r25	; 0x02
     8b4:	89 83       	std	Y+1, r24	; 0x01

	frame_footer_t newFooter;
	serialAdapter_calculateChecksum(&newFooter.checksum, &newHeader, sizeof(newHeader));
     8b6:	45 e0       	ldi	r20, 0x05	; 5
     8b8:	be 01       	movw	r22, r28
     8ba:	6f 5f       	subi	r22, 0xFF	; 255
     8bc:	7f 4f       	sbci	r23, 0xFF	; 255
     8be:	ce 01       	movw	r24, r28
     8c0:	06 96       	adiw	r24, 0x06	; 6
     8c2:	c4 df       	rcall	.-120    	; 0x84c <serialAdapter_calculateChecksum>
	serialAdapter_calculateChecksum(&newFooter.checksum, &innerFrame, length);
     8c4:	41 2f       	mov	r20, r17
     8c6:	be 01       	movw	r22, r28
     8c8:	69 5f       	subi	r22, 0xF9	; 249
     8ca:	7f 4f       	sbci	r23, 0xFF	; 255
     8cc:	ce 01       	movw	r24, r28
     8ce:	06 96       	adiw	r24, 0x06	; 6
     8d0:	bd df       	rcall	.-134    	; 0x84c <serialAdapter_calculateChecksum>

	xbee_writeData(&newHeader, sizeof(newHeader));
     8d2:	65 e0       	ldi	r22, 0x05	; 5
     8d4:	ce 01       	movw	r24, r28
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	c7 d0       	rcall	.+398    	; 0xa68 <xbee_writeData>
	xbee_writeData(&innerFrame, length);
     8da:	61 2f       	mov	r22, r17
     8dc:	ce 01       	movw	r24, r28
     8de:	07 96       	adiw	r24, 0x07	; 7
     8e0:	c3 d0       	rcall	.+390    	; 0xa68 <xbee_writeData>
	xbee_writeData(&newFooter, sizeof(newFooter));
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	ce 01       	movw	r24, r28
     8e6:	06 96       	adiw	r24, 0x06	; 6
     8e8:	bf d0       	rcall	.+382    	; 0xa68 <xbee_writeData>
     8ea:	0f 90       	pop	r0
}
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	28 96       	adiw	r28, 0x08	; 8
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	de bf       	out	0x3e, r29	; 62
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	cd bf       	out	0x3d, r28	; 61
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	08 95       	ret

00000908 <serialAdapter_calculateFrameChecksum>:
     908:	0f 93       	push	r16
 *
 *  \param checksum pointer to a checksum that will be updated
 *  \param frame data on which the checksum will be calculated
 */
void serialAdapter_calculateFrameChecksum(checksum_t *checksum, frame_t *frame)
{
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	8c 01       	movw	r16, r24
     912:	eb 01       	movw	r28, r22
	serialAdapter_calculateChecksum(checksum, &frame->header, sizeof(frame_header_t));
     914:	45 e0       	ldi	r20, 0x05	; 5
     916:	9a df       	rcall	.-204    	; 0x84c <serialAdapter_calculateChecksum>
	serialAdapter_calculateChecksum(checksum, &frame->innerFrame, frame->header.length);
     918:	be 01       	movw	r22, r28
     91a:	6b 5f       	subi	r22, 0xFB	; 251
     91c:	7f 4f       	sbci	r23, 0xFF	; 255
     91e:	4c 81       	ldd	r20, Y+4	; 0x04
     920:	c8 01       	movw	r24, r16
     922:	94 df       	rcall	.-216    	; 0x84c <serialAdapter_calculateChecksum>
}
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	08 95       	ret

0000092e <serialAdapter_worker>:
/*!
 *  Reads incoming data and processes it. Needs to be called periodically.
 *  Don't read from UART in any other process while this is running.
 */
void serialAdapter_worker()
{
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
     936:	ea 97       	sbiw	r28, 0x3a	; 58
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	de bf       	out	0x3e, r29	; 62
     93e:	0f be       	out	0x3f, r0	; 63
     940:	cd bf       	out	0x3d, r28	; 61
	printf("serialAdapter_worker()\n");
     942:	86 ee       	ldi	r24, 0xE6	; 230
     944:	92 e0       	ldi	r25, 0x02	; 2
     946:	0e 94 03 12 	call	0x2406	; 0x2406 <puts>
	if (!serialAdapter_waitForData(2, getSystemTime_ms()))
     94a:	6b d6       	rcall	.+3286   	; 0x1622 <getSystemTime_ms>
     94c:	ab 01       	movw	r20, r22
     94e:	bc 01       	movw	r22, r24
     950:	82 e0       	ldi	r24, 0x02	; 2
     952:	59 df       	rcall	.-334    	; 0x806 <serialAdapter_waitForData>
     954:	81 11       	cpse	r24, r1
     956:	05 c0       	rjmp	.+10     	; 0x962 <serialAdapter_worker+0x34>
	{
		printf("Timeout1\n");
     958:	8d ef       	ldi	r24, 0xFD	; 253
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	0e 94 03 12 	call	0x2406	; 0x2406 <puts>
		return;
     960:	74 c0       	rjmp	.+232    	; 0xa4a <serialAdapter_worker+0x11c>
	}

	// Parse header one by one, abort if first byte is not part of the start flag
	uint8_t flag_buffer[2];
	if (xbee_readBuffer(&flag_buffer[0], 1) != XBEE_SUCCESS || flag_buffer[0] != (serialAdapter_startFlag & 0xFF))
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	ce 01       	movw	r24, r28
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	b2 d0       	rcall	.+356    	; 0xace <xbee_readBuffer>
     96a:	81 11       	cpse	r24, r1
     96c:	6e c0       	rjmp	.+220    	; 0xa4a <serialAdapter_worker+0x11c>
     96e:	29 81       	ldd	r18, Y+1	; 0x01
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <serialAdapter_startFlag>
     976:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <serialAdapter_startFlag+0x1>
     97a:	99 27       	eor	r25, r25
     97c:	28 17       	cp	r18, r24
     97e:	39 07       	cpc	r19, r25
     980:	09 f0       	breq	.+2      	; 0x984 <serialAdapter_worker+0x56>
     982:	63 c0       	rjmp	.+198    	; 0xa4a <serialAdapter_worker+0x11c>
		return;
	if (xbee_readBuffer(&flag_buffer[1], 1) != XBEE_SUCCESS || flag_buffer[1] != ((serialAdapter_startFlag >> 8) & 0xFF))
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	ce 01       	movw	r24, r28
     988:	02 96       	adiw	r24, 0x02	; 2
     98a:	a1 d0       	rcall	.+322    	; 0xace <xbee_readBuffer>
     98c:	81 11       	cpse	r24, r1
     98e:	5d c0       	rjmp	.+186    	; 0xa4a <serialAdapter_worker+0x11c>
     990:	2a 81       	ldd	r18, Y+2	; 0x02
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <serialAdapter_startFlag+0x1>
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	28 17       	cp	r18, r24
     99c:	39 07       	cpc	r19, r25
     99e:	09 f0       	breq	.+2      	; 0x9a2 <serialAdapter_worker+0x74>
		return;

	// Wait for arrival of complete header
	if (!serialAdapter_waitForData(sizeof(frame_header_t) - (2 * sizeof(uint8_t)), getSystemTime_ms()))
     9a0:	54 c0       	rjmp	.+168    	; 0xa4a <serialAdapter_worker+0x11c>
     9a2:	3f d6       	rcall	.+3198   	; 0x1622 <getSystemTime_ms>
     9a4:	ab 01       	movw	r20, r22
     9a6:	bc 01       	movw	r22, r24
     9a8:	83 e0       	ldi	r24, 0x03	; 3
     9aa:	2d df       	rcall	.-422    	; 0x806 <serialAdapter_waitForData>
     9ac:	81 11       	cpse	r24, r1
     9ae:	05 c0       	rjmp	.+10     	; 0x9ba <serialAdapter_worker+0x8c>
	{
		printf("Timeout2\n");
     9b0:	86 e0       	ldi	r24, 0x06	; 6
     9b2:	93 e0       	ldi	r25, 0x03	; 3
     9b4:	0e 94 03 12 	call	0x2406	; 0x2406 <puts>
		return;
     9b8:	48 c0       	rjmp	.+144    	; 0xa4a <serialAdapter_worker+0x11c>
	}
	frame_t received_frame;

	received_frame.header.startFlag = serialAdapter_startFlag;
     9ba:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <serialAdapter_startFlag>
     9be:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <serialAdapter_startFlag+0x1>
     9c2:	9c 83       	std	Y+4, r25	; 0x04

	if (xbee_readBuffer((uint8_t *)&received_frame.header.srcAddr, sizeof(received_frame.header.srcAddr)) != XBEE_SUCCESS)
     9c4:	8b 83       	std	Y+3, r24	; 0x03
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	ce 01       	movw	r24, r28
     9ca:	05 96       	adiw	r24, 0x05	; 5
     9cc:	80 d0       	rcall	.+256    	; 0xace <xbee_readBuffer>
     9ce:	81 11       	cpse	r24, r1
		return;

	if (xbee_readBuffer((uint8_t *)&received_frame.header.destAddr, sizeof(received_frame.header.destAddr)) != XBEE_SUCCESS)
     9d0:	3c c0       	rjmp	.+120    	; 0xa4a <serialAdapter_worker+0x11c>
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	ce 01       	movw	r24, r28
     9d6:	06 96       	adiw	r24, 0x06	; 6
     9d8:	7a d0       	rcall	.+244    	; 0xace <xbee_readBuffer>
     9da:	81 11       	cpse	r24, r1
		return;

	if (xbee_readBuffer((uint8_t *)&received_frame.header.length, sizeof(received_frame.header.length)) != XBEE_SUCCESS)
     9dc:	36 c0       	rjmp	.+108    	; 0xa4a <serialAdapter_worker+0x11c>
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	ce 01       	movw	r24, r28
     9e2:	07 96       	adiw	r24, 0x07	; 7
     9e4:	74 d0       	rcall	.+232    	; 0xace <xbee_readBuffer>
     9e6:	81 11       	cpse	r24, r1
		return;

	if (received_frame.header.length > COMM_MAX_INNER_FRAME_LENGTH)
     9e8:	30 c0       	rjmp	.+96     	; 0xa4a <serialAdapter_worker+0x11c>
     9ea:	8f 81       	ldd	r24, Y+7	; 0x07
     9ec:	82 33       	cpi	r24, 0x32	; 50
		return;

	// Wait for complete inner frame and footer
	if (!serialAdapter_waitForData(received_frame.header.length + sizeof(frame_footer_t), getSystemTime_ms()))
     9ee:	68 f5       	brcc	.+90     	; 0xa4a <serialAdapter_worker+0x11c>
     9f0:	18 d6       	rcall	.+3120   	; 0x1622 <getSystemTime_ms>
     9f2:	ab 01       	movw	r20, r22
     9f4:	bc 01       	movw	r22, r24
     9f6:	8f 81       	ldd	r24, Y+7	; 0x07
     9f8:	8f 5f       	subi	r24, 0xFF	; 255
     9fa:	05 df       	rcall	.-502    	; 0x806 <serialAdapter_waitForData>
     9fc:	81 11       	cpse	r24, r1
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <serialAdapter_worker+0xdc>
	{
		printf("Timeout3\n");
     a00:	8f e0       	ldi	r24, 0x0F	; 15
     a02:	93 e0       	ldi	r25, 0x03	; 3
     a04:	0e 94 03 12 	call	0x2406	; 0x2406 <puts>
		return;
	}

	// Read inner frame
	if (xbee_readBuffer((uint8_t *)&received_frame.innerFrame, received_frame.header.length) != XBEE_SUCCESS)
     a08:	20 c0       	rjmp	.+64     	; 0xa4a <serialAdapter_worker+0x11c>
     a0a:	6f 81       	ldd	r22, Y+7	; 0x07
     a0c:	ce 01       	movw	r24, r28
     a0e:	08 96       	adiw	r24, 0x08	; 8
     a10:	5e d0       	rcall	.+188    	; 0xace <xbee_readBuffer>
     a12:	81 11       	cpse	r24, r1
		return;

	// Read footer
	if (xbee_readBuffer((uint8_t *)&received_frame.footer, sizeof(frame_footer_t)) != XBEE_SUCCESS)
     a14:	1a c0       	rjmp	.+52     	; 0xa4a <serialAdapter_worker+0x11c>
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	ce 01       	movw	r24, r28
     a1a:	c9 96       	adiw	r24, 0x39	; 57
     a1c:	58 d0       	rcall	.+176    	; 0xace <xbee_readBuffer>
     a1e:	81 11       	cpse	r24, r1
     a20:	14 c0       	rjmp	.+40     	; 0xa4a <serialAdapter_worker+0x11c>
		return;

	// Read checksum
	checksum_t frame_checksum;
	serialAdapter_calculateFrameChecksum(&frame_checksum, &received_frame);
     a22:	be 01       	movw	r22, r28
     a24:	6d 5f       	subi	r22, 0xFD	; 253
     a26:	7f 4f       	sbci	r23, 0xFF	; 255
     a28:	ce 01       	movw	r24, r28
     a2a:	ca 96       	adiw	r24, 0x3a	; 58
     a2c:	6d df       	rcall	.-294    	; 0x908 <serialAdapter_calculateFrameChecksum>

	// Verify checksum
	if (frame_checksum != received_frame.footer.checksum)
     a2e:	99 ad       	ldd	r25, Y+57	; 0x39
     a30:	8a ad       	ldd	r24, Y+58	; 0x3a
     a32:	98 13       	cpse	r25, r24
     a34:	0a c0       	rjmp	.+20     	; 0xa4a <serialAdapter_worker+0x11c>
		return;

	// Check if we are addressed by this frame
	if (received_frame.header.destAddr != ADDRESS_BROADCAST && received_frame.header.destAddr != serialAdapter_address)
     a36:	8e 81       	ldd	r24, Y+6	; 0x06
     a38:	8f 3f       	cpi	r24, 0xFF	; 255
     a3a:	21 f0       	breq	.+8      	; 0xa44 <serialAdapter_worker+0x116>
     a3c:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     a40:	89 13       	cpse	r24, r25
     a42:	03 c0       	rjmp	.+6      	; 0xa4a <serialAdapter_worker+0x11c>
		return;

	// Forward to next layer
	serialAdapter_processFrame(&received_frame);
     a44:	ce 01       	movw	r24, r28
     a46:	03 96       	adiw	r24, 0x03	; 3
     a48:	67 dd       	rcall	.-1330   	; 0x518 <serialAdapter_processFrame>
     a4a:	ea 96       	adiw	r28, 0x3a	; 58
}
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	08 95       	ret

00000a5c <xbee_init>:
/*!
 *  Initializes the XBee
 */
void xbee_init()
{
	uart3_init(UART_BAUD_SELECT(38400,16000000UL));
     a5c:	89 e1       	ldi	r24, 0x19	; 25
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	3f c5       	rjmp	.+2686   	; 0x14e0 <uart3_init>
     a62:	08 95       	ret

00000a64 <xbee_write>:
 *
 *  \param byte one byte that will be sent through UART
 */
void xbee_write(uint8_t byte)
{
	uart3_putc(byte);
     a64:	75 c5       	rjmp	.+2794   	; 0x1550 <uart3_putc>
     a66:	08 95       	ret

00000a68 <xbee_writeData>:
 *
 *  \param data buffer with will be sent through UART
 *  \param length size of the buffer
 */
void xbee_writeData(void *data, uint8_t length)
{
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	7c 01       	movw	r14, r24
     a74:	16 2f       	mov	r17, r22
	for(int i = 0; i < length;i++)
     a76:	c0 e0       	ldi	r28, 0x00	; 0
     a78:	d0 e0       	ldi	r29, 0x00	; 0
     a7a:	06 c0       	rjmp	.+12     	; 0xa88 <xbee_writeData+0x20>
	{
		xbee_write(*(((uint8_t*)data)+i));
     a7c:	f7 01       	movw	r30, r14
     a7e:	ec 0f       	add	r30, r28
     a80:	fd 1f       	adc	r31, r29
     a82:	80 81       	ld	r24, Z
     a84:	ef df       	rcall	.-34     	; 0xa64 <xbee_write>
 *  \param data buffer with will be sent through UART
 *  \param length size of the buffer
 */
void xbee_writeData(void *data, uint8_t length)
{
	for(int i = 0; i < length;i++)
     a86:	21 96       	adiw	r28, 0x01	; 1
     a88:	81 2f       	mov	r24, r17
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	c8 17       	cp	r28, r24
     a8e:	d9 07       	cpc	r29, r25
     a90:	ac f3       	brlt	.-22     	; 0xa7c <xbee_writeData+0x14>
	{
		xbee_write(*(((uint8_t*)data)+i));
	}
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	ff 90       	pop	r15
     a9a:	ef 90       	pop	r14
     a9c:	08 95       	ret

00000a9e <xbee_read>:
 *
 *  \param byte Reference parameter where the read byte will be written to
 *  \return Error code or XBEE_SUCCESS. When XBEE_BUFFER_INCONSISTENCY gets returned, `byte` still gets updated
 */
uint8_t xbee_read(uint8_t *byte)
{
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	ec 01       	movw	r28, r24
	//we are assuming that "int" from the uart library is implemented as uint16_t, kinda ugly ngl
	uint16_t temp = (uint16_t)uart3_getc();
     aa4:	38 d5       	rcall	.+2672   	; 0x1516 <uart3_getc>
	
	switch(((uint8_t)(temp))+1)
     aa6:	9c 01       	movw	r18, r24
     aa8:	33 27       	eor	r19, r19
     aaa:	2f 5f       	subi	r18, 0xFF	; 255
     aac:	3f 4f       	sbci	r19, 0xFF	; 255
     aae:	21 f0       	breq	.+8      	; 0xab8 <xbee_read+0x1a>
     ab0:	21 15       	cp	r18, r1
     ab2:	31 40       	sbci	r19, 0x01	; 1
     ab4:	31 f0       	breq	.+12     	; 0xac2 <xbee_read+0x24>
     ab6:	03 c0       	rjmp	.+6      	; 0xabe <xbee_read+0x20>
	{
		case 0:
		{
			*byte = (uint8_t)temp;
     ab8:	88 83       	st	Y, r24
			return XBEE_SUCCESS;
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	03 c0       	rjmp	.+6      	; 0xac4 <xbee_read+0x26>
		break;
		default:
			break;
	}
	
	return 255;
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <xbee_read+0x26>
		}
		break;
		
		case UART_NO_DATA:
		{
			return XBEE_DATA_MISSING;
     ac2:	84 e0       	ldi	r24, 0x04	; 4
		default:
			break;
	}
	
	return 255;
}
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret

00000aca <xbee_getNumberOfBytesReceived>:
 *
 *  \return count of bytes that can be received through `xbee_read`
 */
uint16_t xbee_getNumberOfBytesReceived()
{
	return uart3_getrxcount();
     aca:	56 c5       	rjmp	.+2732   	; 0x1578 <uart3_getrxcount>
}
     acc:	08 95       	ret

00000ace <xbee_readBuffer>:
 *	\param message_buffer Buffer where to store received bytes
 *  \param buffer_size Amount of bytes that need to be received
 *  \return error Code if there is any. If it's not XBEE_SUCCESS, you shouldn't use the result
 */
uint8_t xbee_readBuffer(uint8_t *buffer, uint8_t length)
{
     ace:	6f 92       	push	r6
     ad0:	7f 92       	push	r7
     ad2:	8f 92       	push	r8
     ad4:	9f 92       	push	r9
     ad6:	af 92       	push	r10
     ad8:	bf 92       	push	r11
     ada:	cf 92       	push	r12
     adc:	df 92       	push	r13
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
     aee:	4c 01       	movw	r8, r24
     af0:	66 2e       	mov	r6, r22

	// Copy received data into destination buffer
	memcpy(buffer, temp_buff, length);

	return XBEE_SUCCESS;
}
     af2:	ed b6       	in	r14, 0x3d	; 61
     af4:	fe b6       	in	r15, 0x3e	; 62
 *  \param buffer_size Amount of bytes that need to be received
 *  \return error Code if there is any. If it's not XBEE_SUCCESS, you shouldn't use the result
 */
uint8_t xbee_readBuffer(uint8_t *buffer, uint8_t length)
{
	if (xbee_getNumberOfBytesReceived() < length)
     af6:	e9 df       	rcall	.-46     	; 0xaca <xbee_getNumberOfBytesReceived>
     af8:	06 2d       	mov	r16, r6
     afa:	10 e0       	ldi	r17, 0x00	; 0
     afc:	80 17       	cp	r24, r16
     afe:	91 07       	cpc	r25, r17
     b00:	f0 f0       	brcs	.+60     	; 0xb3e <xbee_readBuffer+0x70>
	return XBEE_DATA_MISSING;

	uint8_t temp_buff[length];
     b02:	8d b7       	in	r24, 0x3d	; 61
     b04:	9e b7       	in	r25, 0x3e	; 62
     b06:	80 1b       	sub	r24, r16
     b08:	91 0b       	sbc	r25, r17
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	9e bf       	out	0x3e, r25	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	8d bf       	out	0x3d, r24	; 61
     b14:	01 96       	adiw	r24, 0x01	; 1
     b16:	6c 01       	movw	r12, r24
     b18:	5c 01       	movw	r10, r24
	
	for (uint8_t i = 0; i < length; i++) {
     b1a:	71 2c       	mov	r7, r1
     b1c:	07 c0       	rjmp	.+14     	; 0xb2c <xbee_readBuffer+0x5e>
		uint8_t err = xbee_read(&temp_buff[i]);
     b1e:	c5 01       	movw	r24, r10
     b20:	87 0d       	add	r24, r7
     b22:	91 1d       	adc	r25, r1
     b24:	bc df       	rcall	.-136    	; 0xa9e <xbee_read>
		if (err != XBEE_SUCCESS)
     b26:	81 11       	cpse	r24, r1
     b28:	0b c0       	rjmp	.+22     	; 0xb40 <xbee_readBuffer+0x72>
	if (xbee_getNumberOfBytesReceived() < length)
	return XBEE_DATA_MISSING;

	uint8_t temp_buff[length];
	
	for (uint8_t i = 0; i < length; i++) {
     b2a:	73 94       	inc	r7
     b2c:	76 14       	cp	r7, r6
     b2e:	b8 f3       	brcs	.-18     	; 0xb1e <xbee_readBuffer+0x50>
		if (err != XBEE_SUCCESS)
		return err; // Early return if an error occurs
	}

	// Copy received data into destination buffer
	memcpy(buffer, temp_buff, length);
     b30:	a8 01       	movw	r20, r16
     b32:	b6 01       	movw	r22, r12
     b34:	c4 01       	movw	r24, r8
     b36:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <memcpy>

	return XBEE_SUCCESS;
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <xbee_readBuffer+0x72>
 *  \return error Code if there is any. If it's not XBEE_SUCCESS, you shouldn't use the result
 */
uint8_t xbee_readBuffer(uint8_t *buffer, uint8_t length)
{
	if (xbee_getNumberOfBytesReceived() < length)
	return XBEE_DATA_MISSING;
     b3e:	84 e0       	ldi	r24, 0x04	; 4

	// Copy received data into destination buffer
	memcpy(buffer, temp_buff, length);

	return XBEE_SUCCESS;
}
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	fe be       	out	0x3e, r15	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	ed be       	out	0x3d, r14	; 61
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	df 90       	pop	r13
     b58:	cf 90       	pop	r12
     b5a:	bf 90       	pop	r11
     b5c:	af 90       	pop	r10
     b5e:	9f 90       	pop	r9
     b60:	8f 90       	pop	r8
     b62:	7f 90       	pop	r7
     b64:	6f 90       	pop	r6
     b66:	08 95       	ret

00000b68 <lcd_enablePulse>:
			lcd_writeHexNibble(number >> nib);
		}
	}

	os_leaveCriticalSection();
}
     b68:	b6 d6       	rcall	.+3436   	; 0x18d6 <os_enterCriticalSection>
     b6a:	e2 e0       	ldi	r30, 0x02	; 2
     b6c:	f1 e0       	ldi	r31, 0x01	; 1
     b6e:	80 81       	ld	r24, Z
     b70:	80 64       	ori	r24, 0x40	; 64
     b72:	80 83       	st	Z, r24
     b74:	85 e0       	ldi	r24, 0x05	; 5
     b76:	8a 95       	dec	r24
     b78:	f1 f7       	brne	.-4      	; 0xb76 <lcd_enablePulse+0xe>
     b7a:	00 00       	nop
     b7c:	80 81       	ld	r24, Z
     b7e:	8f 7b       	andi	r24, 0xBF	; 191
     b80:	80 83       	st	Z, r24
     b82:	8f e8       	ldi	r24, 0x8F	; 143
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	f1 f7       	brne	.-4      	; 0xb86 <lcd_enablePulse+0x1e>
     b8a:	00 c0       	rjmp	.+0      	; 0xb8c <lcd_enablePulse+0x24>
     b8c:	00 00       	nop
     b8e:	c2 c6       	rjmp	.+3460   	; 0x1914 <os_leaveCriticalSection>
     b90:	08 95       	ret

00000b92 <lcd_sendNibble>:
     b92:	cf 93       	push	r28
     b94:	c8 2f       	mov	r28, r24
     b96:	9f d6       	rcall	.+3390   	; 0x18d6 <os_enterCriticalSection>
     b98:	c0 ff       	sbrs	r28, 0
     b9a:	04 c0       	rjmp	.+8      	; 0xba4 <lcd_sendNibble+0x12>
     b9c:	84 b3       	in	r24, 0x14	; 20
     b9e:	80 62       	ori	r24, 0x20	; 32
     ba0:	84 bb       	out	0x14, r24	; 20
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <lcd_sendNibble+0x18>
     ba4:	84 b3       	in	r24, 0x14	; 20
     ba6:	8f 7d       	andi	r24, 0xDF	; 223
     ba8:	84 bb       	out	0x14, r24	; 20
     baa:	c1 ff       	sbrs	r28, 1
     bac:	04 c0       	rjmp	.+8      	; 0xbb6 <lcd_sendNibble+0x24>
     bae:	8e b1       	in	r24, 0x0e	; 14
     bb0:	88 60       	ori	r24, 0x08	; 8
     bb2:	8e b9       	out	0x0e, r24	; 14
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <lcd_sendNibble+0x2a>
     bb6:	8e b1       	in	r24, 0x0e	; 14
     bb8:	87 7f       	andi	r24, 0xF7	; 247
     bba:	8e b9       	out	0x0e, r24	; 14
     bbc:	c2 ff       	sbrs	r28, 2
     bbe:	06 c0       	rjmp	.+12     	; 0xbcc <lcd_sendNibble+0x3a>
     bc0:	e2 e0       	ldi	r30, 0x02	; 2
     bc2:	f1 e0       	ldi	r31, 0x01	; 1
     bc4:	80 81       	ld	r24, Z
     bc6:	88 60       	ori	r24, 0x08	; 8
     bc8:	80 83       	st	Z, r24
     bca:	05 c0       	rjmp	.+10     	; 0xbd6 <lcd_sendNibble+0x44>
     bcc:	e2 e0       	ldi	r30, 0x02	; 2
     bce:	f1 e0       	ldi	r31, 0x01	; 1
     bd0:	80 81       	ld	r24, Z
     bd2:	87 7f       	andi	r24, 0xF7	; 247
     bd4:	80 83       	st	Z, r24
     bd6:	c3 ff       	sbrs	r28, 3
     bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <lcd_sendNibble+0x54>
     bda:	e2 e0       	ldi	r30, 0x02	; 2
     bdc:	f1 e0       	ldi	r31, 0x01	; 1
     bde:	80 81       	ld	r24, Z
     be0:	80 61       	ori	r24, 0x10	; 16
     be2:	80 83       	st	Z, r24
     be4:	05 c0       	rjmp	.+10     	; 0xbf0 <lcd_sendNibble+0x5e>
     be6:	e2 e0       	ldi	r30, 0x02	; 2
     be8:	f1 e0       	ldi	r31, 0x01	; 1
     bea:	80 81       	ld	r24, Z
     bec:	8f 7e       	andi	r24, 0xEF	; 239
     bee:	80 83       	st	Z, r24
     bf0:	bb df       	rcall	.-138    	; 0xb68 <lcd_enablePulse>
     bf2:	90 d6       	rcall	.+3360   	; 0x1914 <os_leaveCriticalSection>
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <lcd_printf_p>:
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	ae 01       	movw	r20, r28
     c06:	48 5f       	subi	r20, 0xF8	; 248
     c08:	5f 4f       	sbci	r21, 0xFF	; 255
     c0a:	da 01       	movw	r26, r20
     c0c:	6d 91       	ld	r22, X+
     c0e:	7d 91       	ld	r23, X+
     c10:	ad 01       	movw	r20, r26
     c12:	02 e8       	ldi	r16, 0x82	; 130
     c14:	15 e0       	ldi	r17, 0x05	; 5
     c16:	d8 01       	movw	r26, r16
     c18:	12 96       	adiw	r26, 0x02	; 2
     c1a:	ed 91       	ld	r30, X+
     c1c:	fc 91       	ld	r31, X
     c1e:	13 97       	sbiw	r26, 0x03	; 3
     c20:	83 81       	ldd	r24, Z+3	; 0x03
     c22:	88 60       	ori	r24, 0x08	; 8
     c24:	83 83       	std	Z+3, r24	; 0x03
     c26:	83 e0       	ldi	r24, 0x03	; 3
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	0e 94 33 12 	call	0x2466	; 0x2466 <vfprintf_P>
     c2e:	d8 01       	movw	r26, r16
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	ed 91       	ld	r30, X+
     c34:	fc 91       	ld	r31, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	83 81       	ldd	r24, Z+3	; 0x03
     c3a:	87 7f       	andi	r24, 0xF7	; 247
     c3c:	83 83       	std	Z+3, r24	; 0x03
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	08 95       	ret

00000c48 <lcd_sendCommand>:
     c48:	cf 93       	push	r28
     c4a:	c8 2f       	mov	r28, r24
     c4c:	44 d6       	rcall	.+3208   	; 0x18d6 <os_enterCriticalSection>
     c4e:	e2 e0       	ldi	r30, 0x02	; 2
     c50:	f1 e0       	ldi	r31, 0x01	; 1
     c52:	80 81       	ld	r24, Z
     c54:	8f 7d       	andi	r24, 0xDF	; 223
     c56:	80 83       	st	Z, r24
     c58:	8c 2f       	mov	r24, r28
     c5a:	82 95       	swap	r24
     c5c:	8f 70       	andi	r24, 0x0F	; 15
     c5e:	99 df       	rcall	.-206    	; 0xb92 <lcd_sendNibble>
     c60:	8c 2f       	mov	r24, r28
     c62:	97 df       	rcall	.-210    	; 0xb92 <lcd_sendNibble>
     c64:	85 ed       	ldi	r24, 0xD5	; 213
     c66:	8a 95       	dec	r24
     c68:	f1 f7       	brne	.-4      	; 0xc66 <lcd_sendCommand+0x1e>
     c6a:	00 00       	nop
     c6c:	53 d6       	rcall	.+3238   	; 0x1914 <os_leaveCriticalSection>
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <lcd_init>:
     c72:	31 d6       	rcall	.+3170   	; 0x18d6 <os_enterCriticalSection>
     c74:	e1 e0       	ldi	r30, 0x01	; 1
     c76:	f1 e0       	ldi	r31, 0x01	; 1
     c78:	80 81       	ld	r24, Z
     c7a:	88 67       	ori	r24, 0x78	; 120
     c7c:	80 83       	st	Z, r24
     c7e:	8d b1       	in	r24, 0x0d	; 13
     c80:	88 60       	ori	r24, 0x08	; 8
     c82:	8d b9       	out	0x0d, r24	; 13
     c84:	83 b3       	in	r24, 0x13	; 19
     c86:	80 62       	ori	r24, 0x20	; 32
     c88:	83 bb       	out	0x13, r24	; 19
     c8a:	80 b3       	in	r24, 0x10	; 16
     c8c:	81 60       	ori	r24, 0x01	; 1
     c8e:	80 bb       	out	0x10, r24	; 16
     c90:	81 b3       	in	r24, 0x11	; 17
     c92:	8e 7f       	andi	r24, 0xFE	; 254
     c94:	81 bb       	out	0x11, r24	; 17
     c96:	2f ef       	ldi	r18, 0xFF	; 255
     c98:	80 e7       	ldi	r24, 0x70	; 112
     c9a:	92 e0       	ldi	r25, 0x02	; 2
     c9c:	21 50       	subi	r18, 0x01	; 1
     c9e:	80 40       	sbci	r24, 0x00	; 0
     ca0:	90 40       	sbci	r25, 0x00	; 0
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <lcd_init+0x2a>
     ca4:	00 c0       	rjmp	.+0      	; 0xca6 <lcd_init+0x34>
     ca6:	00 00       	nop
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	73 df       	rcall	.-282    	; 0xb92 <lcd_sendNibble>
     cac:	8f e1       	ldi	r24, 0x1F	; 31
     cae:	9e e4       	ldi	r25, 0x4E	; 78
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <lcd_init+0x3e>
     cb4:	00 c0       	rjmp	.+0      	; 0xcb6 <lcd_init+0x44>
     cb6:	00 00       	nop
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	6b df       	rcall	.-298    	; 0xb92 <lcd_sendNibble>
     cbc:	8f e1       	ldi	r24, 0x1F	; 31
     cbe:	93 e0       	ldi	r25, 0x03	; 3
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <lcd_init+0x4e>
     cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <lcd_init+0x54>
     cc6:	00 00       	nop
     cc8:	83 e0       	ldi	r24, 0x03	; 3
     cca:	63 df       	rcall	.-314    	; 0xb92 <lcd_sendNibble>
     ccc:	8f e1       	ldi	r24, 0x1F	; 31
     cce:	93 e0       	ldi	r25, 0x03	; 3
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <lcd_init+0x5e>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <lcd_init+0x64>
     cd6:	00 00       	nop
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	5b df       	rcall	.-330    	; 0xb92 <lcd_sendNibble>
     cdc:	88 e2       	ldi	r24, 0x28	; 40
     cde:	b4 df       	rcall	.-152    	; 0xc48 <lcd_sendCommand>
     ce0:	8c e0       	ldi	r24, 0x0C	; 12
     ce2:	b2 df       	rcall	.-156    	; 0xc48 <lcd_sendCommand>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	b0 df       	rcall	.-160    	; 0xc48 <lcd_sendCommand>
     ce8:	86 e0       	ldi	r24, 0x06	; 6
     cea:	ae df       	rcall	.-164    	; 0xc48 <lcd_sendCommand>
     cec:	8f e1       	ldi	r24, 0x1F	; 31
     cee:	9e e4       	ldi	r25, 0x4E	; 78
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <lcd_init+0x7e>
     cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <lcd_init+0x84>
     cf6:	00 00       	nop
     cf8:	0d c6       	rjmp	.+3098   	; 0x1914 <os_leaveCriticalSection>
     cfa:	08 95       	ret

00000cfc <lcd_clear>:
     cfc:	ec d5       	rcall	.+3032   	; 0x18d6 <os_enterCriticalSection>
     cfe:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <charCtr>
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	a1 df       	rcall	.-190    	; 0xc48 <lcd_sendCommand>
     d06:	8f e3       	ldi	r24, 0x3F	; 63
     d08:	9f e1       	ldi	r25, 0x1F	; 31
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	f1 f7       	brne	.-4      	; 0xd0a <lcd_clear+0xe>
     d0e:	00 c0       	rjmp	.+0      	; 0xd10 <lcd_clear+0x14>
     d10:	00 00       	nop
     d12:	00 c6       	rjmp	.+3072   	; 0x1914 <os_leaveCriticalSection>
     d14:	08 95       	ret

00000d16 <lcd_displayOn>:
     d16:	8c e0       	ldi	r24, 0x0C	; 12
     d18:	97 cf       	rjmp	.-210    	; 0xc48 <lcd_sendCommand>
     d1a:	08 95       	ret

00000d1c <lcd_displayOff>:
     d1c:	88 e0       	ldi	r24, 0x08	; 8
     d1e:	94 cf       	rjmp	.-216    	; 0xc48 <lcd_sendCommand>
     d20:	08 95       	ret

00000d22 <lcd_goto>:
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	d8 2f       	mov	r29, r24
     d28:	c6 2f       	mov	r28, r22
     d2a:	82 30       	cpi	r24, 0x02	; 2
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <lcd_goto+0xe>
     d2e:	d1 e0       	ldi	r29, 0x01	; 1
     d30:	d2 d5       	rcall	.+2980   	; 0x18d6 <os_enterCriticalSection>
     d32:	8c 2f       	mov	r24, r28
     d34:	90 e4       	ldi	r25, 0x40	; 64
     d36:	d9 9f       	mul	r29, r25
     d38:	80 0d       	add	r24, r0
     d3a:	11 24       	eor	r1, r1
     d3c:	80 68       	ori	r24, 0x80	; 128
     d3e:	84 df       	rcall	.-248    	; 0xc48 <lcd_sendCommand>
     d40:	80 e1       	ldi	r24, 0x10	; 16
     d42:	d8 9f       	mul	r29, r24
     d44:	c0 0d       	add	r28, r0
     d46:	11 24       	eor	r1, r1
     d48:	c0 93 0a 05 	sts	0x050A, r28	; 0x80050a <charCtr>
     d4c:	e3 d5       	rcall	.+3014   	; 0x1914 <os_leaveCriticalSection>
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	08 95       	ret

00000d54 <lcd_sendData>:
     d54:	cf 93       	push	r28
     d56:	c8 2f       	mov	r28, r24
     d58:	be d5       	rcall	.+2940   	; 0x18d6 <os_enterCriticalSection>
     d5a:	e2 e0       	ldi	r30, 0x02	; 2
     d5c:	f1 e0       	ldi	r31, 0x01	; 1
     d5e:	80 81       	ld	r24, Z
     d60:	80 62       	ori	r24, 0x20	; 32
     d62:	80 83       	st	Z, r24
     d64:	8c 2f       	mov	r24, r28
     d66:	82 95       	swap	r24
     d68:	8f 70       	andi	r24, 0x0F	; 15
     d6a:	13 df       	rcall	.-474    	; 0xb92 <lcd_sendNibble>
     d6c:	8c 2f       	mov	r24, r28
     d6e:	11 df       	rcall	.-478    	; 0xb92 <lcd_sendNibble>
     d70:	85 ed       	ldi	r24, 0xD5	; 213
     d72:	8a 95       	dec	r24
     d74:	f1 f7       	brne	.-4      	; 0xd72 <lcd_sendData+0x1e>
     d76:	00 00       	nop
     d78:	cd d5       	rcall	.+2970   	; 0x1914 <os_leaveCriticalSection>
     d7a:	cf 91       	pop	r28
     d7c:	08 95       	ret

00000d7e <lcd_line1>:
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	cf cf       	rjmp	.-98     	; 0xd22 <lcd_goto>
     d84:	08 95       	ret

00000d86 <lcd_line2>:
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	cb cf       	rjmp	.-106    	; 0xd22 <lcd_goto>
     d8c:	08 95       	ret

00000d8e <lcd_writeChar>:
     d8e:	cf 93       	push	r28
     d90:	c8 2f       	mov	r28, r24
     d92:	a1 d5       	rcall	.+2882   	; 0x18d6 <os_enterCriticalSection>
     d94:	ca 30       	cpi	r28, 0x0A	; 10
     d96:	31 f4       	brne	.+12     	; 0xda4 <lcd_writeChar+0x16>
     d98:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <charCtr>
     d9c:	80 71       	andi	r24, 0x10	; 16
     d9e:	80 5f       	subi	r24, 0xF0	; 240
     da0:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <charCtr>
     da4:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <charCtr>
     da8:	80 31       	cpi	r24, 0x10	; 16
     daa:	11 f4       	brne	.+4      	; 0xdb0 <lcd_writeChar+0x22>
     dac:	ec df       	rcall	.-40     	; 0xd86 <lcd_line2>
     dae:	04 c0       	rjmp	.+8      	; 0xdb8 <lcd_writeChar+0x2a>
     db0:	80 32       	cpi	r24, 0x20	; 32
     db2:	11 f4       	brne	.+4      	; 0xdb8 <lcd_writeChar+0x2a>
     db4:	a3 df       	rcall	.-186    	; 0xcfc <lcd_clear>
     db6:	e3 df       	rcall	.-58     	; 0xd7e <lcd_line1>
     db8:	8c 2f       	mov	r24, r28
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	fc 01       	movw	r30, r24
     dbe:	e4 58       	subi	r30, 0x84	; 132
     dc0:	f1 09       	sbc	r31, r1
     dc2:	e9 33       	cpi	r30, 0x39	; 57
     dc4:	f1 05       	cpc	r31, r1
     dc6:	a8 f4       	brcc	.+42     	; 0xdf2 <lcd_writeChar+0x64>
     dc8:	88 27       	eor	r24, r24
     dca:	ee 58       	subi	r30, 0x8E	; 142
     dcc:	ff 4f       	sbci	r31, 0xFF	; 255
     dce:	8f 4f       	sbci	r24, 0xFF	; 255
     dd0:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__tablejump2__>
     dd4:	cf ee       	ldi	r28, 0xEF	; 239
     dd6:	0d c0       	rjmp	.+26     	; 0xdf2 <lcd_writeChar+0x64>
     dd8:	c5 ef       	ldi	r28, 0xF5	; 245
     dda:	0b c0       	rjmp	.+22     	; 0xdf2 <lcd_writeChar+0x64>
     ddc:	c2 ee       	ldi	r28, 0xE2	; 226
     dde:	09 c0       	rjmp	.+18     	; 0xdf2 <lcd_writeChar+0x64>
     de0:	cf ee       	ldi	r28, 0xEF	; 239
     de2:	07 c0       	rjmp	.+14     	; 0xdf2 <lcd_writeChar+0x64>
     de4:	c5 ef       	ldi	r28, 0xF5	; 245
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <lcd_writeChar+0x64>
     de8:	cf ed       	ldi	r28, 0xDF	; 223
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <lcd_writeChar+0x64>
     dec:	c4 ee       	ldi	r28, 0xE4	; 228
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <lcd_writeChar+0x64>
     df0:	c1 ee       	ldi	r28, 0xE1	; 225
     df2:	8c 2f       	mov	r24, r28
     df4:	af df       	rcall	.-162    	; 0xd54 <lcd_sendData>
     df6:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <charCtr>
     dfa:	8f 5f       	subi	r24, 0xFF	; 255
     dfc:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <charCtr>
     e00:	89 d5       	rcall	.+2834   	; 0x1914 <os_leaveCriticalSection>
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <lcd_stdioPutChar>:
     e06:	c3 df       	rcall	.-122    	; 0xd8e <lcd_writeChar>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	08 95       	ret

00000e0e <lcd_writeString>:
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	ec 01       	movw	r28, r24
     e18:	5e d5       	rcall	.+2748   	; 0x18d6 <os_enterCriticalSection>
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <lcd_writeString+0x12>
     e1c:	b8 df       	rcall	.-144    	; 0xd8e <lcd_writeChar>
     e1e:	e8 01       	movw	r28, r16
     e20:	8e 01       	movw	r16, r28
     e22:	0f 5f       	subi	r16, 0xFF	; 255
     e24:	1f 4f       	sbci	r17, 0xFF	; 255
     e26:	88 81       	ld	r24, Y
     e28:	81 11       	cpse	r24, r1
     e2a:	f8 cf       	rjmp	.-16     	; 0xe1c <lcd_writeString+0xe>
     e2c:	73 d5       	rcall	.+2790   	; 0x1914 <os_leaveCriticalSection>
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	08 95       	ret

00000e38 <lcd_writeProgString>:
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	ec 01       	movw	r28, r24
     e42:	49 d5       	rcall	.+2706   	; 0x18d6 <os_enterCriticalSection>
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <lcd_writeProgString+0x12>
     e46:	a3 df       	rcall	.-186    	; 0xd8e <lcd_writeChar>
     e48:	e8 01       	movw	r28, r16
     e4a:	8e 01       	movw	r16, r28
     e4c:	0f 5f       	subi	r16, 0xFF	; 255
     e4e:	1f 4f       	sbci	r17, 0xFF	; 255
     e50:	fe 01       	movw	r30, r28
     e52:	84 91       	lpm	r24, Z
     e54:	81 11       	cpse	r24, r1
     e56:	f7 cf       	rjmp	.-18     	; 0xe46 <lcd_writeProgString+0xe>
     e58:	5d d5       	rcall	.+2746   	; 0x1914 <os_leaveCriticalSection>
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	08 95       	ret

00000e64 <lcd_writeDec>:
 *  Writes a 16 bit integer as a decimal number without leading 0s
 *
 *  \param number The number to be written.
 */
void lcd_writeDec(uint16_t number)
{
     e64:	cf 92       	push	r12
     e66:	df 92       	push	r13
     e68:	ef 92       	push	r14
     e6a:	ff 92       	push	r15
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	ec 01       	movw	r28, r24
	if (!number)
     e74:	89 2b       	or	r24, r25
     e76:	19 f4       	brne	.+6      	; 0xe7e <lcd_writeDec+0x1a>
	{
		lcd_writeChar('0');
     e78:	80 e3       	ldi	r24, 0x30	; 48
     e7a:	89 df       	rcall	.-238    	; 0xd8e <lcd_writeChar>
	}

	uint32_t pos = 10000;
	uint8_t print = 0;

	os_enterCriticalSection();
     e7c:	30 c0       	rjmp	.+96     	; 0xede <lcd_writeDec+0x7a>
     e7e:	2b d5       	rcall	.+2646   	; 0x18d6 <os_enterCriticalSection>
		lcd_writeChar('0');
		return;
	}

	uint32_t pos = 10000;
	uint8_t print = 0;
     e80:	10 e0       	ldi	r17, 0x00	; 0
	{
		lcd_writeChar('0');
		return;
	}

	uint32_t pos = 10000;
     e82:	0f 2e       	mov	r0, r31
     e84:	f0 e1       	ldi	r31, 0x10	; 16
     e86:	cf 2e       	mov	r12, r31
     e88:	f7 e2       	ldi	r31, 0x27	; 39
     e8a:	df 2e       	mov	r13, r31
     e8c:	e1 2c       	mov	r14, r1
     e8e:	f1 2c       	mov	r15, r1
     e90:	f0 2d       	mov	r31, r0

	os_enterCriticalSection();

	do
	{
		uint8_t const digit = number / pos;
     e92:	be 01       	movw	r22, r28
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	a7 01       	movw	r20, r14
     e9a:	96 01       	movw	r18, r12
     e9c:	0e 94 90 11 	call	0x2320	; 0x2320 <__udivmodsi4>
		number -= digit * pos;
     ea0:	42 2f       	mov	r20, r18
     ea2:	50 e0       	ldi	r21, 0x00	; 0
     ea4:	4c 9d       	mul	r20, r12
     ea6:	c0 01       	movw	r24, r0
     ea8:	4d 9d       	mul	r20, r13
     eaa:	90 0d       	add	r25, r0
     eac:	5c 9d       	mul	r21, r12
     eae:	90 0d       	add	r25, r0
     eb0:	11 24       	eor	r1, r1
     eb2:	c8 1b       	sub	r28, r24
     eb4:	d9 0b       	sbc	r29, r25
		if (print |= digit)
     eb6:	12 2b       	or	r17, r18
     eb8:	19 f0       	breq	.+6      	; 0xec0 <lcd_writeDec+0x5c>
			lcd_writeChar(digit + '0');
     eba:	80 e3       	ldi	r24, 0x30	; 48
     ebc:	82 0f       	add	r24, r18
     ebe:	67 df       	rcall	.-306    	; 0xd8e <lcd_writeChar>
	} while (pos /= 10);
     ec0:	c7 01       	movw	r24, r14
     ec2:	b6 01       	movw	r22, r12
     ec4:	2a e0       	ldi	r18, 0x0A	; 10
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	0e 94 90 11 	call	0x2320	; 0x2320 <__udivmodsi4>
     ed0:	69 01       	movw	r12, r18
     ed2:	7a 01       	movw	r14, r20
     ed4:	23 2b       	or	r18, r19
     ed6:	24 2b       	or	r18, r20
     ed8:	25 2b       	or	r18, r21

	os_leaveCriticalSection();
     eda:	d9 f6       	brne	.-74     	; 0xe92 <lcd_writeDec+0x2e>
     edc:	1b d5       	rcall	.+2614   	; 0x1914 <os_leaveCriticalSection>
}
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	ff 90       	pop	r15
     ee6:	ef 90       	pop	r14
     ee8:	df 90       	pop	r13
     eea:	cf 90       	pop	r12
     eec:	08 95       	ret

00000eee <rq_isEmpty>:
 *  \param queue The queue it will check
 *  \return True if queue is empty, false if it's not empty
 */
bool rq_isEmpty(ready_queue_t *queue)
{
	return queue->head == queue->tail;
     eee:	fc 01       	movw	r30, r24
     ef0:	21 85       	ldd	r18, Z+9	; 0x09
     ef2:	92 85       	ldd	r25, Z+10	; 0x0a
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	29 13       	cpse	r18, r25
     ef8:	80 e0       	ldi	r24, 0x00	; 0
}
     efa:	08 95       	ret

00000efc <rq_pop>:
 *  \param queue The queue it will push to
 *  \param process The process that will be pushed
 *  \return Popped process id
 */
process_id_t rq_pop(ready_queue_t *queue)
{
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	ec 01       	movw	r28, r24
	if (rq_isEmpty(queue))
     f02:	f5 df       	rcall	.-22     	; 0xeee <rq_isEmpty>
     f04:	88 23       	and	r24, r24
     f06:	39 f0       	breq	.+14     	; 0xf16 <rq_pop+0x1a>
	{
		os_error("Can't pop from empty ready queue");
     f08:	86 e5       	ldi	r24, 0x56	; 86
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	9f 93       	push	r25
     f0e:	8f 93       	push	r24
     f10:	5d d4       	rcall	.+2234   	; 0x17cc <os_errorPstr>
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
	}
	process_id_t process = queue->processes[queue->head];
     f16:	99 85       	ldd	r25, Y+9	; 0x09
     f18:	29 2f       	mov	r18, r25
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	fe 01       	movw	r30, r28
     f1e:	e2 0f       	add	r30, r18
     f20:	f3 1f       	adc	r31, r19
     f22:	80 81       	ld	r24, Z
	queue->head = next(queue->head);
     f24:	2f 5f       	subi	r18, 0xFF	; 255
     f26:	3f 4f       	sbci	r19, 0xFF	; 255
     f28:	29 30       	cpi	r18, 0x09	; 9
     f2a:	31 05       	cpc	r19, r1
     f2c:	14 f4       	brge	.+4      	; 0xf32 <rq_pop+0x36>
     f2e:	9f 5f       	subi	r25, 0xFF	; 255
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <rq_pop+0x38>
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	99 87       	std	Y+9, r25	; 0x09
	return process;
}
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <rq_isFull>:
 *  \param queue The queue it will check
 *  \return True if queue is full, false if it's not completely filled
 */
bool rq_isFull(ready_queue_t *queue)
{
	return next(queue->tail) == queue->head;
     f3c:	fc 01       	movw	r30, r24
     f3e:	22 85       	ldd	r18, Z+10	; 0x0a
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	2f 5f       	subi	r18, 0xFF	; 255
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	29 30       	cpi	r18, 0x09	; 9
     f48:	31 05       	cpc	r19, r1
     f4a:	14 f0       	brlt	.+4      	; 0xf50 <rq_isFull+0x14>
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	fc 01       	movw	r30, r24
     f52:	41 85       	ldd	r20, Z+9	; 0x09
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	24 17       	cp	r18, r20
     f5a:	35 07       	cpc	r19, r21
     f5c:	09 f0       	breq	.+2      	; 0xf60 <rq_isFull+0x24>
     f5e:	80 e0       	ldi	r24, 0x00	; 0
}
     f60:	08 95       	ret

00000f62 <rq_push>:
 *
 *  \param queue The queue it will push to
 *  \param process The process that will be pushed
 */
void rq_push(ready_queue_t *queue, process_id_t process)
{
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	ec 01       	movw	r28, r24
     f6a:	16 2f       	mov	r17, r22
	if (rq_isFull(queue))
     f6c:	e7 df       	rcall	.-50     	; 0xf3c <rq_isFull>
     f6e:	88 23       	and	r24, r24
     f70:	39 f0       	breq	.+14     	; 0xf80 <rq_push+0x1e>
	{
		os_error("Can't push on full ready queue");
     f72:	87 e7       	ldi	r24, 0x77	; 119
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	9f 93       	push	r25
     f78:	8f 93       	push	r24
     f7a:	28 d4       	rcall	.+2128   	; 0x17cc <os_errorPstr>
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
	}
	queue->processes[queue->tail] = process;
     f80:	2a 85       	ldd	r18, Y+10	; 0x0a
     f82:	82 2f       	mov	r24, r18
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	fe 01       	movw	r30, r28
     f88:	e8 0f       	add	r30, r24
     f8a:	f9 1f       	adc	r31, r25
     f8c:	10 83       	st	Z, r17
	queue->tail = next(queue->tail);
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	09 97       	sbiw	r24, 0x09	; 9
     f92:	14 f4       	brge	.+4      	; 0xf98 <rq_push+0x36>
     f94:	2f 5f       	subi	r18, 0xFF	; 255
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <rq_push+0x38>
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	2a 87       	std	Y+10, r18	; 0x0a
}
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	08 95       	ret

00000fa4 <rq_clear>:
 *
 *  \param queue The queue that should be emptied
 */
void rq_clear(ready_queue_t *queue)
{
	queue->head = 0;
     fa4:	fc 01       	movw	r30, r24
     fa6:	11 86       	std	Z+9, r1	; 0x09
	queue->tail = 0;
     fa8:	12 86       	std	Z+10, r1	; 0x0a
     faa:	08 95       	ret

00000fac <rq_remove>:
 *  \param queue The queue that should be removed from
 *  \param process The process that should be removed
 *  \return True if the process was removed, false if it wasn't found
 */
bool rq_remove(ready_queue_t *queue, process_id_t process)
{
     fac:	fc 01       	movw	r30, r24
	for (int i = queue->head; i != queue->tail; i = next(i))
     fae:	21 85       	ldd	r18, Z+9	; 0x09
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	32 c0       	rjmp	.+100    	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
	{
		if (queue->processes[i] == process)
     fb4:	df 01       	movw	r26, r30
     fb6:	a2 0f       	add	r26, r18
     fb8:	b3 1f       	adc	r27, r19
     fba:	5c 91       	ld	r21, X
     fbc:	56 13       	cpse	r21, r22
     fbe:	24 c0       	rjmp	.+72     	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
     fc0:	18 c0       	rjmp	.+48     	; 0xff2 <rq_remove+0x46>
		{
			for (int j = i; j != queue->tail; j = next(j))
			{
				queue->processes[j] = queue->processes[next(j)];
     fc2:	b9 01       	movw	r22, r18
     fc4:	6f 5f       	subi	r22, 0xFF	; 255
     fc6:	7f 4f       	sbci	r23, 0xFF	; 255
     fc8:	69 30       	cpi	r22, 0x09	; 9
     fca:	71 05       	cpc	r23, r1
     fcc:	1c f0       	brlt	.+6      	; 0xfd4 <rq_remove+0x28>
     fce:	a0 e0       	ldi	r26, 0x00	; 0
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	01 c0       	rjmp	.+2      	; 0xfd6 <rq_remove+0x2a>
     fd4:	db 01       	movw	r26, r22
     fd6:	ae 0f       	add	r26, r30
     fd8:	bf 1f       	adc	r27, r31
     fda:	5c 91       	ld	r21, X
     fdc:	df 01       	movw	r26, r30
     fde:	a2 0f       	add	r26, r18
     fe0:	b3 1f       	adc	r27, r19
     fe2:	5c 93       	st	X, r21
{
	for (int i = queue->head; i != queue->tail; i = next(i))
	{
		if (queue->processes[i] == process)
		{
			for (int j = i; j != queue->tail; j = next(j))
     fe4:	69 30       	cpi	r22, 0x09	; 9
     fe6:	71 05       	cpc	r23, r1
     fe8:	1c f0       	brlt	.+6      	; 0xff0 <rq_remove+0x44>
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <rq_remove+0x46>
     ff0:	9b 01       	movw	r18, r22
     ff2:	28 17       	cp	r18, r24
     ff4:	39 07       	cpc	r19, r25
     ff6:	29 f7       	brne	.-54     	; 0xfc2 <rq_remove+0x16>
			{
				queue->processes[j] = queue->processes[next(j)];
			}
			queue->tail = prev(queue->tail);
     ff8:	44 23       	and	r20, r20
     ffa:	11 f0       	breq	.+4      	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ffc:	41 50       	subi	r20, 0x01	; 1
     ffe:	01 c0       	rjmp	.+2      	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
    1000:	48 e0       	ldi	r20, 0x08	; 8
    1002:	42 87       	std	Z+10, r20	; 0x0a
			return true;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	08 95       	ret
 *  \param process The process that should be removed
 *  \return True if the process was removed, false if it wasn't found
 */
bool rq_remove(ready_queue_t *queue, process_id_t process)
{
	for (int i = queue->head; i != queue->tail; i = next(i))
    1008:	c9 01       	movw	r24, r18
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	89 30       	cpi	r24, 0x09	; 9
    1012:	91 05       	cpc	r25, r1
    1014:	0c f4       	brge	.+2      	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    1016:	9c 01       	movw	r18, r24
    1018:	42 85       	ldd	r20, Z+10	; 0x0a
    101a:	84 2f       	mov	r24, r20
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	28 17       	cp	r18, r24
    1020:	39 07       	cpc	r19, r25
    1022:	41 f6       	brne	.-112    	; 0xfb4 <rq_remove+0x8>
			}
			queue->tail = prev(queue->tail);
			return true;
		}
	}
	return false;
    1024:	80 e0       	ldi	r24, 0x00	; 0
}
    1026:	08 95       	ret

00001028 <__vector_17>:
 */
void stopWatch_activateInterrupt(void)
{
    cbi(TCCR1B, CS10); // /8 prescaler	0
    sbi(TCCR1B, CS11); // /8 prescaler	1
    cbi(TCCR1B, CS12); // /8 prescaler	0
    1028:	1f 92       	push	r1
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	0f 92       	push	r0
    1030:	11 24       	eor	r1, r1
    1032:	8f 93       	push	r24
    1034:	9f 93       	push	r25
    1036:	af 93       	push	r26
    1038:	bf 93       	push	r27
    103a:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <stopWatch_time>
    103e:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <stopWatch_time+0x1>
    1042:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <stopWatch_time+0x2>
    1046:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <stopWatch_time+0x3>
    104a:	90 58       	subi	r25, 0x80	; 128
    104c:	af 4f       	sbci	r26, 0xFF	; 255
    104e:	bf 4f       	sbci	r27, 0xFF	; 255
    1050:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <stopWatch_time>
    1054:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <stopWatch_time+0x1>
    1058:	a0 93 31 03 	sts	0x0331, r26	; 0x800331 <stopWatch_time+0x2>
    105c:	b0 93 32 03 	sts	0x0332, r27	; 0x800332 <stopWatch_time+0x3>
    1060:	bf 91       	pop	r27
    1062:	af 91       	pop	r26
    1064:	9f 91       	pop	r25
    1066:	8f 91       	pop	r24
    1068:	0f 90       	pop	r0
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	0f 90       	pop	r0
    106e:	1f 90       	pop	r1
    1070:	18 95       	reti

00001072 <stopWatch_deactivateInterrupt>:
    1072:	e1 e8       	ldi	r30, 0x81	; 129
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	8e 7f       	andi	r24, 0xFE	; 254
    107a:	80 83       	st	Z, r24
    107c:	80 81       	ld	r24, Z
    107e:	8d 7f       	andi	r24, 0xFD	; 253
    1080:	80 83       	st	Z, r24
    1082:	80 81       	ld	r24, Z
    1084:	8b 7f       	andi	r24, 0xFB	; 251
    1086:	80 83       	st	Z, r24
    1088:	08 95       	ret

0000108a <stopWatch_init>:
 *  Initializes the stop watch
 */
void stopWatch_init(void)
{
    // Set Timer/Counter Control Registers to 0
    TCCR1A = 0x00; // Normal mode
    108a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>

    // Set the Timer/Counter Register to 0
    TCNT1 = 0;
    108e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
    1092:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

    // Set the compare match value to 1 (1 microsecond)
    OCR1A = 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    109e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>

    // Enable the Output Compare Match A interrupt
    TIMSK1 |= (1 << TOIE1);
    10a2:	ef e6       	ldi	r30, 0x6F	; 111
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	81 60       	ori	r24, 0x01	; 1
    10aa:	80 83       	st	Z, r24

    stopWatch_deactivateInterrupt();
    10ac:	e2 cf       	rjmp	.-60     	; 0x1072 <stopWatch_deactivateInterrupt>
    10ae:	08 95       	ret

000010b0 <usb2_init>:
 *
 *  \param str  The string to be written (a pointer to the first character).
 */
void terminal_writeString(char *str)
{
    usb2_writeString(str);
    10b0:	12 d4       	rcall	.+2084   	; 0x18d6 <os_enterCriticalSection>
    10b2:	83 e0       	ldi	r24, 0x03	; 3
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
    10ba:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
    10be:	e0 ed       	ldi	r30, 0xD0	; 208
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	8d 7f       	andi	r24, 0xFD	; 253
    10c6:	80 83       	st	Z, r24
    10c8:	e1 ed       	ldi	r30, 0xD1	; 209
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	80 61       	ori	r24, 0x10	; 16
    10d0:	80 83       	st	Z, r24
    10d2:	80 81       	ld	r24, Z
    10d4:	88 60       	ori	r24, 0x08	; 8
    10d6:	80 83       	st	Z, r24
    10d8:	1d c4       	rjmp	.+2106   	; 0x1914 <os_leaveCriticalSection>
    10da:	08 95       	ret

000010dc <usb2_write>:
    10dc:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
    10e0:	95 ff       	sbrs	r25, 5
    10e2:	fc cf       	rjmp	.-8      	; 0x10dc <usb2_write>
    10e4:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    10e8:	08 95       	ret

000010ea <usb2_writeProgString>:
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	8c 01       	movw	r16, r24
    10f4:	f0 d3       	rcall	.+2016   	; 0x18d6 <os_enterCriticalSection>
    10f6:	d0 e0       	ldi	r29, 0x00	; 0
    10f8:	0d c0       	rjmp	.+26     	; 0x1114 <usb2_writeProgString+0x2a>
    10fa:	f8 01       	movw	r30, r16
    10fc:	ed 0f       	add	r30, r29
    10fe:	f1 1d       	adc	r31, r1
    1100:	c4 91       	lpm	r28, Z
    1102:	ca 30       	cpi	r28, 0x0A	; 10
    1104:	11 f4       	brne	.+4      	; 0x110a <usb2_writeProgString+0x20>
    1106:	8d e0       	ldi	r24, 0x0D	; 13
    1108:	e9 df       	rcall	.-46     	; 0x10dc <usb2_write>
    110a:	cc 23       	and	r28, r28
    110c:	29 f0       	breq	.+10     	; 0x1118 <usb2_writeProgString+0x2e>
    110e:	8c 2f       	mov	r24, r28
    1110:	e5 df       	rcall	.-54     	; 0x10dc <usb2_write>
    1112:	df 5f       	subi	r29, 0xFF	; 255
    1114:	df 3f       	cpi	r29, 0xFF	; 255
    1116:	89 f7       	brne	.-30     	; 0x10fa <usb2_writeProgString+0x10>
    1118:	fd d3       	rcall	.+2042   	; 0x1914 <os_leaveCriticalSection>
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <terminal_init>:
    1124:	c5 df       	rcall	.-118    	; 0x10b0 <usb2_init>
    1126:	81 e1       	ldi	r24, 0x11	; 17
    1128:	92 e0       	ldi	r25, 0x02	; 2
    112a:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <__iob+0x3>
    112e:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <__iob+0x2>
    1132:	08 95       	ret

00001134 <terminal_writeChar>:
    1134:	cf 93       	push	r28
    1136:	c8 2f       	mov	r28, r24
    1138:	8a 30       	cpi	r24, 0x0A	; 10
    113a:	11 f4       	brne	.+4      	; 0x1140 <terminal_writeChar+0xc>
    113c:	8d e0       	ldi	r24, 0x0D	; 13
    113e:	ce df       	rcall	.-100    	; 0x10dc <usb2_write>
    1140:	8c 2f       	mov	r24, r28
    1142:	cc df       	rcall	.-104    	; 0x10dc <usb2_write>
    1144:	cf 91       	pop	r28
    1146:	08 95       	ret

00001148 <terminal_writeProgString>:
 *
 *  \param pstr  The string to be written (a pointer to the first character).
 */
void terminal_writeProgString(const char *pstr)
{
	usb2_writeProgString(pstr);
    1148:	d0 cf       	rjmp	.-96     	; 0x10ea <usb2_writeProgString>
    114a:	08 95       	ret

0000114c <stdio_put_char>:

//----------------------------------------------------------------------------
// Configuration of stdio.h
//----------------------------------------------------------------------------
int stdio_put_char(char c, FILE *stream)
{
    114c:	cf 93       	push	r28
    114e:	c8 2f       	mov	r28, r24
    os_enterCriticalSection();
    1150:	c2 d3       	rcall	.+1924   	; 0x18d6 <os_enterCriticalSection>

    terminal_writeChar(c);
    1152:	8c 2f       	mov	r24, r28
    1154:	ef df       	rcall	.-34     	; 0x1134 <terminal_writeChar>
    if (c == '\n') { terminal_writeProgString(PSTR("        ")); }
    1156:	ca 30       	cpi	r28, 0x0A	; 10
    1158:	19 f4       	brne	.+6      	; 0x1160 <stdio_put_char+0x14>
    115a:	86 e9       	ldi	r24, 0x96	; 150
    115c:	91 e0       	ldi	r25, 0x01	; 1

    os_leaveCriticalSection();
    115e:	f4 df       	rcall	.-24     	; 0x1148 <terminal_writeProgString>
    1160:	d9 d3       	rcall	.+1970   	; 0x1914 <os_leaveCriticalSection>
    return 0;
}
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	cf 91       	pop	r28
    1168:	08 95       	ret

0000116a <terminal_newLine>:
/*!
 *  Write a new line
 */
void terminal_newLine()
{
    terminal_writeChar('\n');
    116a:	8a e0       	ldi	r24, 0x0A	; 10
    116c:	e3 cf       	rjmp	.-58     	; 0x1134 <terminal_writeChar>
    116e:	08 95       	ret

00001170 <terminal_log_printf_p>:
    os_leaveCriticalSection();
    return 0;
}

void terminal_log_printf_p(const char *prefix, const char *fmt, ...)
{
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    os_enterCriticalSection();
    117c:	ac d3       	rcall	.+1880   	; 0x18d6 <os_enterCriticalSection>

    terminal_writeProgString(prefix);
    117e:	88 85       	ldd	r24, Y+8	; 0x08
    1180:	99 85       	ldd	r25, Y+9	; 0x09
    1182:	e2 df       	rcall	.-60     	; 0x1148 <terminal_writeProgString>

    va_list args;
    va_start(args, fmt);
    stdout->flags |= __SPGM;
    1184:	02 e8       	ldi	r16, 0x82	; 130
    1186:	15 e0       	ldi	r17, 0x05	; 5
    1188:	d8 01       	movw	r26, r16
    118a:	12 96       	adiw	r26, 0x02	; 2
    118c:	ed 91       	ld	r30, X+
    118e:	fc 91       	ld	r31, X
    1190:	13 97       	sbiw	r26, 0x03	; 3
    1192:	83 81       	ldd	r24, Z+3	; 0x03
    1194:	88 60       	ori	r24, 0x08	; 8
    1196:	83 83       	std	Z+3, r24	; 0x03
    vfprintf_P(stdout, fmt, args);
    1198:	ae 01       	movw	r20, r28
    119a:	44 5f       	subi	r20, 0xF4	; 244
    119c:	5f 4f       	sbci	r21, 0xFF	; 255
    119e:	6a 85       	ldd	r22, Y+10	; 0x0a
    11a0:	7b 85       	ldd	r23, Y+11	; 0x0b
    11a2:	12 96       	adiw	r26, 0x02	; 2
    11a4:	8d 91       	ld	r24, X+
    11a6:	9c 91       	ld	r25, X
    11a8:	13 97       	sbiw	r26, 0x03	; 3
    11aa:	0e 94 33 12 	call	0x2466	; 0x2466 <vfprintf_P>
    stdout->flags &= ~__SPGM;
    11ae:	d8 01       	movw	r26, r16
    11b0:	12 96       	adiw	r26, 0x02	; 2
    11b2:	ed 91       	ld	r30, X+
    11b4:	fc 91       	ld	r31, X
    11b6:	13 97       	sbiw	r26, 0x03	; 3
    11b8:	83 81       	ldd	r24, Z+3	; 0x03
    11ba:	87 7f       	andi	r24, 0xF7	; 247
    va_end(args);

    terminal_newLine();
    11bc:	83 83       	std	Z+3, r24	; 0x03
    11be:	d5 df       	rcall	.-86     	; 0x116a <terminal_newLine>

    os_leaveCriticalSection();
    11c0:	a9 d3       	rcall	.+1874   	; 0x1914 <os_leaveCriticalSection>
    11c2:	df 91       	pop	r29
}
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	08 95       	ret

000011cc <__vector_25>:
    11cc:	1f 92       	push	r1
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart3_putc(c);

}/* uart3_puts_p */
    11ce:	0f 92       	push	r0
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	0f 92       	push	r0
    11d4:	11 24       	eor	r1, r1
    11d6:	0b b6       	in	r0, 0x3b	; 59
    11d8:	0f 92       	push	r0
    11da:	2f 93       	push	r18
    11dc:	8f 93       	push	r24
    11de:	9f 93       	push	r25
    11e0:	ef 93       	push	r30
    11e2:	ff 93       	push	r31
    11e4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    11e8:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    11ec:	8c 71       	andi	r24, 0x1C	; 28
    11ee:	e0 91 04 05 	lds	r30, 0x0504	; 0x800504 <UART0_RxHead>
    11f2:	ef 5f       	subi	r30, 0xFF	; 255
    11f4:	90 91 03 05 	lds	r25, 0x0503	; 0x800503 <UART0_RxTail>
    11f8:	e9 17       	cp	r30, r25
    11fa:	39 f0       	breq	.+14     	; 0x120a <__vector_25+0x3e>
    11fc:	e0 93 04 05 	sts	0x0504, r30	; 0x800504 <UART0_RxHead>
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	e9 5f       	subi	r30, 0xF9	; 249
    1204:	fa 4f       	sbci	r31, 0xFA	; 250
    1206:	20 83       	st	Z, r18
    1208:	01 c0       	rjmp	.+2      	; 0x120c <__vector_25+0x40>
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <UART0_LastRxError>
    1210:	89 2b       	or	r24, r25
    1212:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <UART0_LastRxError>
    1216:	ff 91       	pop	r31
    1218:	ef 91       	pop	r30
    121a:	9f 91       	pop	r25
    121c:	8f 91       	pop	r24
    121e:	2f 91       	pop	r18
    1220:	0f 90       	pop	r0
    1222:	0b be       	out	0x3b, r0	; 59
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <__vector_26>:
    122e:	1f 92       	push	r1
    1230:	0f 92       	push	r0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	0b b6       	in	r0, 0x3b	; 59
    123a:	0f 92       	push	r0
    123c:	8f 93       	push	r24
    123e:	9f 93       	push	r25
    1240:	ef 93       	push	r30
    1242:	ff 93       	push	r31
    1244:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <UART0_TxHead>
    1248:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <UART0_TxTail>
    124c:	98 17       	cp	r25, r24
    124e:	61 f0       	breq	.+24     	; 0x1268 <__vector_26+0x3a>
    1250:	e0 91 05 05 	lds	r30, 0x0505	; 0x800505 <UART0_TxTail>
    1254:	ef 5f       	subi	r30, 0xFF	; 255
    1256:	e0 93 05 05 	sts	0x0505, r30	; 0x800505 <UART0_TxTail>
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	e9 5f       	subi	r30, 0xF9	; 249
    125e:	fa 4f       	sbci	r31, 0xFA	; 250
    1260:	80 81       	ld	r24, Z
    1262:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    1266:	05 c0       	rjmp	.+10     	; 0x1272 <__vector_26+0x44>
    1268:	e1 ec       	ldi	r30, 0xC1	; 193
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8f 7d       	andi	r24, 0xDF	; 223
    1270:	80 83       	st	Z, r24
    1272:	ff 91       	pop	r31
    1274:	ef 91       	pop	r30
    1276:	9f 91       	pop	r25
    1278:	8f 91       	pop	r24
    127a:	0f 90       	pop	r0
    127c:	0b be       	out	0x3b, r0	; 59
    127e:	0f 90       	pop	r0
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	0f 90       	pop	r0
    1284:	1f 90       	pop	r1
    1286:	18 95       	reti

00001288 <uart0_getrxcount>:
    1288:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <UART0_RxTail>
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <UART0_RxHead>
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	82 17       	cp	r24, r18
    1296:	93 07       	cpc	r25, r19
    1298:	18 f0       	brcs	.+6      	; 0x12a0 <uart0_getrxcount+0x18>
    129a:	82 1b       	sub	r24, r18
    129c:	93 0b       	sbc	r25, r19
    129e:	08 95       	ret
    12a0:	82 1b       	sub	r24, r18
    12a2:	93 0b       	sbc	r25, r19
    12a4:	08 95       	ret

000012a6 <__vector_36>:
    12a6:	1f 92       	push	r1
    12a8:	0f 92       	push	r0
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	0f 92       	push	r0
    12ae:	11 24       	eor	r1, r1
    12b0:	0b b6       	in	r0, 0x3b	; 59
    12b2:	0f 92       	push	r0
    12b4:	2f 93       	push	r18
    12b6:	8f 93       	push	r24
    12b8:	9f 93       	push	r25
    12ba:	ef 93       	push	r30
    12bc:	ff 93       	push	r31
    12be:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    12c2:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    12c6:	8c 71       	andi	r24, 0x1C	; 28
    12c8:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <UART1_RxHead>
    12cc:	ef 5f       	subi	r30, 0xFF	; 255
    12ce:	90 91 be 03 	lds	r25, 0x03BE	; 0x8003be <UART1_RxTail>
    12d2:	e9 17       	cp	r30, r25
    12d4:	39 f0       	breq	.+14     	; 0x12e4 <__vector_36+0x3e>
    12d6:	e0 93 bf 03 	sts	0x03BF, r30	; 0x8003bf <UART1_RxHead>
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	ee 53       	subi	r30, 0x3E	; 62
    12de:	fc 4f       	sbci	r31, 0xFC	; 252
    12e0:	20 83       	st	Z, r18
    12e2:	01 c0       	rjmp	.+2      	; 0x12e6 <__vector_36+0x40>
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <UART1_LastRxError>
    12ea:	89 2b       	or	r24, r25
    12ec:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <UART1_LastRxError>
    12f0:	ff 91       	pop	r31
    12f2:	ef 91       	pop	r30
    12f4:	9f 91       	pop	r25
    12f6:	8f 91       	pop	r24
    12f8:	2f 91       	pop	r18
    12fa:	0f 90       	pop	r0
    12fc:	0b be       	out	0x3b, r0	; 59
    12fe:	0f 90       	pop	r0
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	0f 90       	pop	r0
    1304:	1f 90       	pop	r1
    1306:	18 95       	reti

00001308 <__vector_37>:
    1308:	1f 92       	push	r1
    130a:	0f 92       	push	r0
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	0f 92       	push	r0
    1310:	11 24       	eor	r1, r1
    1312:	0b b6       	in	r0, 0x3b	; 59
    1314:	0f 92       	push	r0
    1316:	8f 93       	push	r24
    1318:	9f 93       	push	r25
    131a:	ef 93       	push	r30
    131c:	ff 93       	push	r31
    131e:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <UART1_TxHead>
    1322:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <UART1_TxTail>
    1326:	98 17       	cp	r25, r24
    1328:	69 f0       	breq	.+26     	; 0x1344 <__vector_37+0x3c>
    132a:	e0 91 c0 03 	lds	r30, 0x03C0	; 0x8003c0 <UART1_TxTail>
    132e:	ef 5f       	subi	r30, 0xFF	; 255
    1330:	ef 73       	andi	r30, 0x3F	; 63
    1332:	e0 93 c0 03 	sts	0x03C0, r30	; 0x8003c0 <UART1_TxTail>
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	ee 53       	subi	r30, 0x3E	; 62
    133a:	fb 4f       	sbci	r31, 0xFB	; 251
    133c:	80 81       	ld	r24, Z
    133e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    1342:	05 c0       	rjmp	.+10     	; 0x134e <__vector_37+0x46>
    1344:	e9 ec       	ldi	r30, 0xC9	; 201
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	8f 7d       	andi	r24, 0xDF	; 223
    134c:	80 83       	st	Z, r24
    134e:	ff 91       	pop	r31
    1350:	ef 91       	pop	r30
    1352:	9f 91       	pop	r25
    1354:	8f 91       	pop	r24
    1356:	0f 90       	pop	r0
    1358:	0b be       	out	0x3b, r0	; 59
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	0f 90       	pop	r0
    1360:	1f 90       	pop	r1
    1362:	18 95       	reti

00001364 <__vector_51>:
    1364:	1f 92       	push	r1
    1366:	0f 92       	push	r0
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	0f 92       	push	r0
    136c:	11 24       	eor	r1, r1
    136e:	0b b6       	in	r0, 0x3b	; 59
    1370:	0f 92       	push	r0
    1372:	2f 93       	push	r18
    1374:	8f 93       	push	r24
    1376:	9f 93       	push	r25
    1378:	ef 93       	push	r30
    137a:	ff 93       	push	r31
    137c:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
    1380:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    1384:	8c 71       	andi	r24, 0x1C	; 28
    1386:	e0 91 7a 03 	lds	r30, 0x037A	; 0x80037a <UART2_RxHead>
    138a:	ef 5f       	subi	r30, 0xFF	; 255
    138c:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <UART2_RxTail>
    1390:	e9 17       	cp	r30, r25
    1392:	39 f0       	breq	.+14     	; 0x13a2 <__vector_51+0x3e>
    1394:	e0 93 7a 03 	sts	0x037A, r30	; 0x80037a <UART2_RxHead>
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	e3 58       	subi	r30, 0x83	; 131
    139c:	fc 4f       	sbci	r31, 0xFC	; 252
    139e:	20 83       	st	Z, r18
    13a0:	01 c0       	rjmp	.+2      	; 0x13a4 <__vector_51+0x40>
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    13a4:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <UART2_LastRxError>
    13a8:	89 2b       	or	r24, r25
    13aa:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <UART2_LastRxError>
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	9f 91       	pop	r25
    13b4:	8f 91       	pop	r24
    13b6:	2f 91       	pop	r18
    13b8:	0f 90       	pop	r0
    13ba:	0b be       	out	0x3b, r0	; 59
    13bc:	0f 90       	pop	r0
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	0f 90       	pop	r0
    13c2:	1f 90       	pop	r1
    13c4:	18 95       	reti

000013c6 <__vector_52>:
    13c6:	1f 92       	push	r1
    13c8:	0f 92       	push	r0
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	0f 92       	push	r0
    13ce:	11 24       	eor	r1, r1
    13d0:	0b b6       	in	r0, 0x3b	; 59
    13d2:	0f 92       	push	r0
    13d4:	8f 93       	push	r24
    13d6:	9f 93       	push	r25
    13d8:	ef 93       	push	r30
    13da:	ff 93       	push	r31
    13dc:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <UART2_TxHead>
    13e0:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <UART2_TxTail>
    13e4:	98 17       	cp	r25, r24
    13e6:	69 f0       	breq	.+26     	; 0x1402 <__vector_52+0x3c>
    13e8:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <UART2_TxTail>
    13ec:	ef 5f       	subi	r30, 0xFF	; 255
    13ee:	ef 73       	andi	r30, 0x3F	; 63
    13f0:	e0 93 7b 03 	sts	0x037B, r30	; 0x80037b <UART2_TxTail>
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	e3 58       	subi	r30, 0x83	; 131
    13f8:	fc 4f       	sbci	r31, 0xFC	; 252
    13fa:	80 81       	ld	r24, Z
    13fc:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    1400:	05 c0       	rjmp	.+10     	; 0x140c <__vector_52+0x46>
    1402:	e1 ed       	ldi	r30, 0xD1	; 209
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	8f 7d       	andi	r24, 0xDF	; 223
    140a:	80 83       	st	Z, r24
    140c:	ff 91       	pop	r31
    140e:	ef 91       	pop	r30
    1410:	9f 91       	pop	r25
    1412:	8f 91       	pop	r24
    1414:	0f 90       	pop	r0
    1416:	0b be       	out	0x3b, r0	; 59
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <__vector_54>:
    1422:	1f 92       	push	r1
    1424:	0f 92       	push	r0
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	0f 92       	push	r0
    142a:	11 24       	eor	r1, r1
    142c:	0b b6       	in	r0, 0x3b	; 59
    142e:	0f 92       	push	r0
    1430:	2f 93       	push	r18
    1432:	8f 93       	push	r24
    1434:	9f 93       	push	r25
    1436:	ef 93       	push	r30
    1438:	ff 93       	push	r31
    143a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
    143e:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    1442:	8c 71       	andi	r24, 0x1C	; 28
    1444:	e0 91 35 03 	lds	r30, 0x0335	; 0x800335 <UART3_RxHead>
    1448:	ef 5f       	subi	r30, 0xFF	; 255
    144a:	ef 73       	andi	r30, 0x3F	; 63
    144c:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <UART3_RxTail>
    1450:	e9 17       	cp	r30, r25
    1452:	39 f0       	breq	.+14     	; 0x1462 <__vector_54+0x40>
    1454:	e0 93 35 03 	sts	0x0335, r30	; 0x800335 <UART3_RxHead>
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	e8 5c       	subi	r30, 0xC8	; 200
    145c:	fc 4f       	sbci	r31, 0xFC	; 252
    145e:	20 83       	st	Z, r18
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <__vector_54+0x42>
    1462:	82 e0       	ldi	r24, 0x02	; 2
    1464:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <UART3_LastRxError>
    1468:	89 2b       	or	r24, r25
    146a:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <UART3_LastRxError>
    146e:	ff 91       	pop	r31
    1470:	ef 91       	pop	r30
    1472:	9f 91       	pop	r25
    1474:	8f 91       	pop	r24
    1476:	2f 91       	pop	r18
    1478:	0f 90       	pop	r0
    147a:	0b be       	out	0x3b, r0	; 59
    147c:	0f 90       	pop	r0
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	0f 90       	pop	r0
    1482:	1f 90       	pop	r1
    1484:	18 95       	reti

00001486 <__vector_55>:
    1486:	1f 92       	push	r1
    1488:	0f 92       	push	r0
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	0f 92       	push	r0
    148e:	11 24       	eor	r1, r1
    1490:	0b b6       	in	r0, 0x3b	; 59
    1492:	0f 92       	push	r0
    1494:	8f 93       	push	r24
    1496:	9f 93       	push	r25
    1498:	ef 93       	push	r30
    149a:	ff 93       	push	r31
    149c:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <UART3_TxHead>
    14a0:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <UART3_TxTail>
    14a4:	98 17       	cp	r25, r24
    14a6:	61 f0       	breq	.+24     	; 0x14c0 <__vector_55+0x3a>
    14a8:	e0 91 36 03 	lds	r30, 0x0336	; 0x800336 <UART3_TxTail>
    14ac:	ef 5f       	subi	r30, 0xFF	; 255
    14ae:	e0 93 36 03 	sts	0x0336, r30	; 0x800336 <UART3_TxTail>
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	e8 58       	subi	r30, 0x88	; 136
    14b6:	fc 4f       	sbci	r31, 0xFC	; 252
    14b8:	80 81       	ld	r24, Z
    14ba:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <__vector_55+0x44>
    14c0:	e1 e3       	ldi	r30, 0x31	; 49
    14c2:	f1 e0       	ldi	r31, 0x01	; 1
    14c4:	80 81       	ld	r24, Z
    14c6:	8f 7d       	andi	r24, 0xDF	; 223
    14c8:	80 83       	st	Z, r24
    14ca:	ff 91       	pop	r31
    14cc:	ef 91       	pop	r30
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	0f 90       	pop	r0
    14d4:	0b be       	out	0x3b, r0	; 59
    14d6:	0f 90       	pop	r0
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	0f 90       	pop	r0
    14dc:	1f 90       	pop	r1
    14de:	18 95       	reti

000014e0 <uart3_init>:
    14e0:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <UART3_TxHead>
    14e4:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <UART3_TxTail>
    14e8:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <UART3_RxHead>
    14ec:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <UART3_RxTail>
    14f0:	28 2f       	mov	r18, r24
    14f2:	39 2f       	mov	r19, r25
    14f4:	33 23       	and	r19, r19
    14f6:	1c f4       	brge	.+6      	; 0x14fe <uart3_init+0x1e>
    14f8:	22 e0       	ldi	r18, 0x02	; 2
    14fa:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
    14fe:	90 78       	andi	r25, 0x80	; 128
    1500:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
    1504:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
    1508:	88 e9       	ldi	r24, 0x98	; 152
    150a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
    150e:	86 e0       	ldi	r24, 0x06	; 6
    1510:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>
    1514:	08 95       	ret

00001516 <uart3_getc>:
    1516:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <UART3_RxHead>
    151a:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <UART3_RxTail>
    151e:	98 17       	cp	r25, r24
    1520:	a1 f0       	breq	.+40     	; 0x154a <uart3_getc+0x34>
    1522:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <UART3_RxTail>
    1526:	8f 5f       	subi	r24, 0xFF	; 255
    1528:	8f 73       	andi	r24, 0x3F	; 63
    152a:	e8 2f       	mov	r30, r24
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	e8 5c       	subi	r30, 0xC8	; 200
    1530:	fc 4f       	sbci	r31, 0xFC	; 252
    1532:	20 81       	ld	r18, Z
    1534:	30 91 33 03 	lds	r19, 0x0333	; 0x800333 <UART3_LastRxError>
    1538:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <UART3_RxTail>
    153c:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <UART3_LastRxError>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	93 2f       	mov	r25, r19
    1544:	82 0f       	add	r24, r18
    1546:	91 1d       	adc	r25, r1
    1548:	08 95       	ret
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	08 95       	ret

00001550 <uart3_putc>:
    1550:	20 91 37 03 	lds	r18, 0x0337	; 0x800337 <UART3_TxHead>
    1554:	2f 5f       	subi	r18, 0xFF	; 255
    1556:	90 91 36 03 	lds	r25, 0x0336	; 0x800336 <UART3_TxTail>
    155a:	29 17       	cp	r18, r25
    155c:	e1 f3       	breq	.-8      	; 0x1556 <uart3_putc+0x6>
    155e:	e2 2f       	mov	r30, r18
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	e8 58       	subi	r30, 0x88	; 136
    1564:	fc 4f       	sbci	r31, 0xFC	; 252
    1566:	80 83       	st	Z, r24
    1568:	20 93 37 03 	sts	0x0337, r18	; 0x800337 <UART3_TxHead>
    156c:	e1 e3       	ldi	r30, 0x31	; 49
    156e:	f1 e0       	ldi	r31, 0x01	; 1
    1570:	80 81       	ld	r24, Z
    1572:	80 62       	ori	r24, 0x20	; 32
    1574:	80 83       	st	Z, r24
    1576:	08 95       	ret

00001578 <uart3_getrxcount>:
/*
 * Returns current filling of the buffer in byte
 */
uint16_t uart3_getrxcount()
{
	return BUFFER_FILLING(UART3_RxHead, UART3_RxTail, UART3_RX_BUFFER_SIZE);
    1578:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <UART3_RxTail>
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <UART3_RxHead>
    1582:	90 e0       	ldi	r25, 0x00	; 0
#define cbi(x, b) (x &= ~(1 << (b)))
#endif

inline uint16_t BUFFER_FILLING(uint16_t head, uint16_t tail, uint16_t size)
{
	if (head >= tail) { return head - tail; }
    1584:	82 17       	cp	r24, r18
    1586:	93 07       	cpc	r25, r19
    1588:	18 f0       	brcs	.+6      	; 0x1590 <uart3_getrxcount+0x18>
    158a:	82 1b       	sub	r24, r18
    158c:	93 0b       	sbc	r25, r19
    158e:	08 95       	ret
	return size - tail + head;
    1590:	40 e4       	ldi	r20, 0x40	; 64
    1592:	50 e0       	ldi	r21, 0x00	; 0
    1594:	ba 01       	movw	r22, r20
    1596:	62 1b       	sub	r22, r18
    1598:	73 0b       	sbc	r23, r19
    159a:	86 0f       	add	r24, r22
    159c:	97 1f       	adc	r25, r23
 * Returns current filling of the buffer in byte
 */
uint16_t uart3_getrxcount()
{
	return BUFFER_FILLING(UART3_RxHead, UART3_RxTail, UART3_RX_BUFFER_SIZE);
}
    159e:	08 95       	ret

000015a0 <__vector_21>:

/*!
 *  ISR that counts the number of occurred Timer 0 compare matches for the getSystemTime function mainly used in delayMs.
 */
ISR(TIMER0_COMPA_vect)
{
    15a0:	1f 92       	push	r1
    15a2:	0f 92       	push	r0
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	0f 92       	push	r0
    15a8:	11 24       	eor	r1, r1
    15aa:	8f 93       	push	r24
    15ac:	9f 93       	push	r25
    15ae:	af 93       	push	r26
    15b0:	bf 93       	push	r27
	++os_coarseSystemTime;
    15b2:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <os_coarseSystemTime>
    15b6:	90 91 0c 05 	lds	r25, 0x050C	; 0x80050c <os_coarseSystemTime+0x1>
    15ba:	a0 91 0d 05 	lds	r26, 0x050D	; 0x80050d <os_coarseSystemTime+0x2>
    15be:	b0 91 0e 05 	lds	r27, 0x050E	; 0x80050e <os_coarseSystemTime+0x3>
    15c2:	01 96       	adiw	r24, 0x01	; 1
    15c4:	a1 1d       	adc	r26, r1
    15c6:	b1 1d       	adc	r27, r1
    15c8:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <os_coarseSystemTime>
    15cc:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <os_coarseSystemTime+0x1>
    15d0:	a0 93 0d 05 	sts	0x050D, r26	; 0x80050d <os_coarseSystemTime+0x2>
    15d4:	b0 93 0e 05 	sts	0x050E, r27	; 0x80050e <os_coarseSystemTime+0x3>
}
    15d8:	bf 91       	pop	r27
    15da:	af 91       	pop	r26
    15dc:	9f 91       	pop	r25
    15de:	8f 91       	pop	r24
    15e0:	0f 90       	pop	r0
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	0f 90       	pop	r0
    15e6:	1f 90       	pop	r1
    15e8:	18 95       	reti

000015ea <initSystemTime>:
/*!
 *  Initializes Timer 0 as system clock
 */
void initSystemTime(void)
{
	os_coarseSystemTime = 0;
    15ea:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <os_coarseSystemTime>
    15ee:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <os_coarseSystemTime+0x1>
    15f2:	10 92 0d 05 	sts	0x050D, r1	; 0x80050d <os_coarseSystemTime+0x2>
    15f6:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <os_coarseSystemTime+0x3>

	// Init timer 0 with prescaler 64
	sbi(TCCR0B, CS00);
    15fa:	85 b5       	in	r24, 0x25	; 37
    15fc:	81 60       	ori	r24, 0x01	; 1
    15fe:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS01);
    1600:	85 b5       	in	r24, 0x25	; 37
    1602:	82 60       	ori	r24, 0x02	; 2
    1604:	85 bd       	out	0x25, r24	; 37
	cbi(TCCR0B, CS02);
    1606:	85 b5       	in	r24, 0x25	; 37
    1608:	8b 7f       	andi	r24, 0xFB	; 251
    160a:	85 bd       	out	0x25, r24	; 37

	// CTC mode
	sbi(TCCR0A, WGM01);
    160c:	84 b5       	in	r24, 0x24	; 36
    160e:	82 60       	ori	r24, 0x02	; 2
    1610:	84 bd       	out	0x24, r24	; 36

	// Compare Match after 61 timer ticks = 1ms
	OCR0A = TIMER_OCR;
    1612:	89 ef       	ldi	r24, 0xF9	; 249
    1614:	87 bd       	out	0x27, r24	; 39
	sbi(TIMSK0, OCIE0A);
    1616:	ee e6       	ldi	r30, 0x6E	; 110
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	82 60       	ori	r24, 0x02	; 2
    161e:	80 83       	st	Z, r24
    1620:	08 95       	ret

00001622 <getSystemTime_ms>:
 */
time_t getSystemTime_ms(void)
{
	// In case interrupts are off we check the OCF manually, clear it and
	// increment os_coarseSystemTime to avoid freezing the system time
	if (!gbi(SREG, 7) && gbi(TIFR0, OCF0A))
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	07 fc       	sbrc	r0, 7
    1626:	18 c0       	rjmp	.+48     	; 0x1658 <getSystemTime_ms+0x36>
    1628:	a9 9b       	sbis	0x15, 1	; 21
    162a:	16 c0       	rjmp	.+44     	; 0x1658 <getSystemTime_ms+0x36>
	{
		sbi(TIFR0, OCF0A);
    162c:	85 b3       	in	r24, 0x15	; 21
    162e:	82 60       	ori	r24, 0x02	; 2
    1630:	85 bb       	out	0x15, r24	; 21
		++os_coarseSystemTime;
    1632:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <os_coarseSystemTime>
    1636:	90 91 0c 05 	lds	r25, 0x050C	; 0x80050c <os_coarseSystemTime+0x1>
    163a:	a0 91 0d 05 	lds	r26, 0x050D	; 0x80050d <os_coarseSystemTime+0x2>
    163e:	b0 91 0e 05 	lds	r27, 0x050E	; 0x80050e <os_coarseSystemTime+0x3>
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	a1 1d       	adc	r26, r1
    1646:	b1 1d       	adc	r27, r1
    1648:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <os_coarseSystemTime>
    164c:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <os_coarseSystemTime+0x1>
    1650:	a0 93 0d 05 	sts	0x050D, r26	; 0x80050d <os_coarseSystemTime+0x2>
    1654:	b0 93 0e 05 	sts	0x050E, r27	; 0x80050e <os_coarseSystemTime+0x3>
	}

	// Synchronize access to os_coarseSystemTime
	uint8_t ie = gbi(SREG, 7);
    1658:	8f b7       	in	r24, 0x3f	; 63
    165a:	28 2f       	mov	r18, r24
    165c:	22 1f       	adc	r18, r18
    165e:	22 27       	eor	r18, r18
    1660:	22 1f       	adc	r18, r18
	cli();
    1662:	f8 94       	cli
	time_t t = os_coarseSystemTime;
    1664:	60 91 0b 05 	lds	r22, 0x050B	; 0x80050b <os_coarseSystemTime>
    1668:	70 91 0c 05 	lds	r23, 0x050C	; 0x80050c <os_coarseSystemTime+0x1>
    166c:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <os_coarseSystemTime+0x2>
    1670:	90 91 0e 05 	lds	r25, 0x050E	; 0x80050e <os_coarseSystemTime+0x3>
	if (ie)
    1674:	22 23       	and	r18, r18
    1676:	09 f0       	breq	.+2      	; 0x167a <getSystemTime_ms+0x58>
	{
		sei();
    1678:	78 94       	sei
	}

	return t;
}
    167a:	08 95       	ret

0000167c <delayMs>:
 *  in order to get the destination time. Then, we wait until a temporary variable reaches this value.
 *
 *  \param ms  The time to be waited in milliseconds (max. 65535)
 */
void delayMs(uint16_t ms)
{
    167c:	cf 92       	push	r12
    167e:	df 92       	push	r13
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
#ifdef RUNNING_WITH_SIMULATOR
	return;
#endif

	if (ms == 0)
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	d1 f0       	breq	.+52     	; 0x16c4 <delayMs+0x48>
    1690:	ec 01       	movw	r28, r24
	{
		return;
	}
	time_t startTime = getSystemTime_ms();
    1692:	c7 df       	rcall	.-114    	; 0x1622 <getSystemTime_ms>
    1694:	6b 01       	movw	r12, r22
    1696:	7c 01       	movw	r14, r24

	while (getSystemTime_ms() - startTime < ms)
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <delayMs+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    169a:	8f e8       	ldi	r24, 0x8F	; 143
    169c:	91 e0       	ldi	r25, 0x01	; 1
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	f1 f7       	brne	.-4      	; 0x169e <delayMs+0x22>
    16a2:	00 c0       	rjmp	.+0      	; 0x16a4 <delayMs+0x28>
    16a4:	00 00       	nop
    16a6:	bd df       	rcall	.-134    	; 0x1622 <getSystemTime_ms>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	8c 19       	sub	r24, r12
    16ae:	9d 09       	sbc	r25, r13
    16b0:	ae 09       	sbc	r26, r14
    16b2:	bf 09       	sbc	r27, r15
    16b4:	8e 01       	movw	r16, r28
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	80 17       	cp	r24, r16
    16bc:	91 07       	cpc	r25, r17
    16be:	a2 07       	cpc	r26, r18
    16c0:	b3 07       	cpc	r27, r19
    16c2:	58 f3       	brcs	.-42     	; 0x169a <delayMs+0x1e>
	{
		_delay_us(100);
	}
}
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	ff 90       	pop	r15
    16ce:	ef 90       	pop	r14
    16d0:	df 90       	pop	r13
    16d2:	cf 90       	pop	r12
    16d4:	08 95       	ret

000016d6 <assertPstr>:
 *
 *  \param exp The boolean expression that is expected to be true.
 *  \param errormsg The string that shall be shown as an error message if the given expression is false as progmem string.
 */
void assertPstr(bool exp, const char *errormsg, ...)
{
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	9f 81       	ldd	r25, Y+7	; 0x07
    16e0:	28 85       	ldd	r18, Y+8	; 0x08
	if (!exp)
    16e2:	8e 81       	ldd	r24, Y+6	; 0x06
    16e4:	81 11       	cpse	r24, r1
    16e6:	0c c0       	rjmp	.+24     	; 0x1700 <assertPstr+0x2a>
	{
		va_list args;
		va_start(args, errormsg);
    16e8:	ae 01       	movw	r20, r28
    16ea:	47 5f       	subi	r20, 0xF7	; 247
    16ec:	5f 4f       	sbci	r21, 0xFF	; 255
		os_errorPstr(errormsg, args);
    16ee:	5f 93       	push	r21
    16f0:	4f 93       	push	r20
    16f2:	2f 93       	push	r18
    16f4:	9f 93       	push	r25
    16f6:	6a d0       	rcall	.+212    	; 0x17cc <os_errorPstr>
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
		va_end(args);
	}
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	08 95       	ret

00001706 <main>:
//! Program's entry point
int main(void)
{
	// Give the operating system a chance to initialize its private data.
	// This also registers and starts the idle program.
	os_init();
    1706:	21 d0       	rcall	.+66     	; 0x174a <os_init>

	// os_init shows a boot message
	// Wait and clear the LCD
	delayMs(600);
    1708:	88 e5       	ldi	r24, 0x58	; 88
    170a:	92 e0       	ldi	r25, 0x02	; 2
	lcd_clear();
    170c:	b7 df       	rcall	.-146    	; 0x167c <delayMs>
    170e:	f6 da       	rcall	.-2580   	; 0xcfc <lcd_clear>

	// Start the operating system
	os_startScheduler();
    1710:	35 d1       	rcall	.+618    	; 0x197c <os_startScheduler>
    1712:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	08 95       	ret

00001718 <os_initTimer>:
    1718:	e0 eb       	ldi	r30, 0xB0	; 176
 *  Initializes the used timers.
 */
void os_initTimer(void)
{
	// Init timer 2 (Scheduler)
	sbi(TCCR2A, WGM21); // Clear on timer compare match
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	82 60       	ori	r24, 0x02	; 2
    1720:	80 83       	st	Z, r24

	sbi(TCCR2B, CS22);	 // Prescaler 1024  1
    1722:	e1 eb       	ldi	r30, 0xB1	; 177
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	84 60       	ori	r24, 0x04	; 4
    172a:	80 83       	st	Z, r24
	sbi(TCCR2B, CS21);	 // Prescaler 1024  1
    172c:	80 81       	ld	r24, Z
    172e:	82 60       	ori	r24, 0x02	; 2
    1730:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20);	 // Prescaler 1024  1
    1732:	80 81       	ld	r24, Z
    1734:	81 60       	ori	r24, 0x01	; 1
    1736:	80 83       	st	Z, r24
	sbi(TIMSK2, OCIE2A); // Enable interrupt
    1738:	e0 e7       	ldi	r30, 0x70	; 112
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	82 60       	ori	r24, 0x02	; 2
    1740:	80 83       	st	Z, r24
	OCR2A = 60;
    1742:	8c e3       	ldi	r24, 0x3C	; 60
    1744:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
    1748:	08 95       	ret

0000174a <os_init>:
 *  Readies stack, scheduler and heap for first use. Additionally, the LCD is initialized. In order to do those tasks,
 *  it calls the subfunction os_initScheduler().
 */
void os_init()
{
	initSystemTime();
    174a:	4f df       	rcall	.-354    	; 0x15ea <initSystemTime>
	os_initTimer();
    174c:	e5 df       	rcall	.-54     	; 0x1718 <os_initTimer>
	stopWatch_init();
    174e:	9d dc       	rcall	.-1734   	; 0x108a <stopWatch_init>

	// Init LCD display
	lcd_init();
    1750:	90 da       	rcall	.-2784   	; 0xc72 <lcd_init>
	terminal_init();
    1752:	e8 dc       	rcall	.-1584   	; 0x1124 <terminal_init>

	// display on
	lcd_displayOn();
    1754:	e0 da       	rcall	.-2624   	; 0xd16 <lcd_displayOn>
    1756:	d2 da       	rcall	.-2652   	; 0xcfc <lcd_clear>
	lcd_clear();
    1758:	84 e7       	ldi	r24, 0x74	; 116

	lcd_writeProgString(PSTR("Booting DEOS ..."));
    175a:	92 e0       	ldi	r25, 0x02	; 2
    175c:	6d db       	rcall	.-2342   	; 0xe38 <lcd_writeProgString>
    175e:	8e e3       	ldi	r24, 0x3E	; 62
    1760:	92 e0       	ldi	r25, 0x02	; 2

	terminal_writeProgString(PSTR("\n\n##################################################\n"));
    1762:	f2 dc       	rcall	.-1564   	; 0x1148 <terminal_writeProgString>
    1764:	8d e2       	ldi	r24, 0x2D	; 45
    1766:	92 e0       	ldi	r25, 0x02	; 2
	INFO("Booting DEOS ...");
    1768:	9f 93       	push	r25
    176a:	8f 93       	push	r24
    176c:	84 e2       	ldi	r24, 0x24	; 36
    176e:	92 e0       	ldi	r25, 0x02	; 2
    1770:	9f 93       	push	r25
    1772:	8f 93       	push	r24
    1774:	fd dc       	rcall	.-1542   	; 0x1170 <terminal_log_printf_p>
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	8f 93       	push	r24
    177a:	88 ee       	ldi	r24, 0xE8	; 232
	INFO("Used global vars: %d/%d bytes", (uint16_t)&__heap_start - AVR_SRAM_START, STACK_OFFSET);
    177c:	8f 93       	push	r24
    177e:	88 e8       	ldi	r24, 0x88	; 136
    1780:	93 e0       	ldi	r25, 0x03	; 3
    1782:	9f 93       	push	r25
    1784:	8f 93       	push	r24
    1786:	86 e0       	ldi	r24, 0x06	; 6
    1788:	92 e0       	ldi	r25, 0x02	; 2
    178a:	9f 93       	push	r25
    178c:	8f 93       	push	r24
    178e:	8d ef       	ldi	r24, 0xFD	; 253
    1790:	91 e0       	ldi	r25, 0x01	; 1
    1792:	9f 93       	push	r25
    1794:	8f 93       	push	r24
    1796:	ec dc       	rcall	.-1576   	; 0x1170 <terminal_log_printf_p>
    1798:	89 ec       	ldi	r24, 0xC9	; 201
    179a:	91 e0       	ldi	r25, 0x01	; 1
	terminal_writeProgString(PSTR("--------------------------------------------------\n"));
    179c:	d5 dc       	rcall	.-1622   	; 0x1148 <terminal_writeProgString>
    179e:	88 ea       	ldi	r24, 0xA8	; 168
    17a0:	91 e0       	ldi	r25, 0x01	; 1
    17a2:	9f 93       	push	r25

	// Security check if the stack crushes global variables
	assert((uint16_t)&__heap_start < AVR_SRAM_START + STACK_OFFSET, " Stack collides with global vars");
    17a4:	8f 93       	push	r24
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	28 e8       	ldi	r18, 0x88	; 136
    17aa:	35 e0       	ldi	r19, 0x05	; 5
    17ac:	28 3e       	cpi	r18, 0xE8	; 232
    17ae:	35 40       	sbci	r19, 0x05	; 5
    17b0:	08 f0       	brcs	.+2      	; 0x17b4 <os_init+0x6a>
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	8f 93       	push	r24
    17b6:	8f df       	rcall	.-226    	; 0x16d6 <assertPstr>
    17b8:	f4 d1       	rcall	.+1000   	; 0x1ba2 <os_initScheduler>
    17ba:	8d b7       	in	r24, 0x3d	; 61

	os_initScheduler();
    17bc:	9e b7       	in	r25, 0x3e	; 62
    17be:	0f 96       	adiw	r24, 0x0f	; 15
}
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	9e bf       	out	0x3e, r25	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	8d bf       	out	0x3d, r24	; 61
    17ca:	08 95       	ret

000017cc <os_errorPstr>:
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	cd b7       	in	r28, 0x3d	; 61
 *
 *  \param msg The error to be displayed as progmem string
 *  \param ... Formatting arguments for the error message
 */
void os_errorPstr(const char *msg, ...)
{
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	1e 81       	ldd	r17, Y+6	; 0x06
    17d6:	0f 81       	ldd	r16, Y+7	; 0x07
	cli();
    17d8:	f8 94       	cli

	// Make sure we have enough stack left for sure (we can mess with it because we won't go out of this function)
	SP = BOTTOM_OF_MAIN_STACK;
    17da:	8f ef       	ldi	r24, 0xFF	; 255
    17dc:	91 e2       	ldi	r25, 0x21	; 33
    17de:	9e bf       	out	0x3e, r25	; 62
    17e0:	8d bf       	out	0x3d, r24	; 61

	// Clear display and write error message
	lcd_clear();
    17e2:	8c da       	rcall	.-2792   	; 0xcfc <lcd_clear>

	// Print error message to lcd (variadic arguments)
	va_list args;
	va_start(args, msg);
    17e4:	ce 01       	movw	r24, r28
    17e6:	08 96       	adiw	r24, 0x08	; 8
	lcd_printf_p(msg, args);
    17e8:	9f 93       	push	r25
    17ea:	8f 93       	push	r24
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	03 da       	rcall	.-3066   	; 0xbf8 <lcd_printf_p>
	va_end(args);

	// Print error message to terminal (variadic arguments)
	va_start(args, msg);
    17f2:	ce 01       	movw	r24, r28
    17f4:	08 96       	adiw	r24, 0x08	; 8
	terminal_log_printf_p(PSTR("[ERROR] "), msg, args);
    17f6:	9f 93       	push	r25
    17f8:	8f 93       	push	r24
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	8f e9       	ldi	r24, 0x9F	; 159
    1800:	91 e0       	ldi	r25, 0x01	; 1
    1802:	9f 93       	push	r25
    1804:	8f 93       	push	r24
    1806:	b4 dc       	rcall	.-1688   	; 0x1170 <terminal_log_printf_p>
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
	va_end(args);

	// Catch system in this infinite loop and play a small animation to indicate an error
	while (1)
	{
		lcd_displayOn();
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	81 da       	rcall	.-2814   	; 0xd16 <lcd_displayOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1814:	9f ef       	ldi	r25, 0xFF	; 255
    1816:	2d e3       	ldi	r18, 0x3D	; 61
    1818:	89 e4       	ldi	r24, 0x49	; 73
    181a:	91 50       	subi	r25, 0x01	; 1
    181c:	20 40       	sbci	r18, 0x00	; 0
    181e:	80 40       	sbci	r24, 0x00	; 0
    1820:	e1 f7       	brne	.-8      	; 0x181a <os_errorPstr+0x4e>
    1822:	00 c0       	rjmp	.+0      	; 0x1824 <os_errorPstr+0x58>
		_delay_ms(1500);
		lcd_displayOff();
    1824:	00 00       	nop
    1826:	7a da       	rcall	.-2828   	; 0xd1c <lcd_displayOff>
    1828:	9f ef       	ldi	r25, 0xFF	; 255
    182a:	21 ee       	ldi	r18, 0xE1	; 225
    182c:	84 e0       	ldi	r24, 0x04	; 4
    182e:	91 50       	subi	r25, 0x01	; 1
    1830:	20 40       	sbci	r18, 0x00	; 0
    1832:	80 40       	sbci	r24, 0x00	; 0
    1834:	e1 f7       	brne	.-8      	; 0x182e <os_errorPstr+0x62>
    1836:	00 c0       	rjmp	.+0      	; 0x1838 <os_errorPstr+0x6c>
    1838:	00 00       	nop
    183a:	eb cf       	rjmp	.-42     	; 0x1812 <os_errorPstr+0x46>

0000183c <prog0>:

/*!
 *  This is the idle program. The idle process owns all the memory
 *  and processor time no other process wants to have.
 */
PROGRAM(0, AUTOSTART)
    183c:	c0 e0       	ldi	r28, 0x00	; 0
    183e:	d0 e0       	ldi	r29, 0x00	; 0
    1840:	06 c0       	rjmp	.+12     	; 0x184e <prog0+0x12>
    1842:	8e e2       	ldi	r24, 0x2E	; 46
    1844:	a4 da       	rcall	.-2744   	; 0xd8e <lcd_writeChar>
    1846:	84 e6       	ldi	r24, 0x64	; 100
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	18 df       	rcall	.-464    	; 0x167c <delayMs>
    184c:	21 96       	adiw	r28, 0x01	; 1
    184e:	c3 30       	cpi	r28, 0x03	; 3
    1850:	d1 05       	cpc	r29, r1
    1852:	bc f3       	brlt	.-18     	; 0x1842 <prog0+0x6>
    1854:	53 da       	rcall	.-2906   	; 0xcfc <lcd_clear>
    1856:	84 e6       	ldi	r24, 0x64	; 100
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	10 df       	rcall	.-480    	; 0x167c <delayMs>
    185c:	ef cf       	rjmp	.-34     	; 0x183c <prog0>

0000185e <addressOfProgram>:
    185e:	bc 01       	movw	r22, r24
    1860:	99 0f       	add	r25, r25
    1862:	88 0b       	sbc	r24, r24
    1864:	99 0b       	sbc	r25, r25
    1866:	08 95       	ret

00001868 <os_checkAutostartProgram>:
    1868:	21 e0       	ldi	r18, 0x01	; 1
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <os_checkAutostartProgram+0xa>
    186e:	22 0f       	add	r18, r18
    1870:	33 1f       	adc	r19, r19
    1872:	8a 95       	dec	r24
    1874:	e2 f7       	brpl	.-8      	; 0x186e <os_checkAutostartProgram+0x6>
    1876:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <os_autostart>
    187a:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <os_autostart+0x1>
    187e:	28 23       	and	r18, r24
    1880:	39 23       	and	r19, r25
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	23 2b       	or	r18, r19
    1886:	09 f4       	brne	.+2      	; 0x188a <os_checkAutostartProgram+0x22>
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	08 95       	ret

0000188c <os_lookupProgramFunction>:
    188c:	80 31       	cpi	r24, 0x10	; 16
    188e:	48 f4       	brcc	.+18     	; 0x18a2 <os_lookupProgramFunction+0x16>
    1890:	e8 2f       	mov	r30, r24
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	ee 0f       	add	r30, r30
    1896:	ff 1f       	adc	r31, r31
    1898:	e1 5c       	subi	r30, 0xC1	; 193
    189a:	fa 4f       	sbci	r31, 0xFA	; 250
    189c:	80 81       	ld	r24, Z
    189e:	91 81       	ldd	r25, Z+1	; 0x01
    18a0:	08 95       	ret
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	08 95       	ret

000018a8 <os_getProcessSlot>:
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	9c 01       	movw	r18, r24
    18ac:	22 0f       	add	r18, r18
    18ae:	33 1f       	adc	r19, r19
    18b0:	82 0f       	add	r24, r18
    18b2:	93 1f       	adc	r25, r19
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	81 5f       	subi	r24, 0xF1	; 241
    18ba:	9a 4f       	sbci	r25, 0xFA	; 250
    18bc:	08 95       	ret

000018be <os_getProgramSlot>:
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	81 5c       	subi	r24, 0xC1	; 193
    18c6:	9a 4f       	sbci	r25, 0xFA	; 250
    18c8:	08 95       	ret

000018ca <os_getCurrentProc>:
    18ca:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <currentProc>
    18ce:	08 95       	ret

000018d0 <os_getSchedulingStrategy>:
    18d0:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <currSchedStrat>
    18d4:	08 95       	ret

000018d6 <os_enterCriticalSection>:
    18d6:	cf 93       	push	r28
    18d8:	cf b7       	in	r28, 0x3f	; 63
    18da:	cc 1f       	adc	r28, r28
    18dc:	cc 27       	eor	r28, r28
    18de:	cc 1f       	adc	r28, r28
    18e0:	f8 94       	cli
    18e2:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <criticalSectionCount>
    18e6:	8f 3f       	cpi	r24, 0xFF	; 255
    18e8:	41 f4       	brne	.+16     	; 0x18fa <os_enterCriticalSection+0x24>
    18ea:	86 e6       	ldi	r24, 0x66	; 102
    18ec:	93 e0       	ldi	r25, 0x03	; 3
    18ee:	9f 93       	push	r25
    18f0:	8f 93       	push	r24
    18f2:	6c df       	rcall	.-296    	; 0x17cc <os_errorPstr>
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	03 c0       	rjmp	.+6      	; 0x1900 <os_enterCriticalSection+0x2a>
    18fa:	8f 5f       	subi	r24, 0xFF	; 255
    18fc:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <criticalSectionCount>
    1900:	e0 e7       	ldi	r30, 0x70	; 112
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	8d 7f       	andi	r24, 0xFD	; 253
    1908:	80 83       	st	Z, r24
    190a:	cc 23       	and	r28, r28
    190c:	09 f0       	breq	.+2      	; 0x1910 <os_enterCriticalSection+0x3a>
    190e:	78 94       	sei
    1910:	cf 91       	pop	r28
    1912:	08 95       	ret

00001914 <os_leaveCriticalSection>:
    1914:	cf 93       	push	r28
    1916:	cf b7       	in	r28, 0x3f	; 63
    1918:	cc 1f       	adc	r28, r28
    191a:	cc 27       	eor	r28, r28
    191c:	cc 1f       	adc	r28, r28
    191e:	f8 94       	cli
    1920:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <criticalSectionCount>
    1924:	81 11       	cpse	r24, r1
    1926:	08 c0       	rjmp	.+16     	; 0x1938 <os_leaveCriticalSection+0x24>
    1928:	8c e4       	ldi	r24, 0x4C	; 76
    192a:	93 e0       	ldi	r25, 0x03	; 3
    192c:	9f 93       	push	r25
    192e:	8f 93       	push	r24
    1930:	4d df       	rcall	.-358    	; 0x17cc <os_errorPstr>
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	03 c0       	rjmp	.+6      	; 0x193e <os_leaveCriticalSection+0x2a>
    1938:	81 50       	subi	r24, 0x01	; 1
    193a:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <criticalSectionCount>
    193e:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <criticalSectionCount>
    1942:	81 11       	cpse	r24, r1
    1944:	05 c0       	rjmp	.+10     	; 0x1950 <os_leaveCriticalSection+0x3c>
    1946:	e0 e7       	ldi	r30, 0x70	; 112
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	82 60       	ori	r24, 0x02	; 2
    194e:	80 83       	st	Z, r24
    1950:	cc 23       	and	r28, r28
    1952:	09 f0       	breq	.+2      	; 0x1956 <os_leaveCriticalSection+0x42>
    1954:	78 94       	sei
    1956:	cf 91       	pop	r28
    1958:	08 95       	ret

0000195a <registerProgram0>:
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	b0 df       	rcall	.-160    	; 0x18be <os_getProgramSlot>
    195e:	2e e1       	ldi	r18, 0x1E	; 30
    1960:	3c e0       	ldi	r19, 0x0C	; 12
    1962:	fc 01       	movw	r30, r24
    1964:	31 83       	std	Z+1, r19	; 0x01
    1966:	20 83       	st	Z, r18
    1968:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <os_autostart>
    196c:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <os_autostart+0x1>
    1970:	81 60       	ori	r24, 0x01	; 1
    1972:	90 93 60 05 	sts	0x0560, r25	; 0x800560 <os_autostart+0x1>
    1976:	80 93 5f 05 	sts	0x055F, r24	; 0x80055f <os_autostart>
    197a:	08 95       	ret

0000197c <os_startScheduler>:
 *  function to start the concurrent execution of the applications.
 */
void os_startScheduler(void)
{
	 // Set currentProc to idle process
	 currentProc = 0;
    197c:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <currentProc>

	 // Set the state of the now chosen process to running
	 os_processes[currentProc].state = OS_PS_RUNNING;
    1980:	ef e0       	ldi	r30, 0x0F	; 15
    1982:	f5 e0       	ldi	r31, 0x05	; 5
    1984:	82 e0       	ldi	r24, 0x02	; 2
    1986:	81 83       	std	Z+1, r24	; 0x01

	 // Set SP on the stack of the idle process, this will cause the idle process to start running,
	 // as the SP now points onto the idle functions address
	 SP = os_processes[currentProc].sp.as_int;
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	9e bf       	out	0x3e, r25	; 62
    198e:	8d bf       	out	0x3d, r24	; 61

	 // Load initial context and start the idle process
	 restoreContext();
    1990:	0f 90       	pop	r0
    1992:	1f 90       	pop	r1
    1994:	2f 90       	pop	r2
    1996:	3f 90       	pop	r3
    1998:	4f 90       	pop	r4
    199a:	5f 90       	pop	r5
    199c:	6f 90       	pop	r6
    199e:	7f 90       	pop	r7
    19a0:	8f 90       	pop	r8
    19a2:	9f 90       	pop	r9
    19a4:	af 90       	pop	r10
    19a6:	bf 90       	pop	r11
    19a8:	cf 90       	pop	r12
    19aa:	df 90       	pop	r13
    19ac:	ef 90       	pop	r14
    19ae:	ff 90       	pop	r15
    19b0:	0f 91       	pop	r16
    19b2:	1f 91       	pop	r17
    19b4:	2f 91       	pop	r18
    19b6:	3f 91       	pop	r19
    19b8:	4f 91       	pop	r20
    19ba:	5f 91       	pop	r21
    19bc:	6f 91       	pop	r22
    19be:	7f 91       	pop	r23
    19c0:	8f 91       	pop	r24
    19c2:	9f 91       	pop	r25
    19c4:	af 91       	pop	r26
    19c6:	bf 91       	pop	r27
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	ef 91       	pop	r30
    19ce:	ff 91       	pop	r31
    19d0:	ff bf       	out	0x3f, r31	; 63
    19d2:	ff 91       	pop	r31
    19d4:	18 95       	reti

	 os_error("os_startScheduler() terminated against all odds - scary stuff...");
    19d6:	85 e8       	ldi	r24, 0x85	; 133
    19d8:	92 e0       	ldi	r25, 0x02	; 2
    19da:	9f 93       	push	r25
    19dc:	8f 93       	push	r24
    19de:	f6 de       	rcall	.-532    	; 0x17cc <os_errorPstr>
	 // You should never get here, as the scheduler must not terminate
	

}
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	08 95       	ret

000019e6 <os_getStackChecksum>:
	// Be aware of cases where the whole stack is less than 10 bytes
	// (although this actually won't happen due to the call to saveContext() beforehand, which always puts 33 bytes on to the stack already)
	
	
	stack_checksum_t checksum = 0;
	uint8_t *stack_bottom = (uint8_t *)(uintptr_t)PROCESS_STACK_BOTTOM(pid);
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	27 e6       	ldi	r18, 0x67	; 103
    19ea:	33 e0       	ldi	r19, 0x03	; 3
    19ec:	82 9f       	mul	r24, r18
    19ee:	a0 01       	movw	r20, r0
    19f0:	83 9f       	mul	r24, r19
    19f2:	50 0d       	add	r21, r0
    19f4:	92 9f       	mul	r25, r18
    19f6:	50 0d       	add	r21, r0
    19f8:	11 24       	eor	r1, r1
    19fa:	2f e1       	ldi	r18, 0x1F	; 31
    19fc:	31 e2       	ldi	r19, 0x21	; 33
    19fe:	24 1b       	sub	r18, r20
    1a00:	35 0b       	sbc	r19, r21
	uint8_t *stack_top = (uint8_t *)(uintptr_t)(os_processes[pid].sp.as_int);
    1a02:	fc 01       	movw	r30, r24
    1a04:	ee 0f       	add	r30, r30
    1a06:	ff 1f       	adc	r31, r31
    1a08:	e8 0f       	add	r30, r24
    1a0a:	f9 1f       	adc	r31, r25
    1a0c:	ee 0f       	add	r30, r30
    1a0e:	ff 1f       	adc	r31, r31
    1a10:	e1 5f       	subi	r30, 0xF1	; 241
    1a12:	fa 4f       	sbci	r31, 0xFA	; 250
    1a14:	42 81       	ldd	r20, Z+2	; 0x02
    1a16:	53 81       	ldd	r21, Z+3	; 0x03
	uint8_t stack_size = stack_bottom - stack_top;
    1a18:	24 1b       	sub	r18, r20

	if (stack_size >= 16)
    1a1a:	20 31       	cpi	r18, 0x10	; 16
    1a1c:	78 f4       	brcc	.+30     	; 0x1a3c <os_getStackChecksum+0x56>
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	17 c0       	rjmp	.+46     	; 0x1a52 <os_getStackChecksum+0x6c>
	{
		for (uint8_t i = 0; i < 16; i++)
		{
			checksum ^= stack_top[i * (stack_size / 16)];
    1a24:	32 2f       	mov	r19, r18
    1a26:	32 95       	swap	r19
    1a28:	3f 70       	andi	r19, 0x0F	; 15
    1a2a:	fa 01       	movw	r30, r20
    1a2c:	39 9f       	mul	r19, r25
    1a2e:	e0 0d       	add	r30, r0
    1a30:	f1 1d       	adc	r31, r1
    1a32:	11 24       	eor	r1, r1
    1a34:	30 81       	ld	r19, Z
    1a36:	83 27       	eor	r24, r19
	uint8_t *stack_top = (uint8_t *)(uintptr_t)(os_processes[pid].sp.as_int);
	uint8_t stack_size = stack_bottom - stack_top;

	if (stack_size >= 16)
	{
		for (uint8_t i = 0; i < 16; i++)
    1a38:	9f 5f       	subi	r25, 0xFF	; 255
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <os_getStackChecksum+0x5a>
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	90 31       	cpi	r25, 0x10	; 16
    1a42:	80 f3       	brcs	.-32     	; 0x1a24 <os_getStackChecksum+0x3e>
    1a44:	08 95       	ret
	}
	else
	{
		for (uint8_t i = 0; i < stack_size; i++)
		{
			checksum ^= stack_top[i];
    1a46:	fa 01       	movw	r30, r20
    1a48:	e9 0f       	add	r30, r25
    1a4a:	f1 1d       	adc	r31, r1
    1a4c:	30 81       	ld	r19, Z
    1a4e:	83 27       	eor	r24, r19
			checksum ^= stack_top[i * (stack_size / 16)];
		}
	}
	else
	{
		for (uint8_t i = 0; i < stack_size; i++)
    1a50:	9f 5f       	subi	r25, 0xFF	; 255
    1a52:	92 17       	cp	r25, r18
    1a54:	c0 f3       	brcs	.-16     	; 0x1a46 <os_getStackChecksum+0x60>
		}
	}

	return checksum;

}
    1a56:	08 95       	ret

00001a58 <os_exec>:
 *                  strategies.
 *  \return The index of the new process (throws error on failure and returns
 *          INVALID_PROCESS as specified in defines.h).
 */
process_id_t os_exec(program_id_t programID, priority_t priority)
{
    1a58:	ef 92       	push	r14
    1a5a:	ff 92       	push	r15
    1a5c:	0f 93       	push	r16
    1a5e:	1f 93       	push	r17
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
    1a64:	e8 2e       	mov	r14, r24
    1a66:	f6 2e       	mov	r15, r22
	// 1. Enter a critical section
	os_enterCriticalSection();
    1a68:	36 df       	rcall	.-404    	; 0x18d6 <os_enterCriticalSection>

	// 2. Find free slot in os_processes array
	int free_slot = -1;

	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    1a6a:	c0 e0       	ldi	r28, 0x00	; 0
    1a6c:	d0 e0       	ldi	r29, 0x00	; 0
    1a6e:	0d c0       	rjmp	.+26     	; 0x1a8a <os_exec+0x32>
	{
		if (os_processes[i].state == OS_PS_UNUSED)
    1a70:	fe 01       	movw	r30, r28
    1a72:	ee 0f       	add	r30, r30
    1a74:	ff 1f       	adc	r31, r31
    1a76:	ec 0f       	add	r30, r28
    1a78:	fd 1f       	adc	r31, r29
    1a7a:	ee 0f       	add	r30, r30
    1a7c:	ff 1f       	adc	r31, r31
    1a7e:	e1 5f       	subi	r30, 0xF1	; 241
    1a80:	fa 4f       	sbci	r31, 0xFA	; 250
    1a82:	81 81       	ldd	r24, Z+1	; 0x01
    1a84:	88 23       	and	r24, r24
    1a86:	31 f0       	breq	.+12     	; 0x1a94 <os_exec+0x3c>
	os_enterCriticalSection();

	// 2. Find free slot in os_processes array
	int free_slot = -1;

	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    1a88:	21 96       	adiw	r28, 0x01	; 1
    1a8a:	c8 30       	cpi	r28, 0x08	; 8
    1a8c:	d1 05       	cpc	r29, r1
    1a8e:	84 f3       	brlt	.-32     	; 0x1a70 <os_exec+0x18>
{
	// 1. Enter a critical section
	os_enterCriticalSection();

	// 2. Find free slot in os_processes array
	int free_slot = -1;
    1a90:	cf ef       	ldi	r28, 0xFF	; 255
    1a92:	df ef       	ldi	r29, 0xFF	; 255
			break;
		}
	}


	if (free_slot == -1)
    1a94:	cf 3f       	cpi	r28, 0xFF	; 255
    1a96:	8f ef       	ldi	r24, 0xFF	; 255
    1a98:	d8 07       	cpc	r29, r24
    1a9a:	81 f4       	brne	.+32     	; 0x1abc <os_exec+0x64>
	{
		// os_error("No free slot available");
		terminal_log_printf_p(PSTR("os_exec() -> "), PSTR("No free slot available\n"));
    1a9c:	8a ee       	ldi	r24, 0xEA	; 234
    1a9e:	92 e0       	ldi	r25, 0x02	; 2
    1aa0:	9f 93       	push	r25
    1aa2:	8f 93       	push	r24
    1aa4:	8c ed       	ldi	r24, 0xDC	; 220
    1aa6:	92 e0       	ldi	r25, 0x02	; 2
    1aa8:	9f 93       	push	r25
    1aaa:	8f 93       	push	r24
		os_leaveCriticalSection();
    1aac:	61 db       	rcall	.-2366   	; 0x1170 <terminal_log_printf_p>
    1aae:	32 df       	rcall	.-412    	; 0x1914 <os_leaveCriticalSection>
		return INVALID_PROCESS;
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	1f ef       	ldi	r17, 0xFF	; 255
    1aba:	6b c0       	rjmp	.+214    	; 0x1b92 <os_exec+0x13a>
		os_leaveCriticalSection();
		return INVALID_PROCESS;
	}

	// 4. Save ProgramID and the process' state (and some more)
	os_processes[free_slot].progID = programID;
    1abc:	8e 01       	movw	r16, r28
    1abe:	00 0f       	add	r16, r16
    1ac0:	11 1f       	adc	r17, r17
    1ac2:	0c 0f       	add	r16, r28
    1ac4:	1d 1f       	adc	r17, r29
    1ac6:	00 0f       	add	r16, r16
    1ac8:	11 1f       	adc	r17, r17
    1aca:	01 5f       	subi	r16, 0xF1	; 241
    1acc:	1a 4f       	sbci	r17, 0xFA	; 250
    1ace:	d8 01       	movw	r26, r16
    1ad0:	ec 92       	st	X, r14
	os_processes[free_slot].state = OS_PS_READY;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	11 96       	adiw	r26, 0x01	; 1
    1ad6:	8c 93       	st	X, r24
    1ad8:	11 97       	sbiw	r26, 0x01	; 1
	os_processes[free_slot].priority = priority;
    1ada:	14 96       	adiw	r26, 0x04	; 4
    1adc:	fc 92       	st	X, r15
    1ade:	14 97       	sbiw	r26, 0x04	; 4

	// Initialize the stack pointer
	os_processes[free_slot].sp.as_int = PROCESS_STACK_BOTTOM(free_slot);
    1ae0:	87 e6       	ldi	r24, 0x67	; 103
    1ae2:	93 e0       	ldi	r25, 0x03	; 3
    1ae4:	c8 9f       	mul	r28, r24
    1ae6:	90 01       	movw	r18, r0
    1ae8:	c9 9f       	mul	r28, r25
    1aea:	30 0d       	add	r19, r0
    1aec:	d8 9f       	mul	r29, r24
    1aee:	30 0d       	add	r19, r0
    1af0:	11 24       	eor	r1, r1
    1af2:	8f e1       	ldi	r24, 0x1F	; 31
    1af4:	91 e2       	ldi	r25, 0x21	; 33
    1af6:	7c 01       	movw	r14, r24
    1af8:	e2 1a       	sub	r14, r18
    1afa:	f3 0a       	sbc	r15, r19

	// 5.1 push the address of the function to the stack
	// Note for task 2: use address of os_dispatcher instead

	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)(addressOfProgram(function));
    1afc:	c7 01       	movw	r24, r14
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	13 96       	adiw	r26, 0x03	; 3
    1b02:	9c 93       	st	X, r25
    1b04:	8e 93       	st	-X, r24
    1b06:	12 97       	sbiw	r26, 0x02	; 2
    1b08:	8f e6       	ldi	r24, 0x6F	; 111
    1b0a:	9f e0       	ldi	r25, 0x0F	; 15
    1b0c:	a8 de       	rcall	.-688    	; 0x185e <addressOfProgram>
    1b0e:	f7 01       	movw	r30, r14
    1b10:	60 83       	st	Z, r22
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 8));
    1b12:	d8 01       	movw	r26, r16
    1b14:	12 96       	adiw	r26, 0x02	; 2
    1b16:	ed 91       	ld	r30, X+
    1b18:	fc 91       	ld	r31, X
    1b1a:	13 97       	sbiw	r26, 0x03	; 3
    1b1c:	9f 01       	movw	r18, r30
    1b1e:	21 50       	subi	r18, 0x01	; 1
    1b20:	31 09       	sbc	r19, r1
    1b22:	13 96       	adiw	r26, 0x03	; 3
    1b24:	3c 93       	st	X, r19
    1b26:	2e 93       	st	-X, r18
    1b28:	12 97       	sbiw	r26, 0x02	; 2
    1b2a:	70 83       	st	Z, r23
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 16));
    1b2c:	12 96       	adiw	r26, 0x02	; 2
    1b2e:	ed 91       	ld	r30, X+
    1b30:	fc 91       	ld	r31, X
    1b32:	13 97       	sbiw	r26, 0x03	; 3
    1b34:	9f 01       	movw	r18, r30
    1b36:	21 50       	subi	r18, 0x01	; 1
    1b38:	31 09       	sbc	r19, r1
    1b3a:	13 96       	adiw	r26, 0x03	; 3
    1b3c:	3c 93       	st	X, r19
    1b3e:	2e 93       	st	-X, r18
    1b40:	12 97       	sbiw	r26, 0x02	; 2
    1b42:	80 83       	st	Z, r24

	// 5.2 leave space on the process stack for register entries
	for (uint8_t i = 0; i < 33; i++)
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	12 c0       	rjmp	.+36     	; 0x1b6c <os_exec+0x114>
	{
		*os_processes[free_slot].sp.as_ptr-- = 0;
    1b48:	fe 01       	movw	r30, r28
    1b4a:	ee 0f       	add	r30, r30
    1b4c:	ff 1f       	adc	r31, r31
    1b4e:	ec 0f       	add	r30, r28
    1b50:	fd 1f       	adc	r31, r29
    1b52:	ee 0f       	add	r30, r30
    1b54:	ff 1f       	adc	r31, r31
    1b56:	e1 5f       	subi	r30, 0xF1	; 241
    1b58:	fa 4f       	sbci	r31, 0xFA	; 250
    1b5a:	a2 81       	ldd	r26, Z+2	; 0x02
    1b5c:	b3 81       	ldd	r27, Z+3	; 0x03
    1b5e:	9d 01       	movw	r18, r26
    1b60:	21 50       	subi	r18, 0x01	; 1
    1b62:	31 09       	sbc	r19, r1
    1b64:	33 83       	std	Z+3, r19	; 0x03
    1b66:	22 83       	std	Z+2, r18	; 0x02
    1b68:	1c 92       	st	X, r1
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)(addressOfProgram(function));
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 8));
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 16));

	// 5.2 leave space on the process stack for register entries
	for (uint8_t i = 0; i < 33; i++)
    1b6a:	8f 5f       	subi	r24, 0xFF	; 255
    1b6c:	81 32       	cpi	r24, 0x21	; 33
	{
		*os_processes[free_slot].sp.as_ptr-- = 0;
	}

	// For task 2: Save the stack checksum
	os_processes[free_slot].checksum = os_getStackChecksum(free_slot);
    1b6e:	60 f3       	brcs	.-40     	; 0x1b48 <os_exec+0xf0>
    1b70:	1c 2f       	mov	r17, r28
    1b72:	8c 2f       	mov	r24, r28
    1b74:	38 df       	rcall	.-400    	; 0x19e6 <os_getStackChecksum>
    1b76:	fe 01       	movw	r30, r28
    1b78:	ee 0f       	add	r30, r30
    1b7a:	ff 1f       	adc	r31, r31
    1b7c:	ec 0f       	add	r30, r28
    1b7e:	fd 1f       	adc	r31, r29
    1b80:	ee 0f       	add	r30, r30
    1b82:	ff 1f       	adc	r31, r31
    1b84:	e1 5f       	subi	r30, 0xF1	; 241

	os_resetProcessSchedulingInformation(os_getSchedulingStrategy(), free_slot);
    1b86:	fa 4f       	sbci	r31, 0xFA	; 250
    1b88:	85 83       	std	Z+5, r24	; 0x05
    1b8a:	a2 de       	rcall	.-700    	; 0x18d0 <os_getSchedulingStrategy>
    1b8c:	6c 2f       	mov	r22, r28
    1b8e:	fe d1       	rcall	.+1020   	; 0x1f8c <os_resetProcessSchedulingInformation>

	// 6. Leave Critical Section
	os_leaveCriticalSection();
    1b90:	c1 de       	rcall	.-638    	; 0x1914 <os_leaveCriticalSection>
    1b92:	81 2f       	mov	r24, r17
	return free_slot;
	
	
	

}
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	ff 90       	pop	r15
    1b9e:	ef 90       	pop	r14
    1ba0:	08 95       	ret

00001ba2 <os_initScheduler>:
    1ba2:	cf 93       	push	r28
 *  In order for the scheduler to work properly, it must have the chance to
 *  initialize its internal data-structures and register and start the idle
 *  program.
 */
void os_initScheduler(void)
{
    1ba4:	df 93       	push	r29
	// 1.
	// As the processes are just being initialized, all slots should be unused so far.
	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	0b c0       	rjmp	.+22     	; 0x1bc2 <os_initScheduler+0x20>
	{
		os_processes[i].state = OS_PS_UNUSED;
    1bac:	fc 01       	movw	r30, r24
    1bae:	ee 0f       	add	r30, r30
    1bb0:	ff 1f       	adc	r31, r31
    1bb2:	e8 0f       	add	r30, r24
    1bb4:	f9 1f       	adc	r31, r25
    1bb6:	ee 0f       	add	r30, r30
    1bb8:	ff 1f       	adc	r31, r31
    1bba:	e1 5f       	subi	r30, 0xF1	; 241
    1bbc:	fa 4f       	sbci	r31, 0xFA	; 250
    1bbe:	11 82       	std	Z+1, r1	; 0x01
 */
void os_initScheduler(void)
{
	// 1.
	// As the processes are just being initialized, all slots should be unused so far.
	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    1bc0:	01 96       	adiw	r24, 0x01	; 1
    1bc2:	88 30       	cpi	r24, 0x08	; 8
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	94 f3       	brlt	.-28     	; 0x1bac <os_initScheduler+0xa>
    1bc8:	c0 e0       	ldi	r28, 0x00	; 0
    1bca:	d0 e0       	ldi	r29, 0x00	; 0
    1bcc:	08 c0       	rjmp	.+16     	; 0x1bde <os_initScheduler+0x3c>
	}

	// Start all registered programs, which a flagged as autostart (i.e. call os_exec on them).
	for (int i = 0; i < MAX_NUMBER_OF_PROGRAMS; i++)
	{
		if (os_checkAutostartProgram(i))
    1bce:	8c 2f       	mov	r24, r28
    1bd0:	4b de       	rcall	.-874    	; 0x1868 <os_checkAutostartProgram>
    1bd2:	88 23       	and	r24, r24
    1bd4:	19 f0       	breq	.+6      	; 0x1bdc <os_initScheduler+0x3a>
		{
			os_exec(i, DEFAULT_PRIORITY);
    1bd6:	62 e0       	ldi	r22, 0x02	; 2
    1bd8:	8c 2f       	mov	r24, r28
    1bda:	3e df       	rcall	.-388    	; 0x1a58 <os_exec>
	{
		os_processes[i].state = OS_PS_UNUSED;
	}

	// Start all registered programs, which a flagged as autostart (i.e. call os_exec on them).
	for (int i = 0; i < MAX_NUMBER_OF_PROGRAMS; i++)
    1bdc:	21 96       	adiw	r28, 0x01	; 1
    1bde:	c0 31       	cpi	r28, 0x10	; 16
    1be0:	d1 05       	cpc	r29, r1
    1be2:	ac f3       	brlt	.-22     	; 0x1bce <os_initScheduler+0x2c>
		{
			os_exec(i, DEFAULT_PRIORITY);
		}

	}
	os_resetSchedulingInformation(currSchedStrat);
    1be4:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <currSchedStrat>
    1be8:	f9 d1       	rcall	.+1010   	; 0x1fdc <os_resetSchedulingInformation>

	delayMs(3000);
    1bea:	88 eb       	ldi	r24, 0xB8	; 184
    1bec:	9b e0       	ldi	r25, 0x0B	; 11
    1bee:	46 dd       	rcall	.-1396   	; 0x167c <delayMs>
    1bf0:	20 91 3f 05 	lds	r18, 0x053F	; 0x80053f <os_programs>

	// Uncomment:
	assert(os_programs[0] != NULL, "There is no idle proc");
    1bf4:	30 91 40 05 	lds	r19, 0x0540	; 0x800540 <os_programs+0x1>
    1bf8:	86 ec       	ldi	r24, 0xC6	; 198
    1bfa:	92 e0       	ldi	r25, 0x02	; 2
    1bfc:	9f 93       	push	r25
    1bfe:	8f 93       	push	r24
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	23 2b       	or	r18, r19
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <os_initScheduler+0x66>
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	8f 93       	push	r24
    1c0a:	65 dd       	rcall	.-1334   	; 0x16d6 <assertPstr>
    1c0c:	0f 90       	pop	r0
}
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	08 95       	ret

00001c18 <os_isStackInBounds>:
    1c18:	8f 92       	push	r8
 *
 *  \param pid The ID of the process for which the stack pointer has to be checked.
 *  \return True if the stack pointer is still in its bounds.
 */
bool os_isStackInBounds(process_id_t pid)
{
    1c1a:	9f 92       	push	r9
    1c1c:	af 92       	push	r10
    1c1e:	bf 92       	push	r11
    1c20:	cf 92       	push	r12
    1c22:	df 92       	push	r13
    1c24:	ef 92       	push	r14
    1c26:	ff 92       	push	r15
    1c28:	0f 93       	push	r16
    1c2a:	1f 93       	push	r17
	if (os_processes[pid].sp.as_int > PROCESS_STACK_BOTTOM(pid) || os_processes[pid].sp.as_int < PROCESS_STACK_BOTTOM(pid) - STACK_SIZE_PROC)
    1c2c:	48 2f       	mov	r20, r24
    1c2e:	50 e0       	ldi	r21, 0x00	; 0
    1c30:	fa 01       	movw	r30, r20
    1c32:	ee 0f       	add	r30, r30
    1c34:	ff 1f       	adc	r31, r31
    1c36:	e4 0f       	add	r30, r20
    1c38:	f5 1f       	adc	r31, r21
    1c3a:	ee 0f       	add	r30, r30
    1c3c:	ff 1f       	adc	r31, r31
    1c3e:	e1 5f       	subi	r30, 0xF1	; 241
    1c40:	fa 4f       	sbci	r31, 0xFA	; 250
    1c42:	c2 80       	ldd	r12, Z+2	; 0x02
    1c44:	d3 80       	ldd	r13, Z+3	; 0x03
    1c46:	e1 2c       	mov	r14, r1
    1c48:	f1 2c       	mov	r15, r1
    1c4a:	9a 01       	movw	r18, r20
    1c4c:	a7 e6       	ldi	r26, 0x67	; 103
    1c4e:	b3 e0       	ldi	r27, 0x03	; 3
    1c50:	91 d3       	rcall	.+1826   	; 0x2374 <__umulhisi3>
    1c52:	0f e1       	ldi	r16, 0x1F	; 31
    1c54:	11 e2       	ldi	r17, 0x21	; 33
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	06 1b       	sub	r16, r22
    1c5c:	17 0b       	sbc	r17, r23
    1c5e:	28 0b       	sbc	r18, r24
    1c60:	39 0b       	sbc	r19, r25
    1c62:	0c 15       	cp	r16, r12
    1c64:	1d 05       	cpc	r17, r13
    1c66:	2e 05       	cpc	r18, r14
    1c68:	3f 05       	cpc	r19, r15
    1c6a:	88 f0       	brcs	.+34     	; 0x1c8e <os_isStackInBounds+0x76>
    1c6c:	08 eb       	ldi	r16, 0xB8	; 184
    1c6e:	1d e1       	ldi	r17, 0x1D	; 29
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	48 01       	movw	r8, r16
    1c76:	59 01       	movw	r10, r18
    1c78:	86 1a       	sub	r8, r22
    1c7a:	97 0a       	sbc	r9, r23
    1c7c:	a8 0a       	sbc	r10, r24
    1c7e:	b9 0a       	sbc	r11, r25
    1c80:	c8 14       	cp	r12, r8
    1c82:	d9 04       	cpc	r13, r9
    1c84:	ea 04       	cpc	r14, r10
    1c86:	fb 04       	cpc	r15, r11
    1c88:	20 f4       	brcc	.+8      	; 0x1c92 <os_isStackInBounds+0x7a>
	{
		return false;
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	03 c0       	rjmp	.+6      	; 0x1c94 <os_isStackInBounds+0x7c>
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	01 c0       	rjmp	.+2      	; 0x1c94 <os_isStackInBounds+0x7c>
	}
	return true;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
}
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	ff 90       	pop	r15
    1c9a:	ef 90       	pop	r14
    1c9c:	df 90       	pop	r13
    1c9e:	cf 90       	pop	r12
    1ca0:	bf 90       	pop	r11
    1ca2:	af 90       	pop	r10
    1ca4:	9f 90       	pop	r9
    1ca6:	8f 90       	pop	r8
    1ca8:	08 95       	ret

00001caa <__vector_13>:
ISR(TIMER2_COMPA_vect)
{
	// 1. Is implicitly done

	// 2. Save runtime-context of recently current process using the well-known macro
	saveContext();
    1caa:	ff 93       	push	r31
    1cac:	ff b7       	in	r31, 0x3f	; 63
    1cae:	ff 93       	push	r31
    1cb0:	ef 93       	push	r30
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	bf 93       	push	r27
    1cb8:	af 93       	push	r26
    1cba:	9f 93       	push	r25
    1cbc:	8f 93       	push	r24
    1cbe:	7f 93       	push	r23
    1cc0:	6f 93       	push	r22
    1cc2:	5f 93       	push	r21
    1cc4:	4f 93       	push	r20
    1cc6:	3f 93       	push	r19
    1cc8:	2f 93       	push	r18
    1cca:	1f 93       	push	r17
    1ccc:	0f 93       	push	r16
    1cce:	ff 92       	push	r15
    1cd0:	ef 92       	push	r14
    1cd2:	df 92       	push	r13
    1cd4:	cf 92       	push	r12
    1cd6:	bf 92       	push	r11
    1cd8:	af 92       	push	r10
    1cda:	9f 92       	push	r9
    1cdc:	8f 92       	push	r8
    1cde:	7f 92       	push	r7
    1ce0:	6f 92       	push	r6
    1ce2:	5f 92       	push	r5
    1ce4:	4f 92       	push	r4
    1ce6:	3f 92       	push	r3
    1ce8:	2f 92       	push	r2
    1cea:	1f 92       	push	r1
    1cec:	11 24       	eor	r1, r1
    1cee:	0f 92       	push	r0

	// 3. Save stack pointer of current process
	os_processes[currentProc].sp.as_int = SP;
    1cf0:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <currentProc>
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	2d b7       	in	r18, 0x3d	; 61
    1cf8:	3e b7       	in	r19, 0x3e	; 62
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	ee 0f       	add	r30, r30
    1cfe:	ff 1f       	adc	r31, r31
    1d00:	e8 0f       	add	r30, r24
    1d02:	f9 1f       	adc	r31, r25
    1d04:	ee 0f       	add	r30, r30
    1d06:	ff 1f       	adc	r31, r31
    1d08:	e1 5f       	subi	r30, 0xF1	; 241
    1d0a:	fa 4f       	sbci	r31, 0xFA	; 250
    1d0c:	33 83       	std	Z+3, r19	; 0x03
    1d0e:	22 83       	std	Z+2, r18	; 0x02

	// 4. Set stack pointer onto ISR-Stack
	SP = BOTTOM_OF_ISR_STACK;
    1d10:	8f ed       	ldi	r24, 0xDF	; 223
    1d12:	91 e2       	ldi	r25, 0x21	; 33
    1d14:	9e bf       	out	0x3e, r25	; 62
    1d16:	8d bf       	out	0x3d, r24	; 61

	// 5. Set process state to ready
	if (os_processes[currentProc].state == OS_PS_RUNNING)
    1d18:	10 91 09 05 	lds	r17, 0x0509	; 0x800509 <currentProc>
    1d1c:	c1 2f       	mov	r28, r17
    1d1e:	d0 e0       	ldi	r29, 0x00	; 0
    1d20:	fe 01       	movw	r30, r28
    1d22:	ee 0f       	add	r30, r30
    1d24:	ff 1f       	adc	r31, r31
    1d26:	ec 0f       	add	r30, r28
    1d28:	fd 1f       	adc	r31, r29
    1d2a:	ee 0f       	add	r30, r30
    1d2c:	ff 1f       	adc	r31, r31
    1d2e:	e1 5f       	subi	r30, 0xF1	; 241
    1d30:	fa 4f       	sbci	r31, 0xFA	; 250
    1d32:	81 81       	ldd	r24, Z+1	; 0x01
    1d34:	82 30       	cpi	r24, 0x02	; 2
    1d36:	59 f4       	brne	.+22     	; 0x1d4e <__vector_13+0xa4>
	{
		os_processes[currentProc].state = OS_PS_READY;
    1d38:	fe 01       	movw	r30, r28
    1d3a:	ee 0f       	add	r30, r30
    1d3c:	ff 1f       	adc	r31, r31
    1d3e:	ec 0f       	add	r30, r28
    1d40:	fd 1f       	adc	r31, r29
    1d42:	ee 0f       	add	r30, r30
    1d44:	ff 1f       	adc	r31, r31
    1d46:	e1 5f       	subi	r30, 0xF1	; 241
    1d48:	fa 4f       	sbci	r31, 0xFA	; 250
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	81 83       	std	Z+1, r24	; 0x01
	}
	// Note for task 2: Only set to ready if it is currently running because of os_kill

	// In task 2: Save the processes stack checksum
	os_processes[currentProc].checksum = os_getStackChecksum(currentProc);
    1d4e:	81 2f       	mov	r24, r17
    1d50:	4a de       	rcall	.-876    	; 0x19e6 <os_getStackChecksum>
    1d52:	9e 01       	movw	r18, r28
    1d54:	22 0f       	add	r18, r18
    1d56:	33 1f       	adc	r19, r19
    1d58:	c2 0f       	add	r28, r18
    1d5a:	d3 1f       	adc	r29, r19
    1d5c:	cc 0f       	add	r28, r28
    1d5e:	dd 1f       	adc	r29, r29
    1d60:	c1 5f       	subi	r28, 0xF1	; 241
    1d62:	da 4f       	sbci	r29, 0xFA	; 250
    1d64:	8d 83       	std	Y+5, r24	; 0x05

	// In task 2: Check if the stack pointer has an invalid value
	if (!os_isStackInBounds(currentProc))
    1d66:	81 2f       	mov	r24, r17
    1d68:	57 df       	rcall	.-338    	; 0x1c18 <os_isStackInBounds>
    1d6a:	81 11       	cpse	r24, r1
    1d6c:	0b c0       	rjmp	.+22     	; 0x1d84 <__vector_13+0xda>
	{
		os_error("Stack pointer out of bounds in process %d", currentProc);
    1d6e:	1f 92       	push	r1
    1d70:	1f 93       	push	r17
    1d72:	82 e2       	ldi	r24, 0x22	; 34
    1d74:	93 e0       	ldi	r25, 0x03	; 3
    1d76:	9f 93       	push	r25
    1d78:	8f 93       	push	r24
    1d7a:	28 dd       	rcall	.-1456   	; 0x17cc <os_errorPstr>
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
	}

	// 6. Find next process using the set scheduling strategy

	switch (os_getSchedulingStrategy())
    1d82:	0f 90       	pop	r0
    1d84:	a5 dd       	rcall	.-1206   	; 0x18d0 <os_getSchedulingStrategy>
    1d86:	88 23       	and	r24, r24
    1d88:	19 f0       	breq	.+6      	; 0x1d90 <__vector_13+0xe6>
    1d8a:	81 30       	cpi	r24, 0x01	; 1
    1d8c:	49 f0       	breq	.+18     	; 0x1da0 <__vector_13+0xf6>
    1d8e:	10 c0       	rjmp	.+32     	; 0x1db0 <__vector_13+0x106>
	{
		case OS_SS_ROUND_ROBIN:
		currentProc = os_scheduler_RoundRobin(os_processes, currentProc);
    1d90:	60 91 09 05 	lds	r22, 0x0509	; 0x800509 <currentProc>
    1d94:	8f e0       	ldi	r24, 0x0F	; 15
    1d96:	95 e0       	ldi	r25, 0x05	; 5
    1d98:	bf d0       	rcall	.+382    	; 0x1f18 <os_scheduler_RoundRobin>
    1d9a:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <currentProc>
		break;
		case OS_SS_DYNAMIC_PRIORITY_ROUND_ROBIN:
		currentProc = os_scheduler_DynamicPriorityRoundRobin(os_processes, currentProc);
    1d9e:	0a c0       	rjmp	.+20     	; 0x1db4 <__vector_13+0x10a>
    1da0:	60 91 09 05 	lds	r22, 0x0509	; 0x800509 <currentProc>
    1da4:	8f e0       	ldi	r24, 0x0F	; 15
    1da6:	95 e0       	ldi	r25, 0x05	; 5
    1da8:	43 d1       	rcall	.+646    	; 0x2030 <os_scheduler_DynamicPriorityRoundRobin>
    1daa:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <currentProc>
		break;
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <__vector_13+0x10a>
		default:
		currentProc = 0;
    1db0:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <currentProc>
		break;
	}

	// In task 2: Check if the checksum changed since the process was interrupted
	if (os_processes[currentProc].checksum != os_getStackChecksum(currentProc))
    1db4:	c0 91 09 05 	lds	r28, 0x0509	; 0x800509 <currentProc>
    1db8:	8c 2f       	mov	r24, r28
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	ee 0f       	add	r30, r30
    1dc0:	ff 1f       	adc	r31, r31
    1dc2:	e8 0f       	add	r30, r24
    1dc4:	f9 1f       	adc	r31, r25
    1dc6:	ee 0f       	add	r30, r30
    1dc8:	ff 1f       	adc	r31, r31
    1dca:	e1 5f       	subi	r30, 0xF1	; 241
    1dcc:	fa 4f       	sbci	r31, 0xFA	; 250
    1dce:	d5 81       	ldd	r29, Z+5	; 0x05
    1dd0:	8c 2f       	mov	r24, r28
    1dd2:	09 de       	rcall	.-1006   	; 0x19e6 <os_getStackChecksum>
    1dd4:	d8 17       	cp	r29, r24
    1dd6:	59 f0       	breq	.+22     	; 0x1dee <__vector_13+0x144>
	{
		os_error("Checksum mismatch in process %d", currentProc);
    1dd8:	1f 92       	push	r1
    1dda:	cf 93       	push	r28
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	93 e0       	ldi	r25, 0x03	; 3
    1de0:	9f 93       	push	r25
    1de2:	8f 93       	push	r24
    1de4:	f3 dc       	rcall	.-1562   	; 0x17cc <os_errorPstr>
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <currentProc>
	}

	// 7. Set the state of the now chosen process to running
	os_processes[currentProc].state = OS_PS_RUNNING;
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	fc 01       	movw	r30, r24
    1df6:	ee 0f       	add	r30, r30
    1df8:	ff 1f       	adc	r31, r31
    1dfa:	df 01       	movw	r26, r30
    1dfc:	a8 0f       	add	r26, r24
    1dfe:	b9 1f       	adc	r27, r25
    1e00:	aa 0f       	add	r26, r26
    1e02:	bb 1f       	adc	r27, r27
    1e04:	a1 5f       	subi	r26, 0xF1	; 241
    1e06:	ba 4f       	sbci	r27, 0xFA	; 250
    1e08:	22 e0       	ldi	r18, 0x02	; 2
    1e0a:	11 96       	adiw	r26, 0x01	; 1
    1e0c:	2c 93       	st	X, r18
    1e0e:	11 97       	sbiw	r26, 0x01	; 1
    1e10:	fd 01       	movw	r30, r26

	// 8. Set SP to where it was when the resuming process was interrupted
	SP = os_processes[currentProc].sp.as_int;
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	9e bf       	out	0x3e, r25	; 62
    1e18:	8d bf       	out	0x3d, r24	; 61
    1e1a:	0f 90       	pop	r0

	// 9. Restore runtime context using the well-known macro.
	// This will cause the process to continue where it was interrupted.
	// Any code after the macro won't be executed as it has an reti() instruction at the end.
	restoreContext();
    1e1c:	1f 90       	pop	r1
    1e1e:	2f 90       	pop	r2
    1e20:	3f 90       	pop	r3
    1e22:	4f 90       	pop	r4
    1e24:	5f 90       	pop	r5
    1e26:	6f 90       	pop	r6
    1e28:	7f 90       	pop	r7
    1e2a:	8f 90       	pop	r8
    1e2c:	9f 90       	pop	r9
    1e2e:	af 90       	pop	r10
    1e30:	bf 90       	pop	r11
    1e32:	cf 90       	pop	r12
    1e34:	df 90       	pop	r13
    1e36:	ef 90       	pop	r14
    1e38:	ff 90       	pop	r15
    1e3a:	0f 91       	pop	r16
    1e3c:	1f 91       	pop	r17
    1e3e:	2f 91       	pop	r18
    1e40:	3f 91       	pop	r19
    1e42:	4f 91       	pop	r20
    1e44:	5f 91       	pop	r21
    1e46:	6f 91       	pop	r22
    1e48:	7f 91       	pop	r23
    1e4a:	8f 91       	pop	r24
    1e4c:	9f 91       	pop	r25
    1e4e:	af 91       	pop	r26
    1e50:	bf 91       	pop	r27
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	ef 91       	pop	r30
    1e58:	ff 91       	pop	r31
    1e5a:	ff bf       	out	0x3f, r31	; 63
    1e5c:	ff 91       	pop	r31
    1e5e:	18 95       	reti

00001e60 <os_yield>:
    1e60:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <criticalSectionCount>
/*!
 * Triggers scheduler to schedule another process.
 */
void os_yield()
{
	if (criticalSectionCount != 0)
    1e64:	81 11       	cpse	r24, r1
    1e66:	04 c0       	rjmp	.+8      	; 0x1e70 <os_yield+0x10>
	{
		return;
	}
	cli();
    1e68:	f8 94       	cli
	TCNT2 = 0;
    1e6a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
	TIMER2_COMPA_vect();
    1e6e:	1d cf       	rjmp	.-454    	; 0x1caa <__vector_13>
    1e70:	08 95       	ret

00001e72 <os_kill>:
 *
 *  \param pid The process id of the process to be killed
 *  \return True, if the killing process was successful
 */
bool os_kill(process_id_t pid)
{
    1e72:	cf 93       	push	r28
	
	// If the pid is invalid, return false
	if (pid >= MAX_NUMBER_OF_PROCESSES || pid == 0 || os_processes[pid].state == OS_PS_UNUSED)
    1e74:	9f ef       	ldi	r25, 0xFF	; 255
    1e76:	98 0f       	add	r25, r24
    1e78:	97 30       	cpi	r25, 0x07	; 7
    1e7a:	60 f5       	brcc	.+88     	; 0x1ed4 <os_kill+0x62>
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	f9 01       	movw	r30, r18
    1e82:	ee 0f       	add	r30, r30
    1e84:	ff 1f       	adc	r31, r31
    1e86:	e2 0f       	add	r30, r18
    1e88:	f3 1f       	adc	r31, r19
    1e8a:	ee 0f       	add	r30, r30
    1e8c:	ff 1f       	adc	r31, r31
    1e8e:	e1 5f       	subi	r30, 0xF1	; 241
    1e90:	fa 4f       	sbci	r31, 0xFA	; 250
    1e92:	91 81       	ldd	r25, Z+1	; 0x01
    1e94:	99 23       	and	r25, r25
    1e96:	01 f1       	breq	.+64     	; 0x1ed8 <os_kill+0x66>
    1e98:	c8 2f       	mov	r28, r24
	{
		return false;
	}
	os_enterCriticalSection();
    1e9a:	1d dd       	rcall	.-1478   	; 0x18d6 <os_enterCriticalSection>

	os_getProcessSlot(pid)->state = OS_PS_UNUSED;
    1e9c:	8c 2f       	mov	r24, r28
    1e9e:	04 dd       	rcall	.-1528   	; 0x18a8 <os_getProcessSlot>
    1ea0:	fc 01       	movw	r30, r24

	// Tidy up the scheduler
	// (Process needs to be removed from ready queue of DPRR)

	os_resetProcessSchedulingInformation(os_getSchedulingStrategy(), pid);
    1ea2:	11 82       	std	Z+1, r1	; 0x01
    1ea4:	15 dd       	rcall	.-1494   	; 0x18d0 <os_getSchedulingStrategy>
    1ea6:	6c 2f       	mov	r22, r28

	// If the process kills itself, we mustn't return
	if (os_getCurrentProc() == pid)
    1ea8:	71 d0       	rcall	.+226    	; 0x1f8c <os_resetProcessSchedulingInformation>
    1eaa:	0f dd       	rcall	.-1506   	; 0x18ca <os_getCurrentProc>
    1eac:	c8 13       	cpse	r28, r24
	{
		criticalSectionCount = 1;
    1eae:	0e c0       	rjmp	.+28     	; 0x1ecc <os_kill+0x5a>
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
		os_leaveCriticalSection();
    1eb2:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <criticalSectionCount>
		sei();
		os_yield();
    1eb6:	2e dd       	rcall	.-1444   	; 0x1914 <os_leaveCriticalSection>
    1eb8:	78 94       	sei
		while (1)
			printf("Penis");
    1eba:	d2 df       	rcall	.-92     	; 0x1e60 <os_yield>
    1ebc:	88 e1       	ldi	r24, 0x18	; 24
    1ebe:	93 e0       	ldi	r25, 0x03	; 3
    1ec0:	9f 93       	push	r25
    1ec2:	8f 93       	push	r24
    1ec4:	8d d2       	rcall	.+1306   	; 0x23e0 <printf>
    1ec6:	0f 90       	pop	r0
	}
	os_leaveCriticalSection();
    1ec8:	0f 90       	pop	r0
    1eca:	f8 cf       	rjmp	.-16     	; 0x1ebc <os_kill+0x4a>
	os_yield();
    1ecc:	23 dd       	rcall	.-1466   	; 0x1914 <os_leaveCriticalSection>
    1ece:	c8 df       	rcall	.-112    	; 0x1e60 <os_yield>

	return true;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	03 c0       	rjmp	.+6      	; 0x1eda <os_kill+0x68>
{
	
	// If the pid is invalid, return false
	if (pid >= MAX_NUMBER_OF_PROCESSES || pid == 0 || os_processes[pid].state == OS_PS_UNUSED)
	{
		return false;
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	01 c0       	rjmp	.+2      	; 0x1eda <os_kill+0x68>
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
	os_leaveCriticalSection();
	os_yield();

	return true;

}
    1eda:	cf 91       	pop	r28
    1edc:	08 95       	ret

00001ede <os_dispatcher>:
 * This wrapper enables the possibility to perform a few necessary steps after the actual process
 * function has finished.
 */
void os_dispatcher()
{
	process_id_t currentProc = os_getCurrentProc();
    1ede:	f5 dc       	rcall	.-1558   	; 0x18ca <os_getCurrentProc>
    1ee0:	c8 2f       	mov	r28, r24
	program_t *function = os_lookupProgramFunction(os_processes[currentProc].progID);
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	ee 0f       	add	r30, r30
    1ee8:	ff 1f       	adc	r31, r31
    1eea:	e8 0f       	add	r30, r24
    1eec:	f9 1f       	adc	r31, r25
    1eee:	ee 0f       	add	r30, r30
    1ef0:	ff 1f       	adc	r31, r31
    1ef2:	e1 5f       	subi	r30, 0xF1	; 241
    1ef4:	fa 4f       	sbci	r31, 0xFA	; 250
    1ef6:	80 81       	ld	r24, Z
    1ef8:	c9 dc       	rcall	.-1646   	; 0x188c <os_lookupProgramFunction>
	
	if (function != NULL)
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	11 f0       	breq	.+4      	; 0x1f02 <os_dispatcher+0x24>
	function();
    1efe:	fc 01       	movw	r30, r24


	os_kill(currentProc);
    1f00:	19 95       	eicall
    1f02:	8c 2f       	mov	r24, r28


	os_yield();
    1f04:	b6 df       	rcall	.-148    	; 0x1e72 <os_kill>
    1f06:	ac df       	rcall	.-168    	; 0x1e60 <os_yield>
	while (1)
		printf("Penis");
    1f08:	88 e1       	ldi	r24, 0x18	; 24
    1f0a:	93 e0       	ldi	r25, 0x03	; 3
    1f0c:	9f 93       	push	r25
    1f0e:	8f 93       	push	r24
    1f10:	67 d2       	rcall	.+1230   	; 0x23e0 <printf>
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	f8 cf       	rjmp	.-16     	; 0x1f08 <os_dispatcher+0x2a>

00001f18 <os_scheduler_RoundRobin>:
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the even strategy.
 */
process_id_t os_scheduler_RoundRobin(process_t const processes[], process_id_t current)
{
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
    1f1c:	ec 01       	movw	r28, r24

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process

	// Return resulting process id
	
	process_id_t currentProc = os_getCurrentProc();
    1f1e:	d5 dc       	rcall	.-1622   	; 0x18ca <os_getCurrentProc>

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
    1f20:	91 e0       	ldi	r25, 0x01	; 1
    1f22:	98 0f       	add	r25, r24
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <os_scheduler_RoundRobin+0x2c>
	{
		if (processes[i].state == OS_PS_READY)
    1f26:	29 2f       	mov	r18, r25
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	f9 01       	movw	r30, r18
    1f2c:	ee 0f       	add	r30, r30
    1f2e:	ff 1f       	adc	r31, r31
    1f30:	e2 0f       	add	r30, r18
    1f32:	f3 1f       	adc	r31, r19
    1f34:	ee 0f       	add	r30, r30
    1f36:	ff 1f       	adc	r31, r31
    1f38:	ec 0f       	add	r30, r28
    1f3a:	fd 1f       	adc	r31, r29
    1f3c:	21 81       	ldd	r18, Z+1	; 0x01
    1f3e:	21 30       	cpi	r18, 0x01	; 1
    1f40:	f9 f0       	breq	.+62     	; 0x1f80 <os_scheduler_RoundRobin+0x68>
	// Return resulting process id
	
	process_id_t currentProc = os_getCurrentProc();

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
    1f42:	9f 5f       	subi	r25, 0xFF	; 255
    1f44:	98 30       	cpi	r25, 0x08	; 8
    1f46:	78 f3       	brcs	.-34     	; 0x1f26 <os_scheduler_RoundRobin+0xe>
    1f48:	91 e0       	ldi	r25, 0x01	; 1
    1f4a:	0f c0       	rjmp	.+30     	; 0x1f6a <os_scheduler_RoundRobin+0x52>
			return i; // Return resulting process id
		}
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
	{
		if (processes[i].state == OS_PS_READY)
    1f4c:	29 2f       	mov	r18, r25
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	f9 01       	movw	r30, r18
    1f52:	ee 0f       	add	r30, r30
    1f54:	ff 1f       	adc	r31, r31
    1f56:	e2 0f       	add	r30, r18
    1f58:	f3 1f       	adc	r31, r19
    1f5a:	ee 0f       	add	r30, r30
    1f5c:	ff 1f       	adc	r31, r31
    1f5e:	ec 0f       	add	r30, r28
    1f60:	fd 1f       	adc	r31, r29
    1f62:	21 81       	ldd	r18, Z+1	; 0x01
    1f64:	21 30       	cpi	r18, 0x01	; 1
    1f66:	71 f0       	breq	.+28     	; 0x1f84 <os_scheduler_RoundRobin+0x6c>
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
		}
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
    1f68:	9f 5f       	subi	r25, 0xFF	; 255
    1f6a:	49 2f       	mov	r20, r25
    1f6c:	50 e0       	ldi	r21, 0x00	; 0
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	2f 5f       	subi	r18, 0xFF	; 255
    1f74:	3f 4f       	sbci	r19, 0xFF	; 255
    1f76:	42 17       	cp	r20, r18
    1f78:	53 07       	cpc	r21, r19
    1f7a:	44 f3       	brlt	.-48     	; 0x1f4c <os_scheduler_RoundRobin+0x34>
			return i; // Return resulting process id
		}
	}

	// If no process except idle process ready, choose idle process
	return 0; // Return resulting process id
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	03 c0       	rjmp	.+6      	; 0x1f86 <os_scheduler_RoundRobin+0x6e>
	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
	{
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
    1f80:	89 2f       	mov	r24, r25
    1f82:	01 c0       	rjmp	.+2      	; 0x1f86 <os_scheduler_RoundRobin+0x6e>
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
	{
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
    1f84:	89 2f       	mov	r24, r25
	}

	// If no process except idle process ready, choose idle process
	return 0; // Return resulting process id

}
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	08 95       	ret

00001f8c <os_resetProcessSchedulingInformation>:
 *
 * \param strategy The scheduling strategy currently in use
 * \param id  The process slot to erase state for
 */
void os_resetProcessSchedulingInformation(scheduling_strategy_t strategy, process_id_t id)
{
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
	
	if (strategy == OS_SS_ROUND_ROBIN)
    1f90:	88 23       	and	r24, r24
    1f92:	09 f1       	breq	.+66     	; 0x1fd6 <os_resetProcessSchedulingInformation+0x4a>
    1f94:	d6 2f       	mov	r29, r22
    1f96:	c0 e0       	ldi	r28, 0x00	; 0
    1f98:	09 c0       	rjmp	.+18     	; 0x1fac <os_resetProcessSchedulingInformation+0x20>
		return;
	}

	for (uint8_t i = OS_PRIO_HIGH; i <= OS_PRIO_LOW; i++)
	{
		rq_remove(&(schedulingInfo.queues_ready[i]), id);
    1f9a:	2b e0       	ldi	r18, 0x0B	; 11
    1f9c:	c2 9f       	mul	r28, r18
    1f9e:	c0 01       	movw	r24, r0
    1fa0:	11 24       	eor	r1, r1
    1fa2:	6d 2f       	mov	r22, r29
    1fa4:	8f 59       	subi	r24, 0x9F	; 159
    1fa6:	9a 4f       	sbci	r25, 0xFA	; 250
    1fa8:	01 d8       	rcall	.-4094   	; 0xfac <rq_remove>
	if (strategy == OS_SS_ROUND_ROBIN)
	{
		return;
	}

	for (uint8_t i = OS_PRIO_HIGH; i <= OS_PRIO_LOW; i++)
    1faa:	cf 5f       	subi	r28, 0xFF	; 255
    1fac:	c3 30       	cpi	r28, 0x03	; 3
    1fae:	a8 f3       	brcs	.-22     	; 0x1f9a <os_resetProcessSchedulingInformation+0xe>
	{
		rq_remove(&(schedulingInfo.queues_ready[i]), id);
	}
	if (os_getProcessSlot(id)->state == OS_PS_READY)
    1fb0:	8d 2f       	mov	r24, r29
    1fb2:	7a dc       	rcall	.-1804   	; 0x18a8 <os_getProcessSlot>
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	81 81       	ldd	r24, Z+1	; 0x01
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	69 f4       	brne	.+26     	; 0x1fd6 <os_resetProcessSchedulingInformation+0x4a>
	rq_push(&(schedulingInfo.queues_ready[os_getProcessSlot(id)->priority]), id);
    1fbc:	8d 2f       	mov	r24, r29
    1fbe:	74 dc       	rcall	.-1816   	; 0x18a8 <os_getProcessSlot>
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	84 81       	ldd	r24, Z+4	; 0x04
    1fc4:	fb e0       	ldi	r31, 0x0B	; 11
    1fc6:	8f 9f       	mul	r24, r31
    1fc8:	c0 01       	movw	r24, r0
    1fca:	11 24       	eor	r1, r1
    1fcc:	6d 2f       	mov	r22, r29
    1fce:	8f 59       	subi	r24, 0x9F	; 159
    1fd0:	9a 4f       	sbci	r25, 0xFA	; 250
    1fd2:	0e 94 b1 07 	call	0xf62	; 0xf62 <rq_push>
}
    1fd6:	df 91       	pop	r29
    1fd8:	cf 91       	pop	r28
    1fda:	08 95       	ret

00001fdc <os_resetSchedulingInformation>:
 *  and is done when the strategy is changed through os_setSchedulingStrategy
 *
 * \param strategy  The strategy to reset information for
 */
void os_resetSchedulingInformation(scheduling_strategy_t strategy)
{
    1fdc:	cf 93       	push	r28
	 if (strategy == OS_SS_ROUND_ROBIN)
    1fde:	88 23       	and	r24, r24
    1fe0:	29 f1       	breq	.+74     	; 0x202c <__DATA_REGION_LENGTH__+0x2c>
    1fe2:	c0 e0       	ldi	r28, 0x00	; 0
    1fe4:	09 c0       	rjmp	.+18     	; 0x1ff8 <os_resetSchedulingInformation+0x1c>
	 else
	 //terminal_log_printf_p(PSTR("os_resetSchedulingInformation() -> "), PSTR("Resetting scheduling information\n"));

	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
	 {
		 rq_clear(&schedulingInfo.queues_ready[i]);
    1fe6:	2b e0       	ldi	r18, 0x0B	; 11
    1fe8:	c2 9f       	mul	r28, r18
    1fea:	c0 01       	movw	r24, r0
    1fec:	11 24       	eor	r1, r1
    1fee:	8f 59       	subi	r24, 0x9F	; 159
    1ff0:	9a 4f       	sbci	r25, 0xFA	; 250
    1ff2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <rq_clear>
		return;
	 }
	 else
	 //terminal_log_printf_p(PSTR("os_resetSchedulingInformation() -> "), PSTR("Resetting scheduling information\n"));

	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
    1ff6:	cf 5f       	subi	r28, 0xFF	; 255
    1ff8:	c3 30       	cpi	r28, 0x03	; 3
    1ffa:	a8 f3       	brcs	.-22     	; 0x1fe6 <os_resetSchedulingInformation+0xa>
    1ffc:	c1 e0       	ldi	r28, 0x01	; 1
    1ffe:	14 c0       	rjmp	.+40     	; 0x2028 <__DATA_REGION_LENGTH__+0x28>
		 rq_clear(&schedulingInfo.queues_ready[i]);
	 }

	 for (process_id_t pid = 1; pid < MAX_NUMBER_OF_PROCESSES; pid++)
	 {
		 if (os_getProcessSlot(pid)->state == OS_PS_READY)
    2000:	8c 2f       	mov	r24, r28
    2002:	52 dc       	rcall	.-1884   	; 0x18a8 <os_getProcessSlot>
    2004:	fc 01       	movw	r30, r24
    2006:	81 81       	ldd	r24, Z+1	; 0x01
    2008:	81 30       	cpi	r24, 0x01	; 1
    200a:	69 f4       	brne	.+26     	; 0x2026 <__DATA_REGION_LENGTH__+0x26>
		 {
			 rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(pid)->priority], pid);
    200c:	8c 2f       	mov	r24, r28
    200e:	4c dc       	rcall	.-1896   	; 0x18a8 <os_getProcessSlot>
    2010:	fc 01       	movw	r30, r24
    2012:	84 81       	ldd	r24, Z+4	; 0x04
    2014:	fb e0       	ldi	r31, 0x0B	; 11
    2016:	8f 9f       	mul	r24, r31
    2018:	c0 01       	movw	r24, r0
    201a:	11 24       	eor	r1, r1
    201c:	6c 2f       	mov	r22, r28
    201e:	8f 59       	subi	r24, 0x9F	; 159
    2020:	9a 4f       	sbci	r25, 0xFA	; 250
    2022:	0e 94 b1 07 	call	0xf62	; 0xf62 <rq_push>
	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
	 {
		 rq_clear(&schedulingInfo.queues_ready[i]);
	 }

	 for (process_id_t pid = 1; pid < MAX_NUMBER_OF_PROCESSES; pid++)
    2026:	cf 5f       	subi	r28, 0xFF	; 255
    2028:	c8 30       	cpi	r28, 0x08	; 8
    202a:	50 f3       	brcs	.-44     	; 0x2000 <__DATA_REGION_LENGTH__>
		 if (os_getProcessSlot(pid)->state == OS_PS_READY)
		 {
			 rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(pid)->priority], pid);
		 }
	 }
}
    202c:	cf 91       	pop	r28
    202e:	08 95       	ret

00002030 <os_scheduler_DynamicPriorityRoundRobin>:
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the dynamic priority round-robin strategy.
 */
process_id_t os_scheduler_DynamicPriorityRoundRobin(process_t const processes[], process_id_t current)
{
    2030:	df 92       	push	r13
    2032:	ef 92       	push	r14
    2034:	ff 92       	push	r15
    2036:	0f 93       	push	r16
    2038:	1f 93       	push	r17
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	d6 2e       	mov	r13, r22

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    2040:	c0 e0       	ldi	r28, 0x00	; 0
    2042:	d0 e0       	ldi	r29, 0x00	; 0
    2044:	21 c0       	rjmp	.+66     	; 0x2088 <os_scheduler_DynamicPriorityRoundRobin+0x58>
	{

		if (!rq_isEmpty(&schedulingInfo.queues_ready[i + 1]))
    2046:	7e 01       	movw	r14, r28
    2048:	2f ef       	ldi	r18, 0xFF	; 255
    204a:	e2 1a       	sub	r14, r18
    204c:	f2 0a       	sbc	r15, r18
    204e:	8b e0       	ldi	r24, 0x0B	; 11
    2050:	8e 9d       	mul	r24, r14
    2052:	80 01       	movw	r16, r0
    2054:	8f 9d       	mul	r24, r15
    2056:	10 0d       	add	r17, r0
    2058:	11 24       	eor	r1, r1
    205a:	0f 59       	subi	r16, 0x9F	; 159
    205c:	1a 4f       	sbci	r17, 0xFA	; 250
    205e:	c8 01       	movw	r24, r16
    2060:	0e 94 77 07 	call	0xeee	; 0xeee <rq_isEmpty>
    2064:	81 11       	cpse	r24, r1
    2066:	0f c0       	rjmp	.+30     	; 0x2086 <os_scheduler_DynamicPriorityRoundRobin+0x56>
		{
			process_id_t pid = rq_pop(&schedulingInfo.queues_ready[i + 1]);
    2068:	c8 01       	movw	r24, r16
    206a:	0e 94 7e 07 	call	0xefc	; 0xefc <rq_pop>

			rq_push(&schedulingInfo.queues_ready[i], pid);
    206e:	9b e0       	ldi	r25, 0x0B	; 11
    2070:	9c 9f       	mul	r25, r28
    2072:	90 01       	movw	r18, r0
    2074:	9d 9f       	mul	r25, r29
    2076:	30 0d       	add	r19, r0
    2078:	11 24       	eor	r1, r1
    207a:	68 2f       	mov	r22, r24
    207c:	c9 01       	movw	r24, r18
    207e:	8f 59       	subi	r24, 0x9F	; 159
    2080:	9a 4f       	sbci	r25, 0xFA	; 250
    2082:	0e 94 b1 07 	call	0xf62	; 0xf62 <rq_push>
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the dynamic priority round-robin strategy.
 */
process_id_t os_scheduler_DynamicPriorityRoundRobin(process_t const processes[], process_id_t current)
{
    2086:	e7 01       	movw	r28, r14

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    2088:	c2 30       	cpi	r28, 0x02	; 2
    208a:	d1 05       	cpc	r29, r1
    208c:	e4 f2       	brlt	.-72     	; 0x2046 <os_scheduler_DynamicPriorityRoundRobin+0x16>
		else
		{		}
	}

	// 2. Push current process to the ready queue
	if (os_getProcessSlot(current)->state == OS_PS_READY)
    208e:	8d 2d       	mov	r24, r13
    2090:	0b dc       	rcall	.-2026   	; 0x18a8 <os_getProcessSlot>
    2092:	fc 01       	movw	r30, r24
    2094:	81 81       	ldd	r24, Z+1	; 0x01
    2096:	81 30       	cpi	r24, 0x01	; 1
    2098:	69 f4       	brne	.+26     	; 0x20b4 <os_scheduler_DynamicPriorityRoundRobin+0x84>
	{
		rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(current)->priority], current);
    209a:	8d 2d       	mov	r24, r13
    209c:	05 dc       	rcall	.-2038   	; 0x18a8 <os_getProcessSlot>
    209e:	fc 01       	movw	r30, r24
    20a0:	84 81       	ldd	r24, Z+4	; 0x04
    20a2:	fb e0       	ldi	r31, 0x0B	; 11
    20a4:	8f 9f       	mul	r24, r31
    20a6:	c0 01       	movw	r24, r0
    20a8:	11 24       	eor	r1, r1
    20aa:	6d 2d       	mov	r22, r13
    20ac:	8f 59       	subi	r24, 0x9F	; 159
    20ae:	9a 4f       	sbci	r25, 0xFA	; 250
    20b0:	0e 94 b1 07 	call	0xf62	; 0xf62 <rq_push>

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    20b4:	c0 e0       	ldi	r28, 0x00	; 0
    20b6:	d0 e0       	ldi	r29, 0x00	; 0
    20b8:	12 c0       	rjmp	.+36     	; 0x20de <os_scheduler_DynamicPriorityRoundRobin+0xae>
	}
	
	// 3. Get next process from ready queue
	for (int i = 0; i < PRIORITY_COUNT; i++)
	{
		if (!rq_isEmpty(&schedulingInfo.queues_ready[i]))
    20ba:	8b e0       	ldi	r24, 0x0B	; 11
    20bc:	8c 9f       	mul	r24, r28
    20be:	80 01       	movw	r16, r0
    20c0:	8d 9f       	mul	r24, r29
    20c2:	10 0d       	add	r17, r0
    20c4:	11 24       	eor	r1, r1
    20c6:	0f 59       	subi	r16, 0x9F	; 159
    20c8:	1a 4f       	sbci	r17, 0xFA	; 250
    20ca:	c8 01       	movw	r24, r16
    20cc:	0e 94 77 07 	call	0xeee	; 0xeee <rq_isEmpty>
    20d0:	81 11       	cpse	r24, r1
    20d2:	04 c0       	rjmp	.+8      	; 0x20dc <os_scheduler_DynamicPriorityRoundRobin+0xac>
		{

			process_id_t next_pid = rq_pop(&schedulingInfo.queues_ready[i]);
    20d4:	c8 01       	movw	r24, r16
    20d6:	0e 94 7e 07 	call	0xefc	; 0xefc <rq_pop>
			return next_pid;
    20da:	05 c0       	rjmp	.+10     	; 0x20e6 <os_scheduler_DynamicPriorityRoundRobin+0xb6>
	{
		rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(current)->priority], current);
	}
	
	// 3. Get next process from ready queue
	for (int i = 0; i < PRIORITY_COUNT; i++)
    20dc:	21 96       	adiw	r28, 0x01	; 1
    20de:	c3 30       	cpi	r28, 0x03	; 3
    20e0:	d1 05       	cpc	r29, r1
    20e2:	5c f3       	brlt	.-42     	; 0x20ba <os_scheduler_DynamicPriorityRoundRobin+0x8a>
		}

	}

	// If no process is ready, return idle process (0)
	return 0;
    20e4:	80 e0       	ldi	r24, 0x00	; 0

}
    20e6:	df 91       	pop	r29
    20e8:	cf 91       	pop	r28
    20ea:	1f 91       	pop	r17
    20ec:	0f 91       	pop	r16
    20ee:	ff 90       	pop	r15
    20f0:	ef 90       	pop	r14
    20f2:	df 90       	pop	r13
    20f4:	08 95       	ret

000020f6 <prog2>:
    lcd_writeProgString(PSTR(" Test finished"));
    while(1){}
}

//! This program includes the receiving procedure
PROGRAM(2, AUTOSTART)
    20f6:	0e 94 41 02 	call	0x482	; 0x482 <rfAdapter_worker>
    20fa:	fd cf       	rjmp	.-6      	; 0x20f6 <prog2>

000020fc <registerProgram1>:
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	df db       	rcall	.-2114   	; 0x18be <os_getProgramSlot>
    2100:	2b ec       	ldi	r18, 0xCB	; 203
    2102:	30 e1       	ldi	r19, 0x10	; 16
    2104:	fc 01       	movw	r30, r24
    2106:	31 83       	std	Z+1, r19	; 0x01
    2108:	20 83       	st	Z, r18
    210a:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <os_autostart>
    210e:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <os_autostart+0x1>
    2112:	82 60       	ori	r24, 0x02	; 2
    2114:	90 93 60 05 	sts	0x0560, r25	; 0x800560 <os_autostart+0x1>
    2118:	80 93 5f 05 	sts	0x055F, r24	; 0x80055f <os_autostart>
    211c:	08 95       	ret

0000211e <registerProgram2>:
    211e:	82 e0       	ldi	r24, 0x02	; 2
    2120:	ce db       	rcall	.-2148   	; 0x18be <os_getProgramSlot>
    2122:	2b e7       	ldi	r18, 0x7B	; 123
    2124:	30 e1       	ldi	r19, 0x10	; 16
    2126:	fc 01       	movw	r30, r24
    2128:	31 83       	std	Z+1, r19	; 0x01
    212a:	20 83       	st	Z, r18
    212c:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <os_autostart>
    2130:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <os_autostart+0x1>
    2134:	84 60       	ori	r24, 0x04	; 4
    2136:	90 93 60 05 	sts	0x0560, r25	; 0x800560 <os_autostart+0x1>
    213a:	80 93 5f 05 	sts	0x055F, r24	; 0x80055f <os_autostart>
    213e:	08 95       	ret

00002140 <displayCounter>:
/*!
 * Displays a counter in the right corner of the LCD.
 *
 * @param counter The counter value to display (0-99).
 */
void displayCounter(int counter){
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	ec 01       	movw	r28, r24
    if (counter >= 10){
    2146:	0a 97       	sbiw	r24, 0x0a	; 10
    2148:	3c f0       	brlt	.+14     	; 0x2158 <displayCounter+0x18>
        lcd_goto(2,14);
    214a:	6e e0       	ldi	r22, 0x0E	; 14
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	0e 94 91 06 	call	0xd22	; 0xd22 <lcd_goto>
        lcd_writeDec(counter);
    2152:	ce 01       	movw	r24, r28
    2154:	0e 94 32 07 	call	0xe64	; 0xe64 <lcd_writeDec>
    }

    //! Write 0 to the decade
    if(counter == 9){
    2158:	c9 30       	cpi	r28, 0x09	; 9
    215a:	d1 05       	cpc	r29, r1
    215c:	79 f4       	brne	.+30     	; 0x217c <displayCounter+0x3c>
        lcd_goto(2,14);
    215e:	6e e0       	ldi	r22, 0x0E	; 14
    2160:	82 e0       	ldi	r24, 0x02	; 2
    2162:	0e 94 91 06 	call	0xd22	; 0xd22 <lcd_goto>
        lcd_writeDec(0);
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 32 07 	call	0xe64	; 0xe64 <lcd_writeDec>
        lcd_goto(2,15);
    216e:	6f e0       	ldi	r22, 0x0F	; 15
    2170:	82 e0       	ldi	r24, 0x02	; 2
    2172:	0e 94 91 06 	call	0xd22	; 0xd22 <lcd_goto>
        lcd_writeDec(counter);
    2176:	ce 01       	movw	r24, r28
    2178:	0e 94 32 07 	call	0xe64	; 0xe64 <lcd_writeDec>
    }

    if(counter <= 9){
    217c:	ca 30       	cpi	r28, 0x0A	; 10
    217e:	d1 05       	cpc	r29, r1
    2180:	3c f4       	brge	.+14     	; 0x2190 <displayCounter+0x50>
        lcd_goto(2,15);
    2182:	6f e0       	ldi	r22, 0x0F	; 15
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	0e 94 91 06 	call	0xd22	; 0xd22 <lcd_goto>
        lcd_writeDec(counter);
    218a:	ce 01       	movw	r24, r28
    218c:	0e 94 32 07 	call	0xe64	; 0xe64 <lcd_writeDec>
    }
}
    2190:	df 91       	pop	r29
    2192:	cf 91       	pop	r28
    2194:	08 95       	ret

00002196 <prog1>:
//! Displays a counter in the right corner of the LCD.
void displayCounter(int i);

//! This program includes the sending procedure
PROGRAM(1, AUTOSTART)
{
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	2a 97       	sbiw	r28, 0x0a	; 10
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    rfAdapter_init();
    21aa:	0e 94 35 02 	call	0x46a	; 0x46a <rfAdapter_init>
#if PHASE_1 == 1
    /*!
     * Sending Toggle LED to Board Address
     */

    lcd_writeProgString(PSTR("Phase 1: Toggle"));
    21ae:	80 ef       	ldi	r24, 0xF0	; 240
    21b0:	93 e0       	ldi	r25, 0x03	; 3
    21b2:	0e 94 1c 07 	call	0xe38	; 0xe38 <lcd_writeProgString>
    lcd_line2();
    21b6:	0e 94 c3 06 	call	0xd86	; 0xd86 <lcd_line2>
    lcd_writeProgString(PSTR("Onboard LED"));
    21ba:	84 ee       	ldi	r24, 0xE4	; 228
    21bc:	93 e0       	ldi	r25, 0x03	; 3
    21be:	0e 94 1c 07 	call	0xe38	; 0xe38 <lcd_writeProgString>

    //! Toggle for 15 seconds and display Countdown
    for (int i = 15; i > 0; --i) {
    21c2:	0f e0       	ldi	r16, 0x0F	; 15
    21c4:	10 e0       	ldi	r17, 0x00	; 0
    21c6:	0b c0       	rjmp	.+22     	; 0x21de <prog1+0x48>
        displayCounter(i);
    21c8:	c8 01       	movw	r24, r16
    21ca:	ba df       	rcall	.-140    	; 0x2140 <displayCounter>
        rfAdapter_sendToggleLed(serialAdapter_address);
    21cc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    21d0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <rfAdapter_sendToggleLed>
        delayMs(1000);
    21d4:	88 ee       	ldi	r24, 0xE8	; 232
    21d6:	93 e0       	ldi	r25, 0x03	; 3
    21d8:	51 da       	rcall	.-2910   	; 0x167c <delayMs>
    lcd_writeProgString(PSTR("Phase 1: Toggle"));
    lcd_line2();
    lcd_writeProgString(PSTR("Onboard LED"));

    //! Toggle for 15 seconds and display Countdown
    for (int i = 15; i > 0; --i) {
    21da:	01 50       	subi	r16, 0x01	; 1
    21dc:	11 09       	sbc	r17, r1
    21de:	10 16       	cp	r1, r16
    21e0:	11 06       	cpc	r1, r17
    21e2:	94 f3       	brlt	.-28     	; 0x21c8 <prog1+0x32>
#if PHASE_2 == 1
    /*!
     * Sending setLED to Board Address
     */

    lcd_clear();
    21e4:	0e 94 7e 06 	call	0xcfc	; 0xcfc <lcd_clear>
    lcd_writeProgString(PSTR("Phase 2:"));
    21e8:	8b ed       	ldi	r24, 0xDB	; 219
    21ea:	93 e0       	ldi	r25, 0x03	; 3
    21ec:	0e 94 1c 07 	call	0xe38	; 0xe38 <lcd_writeProgString>

    //! LED on for 10 seconds and display Countdown
    lcd_line2();
    21f0:	0e 94 c3 06 	call	0xd86	; 0xd86 <lcd_line2>
    lcd_writeProgString(PSTR("LED On"));
    21f4:	84 ed       	ldi	r24, 0xD4	; 212
    21f6:	93 e0       	ldi	r25, 0x03	; 3
    21f8:	0e 94 1c 07 	call	0xe38	; 0xe38 <lcd_writeProgString>

    rfAdapter_sendSetLed(serialAdapter_address, 1);
    21fc:	61 e0       	ldi	r22, 0x01	; 1
    21fe:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2202:	0e 94 de 02 	call	0x5bc	; 0x5bc <rfAdapter_sendSetLed>
    for (int i = 10; i > 0; --i) {
    2206:	0a e0       	ldi	r16, 0x0A	; 10
    2208:	10 e0       	ldi	r17, 0x00	; 0
        displayCounter(i);
    220a:	07 c0       	rjmp	.+14     	; 0x221a <__stack+0x1b>
    220c:	c8 01       	movw	r24, r16
        delayMs(1000);
    220e:	98 df       	rcall	.-208    	; 0x2140 <displayCounter>
    2210:	88 ee       	ldi	r24, 0xE8	; 232
    2212:	93 e0       	ldi	r25, 0x03	; 3
    2214:	33 da       	rcall	.-2970   	; 0x167c <delayMs>
    //! LED on for 10 seconds and display Countdown
    lcd_line2();
    lcd_writeProgString(PSTR("LED On"));

    rfAdapter_sendSetLed(serialAdapter_address, 1);
    for (int i = 10; i > 0; --i) {
    2216:	01 50       	subi	r16, 0x01	; 1
    2218:	11 09       	sbc	r17, r1
    221a:	10 16       	cp	r1, r16
    221c:	11 06       	cpc	r1, r17
    221e:	b4 f3       	brlt	.-20     	; 0x220c <__stack+0xd>
        displayCounter(i);
        delayMs(1000);
    }

    //! LED off for 10 seconds and display Countdown
    lcd_line2();
    2220:	0e 94 c3 06 	call	0xd86	; 0xd86 <lcd_line2>
    lcd_writeProgString(PSTR("LED Off"));
    2224:	8c ec       	ldi	r24, 0xCC	; 204
    2226:	93 e0       	ldi	r25, 0x03	; 3
    2228:	0e 94 1c 07 	call	0xe38	; 0xe38 <lcd_writeProgString>

    rfAdapter_sendSetLed(serialAdapter_address, 0);
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2232:	0e 94 de 02 	call	0x5bc	; 0x5bc <rfAdapter_sendSetLed>
    for (int i = 10; i > 0; --i) {
    2236:	0a e0       	ldi	r16, 0x0A	; 10
    2238:	10 e0       	ldi	r17, 0x00	; 0
        displayCounter(i);
    223a:	07 c0       	rjmp	.+14     	; 0x224a <__stack+0x4b>
    223c:	c8 01       	movw	r24, r16
        delayMs(1000);
    223e:	80 df       	rcall	.-256    	; 0x2140 <displayCounter>
    2240:	88 ee       	ldi	r24, 0xE8	; 232
    2242:	93 e0       	ldi	r25, 0x03	; 3
    2244:	1b da       	rcall	.-3018   	; 0x167c <delayMs>
    //! LED off for 10 seconds and display Countdown
    lcd_line2();
    lcd_writeProgString(PSTR("LED Off"));

    rfAdapter_sendSetLed(serialAdapter_address, 0);
    for (int i = 10; i > 0; --i) {
    2246:	01 50       	subi	r16, 0x01	; 1
    2248:	11 09       	sbc	r17, r1
    224a:	10 16       	cp	r1, r16
    224c:	11 06       	cpc	r1, r17
    224e:	b4 f3       	brlt	.-20     	; 0x223c <__stack+0x3d>
#if PHASE_3 == 1
    /*!
     * Send LCD Print and LCD Clear to Board Address
     */

    lcd_clear();
    2250:	0e 94 7e 06 	call	0xcfc	; 0xcfc <lcd_clear>
    lcd_writeProgString(PSTR("Phase 3:"));
    2254:	83 ec       	ldi	r24, 0xC3	; 195
    2256:	93 e0       	ldi	r25, 0x03	; 3
    2258:	0e 94 1c 07 	call	0xe38	; 0xe38 <lcd_writeProgString>
    delayMs(1000);
    225c:	88 ee       	ldi	r24, 0xE8	; 232
    225e:	93 e0       	ldi	r25, 0x03	; 3
    2260:	0d da       	rcall	.-3046   	; 0x167c <delayMs>
    lcd_line2();
    2262:	0e 94 c3 06 	call	0xd86	; 0xd86 <lcd_line2>

    //! Sending Text
    rfAdapter_sendLcdPrint(serialAdapter_address, "lcd_clear() in");
    2266:	6e e1       	ldi	r22, 0x1E	; 30
    2268:	73 e0       	ldi	r23, 0x03	; 3
    226a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    226e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <rfAdapter_sendLcdPrint>
    delayMs(50);
    2272:	82 e3       	ldi	r24, 0x32	; 50
    2274:	90 e0       	ldi	r25, 0x00	; 0

    //! Countdown for Clear
    for (int i = 3; i >= 0; --i) {
    2276:	02 da       	rcall	.-3068   	; 0x167c <delayMs>
    2278:	03 e0       	ldi	r16, 0x03	; 3
    227a:	10 e0       	ldi	r17, 0x00	; 0
        displayCounter(i);
    227c:	07 c0       	rjmp	.+14     	; 0x228c <__stack+0x8d>
    227e:	c8 01       	movw	r24, r16
    2280:	5f df       	rcall	.-322    	; 0x2140 <displayCounter>
        delayMs(1000);
    2282:	88 ee       	ldi	r24, 0xE8	; 232
    2284:	93 e0       	ldi	r25, 0x03	; 3
    2286:	fa d9       	rcall	.-3084   	; 0x167c <delayMs>
    2288:	01 50       	subi	r16, 0x01	; 1
    //! Sending Text
    rfAdapter_sendLcdPrint(serialAdapter_address, "lcd_clear() in");
    delayMs(50);

    //! Countdown for Clear
    for (int i = 3; i >= 0; --i) {
    228a:	11 09       	sbc	r17, r1
    228c:	11 23       	and	r17, r17
    228e:	bc f7       	brge	.-18     	; 0x227e <__stack+0x7f>
        displayCounter(i);
        delayMs(1000);
    }

    //! Sending LCDClear
    rfAdapter_sendLcdClear(serialAdapter_address);
    2290:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2294:	0e 94 1b 03 	call	0x636	; 0x636 <rfAdapter_sendLcdClear>
    delayMs(2000);
    2298:	80 ed       	ldi	r24, 0xD0	; 208
    229a:	97 e0       	ldi	r25, 0x07	; 7
    229c:	ef d9       	rcall	.-3106   	; 0x167c <delayMs>
    229e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <lcd_clear>
#if PHASE_4 == 1
    /*!
     * Send LCD GoTo and LCD Print ProcMem to Broadcast Address
     */

    lcd_clear();
    22a2:	8a eb       	ldi	r24, 0xBA	; 186
    lcd_writeProgString(PSTR("Phase 4:"));
    22a4:	93 e0       	ldi	r25, 0x03	; 3
    22a6:	0e 94 1c 07 	call	0xe38	; 0xe38 <lcd_writeProgString>
    lcd_line2();
    22aa:	0e 94 c3 06 	call	0xd86	; 0xd86 <lcd_line2>
    lcd_writeProgString(PSTR("    -->  <--"));
    22ae:	8d ea       	ldi	r24, 0xAD	; 173
    22b0:	93 e0       	ldi	r25, 0x03	; 3
    22b2:	0e 94 1c 07 	call	0xe38	; 0xe38 <lcd_writeProgString>
    delayMs(2000);
    22b6:	80 ed       	ldi	r24, 0xD0	; 208
    22b8:	97 e0       	ldi	r25, 0x07	; 7
    22ba:	e0 d9       	rcall	.-3136   	; 0x167c <delayMs>
    22bc:	47 e0       	ldi	r20, 0x07	; 7

    //! Sending Okay between the Errors
    rfAdapter_sendLcdGoto(ADDRESS_BROADCAST, 1, 7);
    22be:	61 e0       	ldi	r22, 0x01	; 1
    22c0:	8f ef       	ldi	r24, 0xFF	; 255
    22c2:	0e 94 35 03 	call	0x66a	; 0x66a <rfAdapter_sendLcdGoto>
    rfAdapter_sendLcdPrintProcMem(ADDRESS_BROADCAST, PSTR("OK"));
    22c6:	6a ea       	ldi	r22, 0xAA	; 170
    22c8:	73 e0       	ldi	r23, 0x03	; 3
    22ca:	8f ef       	ldi	r24, 0xFF	; 255
    22cc:	0e 94 91 03 	call	0x722	; 0x722 <rfAdapter_sendLcdPrintProcMem>
    delayMs(3000);
    22d0:	88 eb       	ldi	r24, 0xB8	; 184
    22d2:	9b e0       	ldi	r25, 0x0B	; 11
    22d4:	d3 d9       	rcall	.-3162   	; 0x167c <delayMs>
    /*!
     * Sends a reference frame to check compatibility with the other implementation.
     * Addressed to Broadcast Address
     */

    lcd_clear();
    22d6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <lcd_clear>
    lcd_writeProgString(PSTR("Phase 5:  refer-ence frame "));
    22da:	8e e8       	ldi	r24, 0x8E	; 142
    22dc:	93 e0       	ldi	r25, 0x03	; 3
    22de:	0e 94 1c 07 	call	0xe38	; 0xe38 <lcd_writeProgString>
    lcd_goto(1,14);
    22e2:	6e e0       	ldi	r22, 0x0E	; 14
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	0e 94 91 06 	call	0xd22	; 0xd22 <lcd_goto>
    delayMs(1000);
    22ea:	88 ee       	ldi	r24, 0xE8	; 232
    22ec:	93 e0       	ldi	r25, 0x03	; 3
    22ee:	c6 d9       	rcall	.-3188   	; 0x167c <delayMs>
    22f0:	8a e0       	ldi	r24, 0x0A	; 10

    //! The reference frame is equal to rfAdapter_sendLcdPrint(ADDRESS_BROADCAST, "OK");
    //! Created by using lcd_writeHexByte() in xbee_write().
    uint8_t data[] = {0x46, 0x52, 0x08, 0xFF, 0x04, 0x12, 0x02, 0x4F, 0x4B, 0xF3};
    22f2:	ef e1       	ldi	r30, 0x1F	; 31
    22f4:	f2 e0       	ldi	r31, 0x02	; 2
    22f6:	de 01       	movw	r26, r28
    22f8:	11 96       	adiw	r26, 0x01	; 1
    22fa:	01 90       	ld	r0, Z+
    22fc:	0d 92       	st	X+, r0
    22fe:	8a 95       	dec	r24
    2300:	e1 f7       	brne	.-8      	; 0x22fa <__stack+0xfb>
    uint8_t length = sizeof(data);

    //! Write directly to UART
    xbee_writeData(&data, length);
    2302:	6a e0       	ldi	r22, 0x0A	; 10
    2304:	ce 01       	movw	r24, r28
    2306:	01 96       	adiw	r24, 0x01	; 1
    2308:	0e 94 34 05 	call	0xa68	; 0xa68 <xbee_writeData>

    delayMs(2000);
    230c:	80 ed       	ldi	r24, 0xD0	; 208
    230e:	97 e0       	ldi	r25, 0x07	; 7
    2310:	b5 d9       	rcall	.-3222   	; 0x167c <delayMs>
    2312:	0e 94 7e 06 	call	0xcfc	; 0xcfc <lcd_clear>

#endif

    //! Show finished screen
    lcd_clear();
    2316:	8f e7       	ldi	r24, 0x7F	; 127
    lcd_writeProgString(PSTR(" Test finished"));
    2318:	93 e0       	ldi	r25, 0x03	; 3
    231a:	0e 94 1c 07 	call	0xe38	; 0xe38 <lcd_writeProgString>
    231e:	ff cf       	rjmp	.-2      	; 0x231e <__stack+0x11f>

00002320 <__udivmodsi4>:
    2320:	a1 e2       	ldi	r26, 0x21	; 33
    2322:	1a 2e       	mov	r1, r26
    2324:	aa 1b       	sub	r26, r26
    2326:	bb 1b       	sub	r27, r27
    2328:	fd 01       	movw	r30, r26
    232a:	0d c0       	rjmp	.+26     	; 0x2346 <__udivmodsi4_ep>

0000232c <__udivmodsi4_loop>:
    232c:	aa 1f       	adc	r26, r26
    232e:	bb 1f       	adc	r27, r27
    2330:	ee 1f       	adc	r30, r30
    2332:	ff 1f       	adc	r31, r31
    2334:	a2 17       	cp	r26, r18
    2336:	b3 07       	cpc	r27, r19
    2338:	e4 07       	cpc	r30, r20
    233a:	f5 07       	cpc	r31, r21
    233c:	20 f0       	brcs	.+8      	; 0x2346 <__udivmodsi4_ep>
    233e:	a2 1b       	sub	r26, r18
    2340:	b3 0b       	sbc	r27, r19
    2342:	e4 0b       	sbc	r30, r20
    2344:	f5 0b       	sbc	r31, r21

00002346 <__udivmodsi4_ep>:
    2346:	66 1f       	adc	r22, r22
    2348:	77 1f       	adc	r23, r23
    234a:	88 1f       	adc	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	1a 94       	dec	r1
    2350:	69 f7       	brne	.-38     	; 0x232c <__udivmodsi4_loop>
    2352:	60 95       	com	r22
    2354:	70 95       	com	r23
    2356:	80 95       	com	r24
    2358:	90 95       	com	r25
    235a:	9b 01       	movw	r18, r22
    235c:	ac 01       	movw	r20, r24
    235e:	bd 01       	movw	r22, r26
    2360:	cf 01       	movw	r24, r30
    2362:	08 95       	ret

00002364 <__tablejump2__>:
    2364:	ee 0f       	add	r30, r30
    2366:	ff 1f       	adc	r31, r31
    2368:	88 1f       	adc	r24, r24
    236a:	8b bf       	out	0x3b, r24	; 59
    236c:	07 90       	elpm	r0, Z+
    236e:	f6 91       	elpm	r31, Z
    2370:	e0 2d       	mov	r30, r0
    2372:	19 94       	eijmp

00002374 <__umulhisi3>:
    2374:	a2 9f       	mul	r26, r18
    2376:	b0 01       	movw	r22, r0
    2378:	b3 9f       	mul	r27, r19
    237a:	c0 01       	movw	r24, r0
    237c:	a3 9f       	mul	r26, r19
    237e:	70 0d       	add	r23, r0
    2380:	81 1d       	adc	r24, r1
    2382:	11 24       	eor	r1, r1
    2384:	91 1d       	adc	r25, r1
    2386:	b2 9f       	mul	r27, r18
    2388:	70 0d       	add	r23, r0
    238a:	81 1d       	adc	r24, r1
    238c:	11 24       	eor	r1, r1
    238e:	91 1d       	adc	r25, r1
    2390:	08 95       	ret

00002392 <strncpy_P>:
    2392:	fb 01       	movw	r30, r22
    2394:	dc 01       	movw	r26, r24
    2396:	41 50       	subi	r20, 0x01	; 1
    2398:	50 40       	sbci	r21, 0x00	; 0
    239a:	48 f0       	brcs	.+18     	; 0x23ae <strncpy_P+0x1c>
    239c:	05 90       	lpm	r0, Z+
    239e:	0d 92       	st	X+, r0
    23a0:	00 20       	and	r0, r0
    23a2:	c9 f7       	brne	.-14     	; 0x2396 <strncpy_P+0x4>
    23a4:	01 c0       	rjmp	.+2      	; 0x23a8 <strncpy_P+0x16>
    23a6:	1d 92       	st	X+, r1
    23a8:	41 50       	subi	r20, 0x01	; 1
    23aa:	50 40       	sbci	r21, 0x00	; 0
    23ac:	e0 f7       	brcc	.-8      	; 0x23a6 <strncpy_P+0x14>
    23ae:	08 95       	ret

000023b0 <memcpy>:
    23b0:	fb 01       	movw	r30, r22
    23b2:	dc 01       	movw	r26, r24
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <memcpy+0xa>
    23b6:	01 90       	ld	r0, Z+
    23b8:	0d 92       	st	X+, r0
    23ba:	41 50       	subi	r20, 0x01	; 1
    23bc:	50 40       	sbci	r21, 0x00	; 0
    23be:	d8 f7       	brcc	.-10     	; 0x23b6 <memcpy+0x6>
    23c0:	08 95       	ret

000023c2 <strncpy>:
    23c2:	fb 01       	movw	r30, r22
    23c4:	dc 01       	movw	r26, r24
    23c6:	41 50       	subi	r20, 0x01	; 1
    23c8:	50 40       	sbci	r21, 0x00	; 0
    23ca:	48 f0       	brcs	.+18     	; 0x23de <strncpy+0x1c>
    23cc:	01 90       	ld	r0, Z+
    23ce:	0d 92       	st	X+, r0
    23d0:	00 20       	and	r0, r0
    23d2:	c9 f7       	brne	.-14     	; 0x23c6 <strncpy+0x4>
    23d4:	01 c0       	rjmp	.+2      	; 0x23d8 <strncpy+0x16>
    23d6:	1d 92       	st	X+, r1
    23d8:	41 50       	subi	r20, 0x01	; 1
    23da:	50 40       	sbci	r21, 0x00	; 0
    23dc:	e0 f7       	brcc	.-8      	; 0x23d6 <strncpy+0x14>
    23de:	08 95       	ret

000023e0 <printf>:
    23e0:	cf 93       	push	r28
    23e2:	df 93       	push	r29
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	ae 01       	movw	r20, r28
    23ea:	4a 5f       	subi	r20, 0xFA	; 250
    23ec:	5f 4f       	sbci	r21, 0xFF	; 255
    23ee:	fa 01       	movw	r30, r20
    23f0:	61 91       	ld	r22, Z+
    23f2:	71 91       	ld	r23, Z+
    23f4:	af 01       	movw	r20, r30
    23f6:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <__iob+0x2>
    23fa:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <__iob+0x3>
    23fe:	41 d0       	rcall	.+130    	; 0x2482 <vfprintf>
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	08 95       	ret

00002406 <puts>:
    2406:	0f 93       	push	r16
    2408:	1f 93       	push	r17
    240a:	cf 93       	push	r28
    240c:	df 93       	push	r29
    240e:	e0 91 84 05 	lds	r30, 0x0584	; 0x800584 <__iob+0x2>
    2412:	f0 91 85 05 	lds	r31, 0x0585	; 0x800585 <__iob+0x3>
    2416:	23 81       	ldd	r18, Z+3	; 0x03
    2418:	21 ff       	sbrs	r18, 1
    241a:	1b c0       	rjmp	.+54     	; 0x2452 <puts+0x4c>
    241c:	8c 01       	movw	r16, r24
    241e:	d0 e0       	ldi	r29, 0x00	; 0
    2420:	c0 e0       	ldi	r28, 0x00	; 0
    2422:	f8 01       	movw	r30, r16
    2424:	81 91       	ld	r24, Z+
    2426:	8f 01       	movw	r16, r30
    2428:	60 91 84 05 	lds	r22, 0x0584	; 0x800584 <__iob+0x2>
    242c:	70 91 85 05 	lds	r23, 0x0585	; 0x800585 <__iob+0x3>
    2430:	db 01       	movw	r26, r22
    2432:	18 96       	adiw	r26, 0x08	; 8
    2434:	ed 91       	ld	r30, X+
    2436:	fc 91       	ld	r31, X
    2438:	19 97       	sbiw	r26, 0x09	; 9
    243a:	88 23       	and	r24, r24
    243c:	31 f0       	breq	.+12     	; 0x244a <puts+0x44>
    243e:	19 95       	eicall
    2440:	89 2b       	or	r24, r25
    2442:	79 f3       	breq	.-34     	; 0x2422 <puts+0x1c>
    2444:	df ef       	ldi	r29, 0xFF	; 255
    2446:	cf ef       	ldi	r28, 0xFF	; 255
    2448:	ec cf       	rjmp	.-40     	; 0x2422 <puts+0x1c>
    244a:	8a e0       	ldi	r24, 0x0A	; 10
    244c:	19 95       	eicall
    244e:	89 2b       	or	r24, r25
    2450:	19 f0       	breq	.+6      	; 0x2458 <puts+0x52>
    2452:	8f ef       	ldi	r24, 0xFF	; 255
    2454:	9f ef       	ldi	r25, 0xFF	; 255
    2456:	02 c0       	rjmp	.+4      	; 0x245c <puts+0x56>
    2458:	8d 2f       	mov	r24, r29
    245a:	9c 2f       	mov	r25, r28
    245c:	df 91       	pop	r29
    245e:	cf 91       	pop	r28
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	08 95       	ret

00002466 <vfprintf_P>:
    2466:	cf 93       	push	r28
    2468:	df 93       	push	r29
    246a:	ec 01       	movw	r28, r24
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	88 60       	ori	r24, 0x08	; 8
    2470:	8b 83       	std	Y+3, r24	; 0x03
    2472:	ce 01       	movw	r24, r28
    2474:	06 d0       	rcall	.+12     	; 0x2482 <vfprintf>
    2476:	2b 81       	ldd	r18, Y+3	; 0x03
    2478:	27 7f       	andi	r18, 0xF7	; 247
    247a:	2b 83       	std	Y+3, r18	; 0x03
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	08 95       	ret

00002482 <vfprintf>:
    2482:	2f 92       	push	r2
    2484:	3f 92       	push	r3
    2486:	4f 92       	push	r4
    2488:	5f 92       	push	r5
    248a:	6f 92       	push	r6
    248c:	7f 92       	push	r7
    248e:	8f 92       	push	r8
    2490:	9f 92       	push	r9
    2492:	af 92       	push	r10
    2494:	bf 92       	push	r11
    2496:	cf 92       	push	r12
    2498:	df 92       	push	r13
    249a:	ef 92       	push	r14
    249c:	ff 92       	push	r15
    249e:	0f 93       	push	r16
    24a0:	1f 93       	push	r17
    24a2:	cf 93       	push	r28
    24a4:	df 93       	push	r29
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	2b 97       	sbiw	r28, 0x0b	; 11
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	cd bf       	out	0x3d, r28	; 61
    24b6:	6c 01       	movw	r12, r24
    24b8:	7b 01       	movw	r14, r22
    24ba:	8a 01       	movw	r16, r20
    24bc:	fc 01       	movw	r30, r24
    24be:	17 82       	std	Z+7, r1	; 0x07
    24c0:	16 82       	std	Z+6, r1	; 0x06
    24c2:	83 81       	ldd	r24, Z+3	; 0x03
    24c4:	81 ff       	sbrs	r24, 1
    24c6:	bf c1       	rjmp	.+894    	; 0x2846 <vfprintf+0x3c4>
    24c8:	ce 01       	movw	r24, r28
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	3c 01       	movw	r6, r24
    24ce:	f6 01       	movw	r30, r12
    24d0:	93 81       	ldd	r25, Z+3	; 0x03
    24d2:	f7 01       	movw	r30, r14
    24d4:	93 fd       	sbrc	r25, 3
    24d6:	85 91       	lpm	r24, Z+
    24d8:	93 ff       	sbrs	r25, 3
    24da:	81 91       	ld	r24, Z+
    24dc:	7f 01       	movw	r14, r30
    24de:	88 23       	and	r24, r24
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <vfprintf+0x62>
    24e2:	ad c1       	rjmp	.+858    	; 0x283e <vfprintf+0x3bc>
    24e4:	85 32       	cpi	r24, 0x25	; 37
    24e6:	39 f4       	brne	.+14     	; 0x24f6 <vfprintf+0x74>
    24e8:	93 fd       	sbrc	r25, 3
    24ea:	85 91       	lpm	r24, Z+
    24ec:	93 ff       	sbrs	r25, 3
    24ee:	81 91       	ld	r24, Z+
    24f0:	7f 01       	movw	r14, r30
    24f2:	85 32       	cpi	r24, 0x25	; 37
    24f4:	21 f4       	brne	.+8      	; 0x24fe <vfprintf+0x7c>
    24f6:	b6 01       	movw	r22, r12
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	d6 d1       	rcall	.+940    	; 0x28a8 <fputc>
    24fc:	e8 cf       	rjmp	.-48     	; 0x24ce <vfprintf+0x4c>
    24fe:	91 2c       	mov	r9, r1
    2500:	21 2c       	mov	r2, r1
    2502:	31 2c       	mov	r3, r1
    2504:	ff e1       	ldi	r31, 0x1F	; 31
    2506:	f3 15       	cp	r31, r3
    2508:	d8 f0       	brcs	.+54     	; 0x2540 <vfprintf+0xbe>
    250a:	8b 32       	cpi	r24, 0x2B	; 43
    250c:	79 f0       	breq	.+30     	; 0x252c <vfprintf+0xaa>
    250e:	38 f4       	brcc	.+14     	; 0x251e <vfprintf+0x9c>
    2510:	80 32       	cpi	r24, 0x20	; 32
    2512:	79 f0       	breq	.+30     	; 0x2532 <vfprintf+0xb0>
    2514:	83 32       	cpi	r24, 0x23	; 35
    2516:	a1 f4       	brne	.+40     	; 0x2540 <vfprintf+0xbe>
    2518:	23 2d       	mov	r18, r3
    251a:	20 61       	ori	r18, 0x10	; 16
    251c:	1d c0       	rjmp	.+58     	; 0x2558 <vfprintf+0xd6>
    251e:	8d 32       	cpi	r24, 0x2D	; 45
    2520:	61 f0       	breq	.+24     	; 0x253a <vfprintf+0xb8>
    2522:	80 33       	cpi	r24, 0x30	; 48
    2524:	69 f4       	brne	.+26     	; 0x2540 <vfprintf+0xbe>
    2526:	23 2d       	mov	r18, r3
    2528:	21 60       	ori	r18, 0x01	; 1
    252a:	16 c0       	rjmp	.+44     	; 0x2558 <vfprintf+0xd6>
    252c:	83 2d       	mov	r24, r3
    252e:	82 60       	ori	r24, 0x02	; 2
    2530:	38 2e       	mov	r3, r24
    2532:	e3 2d       	mov	r30, r3
    2534:	e4 60       	ori	r30, 0x04	; 4
    2536:	3e 2e       	mov	r3, r30
    2538:	2a c0       	rjmp	.+84     	; 0x258e <vfprintf+0x10c>
    253a:	f3 2d       	mov	r31, r3
    253c:	f8 60       	ori	r31, 0x08	; 8
    253e:	1d c0       	rjmp	.+58     	; 0x257a <vfprintf+0xf8>
    2540:	37 fc       	sbrc	r3, 7
    2542:	2d c0       	rjmp	.+90     	; 0x259e <vfprintf+0x11c>
    2544:	20 ed       	ldi	r18, 0xD0	; 208
    2546:	28 0f       	add	r18, r24
    2548:	2a 30       	cpi	r18, 0x0A	; 10
    254a:	40 f0       	brcs	.+16     	; 0x255c <vfprintf+0xda>
    254c:	8e 32       	cpi	r24, 0x2E	; 46
    254e:	b9 f4       	brne	.+46     	; 0x257e <vfprintf+0xfc>
    2550:	36 fc       	sbrc	r3, 6
    2552:	75 c1       	rjmp	.+746    	; 0x283e <vfprintf+0x3bc>
    2554:	23 2d       	mov	r18, r3
    2556:	20 64       	ori	r18, 0x40	; 64
    2558:	32 2e       	mov	r3, r18
    255a:	19 c0       	rjmp	.+50     	; 0x258e <vfprintf+0x10c>
    255c:	36 fe       	sbrs	r3, 6
    255e:	06 c0       	rjmp	.+12     	; 0x256c <vfprintf+0xea>
    2560:	8a e0       	ldi	r24, 0x0A	; 10
    2562:	98 9e       	mul	r9, r24
    2564:	20 0d       	add	r18, r0
    2566:	11 24       	eor	r1, r1
    2568:	92 2e       	mov	r9, r18
    256a:	11 c0       	rjmp	.+34     	; 0x258e <vfprintf+0x10c>
    256c:	ea e0       	ldi	r30, 0x0A	; 10
    256e:	2e 9e       	mul	r2, r30
    2570:	20 0d       	add	r18, r0
    2572:	11 24       	eor	r1, r1
    2574:	22 2e       	mov	r2, r18
    2576:	f3 2d       	mov	r31, r3
    2578:	f0 62       	ori	r31, 0x20	; 32
    257a:	3f 2e       	mov	r3, r31
    257c:	08 c0       	rjmp	.+16     	; 0x258e <vfprintf+0x10c>
    257e:	8c 36       	cpi	r24, 0x6C	; 108
    2580:	21 f4       	brne	.+8      	; 0x258a <vfprintf+0x108>
    2582:	83 2d       	mov	r24, r3
    2584:	80 68       	ori	r24, 0x80	; 128
    2586:	38 2e       	mov	r3, r24
    2588:	02 c0       	rjmp	.+4      	; 0x258e <vfprintf+0x10c>
    258a:	88 36       	cpi	r24, 0x68	; 104
    258c:	41 f4       	brne	.+16     	; 0x259e <vfprintf+0x11c>
    258e:	f7 01       	movw	r30, r14
    2590:	93 fd       	sbrc	r25, 3
    2592:	85 91       	lpm	r24, Z+
    2594:	93 ff       	sbrs	r25, 3
    2596:	81 91       	ld	r24, Z+
    2598:	7f 01       	movw	r14, r30
    259a:	81 11       	cpse	r24, r1
    259c:	b3 cf       	rjmp	.-154    	; 0x2504 <vfprintf+0x82>
    259e:	98 2f       	mov	r25, r24
    25a0:	9f 7d       	andi	r25, 0xDF	; 223
    25a2:	95 54       	subi	r25, 0x45	; 69
    25a4:	93 30       	cpi	r25, 0x03	; 3
    25a6:	28 f4       	brcc	.+10     	; 0x25b2 <vfprintf+0x130>
    25a8:	0c 5f       	subi	r16, 0xFC	; 252
    25aa:	1f 4f       	sbci	r17, 0xFF	; 255
    25ac:	9f e3       	ldi	r25, 0x3F	; 63
    25ae:	99 83       	std	Y+1, r25	; 0x01
    25b0:	0d c0       	rjmp	.+26     	; 0x25cc <vfprintf+0x14a>
    25b2:	83 36       	cpi	r24, 0x63	; 99
    25b4:	31 f0       	breq	.+12     	; 0x25c2 <vfprintf+0x140>
    25b6:	83 37       	cpi	r24, 0x73	; 115
    25b8:	71 f0       	breq	.+28     	; 0x25d6 <vfprintf+0x154>
    25ba:	83 35       	cpi	r24, 0x53	; 83
    25bc:	09 f0       	breq	.+2      	; 0x25c0 <vfprintf+0x13e>
    25be:	55 c0       	rjmp	.+170    	; 0x266a <vfprintf+0x1e8>
    25c0:	20 c0       	rjmp	.+64     	; 0x2602 <vfprintf+0x180>
    25c2:	f8 01       	movw	r30, r16
    25c4:	80 81       	ld	r24, Z
    25c6:	89 83       	std	Y+1, r24	; 0x01
    25c8:	0e 5f       	subi	r16, 0xFE	; 254
    25ca:	1f 4f       	sbci	r17, 0xFF	; 255
    25cc:	88 24       	eor	r8, r8
    25ce:	83 94       	inc	r8
    25d0:	91 2c       	mov	r9, r1
    25d2:	53 01       	movw	r10, r6
    25d4:	12 c0       	rjmp	.+36     	; 0x25fa <vfprintf+0x178>
    25d6:	28 01       	movw	r4, r16
    25d8:	f2 e0       	ldi	r31, 0x02	; 2
    25da:	4f 0e       	add	r4, r31
    25dc:	51 1c       	adc	r5, r1
    25de:	f8 01       	movw	r30, r16
    25e0:	a0 80       	ld	r10, Z
    25e2:	b1 80       	ldd	r11, Z+1	; 0x01
    25e4:	36 fe       	sbrs	r3, 6
    25e6:	03 c0       	rjmp	.+6      	; 0x25ee <vfprintf+0x16c>
    25e8:	69 2d       	mov	r22, r9
    25ea:	70 e0       	ldi	r23, 0x00	; 0
    25ec:	02 c0       	rjmp	.+4      	; 0x25f2 <vfprintf+0x170>
    25ee:	6f ef       	ldi	r22, 0xFF	; 255
    25f0:	7f ef       	ldi	r23, 0xFF	; 255
    25f2:	c5 01       	movw	r24, r10
    25f4:	4e d1       	rcall	.+668    	; 0x2892 <strnlen>
    25f6:	4c 01       	movw	r8, r24
    25f8:	82 01       	movw	r16, r4
    25fa:	f3 2d       	mov	r31, r3
    25fc:	ff 77       	andi	r31, 0x7F	; 127
    25fe:	3f 2e       	mov	r3, r31
    2600:	15 c0       	rjmp	.+42     	; 0x262c <vfprintf+0x1aa>
    2602:	28 01       	movw	r4, r16
    2604:	22 e0       	ldi	r18, 0x02	; 2
    2606:	42 0e       	add	r4, r18
    2608:	51 1c       	adc	r5, r1
    260a:	f8 01       	movw	r30, r16
    260c:	a0 80       	ld	r10, Z
    260e:	b1 80       	ldd	r11, Z+1	; 0x01
    2610:	36 fe       	sbrs	r3, 6
    2612:	03 c0       	rjmp	.+6      	; 0x261a <vfprintf+0x198>
    2614:	69 2d       	mov	r22, r9
    2616:	70 e0       	ldi	r23, 0x00	; 0
    2618:	02 c0       	rjmp	.+4      	; 0x261e <vfprintf+0x19c>
    261a:	6f ef       	ldi	r22, 0xFF	; 255
    261c:	7f ef       	ldi	r23, 0xFF	; 255
    261e:	c5 01       	movw	r24, r10
    2620:	2d d1       	rcall	.+602    	; 0x287c <strnlen_P>
    2622:	4c 01       	movw	r8, r24
    2624:	f3 2d       	mov	r31, r3
    2626:	f0 68       	ori	r31, 0x80	; 128
    2628:	3f 2e       	mov	r3, r31
    262a:	82 01       	movw	r16, r4
    262c:	33 fc       	sbrc	r3, 3
    262e:	19 c0       	rjmp	.+50     	; 0x2662 <vfprintf+0x1e0>
    2630:	82 2d       	mov	r24, r2
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	88 16       	cp	r8, r24
    2636:	99 06       	cpc	r9, r25
    2638:	a0 f4       	brcc	.+40     	; 0x2662 <vfprintf+0x1e0>
    263a:	b6 01       	movw	r22, r12
    263c:	80 e2       	ldi	r24, 0x20	; 32
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	33 d1       	rcall	.+614    	; 0x28a8 <fputc>
    2642:	2a 94       	dec	r2
    2644:	f5 cf       	rjmp	.-22     	; 0x2630 <vfprintf+0x1ae>
    2646:	f5 01       	movw	r30, r10
    2648:	37 fc       	sbrc	r3, 7
    264a:	85 91       	lpm	r24, Z+
    264c:	37 fe       	sbrs	r3, 7
    264e:	81 91       	ld	r24, Z+
    2650:	5f 01       	movw	r10, r30
    2652:	b6 01       	movw	r22, r12
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	28 d1       	rcall	.+592    	; 0x28a8 <fputc>
    2658:	21 10       	cpse	r2, r1
    265a:	2a 94       	dec	r2
    265c:	21 e0       	ldi	r18, 0x01	; 1
    265e:	82 1a       	sub	r8, r18
    2660:	91 08       	sbc	r9, r1
    2662:	81 14       	cp	r8, r1
    2664:	91 04       	cpc	r9, r1
    2666:	79 f7       	brne	.-34     	; 0x2646 <vfprintf+0x1c4>
    2668:	e1 c0       	rjmp	.+450    	; 0x282c <vfprintf+0x3aa>
    266a:	84 36       	cpi	r24, 0x64	; 100
    266c:	11 f0       	breq	.+4      	; 0x2672 <vfprintf+0x1f0>
    266e:	89 36       	cpi	r24, 0x69	; 105
    2670:	39 f5       	brne	.+78     	; 0x26c0 <vfprintf+0x23e>
    2672:	f8 01       	movw	r30, r16
    2674:	37 fe       	sbrs	r3, 7
    2676:	07 c0       	rjmp	.+14     	; 0x2686 <vfprintf+0x204>
    2678:	60 81       	ld	r22, Z
    267a:	71 81       	ldd	r23, Z+1	; 0x01
    267c:	82 81       	ldd	r24, Z+2	; 0x02
    267e:	93 81       	ldd	r25, Z+3	; 0x03
    2680:	0c 5f       	subi	r16, 0xFC	; 252
    2682:	1f 4f       	sbci	r17, 0xFF	; 255
    2684:	08 c0       	rjmp	.+16     	; 0x2696 <vfprintf+0x214>
    2686:	60 81       	ld	r22, Z
    2688:	71 81       	ldd	r23, Z+1	; 0x01
    268a:	07 2e       	mov	r0, r23
    268c:	00 0c       	add	r0, r0
    268e:	88 0b       	sbc	r24, r24
    2690:	99 0b       	sbc	r25, r25
    2692:	0e 5f       	subi	r16, 0xFE	; 254
    2694:	1f 4f       	sbci	r17, 0xFF	; 255
    2696:	f3 2d       	mov	r31, r3
    2698:	ff 76       	andi	r31, 0x6F	; 111
    269a:	3f 2e       	mov	r3, r31
    269c:	97 ff       	sbrs	r25, 7
    269e:	09 c0       	rjmp	.+18     	; 0x26b2 <vfprintf+0x230>
    26a0:	90 95       	com	r25
    26a2:	80 95       	com	r24
    26a4:	70 95       	com	r23
    26a6:	61 95       	neg	r22
    26a8:	7f 4f       	sbci	r23, 0xFF	; 255
    26aa:	8f 4f       	sbci	r24, 0xFF	; 255
    26ac:	9f 4f       	sbci	r25, 0xFF	; 255
    26ae:	f0 68       	ori	r31, 0x80	; 128
    26b0:	3f 2e       	mov	r3, r31
    26b2:	2a e0       	ldi	r18, 0x0A	; 10
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	a3 01       	movw	r20, r6
    26b8:	33 d1       	rcall	.+614    	; 0x2920 <__ultoa_invert>
    26ba:	88 2e       	mov	r8, r24
    26bc:	86 18       	sub	r8, r6
    26be:	44 c0       	rjmp	.+136    	; 0x2748 <vfprintf+0x2c6>
    26c0:	85 37       	cpi	r24, 0x75	; 117
    26c2:	31 f4       	brne	.+12     	; 0x26d0 <vfprintf+0x24e>
    26c4:	23 2d       	mov	r18, r3
    26c6:	2f 7e       	andi	r18, 0xEF	; 239
    26c8:	b2 2e       	mov	r11, r18
    26ca:	2a e0       	ldi	r18, 0x0A	; 10
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	25 c0       	rjmp	.+74     	; 0x271a <vfprintf+0x298>
    26d0:	93 2d       	mov	r25, r3
    26d2:	99 7f       	andi	r25, 0xF9	; 249
    26d4:	b9 2e       	mov	r11, r25
    26d6:	8f 36       	cpi	r24, 0x6F	; 111
    26d8:	c1 f0       	breq	.+48     	; 0x270a <vfprintf+0x288>
    26da:	18 f4       	brcc	.+6      	; 0x26e2 <vfprintf+0x260>
    26dc:	88 35       	cpi	r24, 0x58	; 88
    26de:	79 f0       	breq	.+30     	; 0x26fe <vfprintf+0x27c>
    26e0:	ae c0       	rjmp	.+348    	; 0x283e <vfprintf+0x3bc>
    26e2:	80 37       	cpi	r24, 0x70	; 112
    26e4:	19 f0       	breq	.+6      	; 0x26ec <vfprintf+0x26a>
    26e6:	88 37       	cpi	r24, 0x78	; 120
    26e8:	21 f0       	breq	.+8      	; 0x26f2 <vfprintf+0x270>
    26ea:	a9 c0       	rjmp	.+338    	; 0x283e <vfprintf+0x3bc>
    26ec:	e9 2f       	mov	r30, r25
    26ee:	e0 61       	ori	r30, 0x10	; 16
    26f0:	be 2e       	mov	r11, r30
    26f2:	b4 fe       	sbrs	r11, 4
    26f4:	0d c0       	rjmp	.+26     	; 0x2710 <vfprintf+0x28e>
    26f6:	fb 2d       	mov	r31, r11
    26f8:	f4 60       	ori	r31, 0x04	; 4
    26fa:	bf 2e       	mov	r11, r31
    26fc:	09 c0       	rjmp	.+18     	; 0x2710 <vfprintf+0x28e>
    26fe:	34 fe       	sbrs	r3, 4
    2700:	0a c0       	rjmp	.+20     	; 0x2716 <vfprintf+0x294>
    2702:	29 2f       	mov	r18, r25
    2704:	26 60       	ori	r18, 0x06	; 6
    2706:	b2 2e       	mov	r11, r18
    2708:	06 c0       	rjmp	.+12     	; 0x2716 <vfprintf+0x294>
    270a:	28 e0       	ldi	r18, 0x08	; 8
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	05 c0       	rjmp	.+10     	; 0x271a <vfprintf+0x298>
    2710:	20 e1       	ldi	r18, 0x10	; 16
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	02 c0       	rjmp	.+4      	; 0x271a <vfprintf+0x298>
    2716:	20 e1       	ldi	r18, 0x10	; 16
    2718:	32 e0       	ldi	r19, 0x02	; 2
    271a:	f8 01       	movw	r30, r16
    271c:	b7 fe       	sbrs	r11, 7
    271e:	07 c0       	rjmp	.+14     	; 0x272e <vfprintf+0x2ac>
    2720:	60 81       	ld	r22, Z
    2722:	71 81       	ldd	r23, Z+1	; 0x01
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	0c 5f       	subi	r16, 0xFC	; 252
    272a:	1f 4f       	sbci	r17, 0xFF	; 255
    272c:	06 c0       	rjmp	.+12     	; 0x273a <vfprintf+0x2b8>
    272e:	60 81       	ld	r22, Z
    2730:	71 81       	ldd	r23, Z+1	; 0x01
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0e 5f       	subi	r16, 0xFE	; 254
    2738:	1f 4f       	sbci	r17, 0xFF	; 255
    273a:	a3 01       	movw	r20, r6
    273c:	f1 d0       	rcall	.+482    	; 0x2920 <__ultoa_invert>
    273e:	88 2e       	mov	r8, r24
    2740:	86 18       	sub	r8, r6
    2742:	fb 2d       	mov	r31, r11
    2744:	ff 77       	andi	r31, 0x7F	; 127
    2746:	3f 2e       	mov	r3, r31
    2748:	36 fe       	sbrs	r3, 6
    274a:	0d c0       	rjmp	.+26     	; 0x2766 <vfprintf+0x2e4>
    274c:	23 2d       	mov	r18, r3
    274e:	2e 7f       	andi	r18, 0xFE	; 254
    2750:	a2 2e       	mov	r10, r18
    2752:	89 14       	cp	r8, r9
    2754:	58 f4       	brcc	.+22     	; 0x276c <vfprintf+0x2ea>
    2756:	34 fe       	sbrs	r3, 4
    2758:	0b c0       	rjmp	.+22     	; 0x2770 <vfprintf+0x2ee>
    275a:	32 fc       	sbrc	r3, 2
    275c:	09 c0       	rjmp	.+18     	; 0x2770 <vfprintf+0x2ee>
    275e:	83 2d       	mov	r24, r3
    2760:	8e 7e       	andi	r24, 0xEE	; 238
    2762:	a8 2e       	mov	r10, r24
    2764:	05 c0       	rjmp	.+10     	; 0x2770 <vfprintf+0x2ee>
    2766:	b8 2c       	mov	r11, r8
    2768:	a3 2c       	mov	r10, r3
    276a:	03 c0       	rjmp	.+6      	; 0x2772 <vfprintf+0x2f0>
    276c:	b8 2c       	mov	r11, r8
    276e:	01 c0       	rjmp	.+2      	; 0x2772 <vfprintf+0x2f0>
    2770:	b9 2c       	mov	r11, r9
    2772:	a4 fe       	sbrs	r10, 4
    2774:	0f c0       	rjmp	.+30     	; 0x2794 <vfprintf+0x312>
    2776:	fe 01       	movw	r30, r28
    2778:	e8 0d       	add	r30, r8
    277a:	f1 1d       	adc	r31, r1
    277c:	80 81       	ld	r24, Z
    277e:	80 33       	cpi	r24, 0x30	; 48
    2780:	21 f4       	brne	.+8      	; 0x278a <vfprintf+0x308>
    2782:	9a 2d       	mov	r25, r10
    2784:	99 7e       	andi	r25, 0xE9	; 233
    2786:	a9 2e       	mov	r10, r25
    2788:	09 c0       	rjmp	.+18     	; 0x279c <vfprintf+0x31a>
    278a:	a2 fe       	sbrs	r10, 2
    278c:	06 c0       	rjmp	.+12     	; 0x279a <vfprintf+0x318>
    278e:	b3 94       	inc	r11
    2790:	b3 94       	inc	r11
    2792:	04 c0       	rjmp	.+8      	; 0x279c <vfprintf+0x31a>
    2794:	8a 2d       	mov	r24, r10
    2796:	86 78       	andi	r24, 0x86	; 134
    2798:	09 f0       	breq	.+2      	; 0x279c <vfprintf+0x31a>
    279a:	b3 94       	inc	r11
    279c:	a3 fc       	sbrc	r10, 3
    279e:	10 c0       	rjmp	.+32     	; 0x27c0 <vfprintf+0x33e>
    27a0:	a0 fe       	sbrs	r10, 0
    27a2:	06 c0       	rjmp	.+12     	; 0x27b0 <vfprintf+0x32e>
    27a4:	b2 14       	cp	r11, r2
    27a6:	80 f4       	brcc	.+32     	; 0x27c8 <vfprintf+0x346>
    27a8:	28 0c       	add	r2, r8
    27aa:	92 2c       	mov	r9, r2
    27ac:	9b 18       	sub	r9, r11
    27ae:	0d c0       	rjmp	.+26     	; 0x27ca <vfprintf+0x348>
    27b0:	b2 14       	cp	r11, r2
    27b2:	58 f4       	brcc	.+22     	; 0x27ca <vfprintf+0x348>
    27b4:	b6 01       	movw	r22, r12
    27b6:	80 e2       	ldi	r24, 0x20	; 32
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	76 d0       	rcall	.+236    	; 0x28a8 <fputc>
    27bc:	b3 94       	inc	r11
    27be:	f8 cf       	rjmp	.-16     	; 0x27b0 <vfprintf+0x32e>
    27c0:	b2 14       	cp	r11, r2
    27c2:	18 f4       	brcc	.+6      	; 0x27ca <vfprintf+0x348>
    27c4:	2b 18       	sub	r2, r11
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <vfprintf+0x34a>
    27c8:	98 2c       	mov	r9, r8
    27ca:	21 2c       	mov	r2, r1
    27cc:	a4 fe       	sbrs	r10, 4
    27ce:	0f c0       	rjmp	.+30     	; 0x27ee <vfprintf+0x36c>
    27d0:	b6 01       	movw	r22, r12
    27d2:	80 e3       	ldi	r24, 0x30	; 48
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	68 d0       	rcall	.+208    	; 0x28a8 <fputc>
    27d8:	a2 fe       	sbrs	r10, 2
    27da:	16 c0       	rjmp	.+44     	; 0x2808 <vfprintf+0x386>
    27dc:	a1 fc       	sbrc	r10, 1
    27de:	03 c0       	rjmp	.+6      	; 0x27e6 <vfprintf+0x364>
    27e0:	88 e7       	ldi	r24, 0x78	; 120
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <vfprintf+0x368>
    27e6:	88 e5       	ldi	r24, 0x58	; 88
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	b6 01       	movw	r22, r12
    27ec:	0c c0       	rjmp	.+24     	; 0x2806 <vfprintf+0x384>
    27ee:	8a 2d       	mov	r24, r10
    27f0:	86 78       	andi	r24, 0x86	; 134
    27f2:	51 f0       	breq	.+20     	; 0x2808 <vfprintf+0x386>
    27f4:	a1 fe       	sbrs	r10, 1
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <vfprintf+0x37a>
    27f8:	8b e2       	ldi	r24, 0x2B	; 43
    27fa:	01 c0       	rjmp	.+2      	; 0x27fe <vfprintf+0x37c>
    27fc:	80 e2       	ldi	r24, 0x20	; 32
    27fe:	a7 fc       	sbrc	r10, 7
    2800:	8d e2       	ldi	r24, 0x2D	; 45
    2802:	b6 01       	movw	r22, r12
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	50 d0       	rcall	.+160    	; 0x28a8 <fputc>
    2808:	89 14       	cp	r8, r9
    280a:	30 f4       	brcc	.+12     	; 0x2818 <vfprintf+0x396>
    280c:	b6 01       	movw	r22, r12
    280e:	80 e3       	ldi	r24, 0x30	; 48
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	4a d0       	rcall	.+148    	; 0x28a8 <fputc>
    2814:	9a 94       	dec	r9
    2816:	f8 cf       	rjmp	.-16     	; 0x2808 <vfprintf+0x386>
    2818:	8a 94       	dec	r8
    281a:	f3 01       	movw	r30, r6
    281c:	e8 0d       	add	r30, r8
    281e:	f1 1d       	adc	r31, r1
    2820:	80 81       	ld	r24, Z
    2822:	b6 01       	movw	r22, r12
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	40 d0       	rcall	.+128    	; 0x28a8 <fputc>
    2828:	81 10       	cpse	r8, r1
    282a:	f6 cf       	rjmp	.-20     	; 0x2818 <vfprintf+0x396>
    282c:	22 20       	and	r2, r2
    282e:	09 f4       	brne	.+2      	; 0x2832 <vfprintf+0x3b0>
    2830:	4e ce       	rjmp	.-868    	; 0x24ce <vfprintf+0x4c>
    2832:	b6 01       	movw	r22, r12
    2834:	80 e2       	ldi	r24, 0x20	; 32
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	37 d0       	rcall	.+110    	; 0x28a8 <fputc>
    283a:	2a 94       	dec	r2
    283c:	f7 cf       	rjmp	.-18     	; 0x282c <vfprintf+0x3aa>
    283e:	f6 01       	movw	r30, r12
    2840:	86 81       	ldd	r24, Z+6	; 0x06
    2842:	97 81       	ldd	r25, Z+7	; 0x07
    2844:	02 c0       	rjmp	.+4      	; 0x284a <vfprintf+0x3c8>
    2846:	8f ef       	ldi	r24, 0xFF	; 255
    2848:	9f ef       	ldi	r25, 0xFF	; 255
    284a:	2b 96       	adiw	r28, 0x0b	; 11
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	f8 94       	cli
    2850:	de bf       	out	0x3e, r29	; 62
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	cd bf       	out	0x3d, r28	; 61
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	1f 91       	pop	r17
    285c:	0f 91       	pop	r16
    285e:	ff 90       	pop	r15
    2860:	ef 90       	pop	r14
    2862:	df 90       	pop	r13
    2864:	cf 90       	pop	r12
    2866:	bf 90       	pop	r11
    2868:	af 90       	pop	r10
    286a:	9f 90       	pop	r9
    286c:	8f 90       	pop	r8
    286e:	7f 90       	pop	r7
    2870:	6f 90       	pop	r6
    2872:	5f 90       	pop	r5
    2874:	4f 90       	pop	r4
    2876:	3f 90       	pop	r3
    2878:	2f 90       	pop	r2
    287a:	08 95       	ret

0000287c <strnlen_P>:
    287c:	fc 01       	movw	r30, r24
    287e:	05 90       	lpm	r0, Z+
    2880:	61 50       	subi	r22, 0x01	; 1
    2882:	70 40       	sbci	r23, 0x00	; 0
    2884:	01 10       	cpse	r0, r1
    2886:	d8 f7       	brcc	.-10     	; 0x287e <strnlen_P+0x2>
    2888:	80 95       	com	r24
    288a:	90 95       	com	r25
    288c:	8e 0f       	add	r24, r30
    288e:	9f 1f       	adc	r25, r31
    2890:	08 95       	ret

00002892 <strnlen>:
    2892:	fc 01       	movw	r30, r24
    2894:	61 50       	subi	r22, 0x01	; 1
    2896:	70 40       	sbci	r23, 0x00	; 0
    2898:	01 90       	ld	r0, Z+
    289a:	01 10       	cpse	r0, r1
    289c:	d8 f7       	brcc	.-10     	; 0x2894 <strnlen+0x2>
    289e:	80 95       	com	r24
    28a0:	90 95       	com	r25
    28a2:	8e 0f       	add	r24, r30
    28a4:	9f 1f       	adc	r25, r31
    28a6:	08 95       	ret

000028a8 <fputc>:
    28a8:	0f 93       	push	r16
    28aa:	1f 93       	push	r17
    28ac:	cf 93       	push	r28
    28ae:	df 93       	push	r29
    28b0:	fb 01       	movw	r30, r22
    28b2:	23 81       	ldd	r18, Z+3	; 0x03
    28b4:	21 fd       	sbrc	r18, 1
    28b6:	03 c0       	rjmp	.+6      	; 0x28be <fputc+0x16>
    28b8:	8f ef       	ldi	r24, 0xFF	; 255
    28ba:	9f ef       	ldi	r25, 0xFF	; 255
    28bc:	2c c0       	rjmp	.+88     	; 0x2916 <fputc+0x6e>
    28be:	22 ff       	sbrs	r18, 2
    28c0:	16 c0       	rjmp	.+44     	; 0x28ee <fputc+0x46>
    28c2:	46 81       	ldd	r20, Z+6	; 0x06
    28c4:	57 81       	ldd	r21, Z+7	; 0x07
    28c6:	24 81       	ldd	r18, Z+4	; 0x04
    28c8:	35 81       	ldd	r19, Z+5	; 0x05
    28ca:	42 17       	cp	r20, r18
    28cc:	53 07       	cpc	r21, r19
    28ce:	44 f4       	brge	.+16     	; 0x28e0 <fputc+0x38>
    28d0:	a0 81       	ld	r26, Z
    28d2:	b1 81       	ldd	r27, Z+1	; 0x01
    28d4:	9d 01       	movw	r18, r26
    28d6:	2f 5f       	subi	r18, 0xFF	; 255
    28d8:	3f 4f       	sbci	r19, 0xFF	; 255
    28da:	31 83       	std	Z+1, r19	; 0x01
    28dc:	20 83       	st	Z, r18
    28de:	8c 93       	st	X, r24
    28e0:	26 81       	ldd	r18, Z+6	; 0x06
    28e2:	37 81       	ldd	r19, Z+7	; 0x07
    28e4:	2f 5f       	subi	r18, 0xFF	; 255
    28e6:	3f 4f       	sbci	r19, 0xFF	; 255
    28e8:	37 83       	std	Z+7, r19	; 0x07
    28ea:	26 83       	std	Z+6, r18	; 0x06
    28ec:	14 c0       	rjmp	.+40     	; 0x2916 <fputc+0x6e>
    28ee:	8b 01       	movw	r16, r22
    28f0:	ec 01       	movw	r28, r24
    28f2:	fb 01       	movw	r30, r22
    28f4:	00 84       	ldd	r0, Z+8	; 0x08
    28f6:	f1 85       	ldd	r31, Z+9	; 0x09
    28f8:	e0 2d       	mov	r30, r0
    28fa:	19 95       	eicall
    28fc:	89 2b       	or	r24, r25
    28fe:	e1 f6       	brne	.-72     	; 0x28b8 <fputc+0x10>
    2900:	d8 01       	movw	r26, r16
    2902:	16 96       	adiw	r26, 0x06	; 6
    2904:	8d 91       	ld	r24, X+
    2906:	9c 91       	ld	r25, X
    2908:	17 97       	sbiw	r26, 0x07	; 7
    290a:	01 96       	adiw	r24, 0x01	; 1
    290c:	17 96       	adiw	r26, 0x07	; 7
    290e:	9c 93       	st	X, r25
    2910:	8e 93       	st	-X, r24
    2912:	16 97       	sbiw	r26, 0x06	; 6
    2914:	ce 01       	movw	r24, r28
    2916:	df 91       	pop	r29
    2918:	cf 91       	pop	r28
    291a:	1f 91       	pop	r17
    291c:	0f 91       	pop	r16
    291e:	08 95       	ret

00002920 <__ultoa_invert>:
    2920:	fa 01       	movw	r30, r20
    2922:	aa 27       	eor	r26, r26
    2924:	28 30       	cpi	r18, 0x08	; 8
    2926:	51 f1       	breq	.+84     	; 0x297c <__ultoa_invert+0x5c>
    2928:	20 31       	cpi	r18, 0x10	; 16
    292a:	81 f1       	breq	.+96     	; 0x298c <__ultoa_invert+0x6c>
    292c:	e8 94       	clt
    292e:	6f 93       	push	r22
    2930:	6e 7f       	andi	r22, 0xFE	; 254
    2932:	6e 5f       	subi	r22, 0xFE	; 254
    2934:	7f 4f       	sbci	r23, 0xFF	; 255
    2936:	8f 4f       	sbci	r24, 0xFF	; 255
    2938:	9f 4f       	sbci	r25, 0xFF	; 255
    293a:	af 4f       	sbci	r26, 0xFF	; 255
    293c:	b1 e0       	ldi	r27, 0x01	; 1
    293e:	3e d0       	rcall	.+124    	; 0x29bc <__ultoa_invert+0x9c>
    2940:	b4 e0       	ldi	r27, 0x04	; 4
    2942:	3c d0       	rcall	.+120    	; 0x29bc <__ultoa_invert+0x9c>
    2944:	67 0f       	add	r22, r23
    2946:	78 1f       	adc	r23, r24
    2948:	89 1f       	adc	r24, r25
    294a:	9a 1f       	adc	r25, r26
    294c:	a1 1d       	adc	r26, r1
    294e:	68 0f       	add	r22, r24
    2950:	79 1f       	adc	r23, r25
    2952:	8a 1f       	adc	r24, r26
    2954:	91 1d       	adc	r25, r1
    2956:	a1 1d       	adc	r26, r1
    2958:	6a 0f       	add	r22, r26
    295a:	71 1d       	adc	r23, r1
    295c:	81 1d       	adc	r24, r1
    295e:	91 1d       	adc	r25, r1
    2960:	a1 1d       	adc	r26, r1
    2962:	20 d0       	rcall	.+64     	; 0x29a4 <__ultoa_invert+0x84>
    2964:	09 f4       	brne	.+2      	; 0x2968 <__ultoa_invert+0x48>
    2966:	68 94       	set
    2968:	3f 91       	pop	r19
    296a:	2a e0       	ldi	r18, 0x0A	; 10
    296c:	26 9f       	mul	r18, r22
    296e:	11 24       	eor	r1, r1
    2970:	30 19       	sub	r19, r0
    2972:	30 5d       	subi	r19, 0xD0	; 208
    2974:	31 93       	st	Z+, r19
    2976:	de f6       	brtc	.-74     	; 0x292e <__ultoa_invert+0xe>
    2978:	cf 01       	movw	r24, r30
    297a:	08 95       	ret
    297c:	46 2f       	mov	r20, r22
    297e:	47 70       	andi	r20, 0x07	; 7
    2980:	40 5d       	subi	r20, 0xD0	; 208
    2982:	41 93       	st	Z+, r20
    2984:	b3 e0       	ldi	r27, 0x03	; 3
    2986:	0f d0       	rcall	.+30     	; 0x29a6 <__ultoa_invert+0x86>
    2988:	c9 f7       	brne	.-14     	; 0x297c <__ultoa_invert+0x5c>
    298a:	f6 cf       	rjmp	.-20     	; 0x2978 <__ultoa_invert+0x58>
    298c:	46 2f       	mov	r20, r22
    298e:	4f 70       	andi	r20, 0x0F	; 15
    2990:	40 5d       	subi	r20, 0xD0	; 208
    2992:	4a 33       	cpi	r20, 0x3A	; 58
    2994:	18 f0       	brcs	.+6      	; 0x299c <__ultoa_invert+0x7c>
    2996:	49 5d       	subi	r20, 0xD9	; 217
    2998:	31 fd       	sbrc	r19, 1
    299a:	40 52       	subi	r20, 0x20	; 32
    299c:	41 93       	st	Z+, r20
    299e:	02 d0       	rcall	.+4      	; 0x29a4 <__ultoa_invert+0x84>
    29a0:	a9 f7       	brne	.-22     	; 0x298c <__ultoa_invert+0x6c>
    29a2:	ea cf       	rjmp	.-44     	; 0x2978 <__ultoa_invert+0x58>
    29a4:	b4 e0       	ldi	r27, 0x04	; 4
    29a6:	a6 95       	lsr	r26
    29a8:	97 95       	ror	r25
    29aa:	87 95       	ror	r24
    29ac:	77 95       	ror	r23
    29ae:	67 95       	ror	r22
    29b0:	ba 95       	dec	r27
    29b2:	c9 f7       	brne	.-14     	; 0x29a6 <__ultoa_invert+0x86>
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	61 05       	cpc	r22, r1
    29b8:	71 05       	cpc	r23, r1
    29ba:	08 95       	ret
    29bc:	9b 01       	movw	r18, r22
    29be:	ac 01       	movw	r20, r24
    29c0:	0a 2e       	mov	r0, r26
    29c2:	06 94       	lsr	r0
    29c4:	57 95       	ror	r21
    29c6:	47 95       	ror	r20
    29c8:	37 95       	ror	r19
    29ca:	27 95       	ror	r18
    29cc:	ba 95       	dec	r27
    29ce:	c9 f7       	brne	.-14     	; 0x29c2 <__ultoa_invert+0xa2>
    29d0:	62 0f       	add	r22, r18
    29d2:	73 1f       	adc	r23, r19
    29d4:	84 1f       	adc	r24, r20
    29d6:	95 1f       	adc	r25, r21
    29d8:	a0 1d       	adc	r26, r0
    29da:	08 95       	ret

000029dc <_exit>:
    29dc:	f8 94       	cli

000029de <__stop_program>:
    29de:	ff cf       	rjmp	.-2      	; 0x29de <__stop_program>

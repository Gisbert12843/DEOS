
DEOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014e  00800200  00002cce  00002d62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002cce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025a  0080034e  0080034e  00002eb0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002eb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006d8  00000000  00000000  00002f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000068dc  00000000  00000000  00003624  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024c2  00000000  00000000  00009f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003a47  00000000  00000000  0000c3c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001450  00000000  00000000  0000fe0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a71  00000000  00000000  0001125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000475b  00000000  00000000  00012ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000668  00000000  00000000  00017428  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ec c2       	rjmp	.+1496   	; 0x5da <__ctors_end>
       2:	00 00       	nop
       4:	1b c3       	rjmp	.+1590   	; 0x63c <__bad_interrupt>
       6:	00 00       	nop
       8:	19 c3       	rjmp	.+1586   	; 0x63c <__bad_interrupt>
       a:	00 00       	nop
       c:	17 c3       	rjmp	.+1582   	; 0x63c <__bad_interrupt>
       e:	00 00       	nop
      10:	15 c3       	rjmp	.+1578   	; 0x63c <__bad_interrupt>
      12:	00 00       	nop
      14:	13 c3       	rjmp	.+1574   	; 0x63c <__bad_interrupt>
      16:	00 00       	nop
      18:	11 c3       	rjmp	.+1570   	; 0x63c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0f c3       	rjmp	.+1566   	; 0x63c <__bad_interrupt>
      1e:	00 00       	nop
      20:	0d c3       	rjmp	.+1562   	; 0x63c <__bad_interrupt>
      22:	00 00       	nop
      24:	0b c3       	rjmp	.+1558   	; 0x63c <__bad_interrupt>
      26:	00 00       	nop
      28:	09 c3       	rjmp	.+1554   	; 0x63c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	07 c3       	rjmp	.+1550   	; 0x63c <__bad_interrupt>
      2e:	00 00       	nop
      30:	05 c3       	rjmp	.+1546   	; 0x63c <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <__vector_13>
      38:	01 c3       	rjmp	.+1538   	; 0x63c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ff c2       	rjmp	.+1534   	; 0x63c <__bad_interrupt>
      3e:	00 00       	nop
      40:	fd c2       	rjmp	.+1530   	; 0x63c <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__vector_17>
      48:	f9 c2       	rjmp	.+1522   	; 0x63c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f7 c2       	rjmp	.+1518   	; 0x63c <__bad_interrupt>
      4e:	00 00       	nop
      50:	f5 c2       	rjmp	.+1514   	; 0x63c <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_21>
      58:	f1 c2       	rjmp	.+1506   	; 0x63c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ef c2       	rjmp	.+1502   	; 0x63c <__bad_interrupt>
      5e:	00 00       	nop
      60:	ed c2       	rjmp	.+1498   	; 0x63c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__vector_25>
      68:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <__vector_26>
      6c:	e7 c2       	rjmp	.+1486   	; 0x63c <__bad_interrupt>
      6e:	00 00       	nop
      70:	e5 c2       	rjmp	.+1482   	; 0x63c <__bad_interrupt>
      72:	00 00       	nop
      74:	e3 c2       	rjmp	.+1478   	; 0x63c <__bad_interrupt>
      76:	00 00       	nop
      78:	e1 c2       	rjmp	.+1474   	; 0x63c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	df c2       	rjmp	.+1470   	; 0x63c <__bad_interrupt>
      7e:	00 00       	nop
      80:	dd c2       	rjmp	.+1466   	; 0x63c <__bad_interrupt>
      82:	00 00       	nop
      84:	db c2       	rjmp	.+1462   	; 0x63c <__bad_interrupt>
      86:	00 00       	nop
      88:	d9 c2       	rjmp	.+1458   	; 0x63c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d7 c2       	rjmp	.+1454   	; 0x63c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__vector_36>
      94:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__vector_37>
      98:	d1 c2       	rjmp	.+1442   	; 0x63c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cf c2       	rjmp	.+1438   	; 0x63c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	cd c2       	rjmp	.+1434   	; 0x63c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cb c2       	rjmp	.+1430   	; 0x63c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c9 c2       	rjmp	.+1426   	; 0x63c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c7 c2       	rjmp	.+1422   	; 0x63c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c5 c2       	rjmp	.+1418   	; 0x63c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c3 c2       	rjmp	.+1414   	; 0x63c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c1 c2       	rjmp	.+1410   	; 0x63c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	bf c2       	rjmp	.+1406   	; 0x63c <__bad_interrupt>
      be:	00 00       	nop
      c0:	bd c2       	rjmp	.+1402   	; 0x63c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bb c2       	rjmp	.+1398   	; 0x63c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b9 c2       	rjmp	.+1394   	; 0x63c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__vector_51>
      d0:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <__vector_52>
      d4:	b3 c2       	rjmp	.+1382   	; 0x63c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__vector_54>
      dc:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__vector_55>
      e0:	ad c2       	rjmp	.+1370   	; 0x63c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	96 08       	sbc	r9, r6
      e6:	97 08       	sbc	r9, r7
      e8:	97 08       	sbc	r9, r7
      ea:	97 08       	sbc	r9, r7
      ec:	97 08       	sbc	r9, r7
      ee:	97 08       	sbc	r9, r7
      f0:	97 08       	sbc	r9, r7
      f2:	97 08       	sbc	r9, r7
      f4:	97 08       	sbc	r9, r7
      f6:	97 08       	sbc	r9, r7
      f8:	97 08       	sbc	r9, r7
      fa:	97 08       	sbc	r9, r7
      fc:	97 08       	sbc	r9, r7
      fe:	97 08       	sbc	r9, r7
     100:	97 08       	sbc	r9, r7
     102:	97 08       	sbc	r9, r7
     104:	97 08       	sbc	r9, r7
     106:	97 08       	sbc	r9, r7
     108:	8e 08       	sbc	r8, r14
     10a:	97 08       	sbc	r9, r7
     10c:	97 08       	sbc	r9, r7
     10e:	97 08       	sbc	r9, r7
     110:	97 08       	sbc	r9, r7
     112:	97 08       	sbc	r9, r7
     114:	90 08       	sbc	r9, r0
     116:	97 08       	sbc	r9, r7
     118:	97 08       	sbc	r9, r7
     11a:	8c 08       	sbc	r8, r12
     11c:	97 08       	sbc	r9, r7
     11e:	97 08       	sbc	r9, r7
     120:	97 08       	sbc	r9, r7
     122:	97 08       	sbc	r9, r7
     124:	96 08       	sbc	r9, r6
     126:	97 08       	sbc	r9, r7
     128:	97 08       	sbc	r9, r7
     12a:	97 08       	sbc	r9, r7
     12c:	97 08       	sbc	r9, r7
     12e:	97 08       	sbc	r9, r7
     130:	97 08       	sbc	r9, r7
     132:	97 08       	sbc	r9, r7
     134:	97 08       	sbc	r9, r7
     136:	97 08       	sbc	r9, r7
     138:	97 08       	sbc	r9, r7
     13a:	97 08       	sbc	r9, r7
     13c:	92 08       	sbc	r9, r2
     13e:	97 08       	sbc	r9, r7
     140:	97 08       	sbc	r9, r7
     142:	97 08       	sbc	r9, r7
     144:	97 08       	sbc	r9, r7
     146:	94 08       	sbc	r9, r4
     148:	88 08       	sbc	r8, r8
     14a:	97 08       	sbc	r9, r7
     14c:	97 08       	sbc	r9, r7
     14e:	97 08       	sbc	r9, r7
     150:	97 08       	sbc	r9, r7
     152:	97 08       	sbc	r9, r7
     154:	8a 08       	sbc	r8, r10

00000156 <__trampolines_end>:
     156:	50 72       	andi	r21, 0x20	; 32
     158:	69 6e       	ori	r22, 0xE9	; 233
     15a:	74 69       	ori	r23, 0x94	; 148
     15c:	6e 67       	ori	r22, 0x7E	; 126
     15e:	20 74       	andi	r18, 0x40	; 64
     160:	6f 20       	and	r6, r15
     162:	4c 43       	sbci	r20, 0x3C	; 60
     164:	44 3a       	cpi	r20, 0xA4	; 164
     166:	20 25       	eor	r18, r0
     168:	73 0a       	sbc	r7, r19
	...

0000016b <__c.2499>:
     16b:	47 6f 74 6f 20 4c 43 44 3a 20 25 64 2c 20 25 64     Goto LCD: %d, %d
     17b:	0a 00                                               ..

0000017d <__c.2496>:
     17d:	43 6c 65 61 72 69 6e 67 20 4c 43 44 0a 00           Clearing LCD..

0000018b <__c.2493>:
     18b:	54 6f 67 67 6c 69 6e 67 20 4c 45 44 0a 00           Toggling LED..

00000199 <__c.2489>:
     199:	53 65 74 74 69 6e 67 20 4c 45 44 20 74 6f 20 25     Setting LED to %
     1a9:	64 0a 00                                            d..

000001ac <__c.2551>:
     1ac:	0a 46 72 61 6d 65 20 46 6f 6f 74 65 72 3a 0a 20     .Frame Footer:. 
     1bc:	20 e2 94 94 e2 94 80 20 43 68 65 63 6b 73 75 6d      ...... Checksum
     1cc:	3a 20 20 20 20 20 20 20 20 20 20 20 20 20 30 78     :             0x
     1dc:	25 30 32 58 0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     %02X.===========
     1ec:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     1fc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     20c:	3d 3d 3d 3d 3d 0a 0a 00                             =====...

00000214 <__c.2549>:
     214:	20 20 e2 94 94 e2 94 80 20 4e 6f 20 44 61 74 61       ...... No Data
     224:	0a 00                                               ..

00000226 <__c.2547>:
     226:	20 20 e2 94 94 e2 94 80 20 45 6e 64 20 6f 66 20       ...... End of 
     236:	44 61 74 61 0a 00                                   Data..

0000023c <__c.2542>:
     23c:	20 20 e2 94 9c e2 94 80 20 42 79 74 65 20 25 64       ...... Byte %d
     24c:	3a 20 30 78 25 30 32 58 0a 00                       : 0x%02X..

00000256 <__c.2539>:
     256:	0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     .===============
     266:	3d 20 25 73 20 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     = %s ===========
     276:	3d 3d 3d 3d 3d 0a 46 72 61 6d 65 20 48 65 61 64     =====.Frame Head
     286:	65 72 3a 0a 20 20 e2 94 9c e2 94 80 20 53 74 61     er:.  ...... Sta
     296:	72 74 20 46 6c 61 67 3a 20 20 20 20 20 20 20 20     rt Flag:        
     2a6:	20 20 20 30 78 25 30 34 58 0a 20 20 e2 94 9c e2        0x%04X.  ....
     2b6:	94 80 20 53 6f 75 72 63 65 20 41 64 64 72 65 73     .. Source Addres
     2c6:	73 3a 20 20 20 20 20 20 20 25 75 0a 20 20 e2 94     s:       %u.  ..
     2d6:	9c e2 94 80 20 44 65 73 74 69 6e 61 74 69 6f 6e     .... Destination
     2e6:	20 41 64 64 72 65 73 73 3a 20 20 25 75 0a 20 20      Address:  %u.  
     2f6:	e2 94 94 e2 94 80 20 4c 65 6e 67 74 68 3a 20 20     ...... Length:  
     306:	20 20 20 20 20 20 20 20 20 20 20 20 20 25 75 0a                  %u.
     316:	0a 49 6e 6e 65 72 20 46 72 61 6d 65 20 44 61 74     .Inner Frame Dat
     326:	61 3a 0a 00                                         a:..

0000032a <__c.2288>:
     32a:	43 61 6e 27 74 20 70 6f 70 20 66 72 6f 6d 20 65     Can't pop from e
     33a:	6d 70 74 79 20 72 65 61 64 79 20 71 75 65 75 65     mpty ready queue
	...

0000034b <__c.2283>:
     34b:	43 61 6e 27 74 20 70 75 73 68 20 6f 6e 20 66 75     Can't push on fu
     35b:	6c 6c 20 72 65 61 64 79 20 71 75 65 75 65 00        ll ready queue.

0000036a <__c.2073>:
     36a:	20 20 20 20 20 20 20 20 00                                  .

00000373 <__c.2289>:
     373:	5b 45 52 52 4f 52 5d 20 00                          [ERROR] .

0000037c <__c.2283>:
     37c:	20 53 74 61 63 6b 20 63 6f 6c 6c 69 64 65 73 20      Stack collides 
     38c:	77 69 74 68 20 67 6c 6f 62 61 6c 20 76 61 72 73     with global vars
	...

0000039d <__c.2281>:
     39d:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     3ad:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     3bd:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     3cd:	2d 2d 0a 00                                         --..

000003d1 <__c.2277>:
     3d1:	5b 49 4e 46 4f 5d 20 20 00                          [INFO]  .

000003da <__c.2279>:
     3da:	55 73 65 64 20 67 6c 6f 62 61 6c 20 76 61 72 73     Used global vars
     3ea:	3a 20 25 64 2f 25 64 20 62 79 74 65 73 00           : %d/%d bytes.

000003f8 <__c.2273>:
     3f8:	5b 49 4e 46 4f 5d 20 20 00                          [INFO]  .

00000401 <__c.2275>:
     401:	42 6f 6f 74 69 6e 67 20 44 45 4f 53 20 2e 2e 2e     Booting DEOS ...
	...

00000412 <__c.2271>:
     412:	0a 0a 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ..##############
     422:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
     432:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
     442:	23 23 23 23 0a 00                                   ####..

00000448 <__c.2269>:
     448:	42 6f 6f 74 69 6e 67 20 44 45 4f 53 20 2e 2e 2e     Booting DEOS ...
	...

00000459 <__c.2445>:
     459:	6f 73 5f 73 74 61 72 74 53 63 68 65 64 75 6c 65     os_startSchedule
     469:	72 28 29 20 74 65 72 6d 69 6e 61 74 65 64 20 61     r() terminated a
     479:	67 61 69 6e 73 74 20 61 6c 6c 20 6f 64 64 73 20     gainst all odds 
     489:	2d 20 73 63 61 72 79 20 73 74 75 66 66 2e 2e 2e     - scary stuff...
	...

0000049a <__c.2440>:
     49a:	54 68 65 72 65 20 69 73 20 6e 6f 20 69 64 6c 65     There is no idle
     4aa:	20 70 72 6f 63 00                                    proc.

000004b0 <__c.2418>:
     4b0:	6f 73 5f 65 78 65 63 28 29 20 2d 3e 20 00           os_exec() -> .

000004be <__c.2420>:
     4be:	4e 6f 20 66 72 65 65 20 73 6c 6f 74 20 61 76 61     No free slot ava
     4ce:	69 6c 61 62 6c 65 0a 00                             ilable..

000004d6 <__c.2384>:
     4d6:	43 68 65 63 6b 73 75 6d 20 6d 69 73 6d 61 74 63     Checksum mismatc
     4e6:	68 20 69 6e 20 70 72 6f 63 65 73 73 20 25 64 00     h in process %d.

000004f6 <__c.2378>:
     4f6:	53 74 61 63 6b 20 70 6f 69 6e 74 65 72 20 6f 75     Stack pointer ou
     506:	74 20 6f 66 20 62 6f 75 6e 64 73 20 69 6e 20 70     t of bounds in p
     516:	72 6f 63 65 73 73 20 25 64 00                       rocess %d.

00000520 <__c.2371>:
     520:	43 72 69 74 2e 20 53 65 63 74 69 6f 6e 20 20 20     Crit. Section   
     530:	75 6e 64 65 72 66 6c 6f 77 00                       underflow.

0000053a <__c.2365>:
     53a:	43 72 69 74 2e 20 53 65 63 74 69 6f 6e 20 20 20     Crit. Section   
     54a:	6f 76 65 72 66 6c 6f 77 00                          overflow.

00000553 <__c.2376>:
     553:	20 54 65 73 74 20 66 69 6e 69 73 68 65 64 00         Test finished.

00000562 <__c.2372>:
     562:	50 68 61 73 65 20 35 3a 20 20 72 65 66 65 72 2d     Phase 5:  refer-
     572:	65 6e 63 65 20 66 72 61 6d 65 20 00                 ence frame .

0000057e <__c.2370>:
     57e:	4f 4b 00                                            OK.

00000581 <__c.2368>:
     581:	20 20 20 20 2d 2d 3e 20 20 3c 2d 2d 00                  -->  <--.

0000058e <__c.2366>:
     58e:	50 68 61 73 65 20 34 3a 00                          Phase 4:.

00000597 <__c.2360>:
     597:	50 68 61 73 65 20 33 3a 00                          Phase 3:.

000005a0 <__c.2354>:
     5a0:	4c 45 44 20 4f 66 66 00                             LED Off.

000005a8 <__c.2348>:
     5a8:	4c 45 44 20 4f 6e 00                                LED On.

000005af <__c.2346>:
     5af:	50 68 61 73 65 20 32 3a 00                          Phase 2:.

000005b8 <__c.2340>:
     5b8:	4f 6e 62 6f 61 72 64 20 4c 45 44 00                 Onboard LED.

000005c4 <__c.2338>:
     5c4:	50 68 61 73 65 20 31 3a 20 54 6f 67 67 6c 65 00     Phase 1: Toggle.

000005d4 <__ctors_start>:
     5d4:	3c 0e       	add	r3, r28
     5d6:	0d 12       	cpse	r0, r29
     5d8:	1e 12       	cpse	r1, r30

000005da <__ctors_end>:
     5da:	11 24       	eor	r1, r1
     5dc:	1f be       	out	0x3f, r1	; 63
     5de:	cf ef       	ldi	r28, 0xFF	; 255
     5e0:	d1 e2       	ldi	r29, 0x21	; 33
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	cd bf       	out	0x3d, r28	; 61
     5e6:	00 e0       	ldi	r16, 0x00	; 0
     5e8:	0c bf       	out	0x3c, r16	; 60

000005ea <__do_copy_data>:
     5ea:	13 e0       	ldi	r17, 0x03	; 3
     5ec:	a0 e0       	ldi	r26, 0x00	; 0
     5ee:	b2 e0       	ldi	r27, 0x02	; 2
     5f0:	ee ec       	ldi	r30, 0xCE	; 206
     5f2:	fc e2       	ldi	r31, 0x2C	; 44
     5f4:	00 e0       	ldi	r16, 0x00	; 0
     5f6:	0b bf       	out	0x3b, r16	; 59
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <__do_copy_data+0x14>
     5fa:	07 90       	elpm	r0, Z+
     5fc:	0d 92       	st	X+, r0
     5fe:	ae 34       	cpi	r26, 0x4E	; 78
     600:	b1 07       	cpc	r27, r17
     602:	d9 f7       	brne	.-10     	; 0x5fa <__do_copy_data+0x10>

00000604 <__do_clear_bss>:
     604:	25 e0       	ldi	r18, 0x05	; 5
     606:	ae e4       	ldi	r26, 0x4E	; 78
     608:	b3 e0       	ldi	r27, 0x03	; 3
     60a:	01 c0       	rjmp	.+2      	; 0x60e <.do_clear_bss_start>

0000060c <.do_clear_bss_loop>:
     60c:	1d 92       	st	X+, r1

0000060e <.do_clear_bss_start>:
     60e:	a8 3a       	cpi	r26, 0xA8	; 168
     610:	b2 07       	cpc	r27, r18
     612:	e1 f7       	brne	.-8      	; 0x60c <.do_clear_bss_loop>

00000614 <__do_global_ctors>:
     614:	12 e0       	ldi	r17, 0x02	; 2
     616:	cd ee       	ldi	r28, 0xED	; 237
     618:	d2 e0       	ldi	r29, 0x02	; 2
     61a:	00 e0       	ldi	r16, 0x00	; 0
     61c:	06 c0       	rjmp	.+12     	; 0x62a <__do_global_ctors+0x16>
     61e:	21 97       	sbiw	r28, 0x01	; 1
     620:	01 09       	sbc	r16, r1
     622:	80 2f       	mov	r24, r16
     624:	fe 01       	movw	r30, r28
     626:	0e 94 41 13 	call	0x2682	; 0x2682 <__tablejump2__>
     62a:	ca 3e       	cpi	r28, 0xEA	; 234
     62c:	d1 07       	cpc	r29, r17
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	08 07       	cpc	r16, r24
     632:	a9 f7       	brne	.-22     	; 0x61e <__do_global_ctors+0xa>
     634:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <main>
     638:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <_exit>

0000063c <__bad_interrupt>:
     63c:	e1 cc       	rjmp	.-1598   	; 0x0 <__vectors>

0000063e <rfAdapter_init>:
 * \return True if the communication has been initialized
 */
uint8_t rfAdapter_isInitialized()
{
	return rfAdapter_initialized;
}
     63e:	24 d2       	rcall	.+1096   	; 0xa88 <serialAdapter_init>
     640:	84 b1       	in	r24, 0x04	; 4
     642:	80 68       	ori	r24, 0x80	; 128
     644:	84 b9       	out	0x04, r24	; 4
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <__data_end>
     64c:	08 95       	ret

0000064e <rfAdapter_worker>:
/*!
 *  Main task of adapter
 */
void rfAdapter_worker()
{
	serialAdapter_worker();
     64e:	a3 c2       	rjmp	.+1350   	; 0xb96 <serialAdapter_worker>
     650:	08 95       	ret

00000652 <rfAdapter_receiveSetLed>:
 *  \param data Payload of received frame
 */
void rfAdapter_receiveSetLed(cmd_setLed_t *data)
{
	// printf("rfAdapter_receiveSetLed()");
	if ((bool)data->enable)
     652:	fc 01       	movw	r30, r24
     654:	80 81       	ld	r24, Z
     656:	88 23       	and	r24, r24
     658:	21 f0       	breq	.+8      	; 0x662 <rfAdapter_receiveSetLed+0x10>
	{
		PORTB |= (1 << PB7); // on
     65a:	85 b1       	in	r24, 0x05	; 5
     65c:	80 68       	ori	r24, 0x80	; 128
     65e:	85 b9       	out	0x05, r24	; 5
     660:	08 95       	ret
	}
	else
	{
		PORTB &= ~(1 << PB7); // off
     662:	85 b1       	in	r24, 0x05	; 5
     664:	8f 77       	andi	r24, 0x7F	; 127
     666:	85 b9       	out	0x05, r24	; 5
     668:	08 95       	ret

0000066a <rfAdapter_receiveToggleLed>:
 *  Handler that's called when command CMD_TOGGLE_LED was received
 */
void rfAdapter_receiveToggleLed()
{
	// printf("rfAdapter_receiveToggleLed()");
	PORTB ^= (1 << PB7);
     66a:	85 b1       	in	r24, 0x05	; 5
     66c:	80 58       	subi	r24, 0x80	; 128
     66e:	85 b9       	out	0x05, r24	; 5
     670:	08 95       	ret

00000672 <rfAdapter_receiveLcdClear>:
 *  Handler that's called when command CMD_LCD_CLEAR was received
 */
void rfAdapter_receiveLcdClear()
{
	// printf("rfAdapter_receiveLcdClear()");
	lcd_clear();
     672:	e2 c4       	rjmp	.+2500   	; 0x1038 <lcd_clear>
     674:	08 95       	ret

00000676 <rfAdapter_receiveLcdGoto>:
 *  \param data Payload of received frame
 */
void rfAdapter_receiveLcdGoto(cmd_lcdGoto_t *data)
{
	// printf("rfAdapter_receiveLcdGoto()");
	lcd_goto(data->x, data->y);
     676:	fc 01       	movw	r30, r24
     678:	61 81       	ldd	r22, Z+1	; 0x01
     67a:	80 81       	ld	r24, Z
     67c:	f0 c4       	rjmp	.+2528   	; 0x105e <lcd_goto>
     67e:	08 95       	ret

00000680 <rfAdapter_receiveLcdPrint>:
 *  Handler that's called when command CMD_LCD_PRINT was received
 *
 *  \param data Payload of received frame
 */
void rfAdapter_receiveLcdPrint(cmd_lcdPrint_t *data)
{
     680:	0f 93       	push	r16
     682:	1f 93       	push	r17
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	a1 97       	sbiw	r28, 0x21	; 33
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
	// printf("rfAdapter_receiveLcdPrint()");
	if (data->length > 32)
     698:	fc 01       	movw	r30, r24
     69a:	40 81       	ld	r20, Z
     69c:	41 32       	cpi	r20, 0x21	; 33
     69e:	a8 f4       	brcc	.+42     	; 0x6ca <rfAdapter_receiveLcdPrint+0x4a>
     6a0:	8c 01       	movw	r16, r24
		return;

	char buffer[33];
	memcpy(buffer, data->message, data->length);
     6a2:	bc 01       	movw	r22, r24
     6a4:	6f 5f       	subi	r22, 0xFF	; 255
     6a6:	7f 4f       	sbci	r23, 0xFF	; 255
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	ce 01       	movw	r24, r28
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	0e 94 58 13 	call	0x26b0	; 0x26b0 <memcpy>
	buffer[data->length] = '\0';
     6b2:	f8 01       	movw	r30, r16
     6b4:	80 81       	ld	r24, Z
     6b6:	e1 e0       	ldi	r30, 0x01	; 1
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	ec 0f       	add	r30, r28
     6bc:	fd 1f       	adc	r31, r29
     6be:	e8 0f       	add	r30, r24
     6c0:	f1 1d       	adc	r31, r1
     6c2:	10 82       	st	Z, r1
	lcd_writeString(buffer);
     6c4:	ce 01       	movw	r24, r28
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	40 d5       	rcall	.+2688   	; 0x114a <lcd_writeString>
}
     6ca:	a1 96       	adiw	r28, 0x21	; 33
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	cd bf       	out	0x3d, r28	; 61
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	08 95       	ret

000006e0 <serialAdapter_processFrame>:
 *  Is called on command frame receive
 *
 *  \param frame Received frame
 */
void serialAdapter_processFrame(frame_t *frame)
{
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	fc 01       	movw	r30, r24

	if (frame->header.length > COMM_MAX_PAYLOAD_LENGTH + sizeof(uint8_t) || frame->header.length < sizeof(command_t))
     6ea:	94 81       	ldd	r25, Z+4	; 0x04
     6ec:	91 50       	subi	r25, 0x01	; 1
     6ee:	91 33       	cpi	r25, 0x31	; 49
     6f0:	08 f0       	brcs	.+2      	; 0x6f4 <serialAdapter_processFrame+0x14>
     6f2:	73 c0       	rjmp	.+230    	; 0x7da <serialAdapter_processFrame+0xfa>
     6f4:	ef 01       	movw	r28, r30
	{
		return;
	}

	printFrame(frame, "serialAdapter_processFrame");
     6f6:	69 e2       	ldi	r22, 0x29	; 41
     6f8:	72 e0       	ldi	r23, 0x02	; 2
     6fa:	cf 01       	movw	r24, r30
     6fc:	d6 d2       	rcall	.+1452   	; 0xcaa <printFrame>

	switch (frame->innerFrame.command)
     6fe:	8d 81       	ldd	r24, Y+5	; 0x05
     700:	80 31       	cpi	r24, 0x10	; 16
     702:	79 f1       	breq	.+94     	; 0x762 <serialAdapter_processFrame+0x82>
     704:	28 f4       	brcc	.+10     	; 0x710 <serialAdapter_processFrame+0x30>
     706:	81 30       	cpi	r24, 0x01	; 1
     708:	49 f0       	breq	.+18     	; 0x71c <serialAdapter_processFrame+0x3c>
     70a:	82 30       	cpi	r24, 0x02	; 2
     70c:	e1 f0       	breq	.+56     	; 0x746 <serialAdapter_processFrame+0x66>
     70e:	65 c0       	rjmp	.+202    	; 0x7da <serialAdapter_processFrame+0xfa>
     710:	81 31       	cpi	r24, 0x11	; 17
     712:	a1 f1       	breq	.+104    	; 0x77c <serialAdapter_processFrame+0x9c>
     714:	82 31       	cpi	r24, 0x12	; 18
     716:	09 f4       	brne	.+2      	; 0x71a <serialAdapter_processFrame+0x3a>
     718:	4a c0       	rjmp	.+148    	; 0x7ae <serialAdapter_processFrame+0xce>
     71a:	5f c0       	rjmp	.+190    	; 0x7da <serialAdapter_processFrame+0xfa>
	{
	case CMD_SET_LED:
	{
		if (frame->header.length - sizeof(command_t) != sizeof(cmd_setLed_t))
     71c:	8c 81       	ldd	r24, Y+4	; 0x04
     71e:	82 30       	cpi	r24, 0x02	; 2
     720:	09 f0       	breq	.+2      	; 0x724 <serialAdapter_processFrame+0x44>
     722:	5b c0       	rjmp	.+182    	; 0x7da <serialAdapter_processFrame+0xfa>
		{
			return;
		}
		else
		{
			printf_P(PSTR("Setting LED to %d\n"), ((cmd_setLed_t *)&(frame->innerFrame.payload))->enable);
     724:	8e 81       	ldd	r24, Y+6	; 0x06
     726:	1f 92       	push	r1
     728:	8f 93       	push	r24
     72a:	89 e9       	ldi	r24, 0x99	; 153
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	9f 93       	push	r25
     730:	8f 93       	push	r24
     732:	0e 94 83 13 	call	0x2706	; 0x2706 <printf_P>
			rfAdapter_receiveSetLed(((cmd_setLed_t *)&(frame->innerFrame.payload)));
     736:	ce 01       	movw	r24, r28
     738:	06 96       	adiw	r24, 0x06	; 6
     73a:	8b df       	rcall	.-234    	; 0x652 <rfAdapter_receiveSetLed>
		}
	}
	break;
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	4a c0       	rjmp	.+148    	; 0x7da <serialAdapter_processFrame+0xfa>
	case CMD_TOGGLE_LED:
	{
		if (frame->header.length - sizeof(command_t) != 0)
     746:	8c 81       	ldd	r24, Y+4	; 0x04
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	09 f0       	breq	.+2      	; 0x74e <serialAdapter_processFrame+0x6e>
     74c:	46 c0       	rjmp	.+140    	; 0x7da <serialAdapter_processFrame+0xfa>
		{
			return;
		}
		else
		{
			printf_P(PSTR("Toggling LED\n"));
     74e:	8b e8       	ldi	r24, 0x8B	; 139
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	9f 93       	push	r25
     754:	8f 93       	push	r24
     756:	0e 94 83 13 	call	0x2706	; 0x2706 <printf_P>
			rfAdapter_receiveToggleLed();
     75a:	87 df       	rcall	.-242    	; 0x66a <rfAdapter_receiveToggleLed>
		}
	}
	break;
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	3c c0       	rjmp	.+120    	; 0x7da <serialAdapter_processFrame+0xfa>

	case CMD_LCD_CLEAR:
	{
		if (frame->header.length - sizeof(command_t) != 0)
     762:	8c 81       	ldd	r24, Y+4	; 0x04
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	c9 f5       	brne	.+114    	; 0x7da <serialAdapter_processFrame+0xfa>
		{
			return;
		}
		else
		{
			printf_P(PSTR("Clearing LCD\n"));
     768:	8d e7       	ldi	r24, 0x7D	; 125
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	9f 93       	push	r25
     76e:	8f 93       	push	r24
     770:	0e 94 83 13 	call	0x2706	; 0x2706 <printf_P>
			rfAdapter_receiveLcdClear();
     774:	7e df       	rcall	.-260    	; 0x672 <rfAdapter_receiveLcdClear>
		}
	}
	break;
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	2f c0       	rjmp	.+94     	; 0x7da <serialAdapter_processFrame+0xfa>

	case CMD_LCD_GOTO:
	{
		if (frame->header.length - sizeof(command_t) != sizeof(cmd_lcdGoto_t))
     77c:	8c 81       	ldd	r24, Y+4	; 0x04
     77e:	83 30       	cpi	r24, 0x03	; 3
     780:	61 f5       	brne	.+88     	; 0x7da <serialAdapter_processFrame+0xfa>
		{
			return;
		}
		else
		{
			printf_P(PSTR("Goto LCD: %d, %d\n"), ((cmd_lcdGoto_t *)&(frame->innerFrame.payload))->x, ((cmd_lcdGoto_t *)&(frame->innerFrame.payload))->y);
     782:	9f 81       	ldd	r25, Y+7	; 0x07
     784:	8e 81       	ldd	r24, Y+6	; 0x06
     786:	1f 92       	push	r1
     788:	9f 93       	push	r25
     78a:	1f 92       	push	r1
     78c:	8f 93       	push	r24
     78e:	8b e6       	ldi	r24, 0x6B	; 107
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	9f 93       	push	r25
     794:	8f 93       	push	r24
     796:	0e 94 83 13 	call	0x2706	; 0x2706 <printf_P>
			rfAdapter_receiveLcdGoto((cmd_lcdGoto_t *)&(frame->innerFrame.payload));
     79a:	ce 01       	movw	r24, r28
     79c:	06 96       	adiw	r24, 0x06	; 6
     79e:	6b df       	rcall	.-298    	; 0x676 <rfAdapter_receiveLcdGoto>
		}
	}
	break;
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	16 c0       	rjmp	.+44     	; 0x7da <serialAdapter_processFrame+0xfa>

	case CMD_LCD_PRINT:
	{
		if (frame->header.length - sizeof(command_t) != sizeof(cmd_lcdPrint_t))
     7ae:	8c 81       	ldd	r24, Y+4	; 0x04
     7b0:	82 32       	cpi	r24, 0x22	; 34
     7b2:	99 f4       	brne	.+38     	; 0x7da <serialAdapter_processFrame+0xfa>
		{
			return;
		}
		else
		{
			printf_P(PSTR("Printing to LCD: %s\n"), ((cmd_lcdPrint_t *)&(frame->innerFrame.payload))->message);
     7b4:	8e 01       	movw	r16, r28
     7b6:	0a 5f       	subi	r16, 0xFA	; 250
     7b8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ba:	fe 01       	movw	r30, r28
     7bc:	37 96       	adiw	r30, 0x07	; 7
     7be:	ff 93       	push	r31
     7c0:	ef 93       	push	r30
     7c2:	86 e5       	ldi	r24, 0x56	; 86
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	9f 93       	push	r25
     7c8:	8f 93       	push	r24
     7ca:	0e 94 83 13 	call	0x2706	; 0x2706 <printf_P>
			rfAdapter_receiveLcdPrint((cmd_lcdPrint_t *)&(frame->innerFrame.payload));
     7ce:	c8 01       	movw	r24, r16
     7d0:	57 df       	rcall	.-338    	; 0x680 <rfAdapter_receiveLcdPrint>
		}
	}
	break;
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
	break;

	default:
		return;
	}
}
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	08 95       	ret

000007e4 <rfAdapter_sendSetLed>:
 *
 *  \param destAddr Where to send the frame
 *  \param enable Whether the receiver should enable or disable their led
 */
void rfAdapter_sendSetLed(address_t destAddr, bool enable)
{
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	e1 97       	sbiw	r28, 0x31	; 49
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	18 2f       	mov	r17, r24

	inner_frame_t inner_frame;
	inner_frame.command = CMD_SET_LED;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	89 83       	std	Y+1, r24	; 0x01
	inner_frame.payload[0] = enable;
     800:	6a 83       	std	Y+2, r22	; 0x02

	int size = sizeof(command_t) + sizeof(enable);

	printf("rfAdapter_sendSetLed() with size: %d\n",size );
     802:	1f 92       	push	r1
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	8f 93       	push	r24
     808:	84 e4       	ldi	r24, 0x44	; 68
     80a:	92 e0       	ldi	r25, 0x02	; 2
     80c:	9f 93       	push	r25
     80e:	8f 93       	push	r24
     810:	0e 94 70 13 	call	0x26e0	; 0x26e0 <printf>


	serialAdapter_writeFrame(destAddr, size, &inner_frame);
     814:	ae 01       	movw	r20, r28
     816:	4f 5f       	subi	r20, 0xFF	; 255
     818:	5f 4f       	sbci	r21, 0xFF	; 255
     81a:	62 e0       	ldi	r22, 0x02	; 2
     81c:	81 2f       	mov	r24, r17
     81e:	7b d1       	rcall	.+758    	; 0xb16 <serialAdapter_writeFrame>
}
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
     828:	e1 96       	adiw	r28, 0x31	; 49
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	08 95       	ret

0000083c <rfAdapter_sendToggleLed>:
 *  Sends a frame with command CMD_TOGGLE_LED
 *
 *  \param destAddr Where to send the frame
 */
void rfAdapter_sendToggleLed(address_t destAddr)
{
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
     846:	e1 97       	sbiw	r28, 0x31	; 49
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	de bf       	out	0x3e, r29	; 62
     84e:	0f be       	out	0x3f, r0	; 63
     850:	cd bf       	out	0x3d, r28	; 61
     852:	18 2f       	mov	r17, r24
	inner_frame_t inner_frame;
	inner_frame.command = CMD_TOGGLE_LED;
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	89 83       	std	Y+1, r24	; 0x01

	int size = sizeof(command_t);

	printf("rfAdapter_sendToggleLed() with size: %d\n", size);
     858:	1f 92       	push	r1
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	8f 93       	push	r24
     85e:	8a e6       	ldi	r24, 0x6A	; 106
     860:	92 e0       	ldi	r25, 0x02	; 2
     862:	9f 93       	push	r25
     864:	8f 93       	push	r24
     866:	0e 94 70 13 	call	0x26e0	; 0x26e0 <printf>

	serialAdapter_writeFrame(destAddr, size, &inner_frame);
     86a:	ae 01       	movw	r20, r28
     86c:	4f 5f       	subi	r20, 0xFF	; 255
     86e:	5f 4f       	sbci	r21, 0xFF	; 255
     870:	61 e0       	ldi	r22, 0x01	; 1
     872:	81 2f       	mov	r24, r17
     874:	50 d1       	rcall	.+672    	; 0xb16 <serialAdapter_writeFrame>
}
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	e1 96       	adiw	r28, 0x31	; 49
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	de bf       	out	0x3e, r29	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	cd bf       	out	0x3d, r28	; 61
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	08 95       	ret

00000892 <rfAdapter_sendLcdClear>:
 *  Sends a frame with command CMD_LCD_CLEAR
 *
 *  \param destAddr Where to send the frame
 */
void rfAdapter_sendLcdClear(address_t destAddr)
{
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	e1 97       	sbiw	r28, 0x31	; 49
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	18 2f       	mov	r17, r24
	inner_frame_t inner_frame;
	inner_frame.command = CMD_LCD_CLEAR;
     8aa:	80 e1       	ldi	r24, 0x10	; 16
     8ac:	89 83       	std	Y+1, r24	; 0x01

	int size = sizeof(command_t);

	printf("rfAdapter_sendLcdClear() with size: %d\n", size);
     8ae:	1f 92       	push	r1
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	8f 93       	push	r24
     8b4:	83 e9       	ldi	r24, 0x93	; 147
     8b6:	92 e0       	ldi	r25, 0x02	; 2
     8b8:	9f 93       	push	r25
     8ba:	8f 93       	push	r24
     8bc:	0e 94 70 13 	call	0x26e0	; 0x26e0 <printf>

	serialAdapter_writeFrame(destAddr,size, &inner_frame);
     8c0:	ae 01       	movw	r20, r28
     8c2:	4f 5f       	subi	r20, 0xFF	; 255
     8c4:	5f 4f       	sbci	r21, 0xFF	; 255
     8c6:	61 e0       	ldi	r22, 0x01	; 1
     8c8:	81 2f       	mov	r24, r17
     8ca:	25 d1       	rcall	.+586    	; 0xb16 <serialAdapter_writeFrame>
}
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	e1 96       	adiw	r28, 0x31	; 49
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17
     8e6:	08 95       	ret

000008e8 <rfAdapter_sendLcdGoto>:
 *  \param destAddr Where to send the frame
 *  \param x Which column should be selected by the receiver
 *  \param y Which row should be selected by the receiver
 */
void rfAdapter_sendLcdGoto(address_t destAddr, uint8_t x, uint8_t y)
{
     8e8:	1f 93       	push	r17
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	e1 97       	sbiw	r28, 0x31	; 49
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	de bf       	out	0x3e, r29	; 62
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	cd bf       	out	0x3d, r28	; 61
     8fe:	18 2f       	mov	r17, r24
	inner_frame_t inner_frame;
	inner_frame.command = CMD_LCD_GOTO;
     900:	81 e1       	ldi	r24, 0x11	; 17
     902:	89 83       	std	Y+1, r24	; 0x01

	cmd_lcdGoto_t cmd;
	cmd.x = x;
	cmd.y = y;
	memcpy(&inner_frame.payload, &cmd, sizeof(cmd));
     904:	6a 83       	std	Y+2, r22	; 0x02
     906:	4b 83       	std	Y+3, r20	; 0x03

	int size = sizeof(sizeof(command_t) + sizeof(cmd_lcdGoto_t));

	printf("rfAdapter_sendLcdGoto() with size: %d\n", size);
     908:	1f 92       	push	r1
     90a:	82 e0       	ldi	r24, 0x02	; 2
     90c:	8f 93       	push	r24
     90e:	8b eb       	ldi	r24, 0xBB	; 187
     910:	92 e0       	ldi	r25, 0x02	; 2
     912:	9f 93       	push	r25
     914:	8f 93       	push	r24
     916:	0e 94 70 13 	call	0x26e0	; 0x26e0 <printf>

	serialAdapter_writeFrame(destAddr, size, &inner_frame);
     91a:	ae 01       	movw	r20, r28
     91c:	4f 5f       	subi	r20, 0xFF	; 255
     91e:	5f 4f       	sbci	r21, 0xFF	; 255
     920:	62 e0       	ldi	r22, 0x02	; 2
     922:	81 2f       	mov	r24, r17
     924:	f8 d0       	rcall	.+496    	; 0xb16 <serialAdapter_writeFrame>
}
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	e1 96       	adiw	r28, 0x31	; 49
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	de bf       	out	0x3e, r29	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	08 95       	ret

00000942 <rfAdapter_sendLcdPrint>:
 *
 *  \param destAddr Where to send the frame
 *  \param message Which message should be printed on receiver side
 */
void rfAdapter_sendLcdPrint(address_t destAddr, const char *message)
{
     942:	ff 92       	push	r15
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
     950:	c2 55       	subi	r28, 0x52	; 82
     952:	d1 09       	sbc	r29, r1
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
     95e:	f8 2e       	mov	r15, r24
	// printf("rfAdapter_sendLcdPrint()");
	inner_frame_t inner_frame;
	inner_frame.command = CMD_LCD_PRINT;
     960:	82 e1       	ldi	r24, 0x12	; 18
     962:	89 83       	std	Y+1, r24	; 0x01

	cmd_lcdPrint_t cmd;
	cmd.length = strlen(message);
     964:	fb 01       	movw	r30, r22
     966:	01 90       	ld	r0, Z+
     968:	00 20       	and	r0, r0
     96a:	e9 f7       	brne	.-6      	; 0x966 <rfAdapter_sendLcdPrint+0x24>
     96c:	31 97       	sbiw	r30, 0x01	; 1
     96e:	e6 1b       	sub	r30, r22
     970:	f7 0b       	sbc	r31, r23
     972:	ea ab       	std	Y+50, r30	; 0x32
	if (cmd.length > 32)
     974:	e1 32       	cpi	r30, 0x21	; 33
     976:	10 f0       	brcs	.+4      	; 0x97c <rfAdapter_sendLcdPrint+0x3a>
		cmd.length = 32;
     978:	80 e2       	ldi	r24, 0x20	; 32
     97a:	8a ab       	std	Y+50, r24	; 0x32

	strncpy(cmd.message, message, cmd.length);
     97c:	0a a9       	ldd	r16, Y+50	; 0x32
     97e:	10 e0       	ldi	r17, 0x00	; 0
     980:	a8 01       	movw	r20, r16
     982:	ce 01       	movw	r24, r28
     984:	c3 96       	adiw	r24, 0x33	; 51
     986:	0e 94 61 13 	call	0x26c2	; 0x26c2 <strncpy>
	cmd.message[cmd.length] = '\0';
     98a:	e3 e3       	ldi	r30, 0x33	; 51
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	ec 0f       	add	r30, r28
     990:	fd 1f       	adc	r31, r29
     992:	e0 0f       	add	r30, r16
     994:	f1 1f       	adc	r31, r17
     996:	10 82       	st	Z, r1

	memcpy(inner_frame.payload, &cmd, sizeof(cmd));
     998:	81 e2       	ldi	r24, 0x21	; 33
     99a:	fe 01       	movw	r30, r28
     99c:	f2 96       	adiw	r30, 0x32	; 50
     99e:	de 01       	movw	r26, r28
     9a0:	12 96       	adiw	r26, 0x02	; 2
     9a2:	01 90       	ld	r0, Z+
     9a4:	0d 92       	st	X+, r0
     9a6:	8a 95       	dec	r24
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <rfAdapter_sendLcdPrint+0x60>

	int size = sizeof(command_t) + sizeof(cmd_lcdPrint_t);

	printf("rfAdapter_sendLcdPrint() with size: %d\n", size);
     9aa:	1f 92       	push	r1
     9ac:	82 e2       	ldi	r24, 0x22	; 34
     9ae:	8f 93       	push	r24
     9b0:	82 ee       	ldi	r24, 0xE2	; 226
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	9f 93       	push	r25
     9b6:	8f 93       	push	r24
     9b8:	0e 94 70 13 	call	0x26e0	; 0x26e0 <printf>

	serialAdapter_writeFrame(destAddr, size, &inner_frame);
     9bc:	ae 01       	movw	r20, r28
     9be:	4f 5f       	subi	r20, 0xFF	; 255
     9c0:	5f 4f       	sbci	r21, 0xFF	; 255
     9c2:	62 e2       	ldi	r22, 0x22	; 34
     9c4:	8f 2d       	mov	r24, r15
     9c6:	a7 d0       	rcall	.+334    	; 0xb16 <serialAdapter_writeFrame>
}
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	ce 5a       	subi	r28, 0xAE	; 174
     9d2:	df 4f       	sbci	r29, 0xFF	; 255
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	08 95       	ret

000009ea <rfAdapter_sendLcdPrintProcMem>:
 *
 *  \param destAddr Where to send the frame
 *  \param message Which message should be printed on receiver side as address to program memory. Use PSTR for creating strings on program memory
 */
void rfAdapter_sendLcdPrintProcMem(address_t destAddr, const char *message)
{
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	e1 97       	sbiw	r28, 0x31	; 49
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	cd bf       	out	0x3d, r28	; 61
     a00:	18 2f       	mov	r17, r24
	inner_frame_t inner_frame;
	inner_frame.command = CMD_LCD_PRINT;
     a02:	82 e1       	ldi	r24, 0x12	; 18
     a04:	89 83       	std	Y+1, r24	; 0x01

	printf("rfAdapter_sendLcdPrintProcMem() with size: %d\n", sizeof(inner_frame));
     a06:	1f 92       	push	r1
     a08:	81 e3       	ldi	r24, 0x31	; 49
     a0a:	8f 93       	push	r24
     a0c:	8a e0       	ldi	r24, 0x0A	; 10
     a0e:	93 e0       	ldi	r25, 0x03	; 3
     a10:	9f 93       	push	r25
     a12:	8f 93       	push	r24
     a14:	0e 94 70 13 	call	0x26e0	; 0x26e0 <printf>

	// Send the frame
	serialAdapter_writeFrame(destAddr, sizeof(inner_frame), &inner_frame);
     a18:	ae 01       	movw	r20, r28
     a1a:	4f 5f       	subi	r20, 0xFF	; 255
     a1c:	5f 4f       	sbci	r21, 0xFF	; 255
     a1e:	61 e3       	ldi	r22, 0x31	; 49
     a20:	81 2f       	mov	r24, r17
     a22:	79 d0       	rcall	.+242    	; 0xb16 <serialAdapter_writeFrame>
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	e1 96       	adiw	r28, 0x31	; 49
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	08 95       	ret

00000a40 <serialAdapter_hasTimeout>:
{
	while (xbee_getNumberOfBytesReceived() == 0)
	{
		os_yield();
	}
}
     a40:	8f 92       	push	r8
     a42:	9f 92       	push	r9
     a44:	af 92       	push	r10
     a46:	bf 92       	push	r11
     a48:	cf 92       	push	r12
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	4b 01       	movw	r8, r22
     a52:	5c 01       	movw	r10, r24
     a54:	69 01       	movw	r12, r18
     a56:	7a 01       	movw	r14, r20
     a58:	73 d7       	rcall	.+3814   	; 0x1940 <getSystemTime_ms>
     a5a:	dc 01       	movw	r26, r24
     a5c:	cb 01       	movw	r24, r22
     a5e:	88 19       	sub	r24, r8
     a60:	99 09       	sbc	r25, r9
     a62:	aa 09       	sbc	r26, r10
     a64:	bb 09       	sbc	r27, r11
     a66:	21 e0       	ldi	r18, 0x01	; 1
     a68:	8c 15       	cp	r24, r12
     a6a:	9d 05       	cpc	r25, r13
     a6c:	ae 05       	cpc	r26, r14
     a6e:	bf 05       	cpc	r27, r15
     a70:	08 f4       	brcc	.+2      	; 0xa74 <serialAdapter_hasTimeout+0x34>
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	82 2f       	mov	r24, r18
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	df 90       	pop	r13
     a7c:	cf 90       	pop	r12
     a7e:	bf 90       	pop	r11
     a80:	af 90       	pop	r10
     a82:	9f 90       	pop	r9
     a84:	8f 90       	pop	r8
     a86:	08 95       	ret

00000a88 <serialAdapter_init>:
/*!
 *  Initializes the serialAdapter and their dependencies
 */
void serialAdapter_init(void)
{
	xbee_init();
     a88:	73 c1       	rjmp	.+742    	; 0xd70 <xbee_init>
     a8a:	08 95       	ret

00000a8c <serialAdapter_waitForData>:
 *  \param byteCount Count of bytes that need to arrive so that the function will unblock
 *  \param frameTimestamp Start time of the first byte arrived from which the timeout will be calculated on
 *  \return False when it times out.
 */
bool serialAdapter_waitForData(uint16_t byteCount, time_t frameTimestamp)
{
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
     a9a:	6a 01       	movw	r12, r20
     a9c:	7b 01       	movw	r14, r22
	int i = xbee_getNumberOfBytesReceived();
     a9e:	b3 d1       	rcall	.+870    	; 0xe06 <xbee_getNumberOfBytesReceived>

	while (i < byteCount)
     aa0:	0c c0       	rjmp	.+24     	; 0xaba <serialAdapter_waitForData+0x2e>
	{
		if (serialAdapter_hasTimeout(frameTimestamp, SERIAL_ADAPTER_READ_TIMEOUT_MS))
     aa2:	24 ef       	ldi	r18, 0xF4	; 244
     aa4:	31 e0       	ldi	r19, 0x01	; 1
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	c7 01       	movw	r24, r14
     aac:	b6 01       	movw	r22, r12
     aae:	c8 df       	rcall	.-112    	; 0xa40 <serialAdapter_hasTimeout>
     ab0:	81 11       	cpse	r24, r1
     ab2:	08 c0       	rjmp	.+16     	; 0xac4 <serialAdapter_waitForData+0x38>
			return false;
		else
			os_yield();
     ab4:	0e 94 bf 10 	call	0x217e	; 0x217e <os_yield>
		i = xbee_getNumberOfBytesReceived();
     ab8:	a6 d1       	rcall	.+844    	; 0xe06 <xbee_getNumberOfBytesReceived>
 */
bool serialAdapter_waitForData(uint16_t byteCount, time_t frameTimestamp)
{
	int i = xbee_getNumberOfBytesReceived();

	while (i < byteCount)
     aba:	8c 17       	cp	r24, r28
     abc:	9d 07       	cpc	r25, r29
     abe:	88 f3       	brcs	.-30     	; 0xaa2 <serialAdapter_waitForData+0x16>
			return false;
		else
			os_yield();
		i = xbee_getNumberOfBytesReceived();
	}
	return true;
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	01 c0       	rjmp	.+2      	; 0xac6 <serialAdapter_waitForData+0x3a>
	int i = xbee_getNumberOfBytesReceived();

	while (i < byteCount)
	{
		if (serialAdapter_hasTimeout(frameTimestamp, SERIAL_ADAPTER_READ_TIMEOUT_MS))
			return false;
     ac4:	80 e0       	ldi	r24, 0x00	; 0
		else
			os_yield();
		i = xbee_getNumberOfBytesReceived();
	}
	return true;
}
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
     ace:	df 90       	pop	r13
     ad0:	cf 90       	pop	r12
     ad2:	08 95       	ret

00000ad4 <serialAdapter_calculateChecksum>:
 *  \param checksum pointer to a checksum that will be updated
 *  \param data buffer on which the checksum will be calculated
 *  \param length size of the given buffer
 */
void serialAdapter_calculateChecksum(checksum_t *checksum, void *data, uint8_t length)
{
     ad4:	fc 01       	movw	r30, r24
	for (uint8_t i = 0; i < length; i++)
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	08 c0       	rjmp	.+16     	; 0xaea <serialAdapter_calculateChecksum+0x16>
	{
		*checksum ^= ((uint8_t *)data)[i];
     ada:	db 01       	movw	r26, r22
     adc:	a9 0f       	add	r26, r25
     ade:	b1 1d       	adc	r27, r1
     ae0:	2c 91       	ld	r18, X
     ae2:	80 81       	ld	r24, Z
     ae4:	28 27       	eor	r18, r24
     ae6:	20 83       	st	Z, r18
 *  \param data buffer on which the checksum will be calculated
 *  \param length size of the given buffer
 */
void serialAdapter_calculateChecksum(checksum_t *checksum, void *data, uint8_t length)
{
	for (uint8_t i = 0; i < length; i++)
     ae8:	9f 5f       	subi	r25, 0xFF	; 255
     aea:	94 17       	cp	r25, r20
     aec:	b0 f3       	brcs	.-20     	; 0xada <serialAdapter_calculateChecksum+0x6>
	{
		*checksum ^= ((uint8_t *)data)[i];
	}
}
     aee:	08 95       	ret

00000af0 <serialAdapter_calculateFrameChecksum>:
 *
 *  \param checksum pointer to a checksum that will be updated
 *  \param frame data on which the checksum will be calculated
 */
void serialAdapter_calculateFrameChecksum(checksum_t *checksum, frame_t *frame)
{
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	8c 01       	movw	r16, r24
     afa:	eb 01       	movw	r28, r22
	serialAdapter_calculateChecksum(checksum, &frame->header, sizeof(frame->header));
     afc:	45 e0       	ldi	r20, 0x05	; 5
     afe:	ea df       	rcall	.-44     	; 0xad4 <serialAdapter_calculateChecksum>
	serialAdapter_calculateChecksum(checksum, &frame->innerFrame, frame->header.length);
     b00:	be 01       	movw	r22, r28
     b02:	6b 5f       	subi	r22, 0xFB	; 251
     b04:	7f 4f       	sbci	r23, 0xFF	; 255
     b06:	4c 81       	ldd	r20, Y+4	; 0x04
     b08:	c8 01       	movw	r24, r16
     b0a:	e4 df       	rcall	.-56     	; 0xad4 <serialAdapter_calculateChecksum>
}
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	08 95       	ret

00000b16 <serialAdapter_writeFrame>:
 *  \param destAddr where to send the frame to
 *  \param length how many bytes the innerFrame has
 *  \param innerFrame buffer as payload of the frame
 */
void serialAdapter_writeFrame(address_t destAddr, inner_frame_length_t length, inner_frame_t *innerFrame)
{
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	e7 97       	sbiw	r28, 0x37	; 55
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	f8 94       	cli
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	cd bf       	out	0x3d, r28	; 61
     b30:	f6 2e       	mov	r15, r22
     b32:	8a 01       	movw	r16, r20
	// Prepare frame
	frame_t newFrame;

	newFrame.header.destAddr = destAddr;
     b34:	8c 83       	std	Y+4, r24	; 0x04
	newFrame.header.length = length;
     b36:	6d 83       	std	Y+5, r22	; 0x05
	newFrame.header.srcAddr = serialAdapter_address;
     b38:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     b3c:	8b 83       	std	Y+3, r24	; 0x03
	newFrame.header.startFlag = serialAdapter_startFlag;
     b3e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <serialAdapter_startFlag>
     b42:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <serialAdapter_startFlag+0x1>
     b46:	9a 83       	std	Y+2, r25	; 0x02
     b48:	89 83       	std	Y+1, r24	; 0x01


	newFrame.footer.checksum = INITIAL_CHECKSUM_VALUE;
     b4a:	1f aa       	std	Y+55, r1	; 0x37

	newFrame.header = newFrame.header;
	newFrame.innerFrame = *innerFrame;
     b4c:	81 e3       	ldi	r24, 0x31	; 49
     b4e:	fa 01       	movw	r30, r20
     b50:	de 01       	movw	r26, r28
     b52:	16 96       	adiw	r26, 0x06	; 6
     b54:	01 90       	ld	r0, Z+
     b56:	0d 92       	st	X+, r0
     b58:	8a 95       	dec	r24
     b5a:	e1 f7       	brne	.-8      	; 0xb54 <serialAdapter_writeFrame+0x3e>
	newFrame.footer = newFrame.footer;

	serialAdapter_calculateFrameChecksum(&newFrame.footer.checksum, &newFrame);
     b5c:	be 01       	movw	r22, r28
     b5e:	6f 5f       	subi	r22, 0xFF	; 255
     b60:	7f 4f       	sbci	r23, 0xFF	; 255
     b62:	ce 01       	movw	r24, r28
     b64:	c7 96       	adiw	r24, 0x37	; 55
     b66:	c4 df       	rcall	.-120    	; 0xaf0 <serialAdapter_calculateFrameChecksum>

	xbee_writeData(&newFrame.header, sizeof(newFrame.header));
     b68:	65 e0       	ldi	r22, 0x05	; 5
     b6a:	ce 01       	movw	r24, r28
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	06 d1       	rcall	.+524    	; 0xd7c <xbee_writeData>
	xbee_writeData(innerFrame, length);
     b70:	6f 2d       	mov	r22, r15
     b72:	c8 01       	movw	r24, r16
     b74:	03 d1       	rcall	.+518    	; 0xd7c <xbee_writeData>
	xbee_writeData(&newFrame.footer, sizeof(newFrame.footer));
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	ce 01       	movw	r24, r28
     b7a:	c7 96       	adiw	r24, 0x37	; 55
     b7c:	ff d0       	rcall	.+510    	; 0xd7c <xbee_writeData>
}
     b7e:	e7 96       	adiw	r28, 0x37	; 55
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	08 95       	ret

00000b96 <serialAdapter_worker>:
/*!
 *  Reads incoming data and processes it. Needs to be called periodically.
 *  Don't read from UART in any other process while this is running.
 */
void serialAdapter_worker()
{
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	ea 97       	sbiw	r28, 0x3a	; 58
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
	if (!serialAdapter_waitForData(sizeof(start_flag_t), getSystemTime_ms()))
     baa:	ca d6       	rcall	.+3476   	; 0x1940 <getSystemTime_ms>
     bac:	ab 01       	movw	r20, r22
     bae:	bc 01       	movw	r22, r24
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	6b df       	rcall	.-298    	; 0xa8c <serialAdapter_waitForData>
     bb6:	88 23       	and	r24, r24
     bb8:	09 f4       	brne	.+2      	; 0xbbc <serialAdapter_worker+0x26>
     bba:	6e c0       	rjmp	.+220    	; 0xc98 <serialAdapter_worker+0x102>
	}

	// Parse header one by one, abort if first byte is not part of the start flag
	uint8_t flag_buffer[sizeof(start_flag_t)];

	if (xbee_readBuffer(&flag_buffer[0], 1) != XBEE_SUCCESS)
     bbc:	61 e0       	ldi	r22, 0x01	; 1
     bbe:	ce 01       	movw	r24, r28
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	23 d1       	rcall	.+582    	; 0xe0a <xbee_readBuffer>
     bc4:	81 11       	cpse	r24, r1
     bc6:	68 c0       	rjmp	.+208    	; 0xc98 <serialAdapter_worker+0x102>
	{
		return;
	}
	if (xbee_readBuffer(&flag_buffer[1], 1) != XBEE_SUCCESS)
     bc8:	61 e0       	ldi	r22, 0x01	; 1
     bca:	ce 01       	movw	r24, r28
     bcc:	02 96       	adiw	r24, 0x02	; 2
     bce:	1d d1       	rcall	.+570    	; 0xe0a <xbee_readBuffer>
     bd0:	81 11       	cpse	r24, r1
     bd2:	62 c0       	rjmp	.+196    	; 0xc98 <serialAdapter_worker+0x102>
	{
		return;
	}

	if (flag_buffer[0] != (serialAdapter_startFlag & 0xFF))
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <serialAdapter_startFlag>
     bdc:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <serialAdapter_startFlag+0x1>
     be0:	a9 01       	movw	r20, r18
     be2:	55 27       	eor	r21, r21
     be4:	84 17       	cp	r24, r20
     be6:	95 07       	cpc	r25, r21
     be8:	09 f0       	breq	.+2      	; 0xbec <serialAdapter_worker+0x56>
     bea:	56 c0       	rjmp	.+172    	; 0xc98 <serialAdapter_worker+0x102>
		return;
	if (flag_buffer[1] != ((serialAdapter_startFlag >> 8) & 0xFF))
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	23 2f       	mov	r18, r19
     bf2:	33 27       	eor	r19, r19
     bf4:	82 17       	cp	r24, r18
     bf6:	93 07       	cpc	r25, r19
     bf8:	09 f0       	breq	.+2      	; 0xbfc <serialAdapter_worker+0x66>
		return;

	// Wait for arrival of complete header

	if (!serialAdapter_waitForData(sizeof(frame_header_t) - (sizeof(start_flag_t)), getSystemTime_ms()))
     bfa:	4e c0       	rjmp	.+156    	; 0xc98 <serialAdapter_worker+0x102>
     bfc:	a1 d6       	rcall	.+3394   	; 0x1940 <getSystemTime_ms>
     bfe:	ab 01       	movw	r20, r22
     c00:	bc 01       	movw	r22, r24
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	42 df       	rcall	.-380    	; 0xa8c <serialAdapter_waitForData>
     c08:	88 23       	and	r24, r24
     c0a:	09 f4       	brne	.+2      	; 0xc0e <serialAdapter_worker+0x78>
     c0c:	45 c0       	rjmp	.+138    	; 0xc98 <serialAdapter_worker+0x102>
	}


	frame_t received_frame;

	received_frame.header.startFlag = serialAdapter_startFlag;
     c0e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <serialAdapter_startFlag>
     c12:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <serialAdapter_startFlag+0x1>
     c16:	9c 83       	std	Y+4, r25	; 0x04

	int err;
	err = xbee_readBuffer((uint8_t *)&received_frame.header.srcAddr, sizeof(received_frame.header.srcAddr));
     c18:	8b 83       	std	Y+3, r24	; 0x03
     c1a:	61 e0       	ldi	r22, 0x01	; 1
     c1c:	ce 01       	movw	r24, r28
     c1e:	05 96       	adiw	r24, 0x05	; 5
	if (err != XBEE_SUCCESS)
     c20:	f4 d0       	rcall	.+488    	; 0xe0a <xbee_readBuffer>
     c22:	81 11       	cpse	r24, r1
	{
		return;
	}

	err = xbee_readBuffer((uint8_t *)&received_frame.header.destAddr, sizeof(received_frame.header.destAddr));
     c24:	39 c0       	rjmp	.+114    	; 0xc98 <serialAdapter_worker+0x102>
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	ce 01       	movw	r24, r28
     c2a:	06 96       	adiw	r24, 0x06	; 6
	if (err != XBEE_SUCCESS)
     c2c:	ee d0       	rcall	.+476    	; 0xe0a <xbee_readBuffer>
     c2e:	81 11       	cpse	r24, r1
	{
		return;
	}

	err = xbee_readBuffer((uint8_t *)&received_frame.header.length, sizeof(received_frame.header.length));
     c30:	33 c0       	rjmp	.+102    	; 0xc98 <serialAdapter_worker+0x102>
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	ce 01       	movw	r24, r28
     c36:	07 96       	adiw	r24, 0x07	; 7
	if (err != XBEE_SUCCESS)
     c38:	e8 d0       	rcall	.+464    	; 0xe0a <xbee_readBuffer>
     c3a:	81 11       	cpse	r24, r1





	if (received_frame.header.length > COMM_MAX_INNER_FRAME_LENGTH)
     c3c:	2d c0       	rjmp	.+90     	; 0xc98 <serialAdapter_worker+0x102>
     c3e:	8f 81       	ldd	r24, Y+7	; 0x07
		return;

	// Wait for complete inner frame and footer
	if (!serialAdapter_waitForData(received_frame.header.length + sizeof(frame_footer_t), getSystemTime_ms()))
     c40:	82 33       	cpi	r24, 0x32	; 50
     c42:	50 f5       	brcc	.+84     	; 0xc98 <serialAdapter_worker+0x102>
     c44:	7d d6       	rcall	.+3322   	; 0x1940 <getSystemTime_ms>
     c46:	ab 01       	movw	r20, r22
     c48:	bc 01       	movw	r22, r24
     c4a:	8f 81       	ldd	r24, Y+7	; 0x07
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	1d df       	rcall	.-454    	; 0xa8c <serialAdapter_waitForData>
	{
		return;
	}

	// Read inner frame
	err = xbee_readBuffer((uint8_t *)&received_frame.innerFrame, received_frame.header.length);
     c52:	88 23       	and	r24, r24
     c54:	09 f1       	breq	.+66     	; 0xc98 <serialAdapter_worker+0x102>
     c56:	6f 81       	ldd	r22, Y+7	; 0x07
     c58:	ce 01       	movw	r24, r28
     c5a:	08 96       	adiw	r24, 0x08	; 8
	if (err != XBEE_SUCCESS)
     c5c:	d6 d0       	rcall	.+428    	; 0xe0a <xbee_readBuffer>
     c5e:	81 11       	cpse	r24, r1
	{
		return;
	}

	// Read footer
	err = xbee_readBuffer((uint8_t *)&received_frame.footer, sizeof(frame_footer_t));
     c60:	1b c0       	rjmp	.+54     	; 0xc98 <serialAdapter_worker+0x102>
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	ce 01       	movw	r24, r28
     c66:	c9 96       	adiw	r24, 0x39	; 57
	if (err != XBEE_SUCCESS)
     c68:	d0 d0       	rcall	.+416    	; 0xe0a <xbee_readBuffer>
     c6a:	81 11       	cpse	r24, r1
		return;
	}


	// Read checksum
	checksum_t frame_checksum = INITIAL_CHECKSUM_VALUE;
     c6c:	15 c0       	rjmp	.+42     	; 0xc98 <serialAdapter_worker+0x102>
	serialAdapter_calculateFrameChecksum(&frame_checksum, &received_frame);
     c6e:	1a ae       	std	Y+58, r1	; 0x3a
     c70:	be 01       	movw	r22, r28
     c72:	6d 5f       	subi	r22, 0xFD	; 253
     c74:	7f 4f       	sbci	r23, 0xFF	; 255
     c76:	ce 01       	movw	r24, r28
     c78:	ca 96       	adiw	r24, 0x3a	; 58
	


	// Verify checksum
	if (frame_checksum != received_frame.footer.checksum)
     c7a:	3a df       	rcall	.-396    	; 0xaf0 <serialAdapter_calculateFrameChecksum>
     c7c:	99 ad       	ldd	r25, Y+57	; 0x39
     c7e:	8a ad       	ldd	r24, Y+58	; 0x3a
     c80:	98 13       	cpse	r25, r24
		return;

	// Check if we are addressed by this frame
	if (received_frame.header.destAddr != ADDRESS_BROADCAST && received_frame.header.destAddr != serialAdapter_address)
     c82:	0a c0       	rjmp	.+20     	; 0xc98 <serialAdapter_worker+0x102>
     c84:	8e 81       	ldd	r24, Y+6	; 0x06
     c86:	8f 3f       	cpi	r24, 0xFF	; 255
     c88:	21 f0       	breq	.+8      	; 0xc92 <serialAdapter_worker+0xfc>
     c8a:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     c8e:	89 13       	cpse	r24, r25
		return;



	// Forward to next layer
	serialAdapter_processFrame(&received_frame);
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <serialAdapter_worker+0x102>
     c92:	ce 01       	movw	r24, r28
     c94:	03 96       	adiw	r24, 0x03	; 3
     c96:	24 dd       	rcall	.-1464   	; 0x6e0 <serialAdapter_processFrame>
}
     c98:	ea 96       	adiw	r28, 0x3a	; 58
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <printFrame>:
	serialAdapter_calculateChecksum(checksum, &frame->header, sizeof(frame->header));
	serialAdapter_calculateChecksum(checksum, &frame->innerFrame, frame->header.length);
}

void printFrame(frame_t *frame, char* func_name)
{
     caa:	0f 93       	push	r16
     cac:	1f 93       	push	r17
     cae:	cf 93       	push	r28
     cb0:	8c 01       	movw	r16, r24
		     "Inner Frame Data:\n"),
		func_name,
		frame->header.startFlag,
		frame->header.srcAddr,
		frame->header.destAddr,
		frame->header.length);
     cb2:	fc 01       	movw	r30, r24
     cb4:	24 81       	ldd	r18, Z+4	; 0x04
		     "  └─ Length:               %u\n\n"
		     "Inner Frame Data:\n"),
		func_name,
		frame->header.startFlag,
		frame->header.srcAddr,
		frame->header.destAddr,
     cb6:	93 81       	ldd	r25, Z+3	; 0x03
		     "  ├─ Destination Address:  %u\n"
		     "  └─ Length:               %u\n\n"
		     "Inner Frame Data:\n"),
		func_name,
		frame->header.startFlag,
		frame->header.srcAddr,
     cb8:	82 81       	ldd	r24, Z+2	; 0x02
	serialAdapter_calculateChecksum(checksum, &frame->innerFrame, frame->header.length);
}

void printFrame(frame_t *frame, char* func_name)
{
	printf_P(
     cba:	1f 92       	push	r1
     cbc:	2f 93       	push	r18
     cbe:	1f 92       	push	r1
     cc0:	9f 93       	push	r25
     cc2:	1f 92       	push	r1
     cc4:	8f 93       	push	r24
     cc6:	81 81       	ldd	r24, Z+1	; 0x01
     cc8:	8f 93       	push	r24
     cca:	80 81       	ld	r24, Z
     ccc:	8f 93       	push	r24
     cce:	7f 93       	push	r23
     cd0:	6f 93       	push	r22
     cd2:	86 e5       	ldi	r24, 0x56	; 86
     cd4:	92 e0       	ldi	r25, 0x02	; 2
     cd6:	9f 93       	push	r25
     cd8:	8f 93       	push	r24
     cda:	0e 94 83 13 	call	0x2706	; 0x2706 <printf_P>
		frame->header.srcAddr,
		frame->header.destAddr,
		frame->header.length);

	// Inline printing of frame data
	for (uint8_t i = 0; i < frame->header.length; i++)
     cde:	8d b7       	in	r24, 0x3d	; 61
     ce0:	9e b7       	in	r25, 0x3e	; 62
     ce2:	0c 96       	adiw	r24, 0x0c	; 12
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	9e bf       	out	0x3e, r25	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	8d bf       	out	0x3d, r24	; 61
     cee:	c0 e0       	ldi	r28, 0x00	; 0
     cf0:	16 c0       	rjmp	.+44     	; 0xd1e <printFrame+0x74>
	{
		printf_P(PSTR("  ├─ Byte %d: 0x%02X\n"), i, ((uint8_t *)&frame->innerFrame)[i]);
     cf2:	f8 01       	movw	r30, r16
     cf4:	35 96       	adiw	r30, 0x05	; 5
     cf6:	ec 0f       	add	r30, r28
     cf8:	f1 1d       	adc	r31, r1
     cfa:	80 81       	ld	r24, Z
     cfc:	1f 92       	push	r1
     cfe:	8f 93       	push	r24
     d00:	1f 92       	push	r1
     d02:	cf 93       	push	r28
     d04:	8c e3       	ldi	r24, 0x3C	; 60
     d06:	92 e0       	ldi	r25, 0x02	; 2
     d08:	9f 93       	push	r25
     d0a:	8f 93       	push	r24
     d0c:	0e 94 83 13 	call	0x2706	; 0x2706 <printf_P>
		frame->header.srcAddr,
		frame->header.destAddr,
		frame->header.length);

	// Inline printing of frame data
	for (uint8_t i = 0; i < frame->header.length; i++)
     d10:	cf 5f       	subi	r28, 0xFF	; 255
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	f8 01       	movw	r30, r16
     d20:	84 81       	ldd	r24, Z+4	; 0x04
     d22:	c8 17       	cp	r28, r24
     d24:	30 f3       	brcs	.-52     	; 0xcf2 <printFrame+0x48>
	{
		printf_P(PSTR("  ├─ Byte %d: 0x%02X\n"), i, ((uint8_t *)&frame->innerFrame)[i]);
	}

	// Conditionally print end of data or no data
	if (frame->header.length > 0)
     d26:	88 23       	and	r24, r24
     d28:	49 f0       	breq	.+18     	; 0xd3c <printFrame+0x92>
	{
		printf_P(PSTR("  └─ End of Data\n"));
     d2a:	86 e2       	ldi	r24, 0x26	; 38
     d2c:	92 e0       	ldi	r25, 0x02	; 2
     d2e:	9f 93       	push	r25
     d30:	8f 93       	push	r24
     d32:	0e 94 83 13 	call	0x2706	; 0x2706 <printf_P>
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	08 c0       	rjmp	.+16     	; 0xd4c <printFrame+0xa2>
	}
	else
	{
		printf_P(PSTR("  └─ No Data\n"));
     d3c:	84 e1       	ldi	r24, 0x14	; 20
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	9f 93       	push	r25
     d42:	8f 93       	push	r24
     d44:	0e 94 83 13 	call	0x2706	; 0x2706 <printf_P>
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
	// Print footer and close
	printf_P(
		PSTR("\nFrame Footer:\n"
		     "  └─ Checksum:             0x%02X\n"
		     "================================================\n\n"),
		frame->footer.checksum);
     d4c:	f8 01       	movw	r30, r16
     d4e:	86 a9       	ldd	r24, Z+54	; 0x36
	{
		printf_P(PSTR("  └─ No Data\n"));
	}

	// Print footer and close
	printf_P(
     d50:	1f 92       	push	r1
     d52:	8f 93       	push	r24
     d54:	8c ea       	ldi	r24, 0xAC	; 172
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	9f 93       	push	r25
     d5a:	8f 93       	push	r24
     d5c:	0e 94 83 13 	call	0x2706	; 0x2706 <printf_P>
		PSTR("\nFrame Footer:\n"
		     "  └─ Checksum:             0x%02X\n"
		     "================================================\n\n"),
		frame->footer.checksum);
}
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	08 95       	ret

00000d70 <xbee_init>:
/*!
 *  Initializes the XBee
 */
void xbee_init()
{
	uart3_init(UART_BAUD_SELECT(38400,16000000UL));
     d70:	89 e1       	ldi	r24, 0x19	; 25
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	44 c5       	rjmp	.+2696   	; 0x17fe <uart3_init>
     d76:	08 95       	ret

00000d78 <xbee_write>:
 *
 *  \param byte one byte that will be sent through UART
 */
void xbee_write(uint8_t byte)
{
	uart3_putc(byte);
     d78:	7a c5       	rjmp	.+2804   	; 0x186e <uart3_putc>
     d7a:	08 95       	ret

00000d7c <xbee_writeData>:
 *
 *  \param data buffer with will be sent through UART
 *  \param length size of the buffer
 */
void xbee_writeData(void *data, uint8_t length)
{
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	7c 01       	movw	r14, r24
     d88:	16 2f       	mov	r17, r22
	for(int i = 0; i < length;i++)
     d8a:	c0 e0       	ldi	r28, 0x00	; 0
     d8c:	d0 e0       	ldi	r29, 0x00	; 0
     d8e:	06 c0       	rjmp	.+12     	; 0xd9c <xbee_writeData+0x20>
	{
		xbee_write(*(((uint8_t*)data)+i));
     d90:	f7 01       	movw	r30, r14
     d92:	ec 0f       	add	r30, r28
     d94:	fd 1f       	adc	r31, r29
     d96:	80 81       	ld	r24, Z
     d98:	ef df       	rcall	.-34     	; 0xd78 <xbee_write>
 *  \param data buffer with will be sent through UART
 *  \param length size of the buffer
 */
void xbee_writeData(void *data, uint8_t length)
{
	for(int i = 0; i < length;i++)
     d9a:	21 96       	adiw	r28, 0x01	; 1
     d9c:	81 2f       	mov	r24, r17
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	c8 17       	cp	r28, r24
     da2:	d9 07       	cpc	r29, r25
     da4:	ac f3       	brlt	.-22     	; 0xd90 <xbee_writeData+0x14>
	{
		xbee_write(*(((uint8_t*)data)+i));
	}
}
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	1f 91       	pop	r17
     dac:	ff 90       	pop	r15
     dae:	ef 90       	pop	r14
     db0:	08 95       	ret

00000db2 <xbee_read>:
 *
 *  \param byte Reference parameter where the read byte will be written to
 *  \return Error code or XBEE_SUCCESS. When XBEE_BUFFER_INCONSISTENCY gets returned, `byte` still gets updated
 */
uint8_t xbee_read(uint8_t *byte)
{
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	ec 01       	movw	r28, r24
	//we are assuming that "int" from the uart library is implemented as uint16_t, kinda ugly ngl
	uint16_t temp = (uint16_t)uart3_getc();
     db8:	3d d5       	rcall	.+2682   	; 0x1834 <uart3_getc>
	
	switch((temp >> 8) & 0xFF)
     dba:	29 2f       	mov	r18, r25
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	21 15       	cp	r18, r1
     dc0:	92 e0       	ldi	r25, 0x02	; 2
     dc2:	39 07       	cpc	r19, r25
     dc4:	b9 f0       	breq	.+46     	; 0xdf4 <xbee_read+0x42>
     dc6:	38 f4       	brcc	.+14     	; 0xdd6 <xbee_read+0x24>
     dc8:	21 15       	cp	r18, r1
     dca:	31 05       	cpc	r19, r1
     dcc:	69 f0       	breq	.+26     	; 0xde8 <xbee_read+0x36>
     dce:	21 15       	cp	r18, r1
     dd0:	31 40       	sbci	r19, 0x01	; 1
     dd2:	a9 f0       	breq	.+42     	; 0xdfe <xbee_read+0x4c>
     dd4:	12 c0       	rjmp	.+36     	; 0xdfa <xbee_read+0x48>
     dd6:	21 15       	cp	r18, r1
     dd8:	98 e0       	ldi	r25, 0x08	; 8
     dda:	39 07       	cpc	r19, r25
     ddc:	41 f0       	breq	.+16     	; 0xdee <xbee_read+0x3c>
     dde:	21 15       	cp	r18, r1
     de0:	30 41       	sbci	r19, 0x10	; 16
     de2:	59 f4       	brne	.+22     	; 0xdfa <xbee_read+0x48>
		}
		break;
		
		case UART_FRAME_ERROR:
		{
			return XBEE_READ_ERROR;
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	0c c0       	rjmp	.+24     	; 0xe00 <xbee_read+0x4e>
	
	switch((temp >> 8) & 0xFF)
	{
		case 0:
		{
			*byte = (uint8_t)temp;
     de8:	88 83       	st	Y, r24
			return XBEE_SUCCESS;
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	09 c0       	rjmp	.+18     	; 0xe00 <xbee_read+0x4e>
		}
		break;
		
		case UART_OVERRUN_ERROR:
		{
			*byte = (uint8_t)temp;
     dee:	88 83       	st	Y, r24
			return XBEE_BUFFER_INCONSISTENCY;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	06 c0       	rjmp	.+12     	; 0xe00 <xbee_read+0x4e>
		}
		break;
		
		case UART_BUFFER_OVERFLOW:
		{
			*byte = (uint8_t)temp;
     df4:	88 83       	st	Y, r24
			return XBEE_BUFFER_INCONSISTENCY;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	03 c0       	rjmp	.+6      	; 0xe00 <xbee_read+0x4e>
		}
		break;
		default:
			break;
	}
	return 255;
     dfa:	8f ef       	ldi	r24, 0xFF	; 255
     dfc:	01 c0       	rjmp	.+2      	; 0xe00 <xbee_read+0x4e>
		}
		break;
		
		case UART_NO_DATA:
		{
			return XBEE_DATA_MISSING;
     dfe:	84 e0       	ldi	r24, 0x04	; 4
		break;
		default:
			break;
	}
	return 255;
}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <xbee_getNumberOfBytesReceived>:
 *
 *  \return count of bytes that can be received through `xbee_read`
 */
uint16_t xbee_getNumberOfBytesReceived()
{
	return uart3_getrxcount();
     e06:	47 c5       	rjmp	.+2702   	; 0x1896 <uart3_getrxcount>
}
     e08:	08 95       	ret

00000e0a <xbee_readBuffer>:
 *	\param message_buffer Buffer where to store received bytes
 *  \param buffer_size Amount of bytes that need to be received
 *  \return error Code if there is any. If it's not XBEE_SUCCESS, you shouldn't use the result
 */
uint8_t xbee_readBuffer(uint8_t *buffer, uint8_t length)
{
     e0a:	6f 92       	push	r6
     e0c:	7f 92       	push	r7
     e0e:	8f 92       	push	r8
     e10:	9f 92       	push	r9
     e12:	af 92       	push	r10
     e14:	bf 92       	push	r11
     e16:	cf 92       	push	r12
     e18:	df 92       	push	r13
     e1a:	ef 92       	push	r14
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	4c 01       	movw	r8, r24
     e2c:	66 2e       	mov	r6, r22

	// Copy received data into destination buffer
	memcpy(buffer, temp_buff, length);

	return XBEE_SUCCESS;
}
     e2e:	ed b6       	in	r14, 0x3d	; 61
     e30:	fe b6       	in	r15, 0x3e	; 62
 *  \param buffer_size Amount of bytes that need to be received
 *  \return error Code if there is any. If it's not XBEE_SUCCESS, you shouldn't use the result
 */
uint8_t xbee_readBuffer(uint8_t *buffer, uint8_t length)
{
	if (xbee_getNumberOfBytesReceived() < length)
     e32:	e9 df       	rcall	.-46     	; 0xe06 <xbee_getNumberOfBytesReceived>
     e34:	06 2d       	mov	r16, r6
     e36:	10 e0       	ldi	r17, 0x00	; 0
     e38:	80 17       	cp	r24, r16
     e3a:	91 07       	cpc	r25, r17
     e3c:	f0 f0       	brcs	.+60     	; 0xe7a <xbee_readBuffer+0x70>
		return XBEE_DATA_MISSING;

	uint8_t temp_buff[length];
     e3e:	8d b7       	in	r24, 0x3d	; 61
     e40:	9e b7       	in	r25, 0x3e	; 62
     e42:	80 1b       	sub	r24, r16
     e44:	91 0b       	sbc	r25, r17
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	9e bf       	out	0x3e, r25	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	8d bf       	out	0x3d, r24	; 61
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	6c 01       	movw	r12, r24
     e54:	5c 01       	movw	r10, r24
	
	for (uint8_t i = 0; i < length; i++)
     e56:	71 2c       	mov	r7, r1
     e58:	07 c0       	rjmp	.+14     	; 0xe68 <xbee_readBuffer+0x5e>
	{
		uint8_t err = xbee_read(&temp_buff[i]);
     e5a:	c5 01       	movw	r24, r10
     e5c:	87 0d       	add	r24, r7
     e5e:	91 1d       	adc	r25, r1
     e60:	a8 df       	rcall	.-176    	; 0xdb2 <xbee_read>
		if (err != XBEE_SUCCESS)
     e62:	81 11       	cpse	r24, r1
     e64:	0b c0       	rjmp	.+22     	; 0xe7c <xbee_readBuffer+0x72>
	if (xbee_getNumberOfBytesReceived() < length)
		return XBEE_DATA_MISSING;

	uint8_t temp_buff[length];
	
	for (uint8_t i = 0; i < length; i++)
     e66:	73 94       	inc	r7
     e68:	76 14       	cp	r7, r6
     e6a:	b8 f3       	brcs	.-18     	; 0xe5a <xbee_readBuffer+0x50>
		if (err != XBEE_SUCCESS)
			return err; // Early return if an error occurs
	}

	// Copy received data into destination buffer
	memcpy(buffer, temp_buff, length);
     e6c:	a8 01       	movw	r20, r16
     e6e:	b6 01       	movw	r22, r12
     e70:	c4 01       	movw	r24, r8
     e72:	0e 94 58 13 	call	0x26b0	; 0x26b0 <memcpy>

	return XBEE_SUCCESS;
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <xbee_readBuffer+0x72>
 *  \return error Code if there is any. If it's not XBEE_SUCCESS, you shouldn't use the result
 */
uint8_t xbee_readBuffer(uint8_t *buffer, uint8_t length)
{
	if (xbee_getNumberOfBytesReceived() < length)
		return XBEE_DATA_MISSING;
     e7a:	84 e0       	ldi	r24, 0x04	; 4

	// Copy received data into destination buffer
	memcpy(buffer, temp_buff, length);

	return XBEE_SUCCESS;
}
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	fe be       	out	0x3e, r15	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	ed be       	out	0x3d, r14	; 61
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	ff 90       	pop	r15
     e90:	ef 90       	pop	r14
     e92:	df 90       	pop	r13
     e94:	cf 90       	pop	r12
     e96:	bf 90       	pop	r11
     e98:	af 90       	pop	r10
     e9a:	9f 90       	pop	r9
     e9c:	8f 90       	pop	r8
     e9e:	7f 90       	pop	r7
     ea0:	6f 90       	pop	r6
     ea2:	08 95       	ret

00000ea4 <lcd_enablePulse>:
			lcd_writeHexNibble(number >> nib);
		}
	}

	os_leaveCriticalSection();
}
     ea4:	a7 d6       	rcall	.+3406   	; 0x1bf4 <os_enterCriticalSection>
     ea6:	e2 e0       	ldi	r30, 0x02	; 2
     ea8:	f1 e0       	ldi	r31, 0x01	; 1
     eaa:	80 81       	ld	r24, Z
     eac:	80 64       	ori	r24, 0x40	; 64
     eae:	80 83       	st	Z, r24
     eb0:	85 e0       	ldi	r24, 0x05	; 5
     eb2:	8a 95       	dec	r24
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <lcd_enablePulse+0xe>
     eb6:	00 00       	nop
     eb8:	80 81       	ld	r24, Z
     eba:	8f 7b       	andi	r24, 0xBF	; 191
     ebc:	80 83       	st	Z, r24
     ebe:	8f e8       	ldi	r24, 0x8F	; 143
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <lcd_enablePulse+0x1e>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <lcd_enablePulse+0x24>
     ec8:	00 00       	nop
     eca:	b3 c6       	rjmp	.+3430   	; 0x1c32 <os_leaveCriticalSection>
     ecc:	08 95       	ret

00000ece <lcd_sendNibble>:
     ece:	cf 93       	push	r28
     ed0:	c8 2f       	mov	r28, r24
     ed2:	90 d6       	rcall	.+3360   	; 0x1bf4 <os_enterCriticalSection>
     ed4:	c0 ff       	sbrs	r28, 0
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <lcd_sendNibble+0x12>
     ed8:	84 b3       	in	r24, 0x14	; 20
     eda:	80 62       	ori	r24, 0x20	; 32
     edc:	84 bb       	out	0x14, r24	; 20
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <lcd_sendNibble+0x18>
     ee0:	84 b3       	in	r24, 0x14	; 20
     ee2:	8f 7d       	andi	r24, 0xDF	; 223
     ee4:	84 bb       	out	0x14, r24	; 20
     ee6:	c1 ff       	sbrs	r28, 1
     ee8:	04 c0       	rjmp	.+8      	; 0xef2 <lcd_sendNibble+0x24>
     eea:	8e b1       	in	r24, 0x0e	; 14
     eec:	88 60       	ori	r24, 0x08	; 8
     eee:	8e b9       	out	0x0e, r24	; 14
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <lcd_sendNibble+0x2a>
     ef2:	8e b1       	in	r24, 0x0e	; 14
     ef4:	87 7f       	andi	r24, 0xF7	; 247
     ef6:	8e b9       	out	0x0e, r24	; 14
     ef8:	c2 ff       	sbrs	r28, 2
     efa:	06 c0       	rjmp	.+12     	; 0xf08 <lcd_sendNibble+0x3a>
     efc:	e2 e0       	ldi	r30, 0x02	; 2
     efe:	f1 e0       	ldi	r31, 0x01	; 1
     f00:	80 81       	ld	r24, Z
     f02:	88 60       	ori	r24, 0x08	; 8
     f04:	80 83       	st	Z, r24
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <lcd_sendNibble+0x44>
     f08:	e2 e0       	ldi	r30, 0x02	; 2
     f0a:	f1 e0       	ldi	r31, 0x01	; 1
     f0c:	80 81       	ld	r24, Z
     f0e:	87 7f       	andi	r24, 0xF7	; 247
     f10:	80 83       	st	Z, r24
     f12:	c3 ff       	sbrs	r28, 3
     f14:	06 c0       	rjmp	.+12     	; 0xf22 <lcd_sendNibble+0x54>
     f16:	e2 e0       	ldi	r30, 0x02	; 2
     f18:	f1 e0       	ldi	r31, 0x01	; 1
     f1a:	80 81       	ld	r24, Z
     f1c:	80 61       	ori	r24, 0x10	; 16
     f1e:	80 83       	st	Z, r24
     f20:	05 c0       	rjmp	.+10     	; 0xf2c <lcd_sendNibble+0x5e>
     f22:	e2 e0       	ldi	r30, 0x02	; 2
     f24:	f1 e0       	ldi	r31, 0x01	; 1
     f26:	80 81       	ld	r24, Z
     f28:	8f 7e       	andi	r24, 0xEF	; 239
     f2a:	80 83       	st	Z, r24
     f2c:	bb df       	rcall	.-138    	; 0xea4 <lcd_enablePulse>
     f2e:	81 d6       	rcall	.+3330   	; 0x1c32 <os_leaveCriticalSection>
     f30:	cf 91       	pop	r28
     f32:	08 95       	ret

00000f34 <lcd_printf_p>:
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	ae 01       	movw	r20, r28
     f42:	48 5f       	subi	r20, 0xF8	; 248
     f44:	5f 4f       	sbci	r21, 0xFF	; 255
     f46:	da 01       	movw	r26, r20
     f48:	6d 91       	ld	r22, X+
     f4a:	7d 91       	ld	r23, X+
     f4c:	ad 01       	movw	r20, r26
     f4e:	02 ea       	ldi	r16, 0xA2	; 162
     f50:	15 e0       	ldi	r17, 0x05	; 5
     f52:	d8 01       	movw	r26, r16
     f54:	12 96       	adiw	r26, 0x02	; 2
     f56:	ed 91       	ld	r30, X+
     f58:	fc 91       	ld	r31, X
     f5a:	13 97       	sbiw	r26, 0x03	; 3
     f5c:	83 81       	ldd	r24, Z+3	; 0x03
     f5e:	88 60       	ori	r24, 0x08	; 8
     f60:	83 83       	std	Z+3, r24	; 0x03
     f62:	83 e0       	ldi	r24, 0x03	; 3
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	0e 94 aa 13 	call	0x2754	; 0x2754 <vfprintf_P>
     f6a:	d8 01       	movw	r26, r16
     f6c:	12 96       	adiw	r26, 0x02	; 2
     f6e:	ed 91       	ld	r30, X+
     f70:	fc 91       	ld	r31, X
     f72:	13 97       	sbiw	r26, 0x03	; 3
     f74:	83 81       	ldd	r24, Z+3	; 0x03
     f76:	87 7f       	andi	r24, 0xF7	; 247
     f78:	83 83       	std	Z+3, r24	; 0x03
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	08 95       	ret

00000f84 <lcd_sendCommand>:
     f84:	cf 93       	push	r28
     f86:	c8 2f       	mov	r28, r24
     f88:	35 d6       	rcall	.+3178   	; 0x1bf4 <os_enterCriticalSection>
     f8a:	e2 e0       	ldi	r30, 0x02	; 2
     f8c:	f1 e0       	ldi	r31, 0x01	; 1
     f8e:	80 81       	ld	r24, Z
     f90:	8f 7d       	andi	r24, 0xDF	; 223
     f92:	80 83       	st	Z, r24
     f94:	8c 2f       	mov	r24, r28
     f96:	82 95       	swap	r24
     f98:	8f 70       	andi	r24, 0x0F	; 15
     f9a:	99 df       	rcall	.-206    	; 0xece <lcd_sendNibble>
     f9c:	8c 2f       	mov	r24, r28
     f9e:	97 df       	rcall	.-210    	; 0xece <lcd_sendNibble>
     fa0:	85 ed       	ldi	r24, 0xD5	; 213
     fa2:	8a 95       	dec	r24
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <lcd_sendCommand+0x1e>
     fa6:	00 00       	nop
     fa8:	44 d6       	rcall	.+3208   	; 0x1c32 <os_leaveCriticalSection>
     faa:	cf 91       	pop	r28
     fac:	08 95       	ret

00000fae <lcd_init>:
     fae:	22 d6       	rcall	.+3140   	; 0x1bf4 <os_enterCriticalSection>
     fb0:	e1 e0       	ldi	r30, 0x01	; 1
     fb2:	f1 e0       	ldi	r31, 0x01	; 1
     fb4:	80 81       	ld	r24, Z
     fb6:	88 67       	ori	r24, 0x78	; 120
     fb8:	80 83       	st	Z, r24
     fba:	8d b1       	in	r24, 0x0d	; 13
     fbc:	88 60       	ori	r24, 0x08	; 8
     fbe:	8d b9       	out	0x0d, r24	; 13
     fc0:	83 b3       	in	r24, 0x13	; 19
     fc2:	80 62       	ori	r24, 0x20	; 32
     fc4:	83 bb       	out	0x13, r24	; 19
     fc6:	80 b3       	in	r24, 0x10	; 16
     fc8:	81 60       	ori	r24, 0x01	; 1
     fca:	80 bb       	out	0x10, r24	; 16
     fcc:	81 b3       	in	r24, 0x11	; 17
     fce:	8e 7f       	andi	r24, 0xFE	; 254
     fd0:	81 bb       	out	0x11, r24	; 17
     fd2:	2f ef       	ldi	r18, 0xFF	; 255
     fd4:	80 e7       	ldi	r24, 0x70	; 112
     fd6:	92 e0       	ldi	r25, 0x02	; 2
     fd8:	21 50       	subi	r18, 0x01	; 1
     fda:	80 40       	sbci	r24, 0x00	; 0
     fdc:	90 40       	sbci	r25, 0x00	; 0
     fde:	e1 f7       	brne	.-8      	; 0xfd8 <lcd_init+0x2a>
     fe0:	00 c0       	rjmp	.+0      	; 0xfe2 <lcd_init+0x34>
     fe2:	00 00       	nop
     fe4:	83 e0       	ldi	r24, 0x03	; 3
     fe6:	73 df       	rcall	.-282    	; 0xece <lcd_sendNibble>
     fe8:	8f e1       	ldi	r24, 0x1F	; 31
     fea:	9e e4       	ldi	r25, 0x4E	; 78
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <lcd_init+0x3e>
     ff0:	00 c0       	rjmp	.+0      	; 0xff2 <lcd_init+0x44>
     ff2:	00 00       	nop
     ff4:	83 e0       	ldi	r24, 0x03	; 3
     ff6:	6b df       	rcall	.-298    	; 0xece <lcd_sendNibble>
     ff8:	8f e1       	ldi	r24, 0x1F	; 31
     ffa:	93 e0       	ldi	r25, 0x03	; 3
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <lcd_init+0x4e>
    1000:	00 c0       	rjmp	.+0      	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
    1002:	00 00       	nop
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	63 df       	rcall	.-314    	; 0xece <lcd_sendNibble>
    1008:	8f e1       	ldi	r24, 0x1F	; 31
    100a:	93 e0       	ldi	r25, 0x03	; 3
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <__EEPROM_REGION_LENGTH__+0xc>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
    1012:	00 00       	nop
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	5b df       	rcall	.-330    	; 0xece <lcd_sendNibble>
    1018:	88 e2       	ldi	r24, 0x28	; 40
    101a:	b4 df       	rcall	.-152    	; 0xf84 <lcd_sendCommand>
    101c:	8c e0       	ldi	r24, 0x0C	; 12
    101e:	b2 df       	rcall	.-156    	; 0xf84 <lcd_sendCommand>
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	b0 df       	rcall	.-160    	; 0xf84 <lcd_sendCommand>
    1024:	86 e0       	ldi	r24, 0x06	; 6
    1026:	ae df       	rcall	.-164    	; 0xf84 <lcd_sendCommand>
    1028:	8f e1       	ldi	r24, 0x1F	; 31
    102a:	9e e4       	ldi	r25, 0x4E	; 78
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
    1030:	00 c0       	rjmp	.+0      	; 0x1032 <__EEPROM_REGION_LENGTH__+0x32>
    1032:	00 00       	nop
    1034:	fe c5       	rjmp	.+3068   	; 0x1c32 <os_leaveCriticalSection>
    1036:	08 95       	ret

00001038 <lcd_clear>:
    1038:	dd d5       	rcall	.+3002   	; 0x1bf4 <os_enterCriticalSection>
    103a:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <charCtr>
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	a1 df       	rcall	.-190    	; 0xf84 <lcd_sendCommand>
    1042:	8f e3       	ldi	r24, 0x3F	; 63
    1044:	9f e1       	ldi	r25, 0x1F	; 31
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	f1 f7       	brne	.-4      	; 0x1046 <lcd_clear+0xe>
    104a:	00 c0       	rjmp	.+0      	; 0x104c <lcd_clear+0x14>
    104c:	00 00       	nop
    104e:	f1 c5       	rjmp	.+3042   	; 0x1c32 <os_leaveCriticalSection>
    1050:	08 95       	ret

00001052 <lcd_displayOn>:
    1052:	8c e0       	ldi	r24, 0x0C	; 12
    1054:	97 cf       	rjmp	.-210    	; 0xf84 <lcd_sendCommand>
    1056:	08 95       	ret

00001058 <lcd_displayOff>:
    1058:	88 e0       	ldi	r24, 0x08	; 8
    105a:	94 cf       	rjmp	.-216    	; 0xf84 <lcd_sendCommand>
    105c:	08 95       	ret

0000105e <lcd_goto>:
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	d8 2f       	mov	r29, r24
    1064:	c6 2f       	mov	r28, r22
    1066:	82 30       	cpi	r24, 0x02	; 2
    1068:	08 f0       	brcs	.+2      	; 0x106c <lcd_goto+0xe>
    106a:	d1 e0       	ldi	r29, 0x01	; 1
    106c:	c3 d5       	rcall	.+2950   	; 0x1bf4 <os_enterCriticalSection>
    106e:	8c 2f       	mov	r24, r28
    1070:	90 e4       	ldi	r25, 0x40	; 64
    1072:	d9 9f       	mul	r29, r25
    1074:	80 0d       	add	r24, r0
    1076:	11 24       	eor	r1, r1
    1078:	80 68       	ori	r24, 0x80	; 128
    107a:	84 df       	rcall	.-248    	; 0xf84 <lcd_sendCommand>
    107c:	80 e1       	ldi	r24, 0x10	; 16
    107e:	d8 9f       	mul	r29, r24
    1080:	c0 0d       	add	r28, r0
    1082:	11 24       	eor	r1, r1
    1084:	c0 93 2a 05 	sts	0x052A, r28	; 0x80052a <charCtr>
    1088:	d4 d5       	rcall	.+2984   	; 0x1c32 <os_leaveCriticalSection>
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <lcd_sendData>:
    1090:	cf 93       	push	r28
    1092:	c8 2f       	mov	r28, r24
    1094:	af d5       	rcall	.+2910   	; 0x1bf4 <os_enterCriticalSection>
    1096:	e2 e0       	ldi	r30, 0x02	; 2
    1098:	f1 e0       	ldi	r31, 0x01	; 1
    109a:	80 81       	ld	r24, Z
    109c:	80 62       	ori	r24, 0x20	; 32
    109e:	80 83       	st	Z, r24
    10a0:	8c 2f       	mov	r24, r28
    10a2:	82 95       	swap	r24
    10a4:	8f 70       	andi	r24, 0x0F	; 15
    10a6:	13 df       	rcall	.-474    	; 0xece <lcd_sendNibble>
    10a8:	8c 2f       	mov	r24, r28
    10aa:	11 df       	rcall	.-478    	; 0xece <lcd_sendNibble>
    10ac:	85 ed       	ldi	r24, 0xD5	; 213
    10ae:	8a 95       	dec	r24
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <lcd_sendData+0x1e>
    10b2:	00 00       	nop
    10b4:	be d5       	rcall	.+2940   	; 0x1c32 <os_leaveCriticalSection>
    10b6:	cf 91       	pop	r28
    10b8:	08 95       	ret

000010ba <lcd_line1>:
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	cf cf       	rjmp	.-98     	; 0x105e <lcd_goto>
    10c0:	08 95       	ret

000010c2 <lcd_line2>:
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	cb cf       	rjmp	.-106    	; 0x105e <lcd_goto>
    10c8:	08 95       	ret

000010ca <lcd_writeChar>:
    10ca:	cf 93       	push	r28
    10cc:	c8 2f       	mov	r28, r24
    10ce:	92 d5       	rcall	.+2852   	; 0x1bf4 <os_enterCriticalSection>
    10d0:	ca 30       	cpi	r28, 0x0A	; 10
    10d2:	31 f4       	brne	.+12     	; 0x10e0 <lcd_writeChar+0x16>
    10d4:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <charCtr>
    10d8:	80 71       	andi	r24, 0x10	; 16
    10da:	80 5f       	subi	r24, 0xF0	; 240
    10dc:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <charCtr>
    10e0:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <charCtr>
    10e4:	80 31       	cpi	r24, 0x10	; 16
    10e6:	11 f4       	brne	.+4      	; 0x10ec <lcd_writeChar+0x22>
    10e8:	ec df       	rcall	.-40     	; 0x10c2 <lcd_line2>
    10ea:	04 c0       	rjmp	.+8      	; 0x10f4 <lcd_writeChar+0x2a>
    10ec:	80 32       	cpi	r24, 0x20	; 32
    10ee:	11 f4       	brne	.+4      	; 0x10f4 <lcd_writeChar+0x2a>
    10f0:	a3 df       	rcall	.-186    	; 0x1038 <lcd_clear>
    10f2:	e3 df       	rcall	.-58     	; 0x10ba <lcd_line1>
    10f4:	8c 2f       	mov	r24, r28
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	fc 01       	movw	r30, r24
    10fa:	e4 58       	subi	r30, 0x84	; 132
    10fc:	f1 09       	sbc	r31, r1
    10fe:	e9 33       	cpi	r30, 0x39	; 57
    1100:	f1 05       	cpc	r31, r1
    1102:	a8 f4       	brcc	.+42     	; 0x112e <lcd_writeChar+0x64>
    1104:	88 27       	eor	r24, r24
    1106:	ee 58       	subi	r30, 0x8E	; 142
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	8f 4f       	sbci	r24, 0xFF	; 255
    110c:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__tablejump2__>
    1110:	cf ee       	ldi	r28, 0xEF	; 239
    1112:	0d c0       	rjmp	.+26     	; 0x112e <lcd_writeChar+0x64>
    1114:	c5 ef       	ldi	r28, 0xF5	; 245
    1116:	0b c0       	rjmp	.+22     	; 0x112e <lcd_writeChar+0x64>
    1118:	c2 ee       	ldi	r28, 0xE2	; 226
    111a:	09 c0       	rjmp	.+18     	; 0x112e <lcd_writeChar+0x64>
    111c:	cf ee       	ldi	r28, 0xEF	; 239
    111e:	07 c0       	rjmp	.+14     	; 0x112e <lcd_writeChar+0x64>
    1120:	c5 ef       	ldi	r28, 0xF5	; 245
    1122:	05 c0       	rjmp	.+10     	; 0x112e <lcd_writeChar+0x64>
    1124:	cf ed       	ldi	r28, 0xDF	; 223
    1126:	03 c0       	rjmp	.+6      	; 0x112e <lcd_writeChar+0x64>
    1128:	c4 ee       	ldi	r28, 0xE4	; 228
    112a:	01 c0       	rjmp	.+2      	; 0x112e <lcd_writeChar+0x64>
    112c:	c1 ee       	ldi	r28, 0xE1	; 225
    112e:	8c 2f       	mov	r24, r28
    1130:	af df       	rcall	.-162    	; 0x1090 <lcd_sendData>
    1132:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <charCtr>
    1136:	8f 5f       	subi	r24, 0xFF	; 255
    1138:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <charCtr>
    113c:	7a d5       	rcall	.+2804   	; 0x1c32 <os_leaveCriticalSection>
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret

00001142 <lcd_stdioPutChar>:
    1142:	c3 df       	rcall	.-122    	; 0x10ca <lcd_writeChar>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	08 95       	ret

0000114a <lcd_writeString>:
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	ec 01       	movw	r28, r24
    1154:	4f d5       	rcall	.+2718   	; 0x1bf4 <os_enterCriticalSection>
    1156:	02 c0       	rjmp	.+4      	; 0x115c <lcd_writeString+0x12>
    1158:	b8 df       	rcall	.-144    	; 0x10ca <lcd_writeChar>
    115a:	e8 01       	movw	r28, r16
    115c:	8e 01       	movw	r16, r28
    115e:	0f 5f       	subi	r16, 0xFF	; 255
    1160:	1f 4f       	sbci	r17, 0xFF	; 255
    1162:	88 81       	ld	r24, Y
    1164:	81 11       	cpse	r24, r1
    1166:	f8 cf       	rjmp	.-16     	; 0x1158 <lcd_writeString+0xe>
    1168:	64 d5       	rcall	.+2760   	; 0x1c32 <os_leaveCriticalSection>
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	08 95       	ret

00001174 <lcd_writeProgString>:
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	ec 01       	movw	r28, r24
    117e:	3a d5       	rcall	.+2676   	; 0x1bf4 <os_enterCriticalSection>
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <lcd_writeProgString+0x12>
    1182:	a3 df       	rcall	.-186    	; 0x10ca <lcd_writeChar>
    1184:	e8 01       	movw	r28, r16
    1186:	8e 01       	movw	r16, r28
    1188:	0f 5f       	subi	r16, 0xFF	; 255
    118a:	1f 4f       	sbci	r17, 0xFF	; 255
    118c:	fe 01       	movw	r30, r28
    118e:	84 91       	lpm	r24, Z
    1190:	81 11       	cpse	r24, r1
    1192:	f7 cf       	rjmp	.-18     	; 0x1182 <lcd_writeProgString+0xe>
    1194:	4e d5       	rcall	.+2716   	; 0x1c32 <os_leaveCriticalSection>
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	08 95       	ret

000011a0 <lcd_writeDec>:
 *  Writes a 16 bit integer as a decimal number without leading 0s
 *
 *  \param number The number to be written.
 */
void lcd_writeDec(uint16_t number)
{
    11a0:	cf 92       	push	r12
    11a2:	df 92       	push	r13
    11a4:	ef 92       	push	r14
    11a6:	ff 92       	push	r15
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	ec 01       	movw	r28, r24
	if (!number)
    11b0:	89 2b       	or	r24, r25
    11b2:	19 f4       	brne	.+6      	; 0x11ba <lcd_writeDec+0x1a>
	{
		lcd_writeChar('0');
    11b4:	80 e3       	ldi	r24, 0x30	; 48
    11b6:	89 df       	rcall	.-238    	; 0x10ca <lcd_writeChar>
	}

	uint32_t pos = 10000;
	uint8_t print = 0;

	os_enterCriticalSection();
    11b8:	30 c0       	rjmp	.+96     	; 0x121a <lcd_writeDec+0x7a>
    11ba:	1c d5       	rcall	.+2616   	; 0x1bf4 <os_enterCriticalSection>
		lcd_writeChar('0');
		return;
	}

	uint32_t pos = 10000;
	uint8_t print = 0;
    11bc:	10 e0       	ldi	r17, 0x00	; 0
	{
		lcd_writeChar('0');
		return;
	}

	uint32_t pos = 10000;
    11be:	0f 2e       	mov	r0, r31
    11c0:	f0 e1       	ldi	r31, 0x10	; 16
    11c2:	cf 2e       	mov	r12, r31
    11c4:	f7 e2       	ldi	r31, 0x27	; 39
    11c6:	df 2e       	mov	r13, r31
    11c8:	e1 2c       	mov	r14, r1
    11ca:	f1 2c       	mov	r15, r1
    11cc:	f0 2d       	mov	r31, r0

	os_enterCriticalSection();

	do
	{
		uint8_t const digit = number / pos;
    11ce:	be 01       	movw	r22, r28
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	a7 01       	movw	r20, r14
    11d6:	96 01       	movw	r18, r12
    11d8:	0e 94 1f 13 	call	0x263e	; 0x263e <__udivmodsi4>
		number -= digit * pos;
    11dc:	42 2f       	mov	r20, r18
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	4c 9d       	mul	r20, r12
    11e2:	c0 01       	movw	r24, r0
    11e4:	4d 9d       	mul	r20, r13
    11e6:	90 0d       	add	r25, r0
    11e8:	5c 9d       	mul	r21, r12
    11ea:	90 0d       	add	r25, r0
    11ec:	11 24       	eor	r1, r1
    11ee:	c8 1b       	sub	r28, r24
    11f0:	d9 0b       	sbc	r29, r25
		if (print |= digit)
    11f2:	12 2b       	or	r17, r18
    11f4:	19 f0       	breq	.+6      	; 0x11fc <lcd_writeDec+0x5c>
			lcd_writeChar(digit + '0');
    11f6:	80 e3       	ldi	r24, 0x30	; 48
    11f8:	82 0f       	add	r24, r18
    11fa:	67 df       	rcall	.-306    	; 0x10ca <lcd_writeChar>
	} while (pos /= 10);
    11fc:	c7 01       	movw	r24, r14
    11fe:	b6 01       	movw	r22, r12
    1200:	2a e0       	ldi	r18, 0x0A	; 10
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	0e 94 1f 13 	call	0x263e	; 0x263e <__udivmodsi4>
    120c:	69 01       	movw	r12, r18
    120e:	7a 01       	movw	r14, r20
    1210:	23 2b       	or	r18, r19
    1212:	24 2b       	or	r18, r20
    1214:	25 2b       	or	r18, r21

	os_leaveCriticalSection();
    1216:	d9 f6       	brne	.-74     	; 0x11ce <lcd_writeDec+0x2e>
    1218:	0c d5       	rcall	.+2584   	; 0x1c32 <os_leaveCriticalSection>
}
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	cf 90       	pop	r12
    1228:	08 95       	ret

0000122a <rq_isEmpty>:
 *  \param queue The queue it will check
 *  \return True if queue is empty, false if it's not empty
 */
bool rq_isEmpty(ready_queue_t *queue)
{
	return queue->head == queue->tail;
    122a:	fc 01       	movw	r30, r24
    122c:	21 85       	ldd	r18, Z+9	; 0x09
    122e:	92 85       	ldd	r25, Z+10	; 0x0a
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	29 13       	cpse	r18, r25
    1234:	80 e0       	ldi	r24, 0x00	; 0
}
    1236:	08 95       	ret

00001238 <rq_pop>:
 *  \param queue The queue it will push to
 *  \param process The process that will be pushed
 *  \return Popped process id
 */
process_id_t rq_pop(ready_queue_t *queue)
{
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	ec 01       	movw	r28, r24
	if (rq_isEmpty(queue))
    123e:	f5 df       	rcall	.-22     	; 0x122a <rq_isEmpty>
    1240:	88 23       	and	r24, r24
    1242:	39 f0       	breq	.+14     	; 0x1252 <rq_pop+0x1a>
	{
		os_error("Can't pop from empty ready queue");
    1244:	8a e2       	ldi	r24, 0x2A	; 42
    1246:	93 e0       	ldi	r25, 0x03	; 3
    1248:	9f 93       	push	r25
    124a:	8f 93       	push	r24
    124c:	4e d4       	rcall	.+2204   	; 0x1aea <os_errorPstr>
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
	}
	process_id_t process = queue->processes[queue->head];
    1252:	99 85       	ldd	r25, Y+9	; 0x09
    1254:	29 2f       	mov	r18, r25
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	fe 01       	movw	r30, r28
    125a:	e2 0f       	add	r30, r18
    125c:	f3 1f       	adc	r31, r19
    125e:	80 81       	ld	r24, Z
	queue->head = next(queue->head);
    1260:	2f 5f       	subi	r18, 0xFF	; 255
    1262:	3f 4f       	sbci	r19, 0xFF	; 255
    1264:	29 30       	cpi	r18, 0x09	; 9
    1266:	31 05       	cpc	r19, r1
    1268:	14 f4       	brge	.+4      	; 0x126e <rq_pop+0x36>
    126a:	9f 5f       	subi	r25, 0xFF	; 255
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <rq_pop+0x38>
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	99 87       	std	Y+9, r25	; 0x09
	return process;
}
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	08 95       	ret

00001278 <rq_isFull>:
 *  \param queue The queue it will check
 *  \return True if queue is full, false if it's not completely filled
 */
bool rq_isFull(ready_queue_t *queue)
{
	return next(queue->tail) == queue->head;
    1278:	fc 01       	movw	r30, r24
    127a:	22 85       	ldd	r18, Z+10	; 0x0a
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	2f 5f       	subi	r18, 0xFF	; 255
    1280:	3f 4f       	sbci	r19, 0xFF	; 255
    1282:	29 30       	cpi	r18, 0x09	; 9
    1284:	31 05       	cpc	r19, r1
    1286:	14 f0       	brlt	.+4      	; 0x128c <rq_isFull+0x14>
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	fc 01       	movw	r30, r24
    128e:	41 85       	ldd	r20, Z+9	; 0x09
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	24 17       	cp	r18, r20
    1296:	35 07       	cpc	r19, r21
    1298:	09 f0       	breq	.+2      	; 0x129c <rq_isFull+0x24>
    129a:	80 e0       	ldi	r24, 0x00	; 0
}
    129c:	08 95       	ret

0000129e <rq_push>:
 *
 *  \param queue The queue it will push to
 *  \param process The process that will be pushed
 */
void rq_push(ready_queue_t *queue, process_id_t process)
{
    129e:	1f 93       	push	r17
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	ec 01       	movw	r28, r24
    12a6:	16 2f       	mov	r17, r22
	if (rq_isFull(queue))
    12a8:	e7 df       	rcall	.-50     	; 0x1278 <rq_isFull>
    12aa:	88 23       	and	r24, r24
    12ac:	39 f0       	breq	.+14     	; 0x12bc <rq_push+0x1e>
	{
		os_error("Can't push on full ready queue");
    12ae:	8b e4       	ldi	r24, 0x4B	; 75
    12b0:	93 e0       	ldi	r25, 0x03	; 3
    12b2:	9f 93       	push	r25
    12b4:	8f 93       	push	r24
    12b6:	19 d4       	rcall	.+2098   	; 0x1aea <os_errorPstr>
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
	}
	queue->processes[queue->tail] = process;
    12bc:	2a 85       	ldd	r18, Y+10	; 0x0a
    12be:	82 2f       	mov	r24, r18
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	fe 01       	movw	r30, r28
    12c4:	e8 0f       	add	r30, r24
    12c6:	f9 1f       	adc	r31, r25
    12c8:	10 83       	st	Z, r17
	queue->tail = next(queue->tail);
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	09 97       	sbiw	r24, 0x09	; 9
    12ce:	14 f4       	brge	.+4      	; 0x12d4 <rq_push+0x36>
    12d0:	2f 5f       	subi	r18, 0xFF	; 255
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <rq_push+0x38>
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	2a 87       	std	Y+10, r18	; 0x0a
}
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	08 95       	ret

000012e0 <rq_clear>:
 *
 *  \param queue The queue that should be emptied
 */
void rq_clear(ready_queue_t *queue)
{
	queue->head = 0;
    12e0:	fc 01       	movw	r30, r24
    12e2:	11 86       	std	Z+9, r1	; 0x09
	queue->tail = 0;
    12e4:	12 86       	std	Z+10, r1	; 0x0a
    12e6:	08 95       	ret

000012e8 <rq_remove>:
 *  \param queue The queue that should be removed from
 *  \param process The process that should be removed
 *  \return True if the process was removed, false if it wasn't found
 */
bool rq_remove(ready_queue_t *queue, process_id_t process)
{
    12e8:	fc 01       	movw	r30, r24
	for (int i = queue->head; i != queue->tail; i = next(i))
    12ea:	21 85       	ldd	r18, Z+9	; 0x09
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	32 c0       	rjmp	.+100    	; 0x1354 <rq_remove+0x6c>
	{
		if (queue->processes[i] == process)
    12f0:	df 01       	movw	r26, r30
    12f2:	a2 0f       	add	r26, r18
    12f4:	b3 1f       	adc	r27, r19
    12f6:	5c 91       	ld	r21, X
    12f8:	56 13       	cpse	r21, r22
    12fa:	24 c0       	rjmp	.+72     	; 0x1344 <rq_remove+0x5c>
    12fc:	18 c0       	rjmp	.+48     	; 0x132e <rq_remove+0x46>
		{
			for (int j = i; j != queue->tail; j = next(j))
			{
				queue->processes[j] = queue->processes[next(j)];
    12fe:	b9 01       	movw	r22, r18
    1300:	6f 5f       	subi	r22, 0xFF	; 255
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	69 30       	cpi	r22, 0x09	; 9
    1306:	71 05       	cpc	r23, r1
    1308:	1c f0       	brlt	.+6      	; 0x1310 <rq_remove+0x28>
    130a:	a0 e0       	ldi	r26, 0x00	; 0
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	01 c0       	rjmp	.+2      	; 0x1312 <rq_remove+0x2a>
    1310:	db 01       	movw	r26, r22
    1312:	ae 0f       	add	r26, r30
    1314:	bf 1f       	adc	r27, r31
    1316:	5c 91       	ld	r21, X
    1318:	df 01       	movw	r26, r30
    131a:	a2 0f       	add	r26, r18
    131c:	b3 1f       	adc	r27, r19
    131e:	5c 93       	st	X, r21
{
	for (int i = queue->head; i != queue->tail; i = next(i))
	{
		if (queue->processes[i] == process)
		{
			for (int j = i; j != queue->tail; j = next(j))
    1320:	69 30       	cpi	r22, 0x09	; 9
    1322:	71 05       	cpc	r23, r1
    1324:	1c f0       	brlt	.+6      	; 0x132c <rq_remove+0x44>
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	01 c0       	rjmp	.+2      	; 0x132e <rq_remove+0x46>
    132c:	9b 01       	movw	r18, r22
    132e:	28 17       	cp	r18, r24
    1330:	39 07       	cpc	r19, r25
    1332:	29 f7       	brne	.-54     	; 0x12fe <rq_remove+0x16>
			{
				queue->processes[j] = queue->processes[next(j)];
			}
			queue->tail = prev(queue->tail);
    1334:	44 23       	and	r20, r20
    1336:	11 f0       	breq	.+4      	; 0x133c <rq_remove+0x54>
    1338:	41 50       	subi	r20, 0x01	; 1
    133a:	01 c0       	rjmp	.+2      	; 0x133e <rq_remove+0x56>
    133c:	48 e0       	ldi	r20, 0x08	; 8
    133e:	42 87       	std	Z+10, r20	; 0x0a
			return true;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	08 95       	ret
 *  \param process The process that should be removed
 *  \return True if the process was removed, false if it wasn't found
 */
bool rq_remove(ready_queue_t *queue, process_id_t process)
{
	for (int i = queue->head; i != queue->tail; i = next(i))
    1344:	c9 01       	movw	r24, r18
    1346:	01 96       	adiw	r24, 0x01	; 1
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	89 30       	cpi	r24, 0x09	; 9
    134e:	91 05       	cpc	r25, r1
    1350:	0c f4       	brge	.+2      	; 0x1354 <rq_remove+0x6c>
    1352:	9c 01       	movw	r18, r24
    1354:	42 85       	ldd	r20, Z+10	; 0x0a
    1356:	84 2f       	mov	r24, r20
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	28 17       	cp	r18, r24
    135c:	39 07       	cpc	r19, r25
    135e:	41 f6       	brne	.-112    	; 0x12f0 <rq_remove+0x8>
			}
			queue->tail = prev(queue->tail);
			return true;
		}
	}
	return false;
    1360:	80 e0       	ldi	r24, 0x00	; 0
}
    1362:	08 95       	ret

00001364 <__vector_17>:
 */
void stopWatch_activateInterrupt(void)
{
    cbi(TCCR1B, CS10); // /8 prescaler	0
    sbi(TCCR1B, CS11); // /8 prescaler	1
    cbi(TCCR1B, CS12); // /8 prescaler	0
    1364:	1f 92       	push	r1
    1366:	0f 92       	push	r0
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	0f 92       	push	r0
    136c:	11 24       	eor	r1, r1
    136e:	8f 93       	push	r24
    1370:	9f 93       	push	r25
    1372:	af 93       	push	r26
    1374:	bf 93       	push	r27
    1376:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <stopWatch_time>
    137a:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <stopWatch_time+0x1>
    137e:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <stopWatch_time+0x2>
    1382:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <stopWatch_time+0x3>
    1386:	90 58       	subi	r25, 0x80	; 128
    1388:	af 4f       	sbci	r26, 0xFF	; 255
    138a:	bf 4f       	sbci	r27, 0xFF	; 255
    138c:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <stopWatch_time>
    1390:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <stopWatch_time+0x1>
    1394:	a0 93 51 03 	sts	0x0351, r26	; 0x800351 <stopWatch_time+0x2>
    1398:	b0 93 52 03 	sts	0x0352, r27	; 0x800352 <stopWatch_time+0x3>
    139c:	bf 91       	pop	r27
    139e:	af 91       	pop	r26
    13a0:	9f 91       	pop	r25
    13a2:	8f 91       	pop	r24
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	0f 90       	pop	r0
    13aa:	1f 90       	pop	r1
    13ac:	18 95       	reti

000013ae <stopWatch_deactivateInterrupt>:
    13ae:	e1 e8       	ldi	r30, 0x81	; 129
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	8e 7f       	andi	r24, 0xFE	; 254
    13b6:	80 83       	st	Z, r24
    13b8:	80 81       	ld	r24, Z
    13ba:	8d 7f       	andi	r24, 0xFD	; 253
    13bc:	80 83       	st	Z, r24
    13be:	80 81       	ld	r24, Z
    13c0:	8b 7f       	andi	r24, 0xFB	; 251
    13c2:	80 83       	st	Z, r24
    13c4:	08 95       	ret

000013c6 <stopWatch_init>:
 *  Initializes the stop watch
 */
void stopWatch_init(void)
{
    // Set Timer/Counter Control Registers to 0
    TCCR1A = 0x00; // Normal mode
    13c6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>

    // Set the Timer/Counter Register to 0
    TCNT1 = 0;
    13ca:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
    13ce:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

    // Set the compare match value to 1 (1 microsecond)
    OCR1A = 1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    13da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>

    // Enable the Output Compare Match A interrupt
    TIMSK1 |= (1 << TOIE1);
    13de:	ef e6       	ldi	r30, 0x6F	; 111
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	81 60       	ori	r24, 0x01	; 1
    13e6:	80 83       	st	Z, r24

    stopWatch_deactivateInterrupt();
    13e8:	e2 cf       	rjmp	.-60     	; 0x13ae <stopWatch_deactivateInterrupt>
    13ea:	08 95       	ret

000013ec <usb2_init>:
 *
 *  \param str  The string to be written (a pointer to the first character).
 */
void terminal_writeString(char *str)
{
    usb2_writeString(str);
    13ec:	03 d4       	rcall	.+2054   	; 0x1bf4 <os_enterCriticalSection>
    13ee:	83 e0       	ldi	r24, 0x03	; 3
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
    13f6:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
    13fa:	e0 ed       	ldi	r30, 0xD0	; 208
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8d 7f       	andi	r24, 0xFD	; 253
    1402:	80 83       	st	Z, r24
    1404:	e1 ed       	ldi	r30, 0xD1	; 209
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	80 61       	ori	r24, 0x10	; 16
    140c:	80 83       	st	Z, r24
    140e:	80 81       	ld	r24, Z
    1410:	88 60       	ori	r24, 0x08	; 8
    1412:	80 83       	st	Z, r24
    1414:	0e c4       	rjmp	.+2076   	; 0x1c32 <os_leaveCriticalSection>
    1416:	08 95       	ret

00001418 <usb2_write>:
    1418:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
    141c:	95 ff       	sbrs	r25, 5
    141e:	fc cf       	rjmp	.-8      	; 0x1418 <usb2_write>
    1420:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    1424:	08 95       	ret

00001426 <usb2_writeProgString>:
    1426:	0f 93       	push	r16
    1428:	1f 93       	push	r17
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	8c 01       	movw	r16, r24
    1430:	e1 d3       	rcall	.+1986   	; 0x1bf4 <os_enterCriticalSection>
    1432:	d0 e0       	ldi	r29, 0x00	; 0
    1434:	0d c0       	rjmp	.+26     	; 0x1450 <usb2_writeProgString+0x2a>
    1436:	f8 01       	movw	r30, r16
    1438:	ed 0f       	add	r30, r29
    143a:	f1 1d       	adc	r31, r1
    143c:	c4 91       	lpm	r28, Z
    143e:	ca 30       	cpi	r28, 0x0A	; 10
    1440:	11 f4       	brne	.+4      	; 0x1446 <usb2_writeProgString+0x20>
    1442:	8d e0       	ldi	r24, 0x0D	; 13
    1444:	e9 df       	rcall	.-46     	; 0x1418 <usb2_write>
    1446:	cc 23       	and	r28, r28
    1448:	29 f0       	breq	.+10     	; 0x1454 <usb2_writeProgString+0x2e>
    144a:	8c 2f       	mov	r24, r28
    144c:	e5 df       	rcall	.-54     	; 0x1418 <usb2_write>
    144e:	df 5f       	subi	r29, 0xFF	; 255
    1450:	df 3f       	cpi	r29, 0xFF	; 255
    1452:	89 f7       	brne	.-30     	; 0x1436 <usb2_writeProgString+0x10>
    1454:	ee d3       	rcall	.+2012   	; 0x1c32 <os_leaveCriticalSection>
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	08 95       	ret

00001460 <terminal_init>:
    1460:	c5 df       	rcall	.-118    	; 0x13ec <usb2_init>
    1462:	81 e1       	ldi	r24, 0x11	; 17
    1464:	92 e0       	ldi	r25, 0x02	; 2
    1466:	90 93 a5 05 	sts	0x05A5, r25	; 0x8005a5 <__iob+0x3>
    146a:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <__iob+0x2>
    146e:	08 95       	ret

00001470 <terminal_writeChar>:
    1470:	cf 93       	push	r28
    1472:	c8 2f       	mov	r28, r24
    1474:	8a 30       	cpi	r24, 0x0A	; 10
    1476:	11 f4       	brne	.+4      	; 0x147c <terminal_writeChar+0xc>
    1478:	8d e0       	ldi	r24, 0x0D	; 13
    147a:	ce df       	rcall	.-100    	; 0x1418 <usb2_write>
    147c:	8c 2f       	mov	r24, r28
    147e:	cc df       	rcall	.-104    	; 0x1418 <usb2_write>
    1480:	cf 91       	pop	r28
    1482:	08 95       	ret

00001484 <terminal_writeProgString>:
 *
 *  \param pstr  The string to be written (a pointer to the first character).
 */
void terminal_writeProgString(const char *pstr)
{
	usb2_writeProgString(pstr);
    1484:	d0 cf       	rjmp	.-96     	; 0x1426 <usb2_writeProgString>
    1486:	08 95       	ret

00001488 <stdio_put_char>:

//----------------------------------------------------------------------------
// Configuration of stdio.h
//----------------------------------------------------------------------------
int stdio_put_char(char c, FILE *stream)
{
    1488:	cf 93       	push	r28
    148a:	c8 2f       	mov	r28, r24
    os_enterCriticalSection();
    148c:	b3 d3       	rcall	.+1894   	; 0x1bf4 <os_enterCriticalSection>

    terminal_writeChar(c);
    148e:	8c 2f       	mov	r24, r28
    1490:	ef df       	rcall	.-34     	; 0x1470 <terminal_writeChar>
    if (c == '\n') { terminal_writeProgString(PSTR("        ")); }
    1492:	ca 30       	cpi	r28, 0x0A	; 10
    1494:	19 f4       	brne	.+6      	; 0x149c <stdio_put_char+0x14>
    1496:	8a e6       	ldi	r24, 0x6A	; 106
    1498:	93 e0       	ldi	r25, 0x03	; 3

    os_leaveCriticalSection();
    149a:	f4 df       	rcall	.-24     	; 0x1484 <terminal_writeProgString>
    149c:	ca d3       	rcall	.+1940   	; 0x1c32 <os_leaveCriticalSection>
    return 0;
}
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <terminal_newLine>:
/*!
 *  Write a new line
 */
void terminal_newLine()
{
    terminal_writeChar('\n');
    14a6:	8a e0       	ldi	r24, 0x0A	; 10
    14a8:	e3 cf       	rjmp	.-58     	; 0x1470 <terminal_writeChar>
    14aa:	08 95       	ret

000014ac <terminal_log_printf_p>:
    os_leaveCriticalSection();
    return 0;
}

void terminal_log_printf_p(const char *prefix, const char *fmt, ...)
{
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    os_enterCriticalSection();
    14b8:	9d d3       	rcall	.+1850   	; 0x1bf4 <os_enterCriticalSection>

    terminal_writeProgString(prefix);
    14ba:	88 85       	ldd	r24, Y+8	; 0x08
    14bc:	99 85       	ldd	r25, Y+9	; 0x09
    14be:	e2 df       	rcall	.-60     	; 0x1484 <terminal_writeProgString>

    va_list args;
    va_start(args, fmt);
    stdout->flags |= __SPGM;
    14c0:	02 ea       	ldi	r16, 0xA2	; 162
    14c2:	15 e0       	ldi	r17, 0x05	; 5
    14c4:	d8 01       	movw	r26, r16
    14c6:	12 96       	adiw	r26, 0x02	; 2
    14c8:	ed 91       	ld	r30, X+
    14ca:	fc 91       	ld	r31, X
    14cc:	13 97       	sbiw	r26, 0x03	; 3
    14ce:	83 81       	ldd	r24, Z+3	; 0x03
    14d0:	88 60       	ori	r24, 0x08	; 8
    14d2:	83 83       	std	Z+3, r24	; 0x03
    vfprintf_P(stdout, fmt, args);
    14d4:	ae 01       	movw	r20, r28
    14d6:	44 5f       	subi	r20, 0xF4	; 244
    14d8:	5f 4f       	sbci	r21, 0xFF	; 255
    14da:	6a 85       	ldd	r22, Y+10	; 0x0a
    14dc:	7b 85       	ldd	r23, Y+11	; 0x0b
    14de:	12 96       	adiw	r26, 0x02	; 2
    14e0:	8d 91       	ld	r24, X+
    14e2:	9c 91       	ld	r25, X
    14e4:	13 97       	sbiw	r26, 0x03	; 3
    14e6:	0e 94 aa 13 	call	0x2754	; 0x2754 <vfprintf_P>
    stdout->flags &= ~__SPGM;
    14ea:	d8 01       	movw	r26, r16
    14ec:	12 96       	adiw	r26, 0x02	; 2
    14ee:	ed 91       	ld	r30, X+
    14f0:	fc 91       	ld	r31, X
    14f2:	13 97       	sbiw	r26, 0x03	; 3
    14f4:	83 81       	ldd	r24, Z+3	; 0x03
    14f6:	87 7f       	andi	r24, 0xF7	; 247
    va_end(args);

    terminal_newLine();
    14f8:	83 83       	std	Z+3, r24	; 0x03
    14fa:	d5 df       	rcall	.-86     	; 0x14a6 <terminal_newLine>

    os_leaveCriticalSection();
    14fc:	9a d3       	rcall	.+1844   	; 0x1c32 <os_leaveCriticalSection>
    14fe:	df 91       	pop	r29
}
    1500:	cf 91       	pop	r28
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	08 95       	ret

00001508 <__vector_25>:
    1508:	1f 92       	push	r1
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart3_putc(c);

}/* uart3_puts_p */
    150a:	0f 92       	push	r0
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	0f 92       	push	r0
    1510:	11 24       	eor	r1, r1
    1512:	0b b6       	in	r0, 0x3b	; 59
    1514:	0f 92       	push	r0
    1516:	2f 93       	push	r18
    1518:	8f 93       	push	r24
    151a:	9f 93       	push	r25
    151c:	ef 93       	push	r30
    151e:	ff 93       	push	r31
    1520:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    1524:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    1528:	8c 71       	andi	r24, 0x1C	; 28
    152a:	e0 91 24 05 	lds	r30, 0x0524	; 0x800524 <UART0_RxHead>
    152e:	ef 5f       	subi	r30, 0xFF	; 255
    1530:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <UART0_RxTail>
    1534:	e9 17       	cp	r30, r25
    1536:	39 f0       	breq	.+14     	; 0x1546 <__vector_25+0x3e>
    1538:	e0 93 24 05 	sts	0x0524, r30	; 0x800524 <UART0_RxHead>
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	e9 5d       	subi	r30, 0xD9	; 217
    1540:	fa 4f       	sbci	r31, 0xFA	; 250
    1542:	20 83       	st	Z, r18
    1544:	01 c0       	rjmp	.+2      	; 0x1548 <__vector_25+0x40>
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <UART0_LastRxError>
    154c:	89 2b       	or	r24, r25
    154e:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <UART0_LastRxError>
    1552:	ff 91       	pop	r31
    1554:	ef 91       	pop	r30
    1556:	9f 91       	pop	r25
    1558:	8f 91       	pop	r24
    155a:	2f 91       	pop	r18
    155c:	0f 90       	pop	r0
    155e:	0b be       	out	0x3b, r0	; 59
    1560:	0f 90       	pop	r0
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	0f 90       	pop	r0
    1566:	1f 90       	pop	r1
    1568:	18 95       	reti

0000156a <__vector_26>:
    156a:	1f 92       	push	r1
    156c:	0f 92       	push	r0
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	0f 92       	push	r0
    1572:	11 24       	eor	r1, r1
    1574:	0b b6       	in	r0, 0x3b	; 59
    1576:	0f 92       	push	r0
    1578:	8f 93       	push	r24
    157a:	9f 93       	push	r25
    157c:	ef 93       	push	r30
    157e:	ff 93       	push	r31
    1580:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <UART0_TxHead>
    1584:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <UART0_TxTail>
    1588:	98 17       	cp	r25, r24
    158a:	61 f0       	breq	.+24     	; 0x15a4 <__vector_26+0x3a>
    158c:	e0 91 25 05 	lds	r30, 0x0525	; 0x800525 <UART0_TxTail>
    1590:	ef 5f       	subi	r30, 0xFF	; 255
    1592:	e0 93 25 05 	sts	0x0525, r30	; 0x800525 <UART0_TxTail>
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	e9 5d       	subi	r30, 0xD9	; 217
    159a:	fa 4f       	sbci	r31, 0xFA	; 250
    159c:	80 81       	ld	r24, Z
    159e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    15a2:	05 c0       	rjmp	.+10     	; 0x15ae <__vector_26+0x44>
    15a4:	e1 ec       	ldi	r30, 0xC1	; 193
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	8f 7d       	andi	r24, 0xDF	; 223
    15ac:	80 83       	st	Z, r24
    15ae:	ff 91       	pop	r31
    15b0:	ef 91       	pop	r30
    15b2:	9f 91       	pop	r25
    15b4:	8f 91       	pop	r24
    15b6:	0f 90       	pop	r0
    15b8:	0b be       	out	0x3b, r0	; 59
    15ba:	0f 90       	pop	r0
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	0f 90       	pop	r0
    15c0:	1f 90       	pop	r1
    15c2:	18 95       	reti

000015c4 <__vector_36>:
    15c4:	1f 92       	push	r1
    15c6:	0f 92       	push	r0
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	0f 92       	push	r0
    15cc:	11 24       	eor	r1, r1
    15ce:	0b b6       	in	r0, 0x3b	; 59
    15d0:	0f 92       	push	r0
    15d2:	2f 93       	push	r18
    15d4:	8f 93       	push	r24
    15d6:	9f 93       	push	r25
    15d8:	ef 93       	push	r30
    15da:	ff 93       	push	r31
    15dc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    15e0:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    15e4:	8c 71       	andi	r24, 0x1C	; 28
    15e6:	e0 91 df 03 	lds	r30, 0x03DF	; 0x8003df <UART1_RxHead>
    15ea:	ef 5f       	subi	r30, 0xFF	; 255
    15ec:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <UART1_RxTail>
    15f0:	e9 17       	cp	r30, r25
    15f2:	39 f0       	breq	.+14     	; 0x1602 <__vector_36+0x3e>
    15f4:	e0 93 df 03 	sts	0x03DF, r30	; 0x8003df <UART1_RxHead>
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	ee 51       	subi	r30, 0x1E	; 30
    15fc:	fc 4f       	sbci	r31, 0xFC	; 252
    15fe:	20 83       	st	Z, r18
    1600:	01 c0       	rjmp	.+2      	; 0x1604 <__vector_36+0x40>
    1602:	82 e0       	ldi	r24, 0x02	; 2
    1604:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <UART1_LastRxError>
    1608:	89 2b       	or	r24, r25
    160a:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <UART1_LastRxError>
    160e:	ff 91       	pop	r31
    1610:	ef 91       	pop	r30
    1612:	9f 91       	pop	r25
    1614:	8f 91       	pop	r24
    1616:	2f 91       	pop	r18
    1618:	0f 90       	pop	r0
    161a:	0b be       	out	0x3b, r0	; 59
    161c:	0f 90       	pop	r0
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	0f 90       	pop	r0
    1622:	1f 90       	pop	r1
    1624:	18 95       	reti

00001626 <__vector_37>:
    1626:	1f 92       	push	r1
    1628:	0f 92       	push	r0
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	0f 92       	push	r0
    162e:	11 24       	eor	r1, r1
    1630:	0b b6       	in	r0, 0x3b	; 59
    1632:	0f 92       	push	r0
    1634:	8f 93       	push	r24
    1636:	9f 93       	push	r25
    1638:	ef 93       	push	r30
    163a:	ff 93       	push	r31
    163c:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <UART1_TxHead>
    1640:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <UART1_TxTail>
    1644:	98 17       	cp	r25, r24
    1646:	69 f0       	breq	.+26     	; 0x1662 <__vector_37+0x3c>
    1648:	e0 91 e0 03 	lds	r30, 0x03E0	; 0x8003e0 <UART1_TxTail>
    164c:	ef 5f       	subi	r30, 0xFF	; 255
    164e:	ef 73       	andi	r30, 0x3F	; 63
    1650:	e0 93 e0 03 	sts	0x03E0, r30	; 0x8003e0 <UART1_TxTail>
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	ee 51       	subi	r30, 0x1E	; 30
    1658:	fb 4f       	sbci	r31, 0xFB	; 251
    165a:	80 81       	ld	r24, Z
    165c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    1660:	05 c0       	rjmp	.+10     	; 0x166c <__vector_37+0x46>
    1662:	e9 ec       	ldi	r30, 0xC9	; 201
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8f 7d       	andi	r24, 0xDF	; 223
    166a:	80 83       	st	Z, r24
    166c:	ff 91       	pop	r31
    166e:	ef 91       	pop	r30
    1670:	9f 91       	pop	r25
    1672:	8f 91       	pop	r24
    1674:	0f 90       	pop	r0
    1676:	0b be       	out	0x3b, r0	; 59
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	0f 90       	pop	r0
    167e:	1f 90       	pop	r1
    1680:	18 95       	reti

00001682 <__vector_51>:
    1682:	1f 92       	push	r1
    1684:	0f 92       	push	r0
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	0f 92       	push	r0
    168a:	11 24       	eor	r1, r1
    168c:	0b b6       	in	r0, 0x3b	; 59
    168e:	0f 92       	push	r0
    1690:	2f 93       	push	r18
    1692:	8f 93       	push	r24
    1694:	9f 93       	push	r25
    1696:	ef 93       	push	r30
    1698:	ff 93       	push	r31
    169a:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
    169e:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    16a2:	8c 71       	andi	r24, 0x1C	; 28
    16a4:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <UART2_RxHead>
    16a8:	ef 5f       	subi	r30, 0xFF	; 255
    16aa:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <UART2_RxTail>
    16ae:	e9 17       	cp	r30, r25
    16b0:	39 f0       	breq	.+14     	; 0x16c0 <__vector_51+0x3e>
    16b2:	e0 93 9a 03 	sts	0x039A, r30	; 0x80039a <UART2_RxHead>
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	e3 56       	subi	r30, 0x63	; 99
    16ba:	fc 4f       	sbci	r31, 0xFC	; 252
    16bc:	20 83       	st	Z, r18
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <__vector_51+0x40>
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <UART2_LastRxError>
    16c6:	89 2b       	or	r24, r25
    16c8:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <UART2_LastRxError>
    16cc:	ff 91       	pop	r31
    16ce:	ef 91       	pop	r30
    16d0:	9f 91       	pop	r25
    16d2:	8f 91       	pop	r24
    16d4:	2f 91       	pop	r18
    16d6:	0f 90       	pop	r0
    16d8:	0b be       	out	0x3b, r0	; 59
    16da:	0f 90       	pop	r0
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	0f 90       	pop	r0
    16e0:	1f 90       	pop	r1
    16e2:	18 95       	reti

000016e4 <__vector_52>:
    16e4:	1f 92       	push	r1
    16e6:	0f 92       	push	r0
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	0f 92       	push	r0
    16ec:	11 24       	eor	r1, r1
    16ee:	0b b6       	in	r0, 0x3b	; 59
    16f0:	0f 92       	push	r0
    16f2:	8f 93       	push	r24
    16f4:	9f 93       	push	r25
    16f6:	ef 93       	push	r30
    16f8:	ff 93       	push	r31
    16fa:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <UART2_TxHead>
    16fe:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <UART2_TxTail>
    1702:	98 17       	cp	r25, r24
    1704:	69 f0       	breq	.+26     	; 0x1720 <__vector_52+0x3c>
    1706:	e0 91 9b 03 	lds	r30, 0x039B	; 0x80039b <UART2_TxTail>
    170a:	ef 5f       	subi	r30, 0xFF	; 255
    170c:	ef 73       	andi	r30, 0x3F	; 63
    170e:	e0 93 9b 03 	sts	0x039B, r30	; 0x80039b <UART2_TxTail>
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	e3 56       	subi	r30, 0x63	; 99
    1716:	fc 4f       	sbci	r31, 0xFC	; 252
    1718:	80 81       	ld	r24, Z
    171a:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    171e:	05 c0       	rjmp	.+10     	; 0x172a <__vector_52+0x46>
    1720:	e1 ed       	ldi	r30, 0xD1	; 209
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	8f 7d       	andi	r24, 0xDF	; 223
    1728:	80 83       	st	Z, r24
    172a:	ff 91       	pop	r31
    172c:	ef 91       	pop	r30
    172e:	9f 91       	pop	r25
    1730:	8f 91       	pop	r24
    1732:	0f 90       	pop	r0
    1734:	0b be       	out	0x3b, r0	; 59
    1736:	0f 90       	pop	r0
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	0f 90       	pop	r0
    173c:	1f 90       	pop	r1
    173e:	18 95       	reti

00001740 <__vector_54>:
    1740:	1f 92       	push	r1
    1742:	0f 92       	push	r0
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	0f 92       	push	r0
    1748:	11 24       	eor	r1, r1
    174a:	0b b6       	in	r0, 0x3b	; 59
    174c:	0f 92       	push	r0
    174e:	2f 93       	push	r18
    1750:	8f 93       	push	r24
    1752:	9f 93       	push	r25
    1754:	ef 93       	push	r30
    1756:	ff 93       	push	r31
    1758:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
    175c:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    1760:	8c 71       	andi	r24, 0x1C	; 28
    1762:	e0 91 55 03 	lds	r30, 0x0355	; 0x800355 <UART3_RxHead>
    1766:	ef 5f       	subi	r30, 0xFF	; 255
    1768:	ef 73       	andi	r30, 0x3F	; 63
    176a:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <UART3_RxTail>
    176e:	e9 17       	cp	r30, r25
    1770:	39 f0       	breq	.+14     	; 0x1780 <__vector_54+0x40>
    1772:	e0 93 55 03 	sts	0x0355, r30	; 0x800355 <UART3_RxHead>
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	e8 5a       	subi	r30, 0xA8	; 168
    177a:	fc 4f       	sbci	r31, 0xFC	; 252
    177c:	20 83       	st	Z, r18
    177e:	01 c0       	rjmp	.+2      	; 0x1782 <__vector_54+0x42>
    1780:	82 e0       	ldi	r24, 0x02	; 2
    1782:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <UART3_LastRxError>
    1786:	89 2b       	or	r24, r25
    1788:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <UART3_LastRxError>
    178c:	ff 91       	pop	r31
    178e:	ef 91       	pop	r30
    1790:	9f 91       	pop	r25
    1792:	8f 91       	pop	r24
    1794:	2f 91       	pop	r18
    1796:	0f 90       	pop	r0
    1798:	0b be       	out	0x3b, r0	; 59
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	0f 90       	pop	r0
    17a0:	1f 90       	pop	r1
    17a2:	18 95       	reti

000017a4 <__vector_55>:
    17a4:	1f 92       	push	r1
    17a6:	0f 92       	push	r0
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	0f 92       	push	r0
    17ac:	11 24       	eor	r1, r1
    17ae:	0b b6       	in	r0, 0x3b	; 59
    17b0:	0f 92       	push	r0
    17b2:	8f 93       	push	r24
    17b4:	9f 93       	push	r25
    17b6:	ef 93       	push	r30
    17b8:	ff 93       	push	r31
    17ba:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <UART3_TxHead>
    17be:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <UART3_TxTail>
    17c2:	98 17       	cp	r25, r24
    17c4:	61 f0       	breq	.+24     	; 0x17de <__vector_55+0x3a>
    17c6:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <UART3_TxTail>
    17ca:	ef 5f       	subi	r30, 0xFF	; 255
    17cc:	e0 93 56 03 	sts	0x0356, r30	; 0x800356 <UART3_TxTail>
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	e8 56       	subi	r30, 0x68	; 104
    17d4:	fc 4f       	sbci	r31, 0xFC	; 252
    17d6:	80 81       	ld	r24, Z
    17d8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    17dc:	05 c0       	rjmp	.+10     	; 0x17e8 <__vector_55+0x44>
    17de:	e1 e3       	ldi	r30, 0x31	; 49
    17e0:	f1 e0       	ldi	r31, 0x01	; 1
    17e2:	80 81       	ld	r24, Z
    17e4:	8f 7d       	andi	r24, 0xDF	; 223
    17e6:	80 83       	st	Z, r24
    17e8:	ff 91       	pop	r31
    17ea:	ef 91       	pop	r30
    17ec:	9f 91       	pop	r25
    17ee:	8f 91       	pop	r24
    17f0:	0f 90       	pop	r0
    17f2:	0b be       	out	0x3b, r0	; 59
    17f4:	0f 90       	pop	r0
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	0f 90       	pop	r0
    17fa:	1f 90       	pop	r1
    17fc:	18 95       	reti

000017fe <uart3_init>:
    17fe:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <UART3_TxHead>
    1802:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <UART3_TxTail>
    1806:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <UART3_RxHead>
    180a:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <UART3_RxTail>
    180e:	28 2f       	mov	r18, r24
    1810:	39 2f       	mov	r19, r25
    1812:	33 23       	and	r19, r19
    1814:	1c f4       	brge	.+6      	; 0x181c <uart3_init+0x1e>
    1816:	22 e0       	ldi	r18, 0x02	; 2
    1818:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
    181c:	90 78       	andi	r25, 0x80	; 128
    181e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
    1822:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
    1826:	88 e9       	ldi	r24, 0x98	; 152
    1828:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
    182c:	86 e0       	ldi	r24, 0x06	; 6
    182e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>
    1832:	08 95       	ret

00001834 <uart3_getc>:
    1834:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <UART3_RxHead>
    1838:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <UART3_RxTail>
    183c:	98 17       	cp	r25, r24
    183e:	a1 f0       	breq	.+40     	; 0x1868 <uart3_getc+0x34>
    1840:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <UART3_RxTail>
    1844:	8f 5f       	subi	r24, 0xFF	; 255
    1846:	8f 73       	andi	r24, 0x3F	; 63
    1848:	e8 2f       	mov	r30, r24
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	e8 5a       	subi	r30, 0xA8	; 168
    184e:	fc 4f       	sbci	r31, 0xFC	; 252
    1850:	20 81       	ld	r18, Z
    1852:	30 91 53 03 	lds	r19, 0x0353	; 0x800353 <UART3_LastRxError>
    1856:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <UART3_RxTail>
    185a:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <UART3_LastRxError>
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	93 2f       	mov	r25, r19
    1862:	82 0f       	add	r24, r18
    1864:	91 1d       	adc	r25, r1
    1866:	08 95       	ret
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	08 95       	ret

0000186e <uart3_putc>:
    186e:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <UART3_TxHead>
    1872:	2f 5f       	subi	r18, 0xFF	; 255
    1874:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <UART3_TxTail>
    1878:	29 17       	cp	r18, r25
    187a:	e1 f3       	breq	.-8      	; 0x1874 <uart3_putc+0x6>
    187c:	e2 2f       	mov	r30, r18
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	e8 56       	subi	r30, 0x68	; 104
    1882:	fc 4f       	sbci	r31, 0xFC	; 252
    1884:	80 83       	st	Z, r24
    1886:	20 93 57 03 	sts	0x0357, r18	; 0x800357 <UART3_TxHead>
    188a:	e1 e3       	ldi	r30, 0x31	; 49
    188c:	f1 e0       	ldi	r31, 0x01	; 1
    188e:	80 81       	ld	r24, Z
    1890:	80 62       	ori	r24, 0x20	; 32
    1892:	80 83       	st	Z, r24
    1894:	08 95       	ret

00001896 <uart3_getrxcount>:
/*
 * Returns current filling of the buffer in byte
 */
uint16_t uart3_getrxcount()
{
	return BUFFER_FILLING(UART3_RxHead, UART3_RxTail, UART3_RX_BUFFER_SIZE);
    1896:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <UART3_RxTail>
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <UART3_RxHead>
    18a0:	90 e0       	ldi	r25, 0x00	; 0
#define cbi(x, b) (x &= ~(1 << (b)))
#endif

inline uint16_t BUFFER_FILLING(uint16_t head, uint16_t tail, uint16_t size)
{
	if (head >= tail) { return head - tail; }
    18a2:	82 17       	cp	r24, r18
    18a4:	93 07       	cpc	r25, r19
    18a6:	18 f0       	brcs	.+6      	; 0x18ae <uart3_getrxcount+0x18>
    18a8:	82 1b       	sub	r24, r18
    18aa:	93 0b       	sbc	r25, r19
    18ac:	08 95       	ret
	return size - tail + head;
    18ae:	40 e4       	ldi	r20, 0x40	; 64
    18b0:	50 e0       	ldi	r21, 0x00	; 0
    18b2:	ba 01       	movw	r22, r20
    18b4:	62 1b       	sub	r22, r18
    18b6:	73 0b       	sbc	r23, r19
    18b8:	86 0f       	add	r24, r22
    18ba:	97 1f       	adc	r25, r23
 * Returns current filling of the buffer in byte
 */
uint16_t uart3_getrxcount()
{
	return BUFFER_FILLING(UART3_RxHead, UART3_RxTail, UART3_RX_BUFFER_SIZE);
}
    18bc:	08 95       	ret

000018be <__vector_21>:

/*!
 *  ISR that counts the number of occurred Timer 0 compare matches for the getSystemTime function mainly used in delayMs.
 */
ISR(TIMER0_COMPA_vect)
{
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	8f 93       	push	r24
    18ca:	9f 93       	push	r25
    18cc:	af 93       	push	r26
    18ce:	bf 93       	push	r27
	++os_coarseSystemTime;
    18d0:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <os_coarseSystemTime>
    18d4:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <os_coarseSystemTime+0x1>
    18d8:	a0 91 2d 05 	lds	r26, 0x052D	; 0x80052d <os_coarseSystemTime+0x2>
    18dc:	b0 91 2e 05 	lds	r27, 0x052E	; 0x80052e <os_coarseSystemTime+0x3>
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	a1 1d       	adc	r26, r1
    18e4:	b1 1d       	adc	r27, r1
    18e6:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <os_coarseSystemTime>
    18ea:	90 93 2c 05 	sts	0x052C, r25	; 0x80052c <os_coarseSystemTime+0x1>
    18ee:	a0 93 2d 05 	sts	0x052D, r26	; 0x80052d <os_coarseSystemTime+0x2>
    18f2:	b0 93 2e 05 	sts	0x052E, r27	; 0x80052e <os_coarseSystemTime+0x3>
}
    18f6:	bf 91       	pop	r27
    18f8:	af 91       	pop	r26
    18fa:	9f 91       	pop	r25
    18fc:	8f 91       	pop	r24
    18fe:	0f 90       	pop	r0
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	0f 90       	pop	r0
    1904:	1f 90       	pop	r1
    1906:	18 95       	reti

00001908 <initSystemTime>:
/*!
 *  Initializes Timer 0 as system clock
 */
void initSystemTime(void)
{
	os_coarseSystemTime = 0;
    1908:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <os_coarseSystemTime>
    190c:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <os_coarseSystemTime+0x1>
    1910:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <os_coarseSystemTime+0x2>
    1914:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <os_coarseSystemTime+0x3>

	// Init timer 0 with prescaler 64
	sbi(TCCR0B, CS00);
    1918:	85 b5       	in	r24, 0x25	; 37
    191a:	81 60       	ori	r24, 0x01	; 1
    191c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS01);
    191e:	85 b5       	in	r24, 0x25	; 37
    1920:	82 60       	ori	r24, 0x02	; 2
    1922:	85 bd       	out	0x25, r24	; 37
	cbi(TCCR0B, CS02);
    1924:	85 b5       	in	r24, 0x25	; 37
    1926:	8b 7f       	andi	r24, 0xFB	; 251
    1928:	85 bd       	out	0x25, r24	; 37

	// CTC mode
	sbi(TCCR0A, WGM01);
    192a:	84 b5       	in	r24, 0x24	; 36
    192c:	82 60       	ori	r24, 0x02	; 2
    192e:	84 bd       	out	0x24, r24	; 36

	// Compare Match after 61 timer ticks = 1ms
	OCR0A = TIMER_OCR;
    1930:	89 ef       	ldi	r24, 0xF9	; 249
    1932:	87 bd       	out	0x27, r24	; 39
	sbi(TIMSK0, OCIE0A);
    1934:	ee e6       	ldi	r30, 0x6E	; 110
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	82 60       	ori	r24, 0x02	; 2
    193c:	80 83       	st	Z, r24
    193e:	08 95       	ret

00001940 <getSystemTime_ms>:
 */
time_t getSystemTime_ms(void)
{
	// In case interrupts are off we check the OCF manually, clear it and
	// increment os_coarseSystemTime to avoid freezing the system time
	if (!gbi(SREG, 7) && gbi(TIFR0, OCF0A))
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	07 fc       	sbrc	r0, 7
    1944:	18 c0       	rjmp	.+48     	; 0x1976 <getSystemTime_ms+0x36>
    1946:	a9 9b       	sbis	0x15, 1	; 21
    1948:	16 c0       	rjmp	.+44     	; 0x1976 <getSystemTime_ms+0x36>
	{
		sbi(TIFR0, OCF0A);
    194a:	85 b3       	in	r24, 0x15	; 21
    194c:	82 60       	ori	r24, 0x02	; 2
    194e:	85 bb       	out	0x15, r24	; 21
		++os_coarseSystemTime;
    1950:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <os_coarseSystemTime>
    1954:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <os_coarseSystemTime+0x1>
    1958:	a0 91 2d 05 	lds	r26, 0x052D	; 0x80052d <os_coarseSystemTime+0x2>
    195c:	b0 91 2e 05 	lds	r27, 0x052E	; 0x80052e <os_coarseSystemTime+0x3>
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	a1 1d       	adc	r26, r1
    1964:	b1 1d       	adc	r27, r1
    1966:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <os_coarseSystemTime>
    196a:	90 93 2c 05 	sts	0x052C, r25	; 0x80052c <os_coarseSystemTime+0x1>
    196e:	a0 93 2d 05 	sts	0x052D, r26	; 0x80052d <os_coarseSystemTime+0x2>
    1972:	b0 93 2e 05 	sts	0x052E, r27	; 0x80052e <os_coarseSystemTime+0x3>
	}

	// Synchronize access to os_coarseSystemTime
	uint8_t ie = gbi(SREG, 7);
    1976:	8f b7       	in	r24, 0x3f	; 63
    1978:	28 2f       	mov	r18, r24
    197a:	22 1f       	adc	r18, r18
    197c:	22 27       	eor	r18, r18
    197e:	22 1f       	adc	r18, r18
	cli();
    1980:	f8 94       	cli
	time_t t = os_coarseSystemTime;
    1982:	60 91 2b 05 	lds	r22, 0x052B	; 0x80052b <os_coarseSystemTime>
    1986:	70 91 2c 05 	lds	r23, 0x052C	; 0x80052c <os_coarseSystemTime+0x1>
    198a:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <os_coarseSystemTime+0x2>
    198e:	90 91 2e 05 	lds	r25, 0x052E	; 0x80052e <os_coarseSystemTime+0x3>
	if (ie)
    1992:	22 23       	and	r18, r18
    1994:	09 f0       	breq	.+2      	; 0x1998 <getSystemTime_ms+0x58>
	{
		sei();
    1996:	78 94       	sei
	}

	return t;
}
    1998:	08 95       	ret

0000199a <delayMs>:
 *  in order to get the destination time. Then, we wait until a temporary variable reaches this value.
 *
 *  \param ms  The time to be waited in milliseconds (max. 65535)
 */
void delayMs(uint16_t ms)
{
    199a:	cf 92       	push	r12
    199c:	df 92       	push	r13
    199e:	ef 92       	push	r14
    19a0:	ff 92       	push	r15
    19a2:	0f 93       	push	r16
    19a4:	1f 93       	push	r17
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
#ifdef RUNNING_WITH_SIMULATOR
	return;
#endif

	if (ms == 0)
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	d1 f0       	breq	.+52     	; 0x19e2 <delayMs+0x48>
    19ae:	ec 01       	movw	r28, r24
	{
		return;
	}
	time_t startTime = getSystemTime_ms();
    19b0:	c7 df       	rcall	.-114    	; 0x1940 <getSystemTime_ms>
    19b2:	6b 01       	movw	r12, r22
    19b4:	7c 01       	movw	r14, r24

	while (getSystemTime_ms() - startTime < ms)
    19b6:	06 c0       	rjmp	.+12     	; 0x19c4 <delayMs+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19b8:	8f e8       	ldi	r24, 0x8F	; 143
    19ba:	91 e0       	ldi	r25, 0x01	; 1
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	f1 f7       	brne	.-4      	; 0x19bc <delayMs+0x22>
    19c0:	00 c0       	rjmp	.+0      	; 0x19c2 <delayMs+0x28>
    19c2:	00 00       	nop
    19c4:	bd df       	rcall	.-134    	; 0x1940 <getSystemTime_ms>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8c 19       	sub	r24, r12
    19cc:	9d 09       	sbc	r25, r13
    19ce:	ae 09       	sbc	r26, r14
    19d0:	bf 09       	sbc	r27, r15
    19d2:	8e 01       	movw	r16, r28
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	80 17       	cp	r24, r16
    19da:	91 07       	cpc	r25, r17
    19dc:	a2 07       	cpc	r26, r18
    19de:	b3 07       	cpc	r27, r19
    19e0:	58 f3       	brcs	.-42     	; 0x19b8 <delayMs+0x1e>
	{
		_delay_us(100);
	}
}
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	1f 91       	pop	r17
    19e8:	0f 91       	pop	r16
    19ea:	ff 90       	pop	r15
    19ec:	ef 90       	pop	r14
    19ee:	df 90       	pop	r13
    19f0:	cf 90       	pop	r12
    19f2:	08 95       	ret

000019f4 <assertPstr>:
 *
 *  \param exp The boolean expression that is expected to be true.
 *  \param errormsg The string that shall be shown as an error message if the given expression is false as progmem string.
 */
void assertPstr(bool exp, const char *errormsg, ...)
{
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	9f 81       	ldd	r25, Y+7	; 0x07
    19fe:	28 85       	ldd	r18, Y+8	; 0x08
	if (!exp)
    1a00:	8e 81       	ldd	r24, Y+6	; 0x06
    1a02:	81 11       	cpse	r24, r1
    1a04:	0c c0       	rjmp	.+24     	; 0x1a1e <assertPstr+0x2a>
	{
		va_list args;
		va_start(args, errormsg);
    1a06:	ae 01       	movw	r20, r28
    1a08:	47 5f       	subi	r20, 0xF7	; 247
    1a0a:	5f 4f       	sbci	r21, 0xFF	; 255
		os_errorPstr(errormsg, args);
    1a0c:	5f 93       	push	r21
    1a0e:	4f 93       	push	r20
    1a10:	2f 93       	push	r18
    1a12:	9f 93       	push	r25
    1a14:	6a d0       	rcall	.+212    	; 0x1aea <os_errorPstr>
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
		va_end(args);
	}
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	08 95       	ret

00001a24 <main>:
//! Program's entry point
int main(void)
{
	// Give the operating system a chance to initialize its private data.
	// This also registers and starts the idle program.
	os_init();
    1a24:	21 d0       	rcall	.+66     	; 0x1a68 <os_init>

	// os_init shows a boot message
	// Wait and clear the LCD
	delayMs(600);
    1a26:	88 e5       	ldi	r24, 0x58	; 88
    1a28:	92 e0       	ldi	r25, 0x02	; 2
	lcd_clear();
    1a2a:	b7 df       	rcall	.-146    	; 0x199a <delayMs>
    1a2c:	05 db       	rcall	.-2550   	; 0x1038 <lcd_clear>

	// Start the operating system
	os_startScheduler();
    1a2e:	35 d1       	rcall	.+618    	; 0x1c9a <os_startScheduler>
    1a30:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	08 95       	ret

00001a36 <os_initTimer>:
    1a36:	e0 eb       	ldi	r30, 0xB0	; 176
 *  Initializes the used timers.
 */
void os_initTimer(void)
{
	// Init timer 2 (Scheduler)
	sbi(TCCR2A, WGM21); // Clear on timer compare match
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	82 60       	ori	r24, 0x02	; 2
    1a3e:	80 83       	st	Z, r24

	sbi(TCCR2B, CS22);	 // Prescaler 1024  1
    1a40:	e1 eb       	ldi	r30, 0xB1	; 177
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	84 60       	ori	r24, 0x04	; 4
    1a48:	80 83       	st	Z, r24
	sbi(TCCR2B, CS21);	 // Prescaler 1024  1
    1a4a:	80 81       	ld	r24, Z
    1a4c:	82 60       	ori	r24, 0x02	; 2
    1a4e:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20);	 // Prescaler 1024  1
    1a50:	80 81       	ld	r24, Z
    1a52:	81 60       	ori	r24, 0x01	; 1
    1a54:	80 83       	st	Z, r24
	sbi(TIMSK2, OCIE2A); // Enable interrupt
    1a56:	e0 e7       	ldi	r30, 0x70	; 112
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	82 60       	ori	r24, 0x02	; 2
    1a5e:	80 83       	st	Z, r24
	OCR2A = 60;
    1a60:	8c e3       	ldi	r24, 0x3C	; 60
    1a62:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
    1a66:	08 95       	ret

00001a68 <os_init>:
 *  Readies stack, scheduler and heap for first use. Additionally, the LCD is initialized. In order to do those tasks,
 *  it calls the subfunction os_initScheduler().
 */
void os_init()
{
	initSystemTime();
    1a68:	4f df       	rcall	.-354    	; 0x1908 <initSystemTime>
	os_initTimer();
    1a6a:	e5 df       	rcall	.-54     	; 0x1a36 <os_initTimer>
	stopWatch_init();
    1a6c:	ac dc       	rcall	.-1704   	; 0x13c6 <stopWatch_init>

	// Init LCD display
	lcd_init();
    1a6e:	9f da       	rcall	.-2754   	; 0xfae <lcd_init>
	terminal_init();
    1a70:	f7 dc       	rcall	.-1554   	; 0x1460 <terminal_init>

	// display on
	lcd_displayOn();
    1a72:	ef da       	rcall	.-2594   	; 0x1052 <lcd_displayOn>
    1a74:	e1 da       	rcall	.-2622   	; 0x1038 <lcd_clear>
	lcd_clear();
    1a76:	88 e4       	ldi	r24, 0x48	; 72

	lcd_writeProgString(PSTR("Booting DEOS ..."));
    1a78:	94 e0       	ldi	r25, 0x04	; 4
    1a7a:	7c db       	rcall	.-2312   	; 0x1174 <lcd_writeProgString>
    1a7c:	82 e1       	ldi	r24, 0x12	; 18
    1a7e:	94 e0       	ldi	r25, 0x04	; 4

	terminal_writeProgString(PSTR("\n\n##################################################\n"));
    1a80:	01 dd       	rcall	.-1534   	; 0x1484 <terminal_writeProgString>
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	94 e0       	ldi	r25, 0x04	; 4
	INFO("Booting DEOS ...");
    1a86:	9f 93       	push	r25
    1a88:	8f 93       	push	r24
    1a8a:	88 ef       	ldi	r24, 0xF8	; 248
    1a8c:	93 e0       	ldi	r25, 0x03	; 3
    1a8e:	9f 93       	push	r25
    1a90:	8f 93       	push	r24
    1a92:	0c dd       	rcall	.-1512   	; 0x14ac <terminal_log_printf_p>
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	8f 93       	push	r24
    1a98:	88 ee       	ldi	r24, 0xE8	; 232
	INFO("Used global vars: %d/%d bytes", (uint16_t)&__heap_start - AVR_SRAM_START, STACK_OFFSET);
    1a9a:	8f 93       	push	r24
    1a9c:	88 ea       	ldi	r24, 0xA8	; 168
    1a9e:	93 e0       	ldi	r25, 0x03	; 3
    1aa0:	9f 93       	push	r25
    1aa2:	8f 93       	push	r24
    1aa4:	8a ed       	ldi	r24, 0xDA	; 218
    1aa6:	93 e0       	ldi	r25, 0x03	; 3
    1aa8:	9f 93       	push	r25
    1aaa:	8f 93       	push	r24
    1aac:	81 ed       	ldi	r24, 0xD1	; 209
    1aae:	93 e0       	ldi	r25, 0x03	; 3
    1ab0:	9f 93       	push	r25
    1ab2:	8f 93       	push	r24
    1ab4:	fb dc       	rcall	.-1546   	; 0x14ac <terminal_log_printf_p>
    1ab6:	8d e9       	ldi	r24, 0x9D	; 157
    1ab8:	93 e0       	ldi	r25, 0x03	; 3
	terminal_writeProgString(PSTR("--------------------------------------------------\n"));
    1aba:	e4 dc       	rcall	.-1592   	; 0x1484 <terminal_writeProgString>
    1abc:	8c e7       	ldi	r24, 0x7C	; 124
    1abe:	93 e0       	ldi	r25, 0x03	; 3
    1ac0:	9f 93       	push	r25

	// Security check if the stack crushes global variables
	assert((uint16_t)&__heap_start < AVR_SRAM_START + STACK_OFFSET, " Stack collides with global vars");
    1ac2:	8f 93       	push	r24
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	28 ea       	ldi	r18, 0xA8	; 168
    1ac8:	35 e0       	ldi	r19, 0x05	; 5
    1aca:	28 3e       	cpi	r18, 0xE8	; 232
    1acc:	35 40       	sbci	r19, 0x05	; 5
    1ace:	08 f0       	brcs	.+2      	; 0x1ad2 <os_init+0x6a>
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	8f 93       	push	r24
    1ad4:	8f df       	rcall	.-226    	; 0x19f4 <assertPstr>
    1ad6:	f4 d1       	rcall	.+1000   	; 0x1ec0 <os_initScheduler>
    1ad8:	8d b7       	in	r24, 0x3d	; 61

	os_initScheduler();
    1ada:	9e b7       	in	r25, 0x3e	; 62
    1adc:	0f 96       	adiw	r24, 0x0f	; 15
}
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	9e bf       	out	0x3e, r25	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	8d bf       	out	0x3d, r24	; 61
    1ae8:	08 95       	ret

00001aea <os_errorPstr>:
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	cd b7       	in	r28, 0x3d	; 61
 *
 *  \param msg The error to be displayed as progmem string
 *  \param ... Formatting arguments for the error message
 */
void os_errorPstr(const char *msg, ...)
{
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	1e 81       	ldd	r17, Y+6	; 0x06
    1af4:	0f 81       	ldd	r16, Y+7	; 0x07
	cli();
    1af6:	f8 94       	cli

	// Make sure we have enough stack left for sure (we can mess with it because we won't go out of this function)
	SP = BOTTOM_OF_MAIN_STACK;
    1af8:	8f ef       	ldi	r24, 0xFF	; 255
    1afa:	91 e2       	ldi	r25, 0x21	; 33
    1afc:	9e bf       	out	0x3e, r25	; 62
    1afe:	8d bf       	out	0x3d, r24	; 61

	// Clear display and write error message
	lcd_clear();
    1b00:	9b da       	rcall	.-2762   	; 0x1038 <lcd_clear>

	// Print error message to lcd (variadic arguments)
	va_list args;
	va_start(args, msg);
    1b02:	ce 01       	movw	r24, r28
    1b04:	08 96       	adiw	r24, 0x08	; 8
	lcd_printf_p(msg, args);
    1b06:	9f 93       	push	r25
    1b08:	8f 93       	push	r24
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	12 da       	rcall	.-3036   	; 0xf34 <lcd_printf_p>
	va_end(args);

	// Print error message to terminal (variadic arguments)
	va_start(args, msg);
    1b10:	ce 01       	movw	r24, r28
    1b12:	08 96       	adiw	r24, 0x08	; 8
	terminal_log_printf_p(PSTR("[ERROR] "), msg, args);
    1b14:	9f 93       	push	r25
    1b16:	8f 93       	push	r24
    1b18:	0f 93       	push	r16
    1b1a:	1f 93       	push	r17
    1b1c:	83 e7       	ldi	r24, 0x73	; 115
    1b1e:	93 e0       	ldi	r25, 0x03	; 3
    1b20:	9f 93       	push	r25
    1b22:	8f 93       	push	r24
    1b24:	c3 dc       	rcall	.-1658   	; 0x14ac <terminal_log_printf_p>
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
	va_end(args);

	// Catch system in this infinite loop and play a small animation to indicate an error
	while (1)
	{
		lcd_displayOn();
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	90 da       	rcall	.-2784   	; 0x1052 <lcd_displayOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b32:	9f ef       	ldi	r25, 0xFF	; 255
    1b34:	2d e3       	ldi	r18, 0x3D	; 61
    1b36:	89 e4       	ldi	r24, 0x49	; 73
    1b38:	91 50       	subi	r25, 0x01	; 1
    1b3a:	20 40       	sbci	r18, 0x00	; 0
    1b3c:	80 40       	sbci	r24, 0x00	; 0
    1b3e:	e1 f7       	brne	.-8      	; 0x1b38 <os_errorPstr+0x4e>
    1b40:	00 c0       	rjmp	.+0      	; 0x1b42 <os_errorPstr+0x58>
		_delay_ms(1500);
		lcd_displayOff();
    1b42:	00 00       	nop
    1b44:	89 da       	rcall	.-2798   	; 0x1058 <lcd_displayOff>
    1b46:	9f ef       	ldi	r25, 0xFF	; 255
    1b48:	21 ee       	ldi	r18, 0xE1	; 225
    1b4a:	84 e0       	ldi	r24, 0x04	; 4
    1b4c:	91 50       	subi	r25, 0x01	; 1
    1b4e:	20 40       	sbci	r18, 0x00	; 0
    1b50:	80 40       	sbci	r24, 0x00	; 0
    1b52:	e1 f7       	brne	.-8      	; 0x1b4c <os_errorPstr+0x62>
    1b54:	00 c0       	rjmp	.+0      	; 0x1b56 <os_errorPstr+0x6c>
    1b56:	00 00       	nop
    1b58:	eb cf       	rjmp	.-42     	; 0x1b30 <os_errorPstr+0x46>

00001b5a <prog0>:

/*!
 *  This is the idle program. The idle process owns all the memory
 *  and processor time no other process wants to have.
 */
PROGRAM(0, AUTOSTART)
    1b5a:	c0 e0       	ldi	r28, 0x00	; 0
    1b5c:	d0 e0       	ldi	r29, 0x00	; 0
    1b5e:	06 c0       	rjmp	.+12     	; 0x1b6c <prog0+0x12>
    1b60:	8e e2       	ldi	r24, 0x2E	; 46
    1b62:	b3 da       	rcall	.-2714   	; 0x10ca <lcd_writeChar>
    1b64:	84 e6       	ldi	r24, 0x64	; 100
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	18 df       	rcall	.-464    	; 0x199a <delayMs>
    1b6a:	21 96       	adiw	r28, 0x01	; 1
    1b6c:	c3 30       	cpi	r28, 0x03	; 3
    1b6e:	d1 05       	cpc	r29, r1
    1b70:	bc f3       	brlt	.-18     	; 0x1b60 <prog0+0x6>
    1b72:	62 da       	rcall	.-2876   	; 0x1038 <lcd_clear>
    1b74:	84 e6       	ldi	r24, 0x64	; 100
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	10 df       	rcall	.-480    	; 0x199a <delayMs>
    1b7a:	ef cf       	rjmp	.-34     	; 0x1b5a <prog0>

00001b7c <addressOfProgram>:
    1b7c:	bc 01       	movw	r22, r24
    1b7e:	99 0f       	add	r25, r25
    1b80:	88 0b       	sbc	r24, r24
    1b82:	99 0b       	sbc	r25, r25
    1b84:	08 95       	ret

00001b86 <os_checkAutostartProgram>:
    1b86:	21 e0       	ldi	r18, 0x01	; 1
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <os_checkAutostartProgram+0xa>
    1b8c:	22 0f       	add	r18, r18
    1b8e:	33 1f       	adc	r19, r19
    1b90:	8a 95       	dec	r24
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <os_checkAutostartProgram+0x6>
    1b94:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <os_autostart>
    1b98:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <os_autostart+0x1>
    1b9c:	28 23       	and	r18, r24
    1b9e:	39 23       	and	r19, r25
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	23 2b       	or	r18, r19
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <os_checkAutostartProgram+0x22>
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	08 95       	ret

00001baa <os_lookupProgramFunction>:
    1baa:	80 31       	cpi	r24, 0x10	; 16
    1bac:	48 f4       	brcc	.+18     	; 0x1bc0 <os_lookupProgramFunction+0x16>
    1bae:	e8 2f       	mov	r30, r24
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	ee 0f       	add	r30, r30
    1bb4:	ff 1f       	adc	r31, r31
    1bb6:	e1 5a       	subi	r30, 0xA1	; 161
    1bb8:	fa 4f       	sbci	r31, 0xFA	; 250
    1bba:	80 81       	ld	r24, Z
    1bbc:	91 81       	ldd	r25, Z+1	; 0x01
    1bbe:	08 95       	ret
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	08 95       	ret

00001bc6 <os_getProcessSlot>:
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	9c 01       	movw	r18, r24
    1bca:	22 0f       	add	r18, r18
    1bcc:	33 1f       	adc	r19, r19
    1bce:	82 0f       	add	r24, r18
    1bd0:	93 1f       	adc	r25, r19
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	81 5d       	subi	r24, 0xD1	; 209
    1bd8:	9a 4f       	sbci	r25, 0xFA	; 250
    1bda:	08 95       	ret

00001bdc <os_getProgramSlot>:
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	81 5a       	subi	r24, 0xA1	; 161
    1be4:	9a 4f       	sbci	r25, 0xFA	; 250
    1be6:	08 95       	ret

00001be8 <os_getCurrentProc>:
    1be8:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <currentProc>
    1bec:	08 95       	ret

00001bee <os_getSchedulingStrategy>:
    1bee:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <currSchedStrat>
    1bf2:	08 95       	ret

00001bf4 <os_enterCriticalSection>:
    1bf4:	cf 93       	push	r28
    1bf6:	cf b7       	in	r28, 0x3f	; 63
    1bf8:	cc 1f       	adc	r28, r28
    1bfa:	cc 27       	eor	r28, r28
    1bfc:	cc 1f       	adc	r28, r28
    1bfe:	f8 94       	cli
    1c00:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <criticalSectionCount>
    1c04:	8f 3f       	cpi	r24, 0xFF	; 255
    1c06:	41 f4       	brne	.+16     	; 0x1c18 <os_enterCriticalSection+0x24>
    1c08:	8a e3       	ldi	r24, 0x3A	; 58
    1c0a:	95 e0       	ldi	r25, 0x05	; 5
    1c0c:	9f 93       	push	r25
    1c0e:	8f 93       	push	r24
    1c10:	6c df       	rcall	.-296    	; 0x1aea <os_errorPstr>
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	03 c0       	rjmp	.+6      	; 0x1c1e <os_enterCriticalSection+0x2a>
    1c18:	8f 5f       	subi	r24, 0xFF	; 255
    1c1a:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <criticalSectionCount>
    1c1e:	e0 e7       	ldi	r30, 0x70	; 112
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8d 7f       	andi	r24, 0xFD	; 253
    1c26:	80 83       	st	Z, r24
    1c28:	cc 23       	and	r28, r28
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <os_enterCriticalSection+0x3a>
    1c2c:	78 94       	sei
    1c2e:	cf 91       	pop	r28
    1c30:	08 95       	ret

00001c32 <os_leaveCriticalSection>:
    1c32:	cf 93       	push	r28
    1c34:	cf b7       	in	r28, 0x3f	; 63
    1c36:	cc 1f       	adc	r28, r28
    1c38:	cc 27       	eor	r28, r28
    1c3a:	cc 1f       	adc	r28, r28
    1c3c:	f8 94       	cli
    1c3e:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <criticalSectionCount>
    1c42:	81 11       	cpse	r24, r1
    1c44:	08 c0       	rjmp	.+16     	; 0x1c56 <os_leaveCriticalSection+0x24>
    1c46:	80 e2       	ldi	r24, 0x20	; 32
    1c48:	95 e0       	ldi	r25, 0x05	; 5
    1c4a:	9f 93       	push	r25
    1c4c:	8f 93       	push	r24
    1c4e:	4d df       	rcall	.-358    	; 0x1aea <os_errorPstr>
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	03 c0       	rjmp	.+6      	; 0x1c5c <os_leaveCriticalSection+0x2a>
    1c56:	81 50       	subi	r24, 0x01	; 1
    1c58:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <criticalSectionCount>
    1c5c:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <criticalSectionCount>
    1c60:	81 11       	cpse	r24, r1
    1c62:	05 c0       	rjmp	.+10     	; 0x1c6e <os_leaveCriticalSection+0x3c>
    1c64:	e0 e7       	ldi	r30, 0x70	; 112
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	82 60       	ori	r24, 0x02	; 2
    1c6c:	80 83       	st	Z, r24
    1c6e:	cc 23       	and	r28, r28
    1c70:	09 f0       	breq	.+2      	; 0x1c74 <os_leaveCriticalSection+0x42>
    1c72:	78 94       	sei
    1c74:	cf 91       	pop	r28
    1c76:	08 95       	ret

00001c78 <registerProgram0>:
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	b0 df       	rcall	.-160    	; 0x1bdc <os_getProgramSlot>
    1c7c:	2d ea       	ldi	r18, 0xAD	; 173
    1c7e:	3d e0       	ldi	r19, 0x0D	; 13
    1c80:	fc 01       	movw	r30, r24
    1c82:	31 83       	std	Z+1, r19	; 0x01
    1c84:	20 83       	st	Z, r18
    1c86:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <os_autostart>
    1c8a:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <os_autostart+0x1>
    1c8e:	81 60       	ori	r24, 0x01	; 1
    1c90:	90 93 80 05 	sts	0x0580, r25	; 0x800580 <os_autostart+0x1>
    1c94:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <os_autostart>
    1c98:	08 95       	ret

00001c9a <os_startScheduler>:
 *  function to start the concurrent execution of the applications.
 */
void os_startScheduler(void)
{
	 // Set currentProc to idle process
	 currentProc = 0;
    1c9a:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <currentProc>

	 // Set the state of the now chosen process to running
	 os_processes[currentProc].state = OS_PS_RUNNING;
    1c9e:	ef e2       	ldi	r30, 0x2F	; 47
    1ca0:	f5 e0       	ldi	r31, 0x05	; 5
    1ca2:	82 e0       	ldi	r24, 0x02	; 2
    1ca4:	81 83       	std	Z+1, r24	; 0x01

	 // Set SP on the stack of the idle process, this will cause the idle process to start running,
	 // as the SP now points onto the idle functions address
	 SP = os_processes[currentProc].sp.as_int;
    1ca6:	82 81       	ldd	r24, Z+2	; 0x02
    1ca8:	93 81       	ldd	r25, Z+3	; 0x03
    1caa:	9e bf       	out	0x3e, r25	; 62
    1cac:	8d bf       	out	0x3d, r24	; 61

	 // Load initial context and start the idle process
	 restoreContext();
    1cae:	0f 90       	pop	r0
    1cb0:	1f 90       	pop	r1
    1cb2:	2f 90       	pop	r2
    1cb4:	3f 90       	pop	r3
    1cb6:	4f 90       	pop	r4
    1cb8:	5f 90       	pop	r5
    1cba:	6f 90       	pop	r6
    1cbc:	7f 90       	pop	r7
    1cbe:	8f 90       	pop	r8
    1cc0:	9f 90       	pop	r9
    1cc2:	af 90       	pop	r10
    1cc4:	bf 90       	pop	r11
    1cc6:	cf 90       	pop	r12
    1cc8:	df 90       	pop	r13
    1cca:	ef 90       	pop	r14
    1ccc:	ff 90       	pop	r15
    1cce:	0f 91       	pop	r16
    1cd0:	1f 91       	pop	r17
    1cd2:	2f 91       	pop	r18
    1cd4:	3f 91       	pop	r19
    1cd6:	4f 91       	pop	r20
    1cd8:	5f 91       	pop	r21
    1cda:	6f 91       	pop	r22
    1cdc:	7f 91       	pop	r23
    1cde:	8f 91       	pop	r24
    1ce0:	9f 91       	pop	r25
    1ce2:	af 91       	pop	r26
    1ce4:	bf 91       	pop	r27
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	ef 91       	pop	r30
    1cec:	ff 91       	pop	r31
    1cee:	ff bf       	out	0x3f, r31	; 63
    1cf0:	ff 91       	pop	r31
    1cf2:	18 95       	reti

	 os_error("os_startScheduler() terminated against all odds - scary stuff...");
    1cf4:	89 e5       	ldi	r24, 0x59	; 89
    1cf6:	94 e0       	ldi	r25, 0x04	; 4
    1cf8:	9f 93       	push	r25
    1cfa:	8f 93       	push	r24
    1cfc:	f6 de       	rcall	.-532    	; 0x1aea <os_errorPstr>
	 // You should never get here, as the scheduler must not terminate
	

}
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	08 95       	ret

00001d04 <os_getStackChecksum>:
	// Be aware of cases where the whole stack is less than 10 bytes
	// (although this actually won't happen due to the call to saveContext() beforehand, which always puts 33 bytes on to the stack already)
	
	
	stack_checksum_t checksum = 0;
	uint8_t *stack_bottom = (uint8_t *)(uintptr_t)PROCESS_STACK_BOTTOM(pid);
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	27 e6       	ldi	r18, 0x67	; 103
    1d08:	33 e0       	ldi	r19, 0x03	; 3
    1d0a:	82 9f       	mul	r24, r18
    1d0c:	a0 01       	movw	r20, r0
    1d0e:	83 9f       	mul	r24, r19
    1d10:	50 0d       	add	r21, r0
    1d12:	92 9f       	mul	r25, r18
    1d14:	50 0d       	add	r21, r0
    1d16:	11 24       	eor	r1, r1
    1d18:	2f e1       	ldi	r18, 0x1F	; 31
    1d1a:	31 e2       	ldi	r19, 0x21	; 33
    1d1c:	24 1b       	sub	r18, r20
    1d1e:	35 0b       	sbc	r19, r21
	uint8_t *stack_top = (uint8_t *)(uintptr_t)(os_processes[pid].sp.as_int);
    1d20:	fc 01       	movw	r30, r24
    1d22:	ee 0f       	add	r30, r30
    1d24:	ff 1f       	adc	r31, r31
    1d26:	e8 0f       	add	r30, r24
    1d28:	f9 1f       	adc	r31, r25
    1d2a:	ee 0f       	add	r30, r30
    1d2c:	ff 1f       	adc	r31, r31
    1d2e:	e1 5d       	subi	r30, 0xD1	; 209
    1d30:	fa 4f       	sbci	r31, 0xFA	; 250
    1d32:	42 81       	ldd	r20, Z+2	; 0x02
    1d34:	53 81       	ldd	r21, Z+3	; 0x03
	uint8_t stack_size = stack_bottom - stack_top;
    1d36:	24 1b       	sub	r18, r20

	if (stack_size >= 16)
    1d38:	20 31       	cpi	r18, 0x10	; 16
    1d3a:	78 f4       	brcc	.+30     	; 0x1d5a <os_getStackChecksum+0x56>
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	17 c0       	rjmp	.+46     	; 0x1d70 <os_getStackChecksum+0x6c>
	{
		for (uint8_t i = 0; i < 16; i++)
		{
			checksum ^= stack_top[i * (stack_size / 16)];
    1d42:	32 2f       	mov	r19, r18
    1d44:	32 95       	swap	r19
    1d46:	3f 70       	andi	r19, 0x0F	; 15
    1d48:	fa 01       	movw	r30, r20
    1d4a:	39 9f       	mul	r19, r25
    1d4c:	e0 0d       	add	r30, r0
    1d4e:	f1 1d       	adc	r31, r1
    1d50:	11 24       	eor	r1, r1
    1d52:	30 81       	ld	r19, Z
    1d54:	83 27       	eor	r24, r19
	uint8_t *stack_top = (uint8_t *)(uintptr_t)(os_processes[pid].sp.as_int);
	uint8_t stack_size = stack_bottom - stack_top;

	if (stack_size >= 16)
	{
		for (uint8_t i = 0; i < 16; i++)
    1d56:	9f 5f       	subi	r25, 0xFF	; 255
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <os_getStackChecksum+0x5a>
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 31       	cpi	r25, 0x10	; 16
    1d60:	80 f3       	brcs	.-32     	; 0x1d42 <os_getStackChecksum+0x3e>
    1d62:	08 95       	ret
	}
	else
	{
		for (uint8_t i = 0; i < stack_size; i++)
		{
			checksum ^= stack_top[i];
    1d64:	fa 01       	movw	r30, r20
    1d66:	e9 0f       	add	r30, r25
    1d68:	f1 1d       	adc	r31, r1
    1d6a:	30 81       	ld	r19, Z
    1d6c:	83 27       	eor	r24, r19
			checksum ^= stack_top[i * (stack_size / 16)];
		}
	}
	else
	{
		for (uint8_t i = 0; i < stack_size; i++)
    1d6e:	9f 5f       	subi	r25, 0xFF	; 255
    1d70:	92 17       	cp	r25, r18
    1d72:	c0 f3       	brcs	.-16     	; 0x1d64 <os_getStackChecksum+0x60>
		}
	}

	return checksum;

}
    1d74:	08 95       	ret

00001d76 <os_exec>:
 *                  strategies.
 *  \return The index of the new process (throws error on failure and returns
 *          INVALID_PROCESS as specified in defines.h).
 */
process_id_t os_exec(program_id_t programID, priority_t priority)
{
    1d76:	ef 92       	push	r14
    1d78:	ff 92       	push	r15
    1d7a:	0f 93       	push	r16
    1d7c:	1f 93       	push	r17
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	e8 2e       	mov	r14, r24
    1d84:	f6 2e       	mov	r15, r22
	// 1. Enter a critical section
	os_enterCriticalSection();
    1d86:	36 df       	rcall	.-404    	; 0x1bf4 <os_enterCriticalSection>

	// 2. Find free slot in os_processes array
	int free_slot = -1;

	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    1d88:	c0 e0       	ldi	r28, 0x00	; 0
    1d8a:	d0 e0       	ldi	r29, 0x00	; 0
    1d8c:	0d c0       	rjmp	.+26     	; 0x1da8 <os_exec+0x32>
	{
		if (os_processes[i].state == OS_PS_UNUSED)
    1d8e:	fe 01       	movw	r30, r28
    1d90:	ee 0f       	add	r30, r30
    1d92:	ff 1f       	adc	r31, r31
    1d94:	ec 0f       	add	r30, r28
    1d96:	fd 1f       	adc	r31, r29
    1d98:	ee 0f       	add	r30, r30
    1d9a:	ff 1f       	adc	r31, r31
    1d9c:	e1 5d       	subi	r30, 0xD1	; 209
    1d9e:	fa 4f       	sbci	r31, 0xFA	; 250
    1da0:	81 81       	ldd	r24, Z+1	; 0x01
    1da2:	88 23       	and	r24, r24
    1da4:	31 f0       	breq	.+12     	; 0x1db2 <os_exec+0x3c>
	os_enterCriticalSection();

	// 2. Find free slot in os_processes array
	int free_slot = -1;

	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    1da6:	21 96       	adiw	r28, 0x01	; 1
    1da8:	c8 30       	cpi	r28, 0x08	; 8
    1daa:	d1 05       	cpc	r29, r1
    1dac:	84 f3       	brlt	.-32     	; 0x1d8e <os_exec+0x18>
{
	// 1. Enter a critical section
	os_enterCriticalSection();

	// 2. Find free slot in os_processes array
	int free_slot = -1;
    1dae:	cf ef       	ldi	r28, 0xFF	; 255
    1db0:	df ef       	ldi	r29, 0xFF	; 255
			break;
		}
	}


	if (free_slot == -1)
    1db2:	cf 3f       	cpi	r28, 0xFF	; 255
    1db4:	8f ef       	ldi	r24, 0xFF	; 255
    1db6:	d8 07       	cpc	r29, r24
    1db8:	81 f4       	brne	.+32     	; 0x1dda <os_exec+0x64>
	{
		// os_error("No free slot available");
		terminal_log_printf_p(PSTR("os_exec() -> "), PSTR("No free slot available\n"));
    1dba:	8e eb       	ldi	r24, 0xBE	; 190
    1dbc:	94 e0       	ldi	r25, 0x04	; 4
    1dbe:	9f 93       	push	r25
    1dc0:	8f 93       	push	r24
    1dc2:	80 eb       	ldi	r24, 0xB0	; 176
    1dc4:	94 e0       	ldi	r25, 0x04	; 4
    1dc6:	9f 93       	push	r25
    1dc8:	8f 93       	push	r24
		os_leaveCriticalSection();
    1dca:	70 db       	rcall	.-2336   	; 0x14ac <terminal_log_printf_p>
    1dcc:	32 df       	rcall	.-412    	; 0x1c32 <os_leaveCriticalSection>
		return INVALID_PROCESS;
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	1f ef       	ldi	r17, 0xFF	; 255
    1dd8:	6b c0       	rjmp	.+214    	; 0x1eb0 <os_exec+0x13a>
		os_leaveCriticalSection();
		return INVALID_PROCESS;
	}

	// 4. Save ProgramID and the process' state (and some more)
	os_processes[free_slot].progID = programID;
    1dda:	8e 01       	movw	r16, r28
    1ddc:	00 0f       	add	r16, r16
    1dde:	11 1f       	adc	r17, r17
    1de0:	0c 0f       	add	r16, r28
    1de2:	1d 1f       	adc	r17, r29
    1de4:	00 0f       	add	r16, r16
    1de6:	11 1f       	adc	r17, r17
    1de8:	01 5d       	subi	r16, 0xD1	; 209
    1dea:	1a 4f       	sbci	r17, 0xFA	; 250
    1dec:	d8 01       	movw	r26, r16
    1dee:	ec 92       	st	X, r14
	os_processes[free_slot].state = OS_PS_READY;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	11 96       	adiw	r26, 0x01	; 1
    1df4:	8c 93       	st	X, r24
    1df6:	11 97       	sbiw	r26, 0x01	; 1
	os_processes[free_slot].priority = priority;
    1df8:	14 96       	adiw	r26, 0x04	; 4
    1dfa:	fc 92       	st	X, r15
    1dfc:	14 97       	sbiw	r26, 0x04	; 4

	// Initialize the stack pointer
	os_processes[free_slot].sp.as_int = PROCESS_STACK_BOTTOM(free_slot);
    1dfe:	87 e6       	ldi	r24, 0x67	; 103
    1e00:	93 e0       	ldi	r25, 0x03	; 3
    1e02:	c8 9f       	mul	r28, r24
    1e04:	90 01       	movw	r18, r0
    1e06:	c9 9f       	mul	r28, r25
    1e08:	30 0d       	add	r19, r0
    1e0a:	d8 9f       	mul	r29, r24
    1e0c:	30 0d       	add	r19, r0
    1e0e:	11 24       	eor	r1, r1
    1e10:	8f e1       	ldi	r24, 0x1F	; 31
    1e12:	91 e2       	ldi	r25, 0x21	; 33
    1e14:	7c 01       	movw	r14, r24
    1e16:	e2 1a       	sub	r14, r18
    1e18:	f3 0a       	sbc	r15, r19

	// 5.1 push the address of the function to the stack
	// Note for task 2: use address of os_dispatcher instead

	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)(addressOfProgram(function));
    1e1a:	c7 01       	movw	r24, r14
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	13 96       	adiw	r26, 0x03	; 3
    1e20:	9c 93       	st	X, r25
    1e22:	8e 93       	st	-X, r24
    1e24:	12 97       	sbiw	r26, 0x02	; 2
    1e26:	8e ef       	ldi	r24, 0xFE	; 254
    1e28:	90 e1       	ldi	r25, 0x10	; 16
    1e2a:	a8 de       	rcall	.-688    	; 0x1b7c <addressOfProgram>
    1e2c:	f7 01       	movw	r30, r14
    1e2e:	60 83       	st	Z, r22
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 8));
    1e30:	d8 01       	movw	r26, r16
    1e32:	12 96       	adiw	r26, 0x02	; 2
    1e34:	ed 91       	ld	r30, X+
    1e36:	fc 91       	ld	r31, X
    1e38:	13 97       	sbiw	r26, 0x03	; 3
    1e3a:	9f 01       	movw	r18, r30
    1e3c:	21 50       	subi	r18, 0x01	; 1
    1e3e:	31 09       	sbc	r19, r1
    1e40:	13 96       	adiw	r26, 0x03	; 3
    1e42:	3c 93       	st	X, r19
    1e44:	2e 93       	st	-X, r18
    1e46:	12 97       	sbiw	r26, 0x02	; 2
    1e48:	70 83       	st	Z, r23
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 16));
    1e4a:	12 96       	adiw	r26, 0x02	; 2
    1e4c:	ed 91       	ld	r30, X+
    1e4e:	fc 91       	ld	r31, X
    1e50:	13 97       	sbiw	r26, 0x03	; 3
    1e52:	9f 01       	movw	r18, r30
    1e54:	21 50       	subi	r18, 0x01	; 1
    1e56:	31 09       	sbc	r19, r1
    1e58:	13 96       	adiw	r26, 0x03	; 3
    1e5a:	3c 93       	st	X, r19
    1e5c:	2e 93       	st	-X, r18
    1e5e:	12 97       	sbiw	r26, 0x02	; 2
    1e60:	80 83       	st	Z, r24

	// 5.2 leave space on the process stack for register entries
	for (uint8_t i = 0; i < 33; i++)
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	12 c0       	rjmp	.+36     	; 0x1e8a <os_exec+0x114>
	{
		*os_processes[free_slot].sp.as_ptr-- = 0;
    1e66:	fe 01       	movw	r30, r28
    1e68:	ee 0f       	add	r30, r30
    1e6a:	ff 1f       	adc	r31, r31
    1e6c:	ec 0f       	add	r30, r28
    1e6e:	fd 1f       	adc	r31, r29
    1e70:	ee 0f       	add	r30, r30
    1e72:	ff 1f       	adc	r31, r31
    1e74:	e1 5d       	subi	r30, 0xD1	; 209
    1e76:	fa 4f       	sbci	r31, 0xFA	; 250
    1e78:	a2 81       	ldd	r26, Z+2	; 0x02
    1e7a:	b3 81       	ldd	r27, Z+3	; 0x03
    1e7c:	9d 01       	movw	r18, r26
    1e7e:	21 50       	subi	r18, 0x01	; 1
    1e80:	31 09       	sbc	r19, r1
    1e82:	33 83       	std	Z+3, r19	; 0x03
    1e84:	22 83       	std	Z+2, r18	; 0x02
    1e86:	1c 92       	st	X, r1
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)(addressOfProgram(function));
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 8));
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 16));

	// 5.2 leave space on the process stack for register entries
	for (uint8_t i = 0; i < 33; i++)
    1e88:	8f 5f       	subi	r24, 0xFF	; 255
    1e8a:	81 32       	cpi	r24, 0x21	; 33
	{
		*os_processes[free_slot].sp.as_ptr-- = 0;
	}

	// For task 2: Save the stack checksum
	os_processes[free_slot].checksum = os_getStackChecksum(free_slot);
    1e8c:	60 f3       	brcs	.-40     	; 0x1e66 <os_exec+0xf0>
    1e8e:	1c 2f       	mov	r17, r28
    1e90:	8c 2f       	mov	r24, r28
    1e92:	38 df       	rcall	.-400    	; 0x1d04 <os_getStackChecksum>
    1e94:	fe 01       	movw	r30, r28
    1e96:	ee 0f       	add	r30, r30
    1e98:	ff 1f       	adc	r31, r31
    1e9a:	ec 0f       	add	r30, r28
    1e9c:	fd 1f       	adc	r31, r29
    1e9e:	ee 0f       	add	r30, r30
    1ea0:	ff 1f       	adc	r31, r31
    1ea2:	e1 5d       	subi	r30, 0xD1	; 209

	os_resetProcessSchedulingInformation(os_getSchedulingStrategy(), free_slot);
    1ea4:	fa 4f       	sbci	r31, 0xFA	; 250
    1ea6:	85 83       	std	Z+5, r24	; 0x05
    1ea8:	a2 de       	rcall	.-700    	; 0x1bee <os_getSchedulingStrategy>
    1eaa:	6c 2f       	mov	r22, r28
    1eac:	fe d1       	rcall	.+1020   	; 0x22aa <os_resetProcessSchedulingInformation>

	// 6. Leave Critical Section
	os_leaveCriticalSection();
    1eae:	c1 de       	rcall	.-638    	; 0x1c32 <os_leaveCriticalSection>
    1eb0:	81 2f       	mov	r24, r17
	return free_slot;
	
	
	

}
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	ff 90       	pop	r15
    1ebc:	ef 90       	pop	r14
    1ebe:	08 95       	ret

00001ec0 <os_initScheduler>:
    1ec0:	cf 93       	push	r28
 *  In order for the scheduler to work properly, it must have the chance to
 *  initialize its internal data-structures and register and start the idle
 *  program.
 */
void os_initScheduler(void)
{
    1ec2:	df 93       	push	r29
	// 1.
	// As the processes are just being initialized, all slots should be unused so far.
	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0b c0       	rjmp	.+22     	; 0x1ee0 <os_initScheduler+0x20>
	{
		os_processes[i].state = OS_PS_UNUSED;
    1eca:	fc 01       	movw	r30, r24
    1ecc:	ee 0f       	add	r30, r30
    1ece:	ff 1f       	adc	r31, r31
    1ed0:	e8 0f       	add	r30, r24
    1ed2:	f9 1f       	adc	r31, r25
    1ed4:	ee 0f       	add	r30, r30
    1ed6:	ff 1f       	adc	r31, r31
    1ed8:	e1 5d       	subi	r30, 0xD1	; 209
    1eda:	fa 4f       	sbci	r31, 0xFA	; 250
    1edc:	11 82       	std	Z+1, r1	; 0x01
 */
void os_initScheduler(void)
{
	// 1.
	// As the processes are just being initialized, all slots should be unused so far.
	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	88 30       	cpi	r24, 0x08	; 8
    1ee2:	91 05       	cpc	r25, r1
    1ee4:	94 f3       	brlt	.-28     	; 0x1eca <os_initScheduler+0xa>
    1ee6:	c0 e0       	ldi	r28, 0x00	; 0
    1ee8:	d0 e0       	ldi	r29, 0x00	; 0
    1eea:	08 c0       	rjmp	.+16     	; 0x1efc <os_initScheduler+0x3c>
	}

	// Start all registered programs, which a flagged as autostart (i.e. call os_exec on them).
	for (int i = 0; i < MAX_NUMBER_OF_PROGRAMS; i++)
	{
		if (os_checkAutostartProgram(i))
    1eec:	8c 2f       	mov	r24, r28
    1eee:	4b de       	rcall	.-874    	; 0x1b86 <os_checkAutostartProgram>
    1ef0:	88 23       	and	r24, r24
    1ef2:	19 f0       	breq	.+6      	; 0x1efa <os_initScheduler+0x3a>
		{
			os_exec(i, DEFAULT_PRIORITY);
    1ef4:	62 e0       	ldi	r22, 0x02	; 2
    1ef6:	8c 2f       	mov	r24, r28
    1ef8:	3e df       	rcall	.-388    	; 0x1d76 <os_exec>
	{
		os_processes[i].state = OS_PS_UNUSED;
	}

	// Start all registered programs, which a flagged as autostart (i.e. call os_exec on them).
	for (int i = 0; i < MAX_NUMBER_OF_PROGRAMS; i++)
    1efa:	21 96       	adiw	r28, 0x01	; 1
    1efc:	c0 31       	cpi	r28, 0x10	; 16
    1efe:	d1 05       	cpc	r29, r1
    1f00:	ac f3       	brlt	.-22     	; 0x1eec <os_initScheduler+0x2c>
		{
			os_exec(i, DEFAULT_PRIORITY);
		}

	}
	os_resetSchedulingInformation(currSchedStrat);
    1f02:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <currSchedStrat>
    1f06:	f9 d1       	rcall	.+1010   	; 0x22fa <os_resetSchedulingInformation>

	delayMs(3000);
    1f08:	88 eb       	ldi	r24, 0xB8	; 184
    1f0a:	9b e0       	ldi	r25, 0x0B	; 11
    1f0c:	46 dd       	rcall	.-1396   	; 0x199a <delayMs>
    1f0e:	20 91 5f 05 	lds	r18, 0x055F	; 0x80055f <os_programs>

	// Uncomment:
	assert(os_programs[0] != NULL, "There is no idle proc");
    1f12:	30 91 60 05 	lds	r19, 0x0560	; 0x800560 <os_programs+0x1>
    1f16:	8a e9       	ldi	r24, 0x9A	; 154
    1f18:	94 e0       	ldi	r25, 0x04	; 4
    1f1a:	9f 93       	push	r25
    1f1c:	8f 93       	push	r24
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	23 2b       	or	r18, r19
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <os_initScheduler+0x66>
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	8f 93       	push	r24
    1f28:	65 dd       	rcall	.-1334   	; 0x19f4 <assertPstr>
    1f2a:	0f 90       	pop	r0
}
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	08 95       	ret

00001f36 <os_isStackInBounds>:
    1f36:	8f 92       	push	r8
 *
 *  \param pid The ID of the process for which the stack pointer has to be checked.
 *  \return True if the stack pointer is still in its bounds.
 */
bool os_isStackInBounds(process_id_t pid)
{
    1f38:	9f 92       	push	r9
    1f3a:	af 92       	push	r10
    1f3c:	bf 92       	push	r11
    1f3e:	cf 92       	push	r12
    1f40:	df 92       	push	r13
    1f42:	ef 92       	push	r14
    1f44:	ff 92       	push	r15
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
	if (os_processes[pid].sp.as_int > PROCESS_STACK_BOTTOM(pid) || os_processes[pid].sp.as_int < PROCESS_STACK_BOTTOM(pid) - STACK_SIZE_PROC)
    1f4a:	48 2f       	mov	r20, r24
    1f4c:	50 e0       	ldi	r21, 0x00	; 0
    1f4e:	fa 01       	movw	r30, r20
    1f50:	ee 0f       	add	r30, r30
    1f52:	ff 1f       	adc	r31, r31
    1f54:	e4 0f       	add	r30, r20
    1f56:	f5 1f       	adc	r31, r21
    1f58:	ee 0f       	add	r30, r30
    1f5a:	ff 1f       	adc	r31, r31
    1f5c:	e1 5d       	subi	r30, 0xD1	; 209
    1f5e:	fa 4f       	sbci	r31, 0xFA	; 250
    1f60:	c2 80       	ldd	r12, Z+2	; 0x02
    1f62:	d3 80       	ldd	r13, Z+3	; 0x03
    1f64:	e1 2c       	mov	r14, r1
    1f66:	f1 2c       	mov	r15, r1
    1f68:	9a 01       	movw	r18, r20
    1f6a:	a7 e6       	ldi	r26, 0x67	; 103
    1f6c:	b3 e0       	ldi	r27, 0x03	; 3
    1f6e:	91 d3       	rcall	.+1826   	; 0x2692 <__umulhisi3>
    1f70:	0f e1       	ldi	r16, 0x1F	; 31
    1f72:	11 e2       	ldi	r17, 0x21	; 33
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	06 1b       	sub	r16, r22
    1f7a:	17 0b       	sbc	r17, r23
    1f7c:	28 0b       	sbc	r18, r24
    1f7e:	39 0b       	sbc	r19, r25
    1f80:	0c 15       	cp	r16, r12
    1f82:	1d 05       	cpc	r17, r13
    1f84:	2e 05       	cpc	r18, r14
    1f86:	3f 05       	cpc	r19, r15
    1f88:	88 f0       	brcs	.+34     	; 0x1fac <os_isStackInBounds+0x76>
    1f8a:	08 eb       	ldi	r16, 0xB8	; 184
    1f8c:	1d e1       	ldi	r17, 0x1D	; 29
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	48 01       	movw	r8, r16
    1f94:	59 01       	movw	r10, r18
    1f96:	86 1a       	sub	r8, r22
    1f98:	97 0a       	sbc	r9, r23
    1f9a:	a8 0a       	sbc	r10, r24
    1f9c:	b9 0a       	sbc	r11, r25
    1f9e:	c8 14       	cp	r12, r8
    1fa0:	d9 04       	cpc	r13, r9
    1fa2:	ea 04       	cpc	r14, r10
    1fa4:	fb 04       	cpc	r15, r11
    1fa6:	20 f4       	brcc	.+8      	; 0x1fb0 <os_isStackInBounds+0x7a>
	{
		return false;
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	03 c0       	rjmp	.+6      	; 0x1fb2 <os_isStackInBounds+0x7c>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	01 c0       	rjmp	.+2      	; 0x1fb2 <os_isStackInBounds+0x7c>
	}
	return true;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
}
    1fb2:	1f 91       	pop	r17
    1fb4:	0f 91       	pop	r16
    1fb6:	ff 90       	pop	r15
    1fb8:	ef 90       	pop	r14
    1fba:	df 90       	pop	r13
    1fbc:	cf 90       	pop	r12
    1fbe:	bf 90       	pop	r11
    1fc0:	af 90       	pop	r10
    1fc2:	9f 90       	pop	r9
    1fc4:	8f 90       	pop	r8
    1fc6:	08 95       	ret

00001fc8 <__vector_13>:
ISR(TIMER2_COMPA_vect)
{
	// 1. Is implicitly done

	// 2. Save runtime-context of recently current process using the well-known macro
	saveContext();
    1fc8:	ff 93       	push	r31
    1fca:	ff b7       	in	r31, 0x3f	; 63
    1fcc:	ff 93       	push	r31
    1fce:	ef 93       	push	r30
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	bf 93       	push	r27
    1fd6:	af 93       	push	r26
    1fd8:	9f 93       	push	r25
    1fda:	8f 93       	push	r24
    1fdc:	7f 93       	push	r23
    1fde:	6f 93       	push	r22
    1fe0:	5f 93       	push	r21
    1fe2:	4f 93       	push	r20
    1fe4:	3f 93       	push	r19
    1fe6:	2f 93       	push	r18
    1fe8:	1f 93       	push	r17
    1fea:	0f 93       	push	r16
    1fec:	ff 92       	push	r15
    1fee:	ef 92       	push	r14
    1ff0:	df 92       	push	r13
    1ff2:	cf 92       	push	r12
    1ff4:	bf 92       	push	r11
    1ff6:	af 92       	push	r10
    1ff8:	9f 92       	push	r9
    1ffa:	8f 92       	push	r8
    1ffc:	7f 92       	push	r7
    1ffe:	6f 92       	push	r6
    2000:	5f 92       	push	r5
    2002:	4f 92       	push	r4
    2004:	3f 92       	push	r3
    2006:	2f 92       	push	r2
    2008:	1f 92       	push	r1
    200a:	11 24       	eor	r1, r1
    200c:	0f 92       	push	r0

	// 3. Save stack pointer of current process
	os_processes[currentProc].sp.as_int = SP;
    200e:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <currentProc>
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	2d b7       	in	r18, 0x3d	; 61
    2016:	3e b7       	in	r19, 0x3e	; 62
    2018:	fc 01       	movw	r30, r24
    201a:	ee 0f       	add	r30, r30
    201c:	ff 1f       	adc	r31, r31
    201e:	e8 0f       	add	r30, r24
    2020:	f9 1f       	adc	r31, r25
    2022:	ee 0f       	add	r30, r30
    2024:	ff 1f       	adc	r31, r31
    2026:	e1 5d       	subi	r30, 0xD1	; 209
    2028:	fa 4f       	sbci	r31, 0xFA	; 250
    202a:	33 83       	std	Z+3, r19	; 0x03
    202c:	22 83       	std	Z+2, r18	; 0x02

	// 4. Set stack pointer onto ISR-Stack
	SP = BOTTOM_OF_ISR_STACK;
    202e:	8f ed       	ldi	r24, 0xDF	; 223
    2030:	91 e2       	ldi	r25, 0x21	; 33
    2032:	9e bf       	out	0x3e, r25	; 62
    2034:	8d bf       	out	0x3d, r24	; 61

	// 5. Set process state to ready
	if (os_processes[currentProc].state == OS_PS_RUNNING)
    2036:	10 91 29 05 	lds	r17, 0x0529	; 0x800529 <currentProc>
    203a:	c1 2f       	mov	r28, r17
    203c:	d0 e0       	ldi	r29, 0x00	; 0
    203e:	fe 01       	movw	r30, r28
    2040:	ee 0f       	add	r30, r30
    2042:	ff 1f       	adc	r31, r31
    2044:	ec 0f       	add	r30, r28
    2046:	fd 1f       	adc	r31, r29
    2048:	ee 0f       	add	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	e1 5d       	subi	r30, 0xD1	; 209
    204e:	fa 4f       	sbci	r31, 0xFA	; 250
    2050:	81 81       	ldd	r24, Z+1	; 0x01
    2052:	82 30       	cpi	r24, 0x02	; 2
    2054:	59 f4       	brne	.+22     	; 0x206c <__DATA_REGION_LENGTH__+0x6c>
	{
		os_processes[currentProc].state = OS_PS_READY;
    2056:	fe 01       	movw	r30, r28
    2058:	ee 0f       	add	r30, r30
    205a:	ff 1f       	adc	r31, r31
    205c:	ec 0f       	add	r30, r28
    205e:	fd 1f       	adc	r31, r29
    2060:	ee 0f       	add	r30, r30
    2062:	ff 1f       	adc	r31, r31
    2064:	e1 5d       	subi	r30, 0xD1	; 209
    2066:	fa 4f       	sbci	r31, 0xFA	; 250
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	81 83       	std	Z+1, r24	; 0x01
	}
	// Note for task 2: Only set to ready if it is currently running because of os_kill

	// In task 2: Save the processes stack checksum
	os_processes[currentProc].checksum = os_getStackChecksum(currentProc);
    206c:	81 2f       	mov	r24, r17
    206e:	4a de       	rcall	.-876    	; 0x1d04 <os_getStackChecksum>
    2070:	9e 01       	movw	r18, r28
    2072:	22 0f       	add	r18, r18
    2074:	33 1f       	adc	r19, r19
    2076:	c2 0f       	add	r28, r18
    2078:	d3 1f       	adc	r29, r19
    207a:	cc 0f       	add	r28, r28
    207c:	dd 1f       	adc	r29, r29
    207e:	c1 5d       	subi	r28, 0xD1	; 209
    2080:	da 4f       	sbci	r29, 0xFA	; 250
    2082:	8d 83       	std	Y+5, r24	; 0x05

	// In task 2: Check if the stack pointer has an invalid value
	if (!os_isStackInBounds(currentProc))
    2084:	81 2f       	mov	r24, r17
    2086:	57 df       	rcall	.-338    	; 0x1f36 <os_isStackInBounds>
    2088:	81 11       	cpse	r24, r1
    208a:	0b c0       	rjmp	.+22     	; 0x20a2 <__DATA_REGION_LENGTH__+0xa2>
	{
		os_error("Stack pointer out of bounds in process %d", currentProc);
    208c:	1f 92       	push	r1
    208e:	1f 93       	push	r17
    2090:	86 ef       	ldi	r24, 0xF6	; 246
    2092:	94 e0       	ldi	r25, 0x04	; 4
    2094:	9f 93       	push	r25
    2096:	8f 93       	push	r24
    2098:	28 dd       	rcall	.-1456   	; 0x1aea <os_errorPstr>
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
	}

	// 6. Find next process using the set scheduling strategy

	switch (os_getSchedulingStrategy())
    20a0:	0f 90       	pop	r0
    20a2:	a5 dd       	rcall	.-1206   	; 0x1bee <os_getSchedulingStrategy>
    20a4:	88 23       	and	r24, r24
    20a6:	19 f0       	breq	.+6      	; 0x20ae <__DATA_REGION_LENGTH__+0xae>
    20a8:	81 30       	cpi	r24, 0x01	; 1
    20aa:	49 f0       	breq	.+18     	; 0x20be <__DATA_REGION_LENGTH__+0xbe>
    20ac:	10 c0       	rjmp	.+32     	; 0x20ce <__DATA_REGION_LENGTH__+0xce>
	{
		case OS_SS_ROUND_ROBIN:
		currentProc = os_scheduler_RoundRobin(os_processes, currentProc);
    20ae:	60 91 29 05 	lds	r22, 0x0529	; 0x800529 <currentProc>
    20b2:	8f e2       	ldi	r24, 0x2F	; 47
    20b4:	95 e0       	ldi	r25, 0x05	; 5
    20b6:	bf d0       	rcall	.+382    	; 0x2236 <os_scheduler_RoundRobin>
    20b8:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <currentProc>
		break;
		case OS_SS_DYNAMIC_PRIORITY_ROUND_ROBIN:
		currentProc = os_scheduler_DynamicPriorityRoundRobin(os_processes, currentProc);
    20bc:	0a c0       	rjmp	.+20     	; 0x20d2 <__DATA_REGION_LENGTH__+0xd2>
    20be:	60 91 29 05 	lds	r22, 0x0529	; 0x800529 <currentProc>
    20c2:	8f e2       	ldi	r24, 0x2F	; 47
    20c4:	95 e0       	ldi	r25, 0x05	; 5
    20c6:	43 d1       	rcall	.+646    	; 0x234e <os_scheduler_DynamicPriorityRoundRobin>
    20c8:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <currentProc>
		break;
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <__DATA_REGION_LENGTH__+0xd2>
		default:
		currentProc = 0;
    20ce:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <currentProc>
		break;
	}

	// In task 2: Check if the checksum changed since the process was interrupted
	if (os_processes[currentProc].checksum != os_getStackChecksum(currentProc))
    20d2:	c0 91 29 05 	lds	r28, 0x0529	; 0x800529 <currentProc>
    20d6:	8c 2f       	mov	r24, r28
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	fc 01       	movw	r30, r24
    20dc:	ee 0f       	add	r30, r30
    20de:	ff 1f       	adc	r31, r31
    20e0:	e8 0f       	add	r30, r24
    20e2:	f9 1f       	adc	r31, r25
    20e4:	ee 0f       	add	r30, r30
    20e6:	ff 1f       	adc	r31, r31
    20e8:	e1 5d       	subi	r30, 0xD1	; 209
    20ea:	fa 4f       	sbci	r31, 0xFA	; 250
    20ec:	d5 81       	ldd	r29, Z+5	; 0x05
    20ee:	8c 2f       	mov	r24, r28
    20f0:	09 de       	rcall	.-1006   	; 0x1d04 <os_getStackChecksum>
    20f2:	d8 17       	cp	r29, r24
    20f4:	59 f0       	breq	.+22     	; 0x210c <__DATA_REGION_LENGTH__+0x10c>
	{
		os_error("Checksum mismatch in process %d", currentProc);
    20f6:	1f 92       	push	r1
    20f8:	cf 93       	push	r28
    20fa:	86 ed       	ldi	r24, 0xD6	; 214
    20fc:	94 e0       	ldi	r25, 0x04	; 4
    20fe:	9f 93       	push	r25
    2100:	8f 93       	push	r24
    2102:	f3 dc       	rcall	.-1562   	; 0x1aea <os_errorPstr>
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <currentProc>
	}

	// 7. Set the state of the now chosen process to running
	os_processes[currentProc].state = OS_PS_RUNNING;
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	fc 01       	movw	r30, r24
    2114:	ee 0f       	add	r30, r30
    2116:	ff 1f       	adc	r31, r31
    2118:	df 01       	movw	r26, r30
    211a:	a8 0f       	add	r26, r24
    211c:	b9 1f       	adc	r27, r25
    211e:	aa 0f       	add	r26, r26
    2120:	bb 1f       	adc	r27, r27
    2122:	a1 5d       	subi	r26, 0xD1	; 209
    2124:	ba 4f       	sbci	r27, 0xFA	; 250
    2126:	22 e0       	ldi	r18, 0x02	; 2
    2128:	11 96       	adiw	r26, 0x01	; 1
    212a:	2c 93       	st	X, r18
    212c:	11 97       	sbiw	r26, 0x01	; 1
    212e:	fd 01       	movw	r30, r26

	// 8. Set SP to where it was when the resuming process was interrupted
	SP = os_processes[currentProc].sp.as_int;
    2130:	82 81       	ldd	r24, Z+2	; 0x02
    2132:	93 81       	ldd	r25, Z+3	; 0x03
    2134:	9e bf       	out	0x3e, r25	; 62
    2136:	8d bf       	out	0x3d, r24	; 61
    2138:	0f 90       	pop	r0

	// 9. Restore runtime context using the well-known macro.
	// This will cause the process to continue where it was interrupted.
	// Any code after the macro won't be executed as it has an reti() instruction at the end.
	restoreContext();
    213a:	1f 90       	pop	r1
    213c:	2f 90       	pop	r2
    213e:	3f 90       	pop	r3
    2140:	4f 90       	pop	r4
    2142:	5f 90       	pop	r5
    2144:	6f 90       	pop	r6
    2146:	7f 90       	pop	r7
    2148:	8f 90       	pop	r8
    214a:	9f 90       	pop	r9
    214c:	af 90       	pop	r10
    214e:	bf 90       	pop	r11
    2150:	cf 90       	pop	r12
    2152:	df 90       	pop	r13
    2154:	ef 90       	pop	r14
    2156:	ff 90       	pop	r15
    2158:	0f 91       	pop	r16
    215a:	1f 91       	pop	r17
    215c:	2f 91       	pop	r18
    215e:	3f 91       	pop	r19
    2160:	4f 91       	pop	r20
    2162:	5f 91       	pop	r21
    2164:	6f 91       	pop	r22
    2166:	7f 91       	pop	r23
    2168:	8f 91       	pop	r24
    216a:	9f 91       	pop	r25
    216c:	af 91       	pop	r26
    216e:	bf 91       	pop	r27
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	ef 91       	pop	r30
    2176:	ff 91       	pop	r31
    2178:	ff bf       	out	0x3f, r31	; 63
    217a:	ff 91       	pop	r31
    217c:	18 95       	reti

0000217e <os_yield>:
    217e:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <criticalSectionCount>
/*!
 * Triggers scheduler to schedule another process.
 */
void os_yield()
{
	if (criticalSectionCount != 0)
    2182:	81 11       	cpse	r24, r1
    2184:	04 c0       	rjmp	.+8      	; 0x218e <os_yield+0x10>
	{
		return;
	}
	cli();
    2186:	f8 94       	cli
	TCNT2 = 0;
    2188:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
	TIMER2_COMPA_vect();
    218c:	1d cf       	rjmp	.-454    	; 0x1fc8 <__vector_13>
    218e:	08 95       	ret

00002190 <os_kill>:
 *
 *  \param pid The process id of the process to be killed
 *  \return True, if the killing process was successful
 */
bool os_kill(process_id_t pid)
{
    2190:	cf 93       	push	r28
	
	// If the pid is invalid, return false
	if (pid >= MAX_NUMBER_OF_PROCESSES || pid == 0 || os_processes[pid].state == OS_PS_UNUSED)
    2192:	9f ef       	ldi	r25, 0xFF	; 255
    2194:	98 0f       	add	r25, r24
    2196:	97 30       	cpi	r25, 0x07	; 7
    2198:	60 f5       	brcc	.+88     	; 0x21f2 <os_kill+0x62>
    219a:	28 2f       	mov	r18, r24
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	f9 01       	movw	r30, r18
    21a0:	ee 0f       	add	r30, r30
    21a2:	ff 1f       	adc	r31, r31
    21a4:	e2 0f       	add	r30, r18
    21a6:	f3 1f       	adc	r31, r19
    21a8:	ee 0f       	add	r30, r30
    21aa:	ff 1f       	adc	r31, r31
    21ac:	e1 5d       	subi	r30, 0xD1	; 209
    21ae:	fa 4f       	sbci	r31, 0xFA	; 250
    21b0:	91 81       	ldd	r25, Z+1	; 0x01
    21b2:	99 23       	and	r25, r25
    21b4:	01 f1       	breq	.+64     	; 0x21f6 <os_kill+0x66>
    21b6:	c8 2f       	mov	r28, r24
	{
		return false;
	}
	os_enterCriticalSection();
    21b8:	1d dd       	rcall	.-1478   	; 0x1bf4 <os_enterCriticalSection>

	os_getProcessSlot(pid)->state = OS_PS_UNUSED;
    21ba:	8c 2f       	mov	r24, r28
    21bc:	04 dd       	rcall	.-1528   	; 0x1bc6 <os_getProcessSlot>
    21be:	fc 01       	movw	r30, r24

	// Tidy up the scheduler
	// (Process needs to be removed from ready queue of DPRR)

	os_resetProcessSchedulingInformation(os_getSchedulingStrategy(), pid);
    21c0:	11 82       	std	Z+1, r1	; 0x01
    21c2:	15 dd       	rcall	.-1494   	; 0x1bee <os_getSchedulingStrategy>
    21c4:	6c 2f       	mov	r22, r28

	// If the process kills itself, we mustn't return
	if (os_getCurrentProc() == pid)
    21c6:	71 d0       	rcall	.+226    	; 0x22aa <os_resetProcessSchedulingInformation>
    21c8:	0f dd       	rcall	.-1506   	; 0x1be8 <os_getCurrentProc>
    21ca:	c8 13       	cpse	r28, r24
	{
		criticalSectionCount = 1;
    21cc:	0e c0       	rjmp	.+28     	; 0x21ea <os_kill+0x5a>
    21ce:	81 e0       	ldi	r24, 0x01	; 1
		os_leaveCriticalSection();
    21d0:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <criticalSectionCount>
		sei();
		os_yield();
    21d4:	2e dd       	rcall	.-1444   	; 0x1c32 <os_leaveCriticalSection>
    21d6:	78 94       	sei
		while (1)
			printf("Penis");
    21d8:	d2 df       	rcall	.-92     	; 0x217e <os_yield>
    21da:	89 e3       	ldi	r24, 0x39	; 57
    21dc:	93 e0       	ldi	r25, 0x03	; 3
    21de:	9f 93       	push	r25
    21e0:	8f 93       	push	r24
    21e2:	7e d2       	rcall	.+1276   	; 0x26e0 <printf>
    21e4:	0f 90       	pop	r0
	}
	os_leaveCriticalSection();
    21e6:	0f 90       	pop	r0
    21e8:	f8 cf       	rjmp	.-16     	; 0x21da <os_kill+0x4a>
	os_yield();
    21ea:	23 dd       	rcall	.-1466   	; 0x1c32 <os_leaveCriticalSection>
    21ec:	c8 df       	rcall	.-112    	; 0x217e <os_yield>

	return true;
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	03 c0       	rjmp	.+6      	; 0x21f8 <os_kill+0x68>
{
	
	// If the pid is invalid, return false
	if (pid >= MAX_NUMBER_OF_PROCESSES || pid == 0 || os_processes[pid].state == OS_PS_UNUSED)
	{
		return false;
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	01 c0       	rjmp	.+2      	; 0x21f8 <os_kill+0x68>
    21f6:	80 e0       	ldi	r24, 0x00	; 0
	os_leaveCriticalSection();
	os_yield();

	return true;

}
    21f8:	cf 91       	pop	r28
    21fa:	08 95       	ret

000021fc <os_dispatcher>:
 * This wrapper enables the possibility to perform a few necessary steps after the actual process
 * function has finished.
 */
void os_dispatcher()
{
	process_id_t currentProc = os_getCurrentProc();
    21fc:	f5 dc       	rcall	.-1558   	; 0x1be8 <os_getCurrentProc>
    21fe:	c8 2f       	mov	r28, r24
	program_t *function = os_lookupProgramFunction(os_processes[currentProc].progID);
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	fc 01       	movw	r30, r24
    2204:	ee 0f       	add	r30, r30
    2206:	ff 1f       	adc	r31, r31
    2208:	e8 0f       	add	r30, r24
    220a:	f9 1f       	adc	r31, r25
    220c:	ee 0f       	add	r30, r30
    220e:	ff 1f       	adc	r31, r31
    2210:	e1 5d       	subi	r30, 0xD1	; 209
    2212:	fa 4f       	sbci	r31, 0xFA	; 250
    2214:	80 81       	ld	r24, Z
    2216:	c9 dc       	rcall	.-1646   	; 0x1baa <os_lookupProgramFunction>
	
	if (function != NULL)
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	11 f0       	breq	.+4      	; 0x2220 <__stack+0x21>
	function();
    221c:	fc 01       	movw	r30, r24


	os_kill(currentProc);
    221e:	19 95       	eicall
    2220:	8c 2f       	mov	r24, r28


	os_yield();
    2222:	b6 df       	rcall	.-148    	; 0x2190 <os_kill>
    2224:	ac df       	rcall	.-168    	; 0x217e <os_yield>
	while (1)
		printf("Penis");
    2226:	89 e3       	ldi	r24, 0x39	; 57
    2228:	93 e0       	ldi	r25, 0x03	; 3
    222a:	9f 93       	push	r25
    222c:	8f 93       	push	r24
    222e:	58 d2       	rcall	.+1200   	; 0x26e0 <printf>
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	f8 cf       	rjmp	.-16     	; 0x2226 <__stack+0x27>

00002236 <os_scheduler_RoundRobin>:
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the even strategy.
 */
process_id_t os_scheduler_RoundRobin(process_t const processes[], process_id_t current)
{
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	ec 01       	movw	r28, r24

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process

	// Return resulting process id
	
	process_id_t currentProc = os_getCurrentProc();
    223c:	d5 dc       	rcall	.-1622   	; 0x1be8 <os_getCurrentProc>

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
    223e:	91 e0       	ldi	r25, 0x01	; 1
    2240:	98 0f       	add	r25, r24
    2242:	0f c0       	rjmp	.+30     	; 0x2262 <os_scheduler_RoundRobin+0x2c>
	{
		if (processes[i].state == OS_PS_READY)
    2244:	29 2f       	mov	r18, r25
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	f9 01       	movw	r30, r18
    224a:	ee 0f       	add	r30, r30
    224c:	ff 1f       	adc	r31, r31
    224e:	e2 0f       	add	r30, r18
    2250:	f3 1f       	adc	r31, r19
    2252:	ee 0f       	add	r30, r30
    2254:	ff 1f       	adc	r31, r31
    2256:	ec 0f       	add	r30, r28
    2258:	fd 1f       	adc	r31, r29
    225a:	21 81       	ldd	r18, Z+1	; 0x01
    225c:	21 30       	cpi	r18, 0x01	; 1
    225e:	f9 f0       	breq	.+62     	; 0x229e <os_scheduler_RoundRobin+0x68>
	// Return resulting process id
	
	process_id_t currentProc = os_getCurrentProc();

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
    2260:	9f 5f       	subi	r25, 0xFF	; 255
    2262:	98 30       	cpi	r25, 0x08	; 8
    2264:	78 f3       	brcs	.-34     	; 0x2244 <os_scheduler_RoundRobin+0xe>
    2266:	91 e0       	ldi	r25, 0x01	; 1
    2268:	0f c0       	rjmp	.+30     	; 0x2288 <os_scheduler_RoundRobin+0x52>
			return i; // Return resulting process id
		}
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
	{
		if (processes[i].state == OS_PS_READY)
    226a:	29 2f       	mov	r18, r25
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	f9 01       	movw	r30, r18
    2270:	ee 0f       	add	r30, r30
    2272:	ff 1f       	adc	r31, r31
    2274:	e2 0f       	add	r30, r18
    2276:	f3 1f       	adc	r31, r19
    2278:	ee 0f       	add	r30, r30
    227a:	ff 1f       	adc	r31, r31
    227c:	ec 0f       	add	r30, r28
    227e:	fd 1f       	adc	r31, r29
    2280:	21 81       	ldd	r18, Z+1	; 0x01
    2282:	21 30       	cpi	r18, 0x01	; 1
    2284:	71 f0       	breq	.+28     	; 0x22a2 <os_scheduler_RoundRobin+0x6c>
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
		}
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
    2286:	9f 5f       	subi	r25, 0xFF	; 255
    2288:	49 2f       	mov	r20, r25
    228a:	50 e0       	ldi	r21, 0x00	; 0
    228c:	28 2f       	mov	r18, r24
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	2f 5f       	subi	r18, 0xFF	; 255
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	42 17       	cp	r20, r18
    2296:	53 07       	cpc	r21, r19
    2298:	44 f3       	brlt	.-48     	; 0x226a <os_scheduler_RoundRobin+0x34>
			return i; // Return resulting process id
		}
	}

	// If no process except idle process ready, choose idle process
	return 0; // Return resulting process id
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	03 c0       	rjmp	.+6      	; 0x22a4 <os_scheduler_RoundRobin+0x6e>
	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
	{
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
    229e:	89 2f       	mov	r24, r25
    22a0:	01 c0       	rjmp	.+2      	; 0x22a4 <os_scheduler_RoundRobin+0x6e>
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
	{
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
    22a2:	89 2f       	mov	r24, r25
	}

	// If no process except idle process ready, choose idle process
	return 0; // Return resulting process id

}
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	08 95       	ret

000022aa <os_resetProcessSchedulingInformation>:
 *
 * \param strategy The scheduling strategy currently in use
 * \param id  The process slot to erase state for
 */
void os_resetProcessSchedulingInformation(scheduling_strategy_t strategy, process_id_t id)
{
    22aa:	cf 93       	push	r28
    22ac:	df 93       	push	r29
	
	if (strategy == OS_SS_ROUND_ROBIN)
    22ae:	88 23       	and	r24, r24
    22b0:	09 f1       	breq	.+66     	; 0x22f4 <os_resetProcessSchedulingInformation+0x4a>
    22b2:	d6 2f       	mov	r29, r22
    22b4:	c0 e0       	ldi	r28, 0x00	; 0
    22b6:	09 c0       	rjmp	.+18     	; 0x22ca <os_resetProcessSchedulingInformation+0x20>
		return;
	}

	for (uint8_t i = OS_PRIO_HIGH; i <= OS_PRIO_LOW; i++)
	{
		rq_remove(&(schedulingInfo.queues_ready[i]), id);
    22b8:	2b e0       	ldi	r18, 0x0B	; 11
    22ba:	c2 9f       	mul	r28, r18
    22bc:	c0 01       	movw	r24, r0
    22be:	11 24       	eor	r1, r1
    22c0:	6d 2f       	mov	r22, r29
    22c2:	8f 57       	subi	r24, 0x7F	; 127
    22c4:	9a 4f       	sbci	r25, 0xFA	; 250
    22c6:	10 d8       	rcall	.-4064   	; 0x12e8 <rq_remove>
	if (strategy == OS_SS_ROUND_ROBIN)
	{
		return;
	}

	for (uint8_t i = OS_PRIO_HIGH; i <= OS_PRIO_LOW; i++)
    22c8:	cf 5f       	subi	r28, 0xFF	; 255
    22ca:	c3 30       	cpi	r28, 0x03	; 3
    22cc:	a8 f3       	brcs	.-22     	; 0x22b8 <os_resetProcessSchedulingInformation+0xe>
	{
		rq_remove(&(schedulingInfo.queues_ready[i]), id);
	}
	if (os_getProcessSlot(id)->state == OS_PS_READY)
    22ce:	8d 2f       	mov	r24, r29
    22d0:	7a dc       	rcall	.-1804   	; 0x1bc6 <os_getProcessSlot>
    22d2:	fc 01       	movw	r30, r24
    22d4:	81 81       	ldd	r24, Z+1	; 0x01
    22d6:	81 30       	cpi	r24, 0x01	; 1
    22d8:	69 f4       	brne	.+26     	; 0x22f4 <os_resetProcessSchedulingInformation+0x4a>
	rq_push(&(schedulingInfo.queues_ready[os_getProcessSlot(id)->priority]), id);
    22da:	8d 2f       	mov	r24, r29
    22dc:	74 dc       	rcall	.-1816   	; 0x1bc6 <os_getProcessSlot>
    22de:	fc 01       	movw	r30, r24
    22e0:	84 81       	ldd	r24, Z+4	; 0x04
    22e2:	fb e0       	ldi	r31, 0x0B	; 11
    22e4:	8f 9f       	mul	r24, r31
    22e6:	c0 01       	movw	r24, r0
    22e8:	11 24       	eor	r1, r1
    22ea:	6d 2f       	mov	r22, r29
    22ec:	8f 57       	subi	r24, 0x7F	; 127
    22ee:	9a 4f       	sbci	r25, 0xFA	; 250
    22f0:	0e 94 4f 09 	call	0x129e	; 0x129e <rq_push>
}
    22f4:	df 91       	pop	r29
    22f6:	cf 91       	pop	r28
    22f8:	08 95       	ret

000022fa <os_resetSchedulingInformation>:
 *  and is done when the strategy is changed through os_setSchedulingStrategy
 *
 * \param strategy  The strategy to reset information for
 */
void os_resetSchedulingInformation(scheduling_strategy_t strategy)
{
    22fa:	cf 93       	push	r28
	 if (strategy == OS_SS_ROUND_ROBIN)
    22fc:	88 23       	and	r24, r24
    22fe:	29 f1       	breq	.+74     	; 0x234a <os_resetSchedulingInformation+0x50>
    2300:	c0 e0       	ldi	r28, 0x00	; 0
    2302:	09 c0       	rjmp	.+18     	; 0x2316 <os_resetSchedulingInformation+0x1c>
	 else
	 //terminal_log_printf_p(PSTR("os_resetSchedulingInformation() -> "), PSTR("Resetting scheduling information\n"));

	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
	 {
		 rq_clear(&schedulingInfo.queues_ready[i]);
    2304:	2b e0       	ldi	r18, 0x0B	; 11
    2306:	c2 9f       	mul	r28, r18
    2308:	c0 01       	movw	r24, r0
    230a:	11 24       	eor	r1, r1
    230c:	8f 57       	subi	r24, 0x7F	; 127
    230e:	9a 4f       	sbci	r25, 0xFA	; 250
    2310:	0e 94 70 09 	call	0x12e0	; 0x12e0 <rq_clear>
		return;
	 }
	 else
	 //terminal_log_printf_p(PSTR("os_resetSchedulingInformation() -> "), PSTR("Resetting scheduling information\n"));

	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
    2314:	cf 5f       	subi	r28, 0xFF	; 255
    2316:	c3 30       	cpi	r28, 0x03	; 3
    2318:	a8 f3       	brcs	.-22     	; 0x2304 <os_resetSchedulingInformation+0xa>
    231a:	c1 e0       	ldi	r28, 0x01	; 1
    231c:	14 c0       	rjmp	.+40     	; 0x2346 <os_resetSchedulingInformation+0x4c>
		 rq_clear(&schedulingInfo.queues_ready[i]);
	 }

	 for (process_id_t pid = 1; pid < MAX_NUMBER_OF_PROCESSES; pid++)
	 {
		 if (os_getProcessSlot(pid)->state == OS_PS_READY)
    231e:	8c 2f       	mov	r24, r28
    2320:	52 dc       	rcall	.-1884   	; 0x1bc6 <os_getProcessSlot>
    2322:	fc 01       	movw	r30, r24
    2324:	81 81       	ldd	r24, Z+1	; 0x01
    2326:	81 30       	cpi	r24, 0x01	; 1
    2328:	69 f4       	brne	.+26     	; 0x2344 <os_resetSchedulingInformation+0x4a>
		 {
			 rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(pid)->priority], pid);
    232a:	8c 2f       	mov	r24, r28
    232c:	4c dc       	rcall	.-1896   	; 0x1bc6 <os_getProcessSlot>
    232e:	fc 01       	movw	r30, r24
    2330:	84 81       	ldd	r24, Z+4	; 0x04
    2332:	fb e0       	ldi	r31, 0x0B	; 11
    2334:	8f 9f       	mul	r24, r31
    2336:	c0 01       	movw	r24, r0
    2338:	11 24       	eor	r1, r1
    233a:	6c 2f       	mov	r22, r28
    233c:	8f 57       	subi	r24, 0x7F	; 127
    233e:	9a 4f       	sbci	r25, 0xFA	; 250
    2340:	0e 94 4f 09 	call	0x129e	; 0x129e <rq_push>
	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
	 {
		 rq_clear(&schedulingInfo.queues_ready[i]);
	 }

	 for (process_id_t pid = 1; pid < MAX_NUMBER_OF_PROCESSES; pid++)
    2344:	cf 5f       	subi	r28, 0xFF	; 255
    2346:	c8 30       	cpi	r28, 0x08	; 8
    2348:	50 f3       	brcs	.-44     	; 0x231e <os_resetSchedulingInformation+0x24>
		 if (os_getProcessSlot(pid)->state == OS_PS_READY)
		 {
			 rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(pid)->priority], pid);
		 }
	 }
}
    234a:	cf 91       	pop	r28
    234c:	08 95       	ret

0000234e <os_scheduler_DynamicPriorityRoundRobin>:
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the dynamic priority round-robin strategy.
 */
process_id_t os_scheduler_DynamicPriorityRoundRobin(process_t const processes[], process_id_t current)
{
    234e:	df 92       	push	r13
    2350:	ef 92       	push	r14
    2352:	ff 92       	push	r15
    2354:	0f 93       	push	r16
    2356:	1f 93       	push	r17
    2358:	cf 93       	push	r28
    235a:	df 93       	push	r29
    235c:	d6 2e       	mov	r13, r22

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    235e:	c0 e0       	ldi	r28, 0x00	; 0
    2360:	d0 e0       	ldi	r29, 0x00	; 0
    2362:	21 c0       	rjmp	.+66     	; 0x23a6 <os_scheduler_DynamicPriorityRoundRobin+0x58>
	{

		if (!rq_isEmpty(&schedulingInfo.queues_ready[i + 1]))
    2364:	7e 01       	movw	r14, r28
    2366:	2f ef       	ldi	r18, 0xFF	; 255
    2368:	e2 1a       	sub	r14, r18
    236a:	f2 0a       	sbc	r15, r18
    236c:	8b e0       	ldi	r24, 0x0B	; 11
    236e:	8e 9d       	mul	r24, r14
    2370:	80 01       	movw	r16, r0
    2372:	8f 9d       	mul	r24, r15
    2374:	10 0d       	add	r17, r0
    2376:	11 24       	eor	r1, r1
    2378:	0f 57       	subi	r16, 0x7F	; 127
    237a:	1a 4f       	sbci	r17, 0xFA	; 250
    237c:	c8 01       	movw	r24, r16
    237e:	0e 94 15 09 	call	0x122a	; 0x122a <rq_isEmpty>
    2382:	81 11       	cpse	r24, r1
    2384:	0f c0       	rjmp	.+30     	; 0x23a4 <os_scheduler_DynamicPriorityRoundRobin+0x56>
		{
			process_id_t pid = rq_pop(&schedulingInfo.queues_ready[i + 1]);
    2386:	c8 01       	movw	r24, r16
    2388:	0e 94 1c 09 	call	0x1238	; 0x1238 <rq_pop>

			rq_push(&schedulingInfo.queues_ready[i], pid);
    238c:	9b e0       	ldi	r25, 0x0B	; 11
    238e:	9c 9f       	mul	r25, r28
    2390:	90 01       	movw	r18, r0
    2392:	9d 9f       	mul	r25, r29
    2394:	30 0d       	add	r19, r0
    2396:	11 24       	eor	r1, r1
    2398:	68 2f       	mov	r22, r24
    239a:	c9 01       	movw	r24, r18
    239c:	8f 57       	subi	r24, 0x7F	; 127
    239e:	9a 4f       	sbci	r25, 0xFA	; 250
    23a0:	0e 94 4f 09 	call	0x129e	; 0x129e <rq_push>
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the dynamic priority round-robin strategy.
 */
process_id_t os_scheduler_DynamicPriorityRoundRobin(process_t const processes[], process_id_t current)
{
    23a4:	e7 01       	movw	r28, r14

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    23a6:	c2 30       	cpi	r28, 0x02	; 2
    23a8:	d1 05       	cpc	r29, r1
    23aa:	e4 f2       	brlt	.-72     	; 0x2364 <os_scheduler_DynamicPriorityRoundRobin+0x16>
		else
		{		}
	}

	// 2. Push current process to the ready queue
	if (os_getProcessSlot(current)->state == OS_PS_READY)
    23ac:	8d 2d       	mov	r24, r13
    23ae:	0b dc       	rcall	.-2026   	; 0x1bc6 <os_getProcessSlot>
    23b0:	fc 01       	movw	r30, r24
    23b2:	81 81       	ldd	r24, Z+1	; 0x01
    23b4:	81 30       	cpi	r24, 0x01	; 1
    23b6:	69 f4       	brne	.+26     	; 0x23d2 <os_scheduler_DynamicPriorityRoundRobin+0x84>
	{
		rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(current)->priority], current);
    23b8:	8d 2d       	mov	r24, r13
    23ba:	05 dc       	rcall	.-2038   	; 0x1bc6 <os_getProcessSlot>
    23bc:	fc 01       	movw	r30, r24
    23be:	84 81       	ldd	r24, Z+4	; 0x04
    23c0:	fb e0       	ldi	r31, 0x0B	; 11
    23c2:	8f 9f       	mul	r24, r31
    23c4:	c0 01       	movw	r24, r0
    23c6:	11 24       	eor	r1, r1
    23c8:	6d 2d       	mov	r22, r13
    23ca:	8f 57       	subi	r24, 0x7F	; 127
    23cc:	9a 4f       	sbci	r25, 0xFA	; 250
    23ce:	0e 94 4f 09 	call	0x129e	; 0x129e <rq_push>

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    23d2:	c0 e0       	ldi	r28, 0x00	; 0
    23d4:	d0 e0       	ldi	r29, 0x00	; 0
    23d6:	12 c0       	rjmp	.+36     	; 0x23fc <os_scheduler_DynamicPriorityRoundRobin+0xae>
	}
	
	// 3. Get next process from ready queue
	for (int i = 0; i < PRIORITY_COUNT; i++)
	{
		if (!rq_isEmpty(&schedulingInfo.queues_ready[i]))
    23d8:	8b e0       	ldi	r24, 0x0B	; 11
    23da:	8c 9f       	mul	r24, r28
    23dc:	80 01       	movw	r16, r0
    23de:	8d 9f       	mul	r24, r29
    23e0:	10 0d       	add	r17, r0
    23e2:	11 24       	eor	r1, r1
    23e4:	0f 57       	subi	r16, 0x7F	; 127
    23e6:	1a 4f       	sbci	r17, 0xFA	; 250
    23e8:	c8 01       	movw	r24, r16
    23ea:	0e 94 15 09 	call	0x122a	; 0x122a <rq_isEmpty>
    23ee:	81 11       	cpse	r24, r1
    23f0:	04 c0       	rjmp	.+8      	; 0x23fa <os_scheduler_DynamicPriorityRoundRobin+0xac>
		{

			process_id_t next_pid = rq_pop(&schedulingInfo.queues_ready[i]);
    23f2:	c8 01       	movw	r24, r16
    23f4:	0e 94 1c 09 	call	0x1238	; 0x1238 <rq_pop>
			return next_pid;
    23f8:	05 c0       	rjmp	.+10     	; 0x2404 <os_scheduler_DynamicPriorityRoundRobin+0xb6>
	{
		rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(current)->priority], current);
	}
	
	// 3. Get next process from ready queue
	for (int i = 0; i < PRIORITY_COUNT; i++)
    23fa:	21 96       	adiw	r28, 0x01	; 1
    23fc:	c3 30       	cpi	r28, 0x03	; 3
    23fe:	d1 05       	cpc	r29, r1
    2400:	5c f3       	brlt	.-42     	; 0x23d8 <os_scheduler_DynamicPriorityRoundRobin+0x8a>
		}

	}

	// If no process is ready, return idle process (0)
	return 0;
    2402:	80 e0       	ldi	r24, 0x00	; 0

}
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	ff 90       	pop	r15
    240e:	ef 90       	pop	r14
    2410:	df 90       	pop	r13
    2412:	08 95       	ret

00002414 <prog2>:
    lcd_writeProgString(PSTR(" Test finished"));
    while(1){}
}

//! This program includes the receiving procedure
PROGRAM(2, AUTOSTART)
    2414:	0e 94 27 03 	call	0x64e	; 0x64e <rfAdapter_worker>
    2418:	fd cf       	rjmp	.-6      	; 0x2414 <prog2>

0000241a <registerProgram1>:
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	df db       	rcall	.-2114   	; 0x1bdc <os_getProgramSlot>
    241e:	2a e5       	ldi	r18, 0x5A	; 90
    2420:	32 e1       	ldi	r19, 0x12	; 18
    2422:	fc 01       	movw	r30, r24
    2424:	31 83       	std	Z+1, r19	; 0x01
    2426:	20 83       	st	Z, r18
    2428:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <os_autostart>
    242c:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <os_autostart+0x1>
    2430:	82 60       	ori	r24, 0x02	; 2
    2432:	90 93 80 05 	sts	0x0580, r25	; 0x800580 <os_autostart+0x1>
    2436:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <os_autostart>
    243a:	08 95       	ret

0000243c <registerProgram2>:
    243c:	82 e0       	ldi	r24, 0x02	; 2
    243e:	ce db       	rcall	.-2148   	; 0x1bdc <os_getProgramSlot>
    2440:	2a e0       	ldi	r18, 0x0A	; 10
    2442:	32 e1       	ldi	r19, 0x12	; 18
    2444:	fc 01       	movw	r30, r24
    2446:	31 83       	std	Z+1, r19	; 0x01
    2448:	20 83       	st	Z, r18
    244a:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <os_autostart>
    244e:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <os_autostart+0x1>
    2452:	84 60       	ori	r24, 0x04	; 4
    2454:	90 93 80 05 	sts	0x0580, r25	; 0x800580 <os_autostart+0x1>
    2458:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <os_autostart>
    245c:	08 95       	ret

0000245e <displayCounter>:
/*!
 * Displays a counter in the right corner of the LCD.
 *
 * @param counter The counter value to display (0-99).
 */
void displayCounter(int counter){
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	ec 01       	movw	r28, r24
    if (counter >= 10){
    2464:	0a 97       	sbiw	r24, 0x0a	; 10
    2466:	3c f0       	brlt	.+14     	; 0x2476 <displayCounter+0x18>
        lcd_goto(2,14);
    2468:	6e e0       	ldi	r22, 0x0E	; 14
    246a:	82 e0       	ldi	r24, 0x02	; 2
    246c:	0e 94 2f 08 	call	0x105e	; 0x105e <lcd_goto>
        lcd_writeDec(counter);
    2470:	ce 01       	movw	r24, r28
    2472:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <lcd_writeDec>
    }

    //! Write 0 to the decade
    if(counter == 9){
    2476:	c9 30       	cpi	r28, 0x09	; 9
    2478:	d1 05       	cpc	r29, r1
    247a:	79 f4       	brne	.+30     	; 0x249a <displayCounter+0x3c>
        lcd_goto(2,14);
    247c:	6e e0       	ldi	r22, 0x0E	; 14
    247e:	82 e0       	ldi	r24, 0x02	; 2
    2480:	0e 94 2f 08 	call	0x105e	; 0x105e <lcd_goto>
        lcd_writeDec(0);
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <lcd_writeDec>
        lcd_goto(2,15);
    248c:	6f e0       	ldi	r22, 0x0F	; 15
    248e:	82 e0       	ldi	r24, 0x02	; 2
    2490:	0e 94 2f 08 	call	0x105e	; 0x105e <lcd_goto>
        lcd_writeDec(counter);
    2494:	ce 01       	movw	r24, r28
    2496:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <lcd_writeDec>
    }

    if(counter <= 9){
    249a:	ca 30       	cpi	r28, 0x0A	; 10
    249c:	d1 05       	cpc	r29, r1
    249e:	3c f4       	brge	.+14     	; 0x24ae <displayCounter+0x50>
        lcd_goto(2,15);
    24a0:	6f e0       	ldi	r22, 0x0F	; 15
    24a2:	82 e0       	ldi	r24, 0x02	; 2
    24a4:	0e 94 2f 08 	call	0x105e	; 0x105e <lcd_goto>
        lcd_writeDec(counter);
    24a8:	ce 01       	movw	r24, r28
    24aa:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <lcd_writeDec>
    }
}
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	08 95       	ret

000024b4 <prog1>:
//! Displays a counter in the right corner of the LCD.
void displayCounter(int i);

//! This program includes the sending procedure
PROGRAM(1, AUTOSTART)
{
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	2a 97       	sbiw	r28, 0x0a	; 10
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
    rfAdapter_init();
    24c8:	0e 94 1f 03 	call	0x63e	; 0x63e <rfAdapter_init>
#if PHASE_1 == 1
    /*!
     * Sending Toggle LED to Board Address
     */

    lcd_writeProgString(PSTR("Phase 1: Toggle"));
    24cc:	84 ec       	ldi	r24, 0xC4	; 196
    24ce:	95 e0       	ldi	r25, 0x05	; 5
    24d0:	0e 94 ba 08 	call	0x1174	; 0x1174 <lcd_writeProgString>
    lcd_line2();
    24d4:	0e 94 61 08 	call	0x10c2	; 0x10c2 <lcd_line2>
    lcd_writeProgString(PSTR("Onboard LED"));
    24d8:	88 eb       	ldi	r24, 0xB8	; 184
    24da:	95 e0       	ldi	r25, 0x05	; 5
    24dc:	0e 94 ba 08 	call	0x1174	; 0x1174 <lcd_writeProgString>

    //! Toggle for 15 seconds and display Countdown
    for (int i = 15; i > 0; --i) {
    24e0:	0f e0       	ldi	r16, 0x0F	; 15
    24e2:	10 e0       	ldi	r17, 0x00	; 0
    24e4:	0b c0       	rjmp	.+22     	; 0x24fc <prog1+0x48>
        displayCounter(i);
    24e6:	c8 01       	movw	r24, r16
    24e8:	ba df       	rcall	.-140    	; 0x245e <displayCounter>
        rfAdapter_sendToggleLed(serialAdapter_address);
    24ea:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    24ee:	0e 94 1e 04 	call	0x83c	; 0x83c <rfAdapter_sendToggleLed>
        delayMs(1000);
    24f2:	88 ee       	ldi	r24, 0xE8	; 232
    24f4:	93 e0       	ldi	r25, 0x03	; 3
    24f6:	51 da       	rcall	.-2910   	; 0x199a <delayMs>
    lcd_writeProgString(PSTR("Phase 1: Toggle"));
    lcd_line2();
    lcd_writeProgString(PSTR("Onboard LED"));

    //! Toggle for 15 seconds and display Countdown
    for (int i = 15; i > 0; --i) {
    24f8:	01 50       	subi	r16, 0x01	; 1
    24fa:	11 09       	sbc	r17, r1
    24fc:	10 16       	cp	r1, r16
    24fe:	11 06       	cpc	r1, r17
    2500:	94 f3       	brlt	.-28     	; 0x24e6 <prog1+0x32>
#if PHASE_2 == 1
    /*!
     * Sending setLED to Board Address
     */

    lcd_clear();
    2502:	0e 94 1c 08 	call	0x1038	; 0x1038 <lcd_clear>
    lcd_writeProgString(PSTR("Phase 2:"));
    2506:	8f ea       	ldi	r24, 0xAF	; 175
    2508:	95 e0       	ldi	r25, 0x05	; 5
    250a:	0e 94 ba 08 	call	0x1174	; 0x1174 <lcd_writeProgString>

    //! LED on for 10 seconds and display Countdown
    lcd_line2();
    250e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <lcd_line2>
    lcd_writeProgString(PSTR("LED On"));
    2512:	88 ea       	ldi	r24, 0xA8	; 168
    2514:	95 e0       	ldi	r25, 0x05	; 5
    2516:	0e 94 ba 08 	call	0x1174	; 0x1174 <lcd_writeProgString>

    rfAdapter_sendSetLed(serialAdapter_address, 1);
    251a:	61 e0       	ldi	r22, 0x01	; 1
    251c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2520:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <rfAdapter_sendSetLed>
    for (int i = 10; i > 0; --i) {
    2524:	0a e0       	ldi	r16, 0x0A	; 10
    2526:	10 e0       	ldi	r17, 0x00	; 0
        displayCounter(i);
    2528:	07 c0       	rjmp	.+14     	; 0x2538 <prog1+0x84>
    252a:	c8 01       	movw	r24, r16
        delayMs(1000);
    252c:	98 df       	rcall	.-208    	; 0x245e <displayCounter>
    252e:	88 ee       	ldi	r24, 0xE8	; 232
    2530:	93 e0       	ldi	r25, 0x03	; 3
    2532:	33 da       	rcall	.-2970   	; 0x199a <delayMs>
    //! LED on for 10 seconds and display Countdown
    lcd_line2();
    lcd_writeProgString(PSTR("LED On"));

    rfAdapter_sendSetLed(serialAdapter_address, 1);
    for (int i = 10; i > 0; --i) {
    2534:	01 50       	subi	r16, 0x01	; 1
    2536:	11 09       	sbc	r17, r1
    2538:	10 16       	cp	r1, r16
    253a:	11 06       	cpc	r1, r17
    253c:	b4 f3       	brlt	.-20     	; 0x252a <prog1+0x76>
        displayCounter(i);
        delayMs(1000);
    }

    //! LED off for 10 seconds and display Countdown
    lcd_line2();
    253e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <lcd_line2>
    lcd_writeProgString(PSTR("LED Off"));
    2542:	80 ea       	ldi	r24, 0xA0	; 160
    2544:	95 e0       	ldi	r25, 0x05	; 5
    2546:	0e 94 ba 08 	call	0x1174	; 0x1174 <lcd_writeProgString>

    rfAdapter_sendSetLed(serialAdapter_address, 0);
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2550:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <rfAdapter_sendSetLed>
    for (int i = 10; i > 0; --i) {
    2554:	0a e0       	ldi	r16, 0x0A	; 10
    2556:	10 e0       	ldi	r17, 0x00	; 0
        displayCounter(i);
    2558:	07 c0       	rjmp	.+14     	; 0x2568 <prog1+0xb4>
    255a:	c8 01       	movw	r24, r16
        delayMs(1000);
    255c:	80 df       	rcall	.-256    	; 0x245e <displayCounter>
    255e:	88 ee       	ldi	r24, 0xE8	; 232
    2560:	93 e0       	ldi	r25, 0x03	; 3
    2562:	1b da       	rcall	.-3018   	; 0x199a <delayMs>
    //! LED off for 10 seconds and display Countdown
    lcd_line2();
    lcd_writeProgString(PSTR("LED Off"));

    rfAdapter_sendSetLed(serialAdapter_address, 0);
    for (int i = 10; i > 0; --i) {
    2564:	01 50       	subi	r16, 0x01	; 1
    2566:	11 09       	sbc	r17, r1
    2568:	10 16       	cp	r1, r16
    256a:	11 06       	cpc	r1, r17
    256c:	b4 f3       	brlt	.-20     	; 0x255a <prog1+0xa6>
#if PHASE_3 == 1
    /*!
     * Send LCD Print and LCD Clear to Board Address
     */

    lcd_clear();
    256e:	0e 94 1c 08 	call	0x1038	; 0x1038 <lcd_clear>
    lcd_writeProgString(PSTR("Phase 3:"));
    2572:	87 e9       	ldi	r24, 0x97	; 151
    2574:	95 e0       	ldi	r25, 0x05	; 5
    2576:	0e 94 ba 08 	call	0x1174	; 0x1174 <lcd_writeProgString>
    delayMs(1000);
    257a:	88 ee       	ldi	r24, 0xE8	; 232
    257c:	93 e0       	ldi	r25, 0x03	; 3
    257e:	0d da       	rcall	.-3046   	; 0x199a <delayMs>
    lcd_line2();
    2580:	0e 94 61 08 	call	0x10c2	; 0x10c2 <lcd_line2>

    //! Sending Text
    rfAdapter_sendLcdPrint(serialAdapter_address, "lcd_clear() in");
    2584:	6f e3       	ldi	r22, 0x3F	; 63
    2586:	73 e0       	ldi	r23, 0x03	; 3
    2588:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    258c:	0e 94 a1 04 	call	0x942	; 0x942 <rfAdapter_sendLcdPrint>
    delayMs(50);
    2590:	82 e3       	ldi	r24, 0x32	; 50
    2592:	90 e0       	ldi	r25, 0x00	; 0

    //! Countdown for Clear
    for (int i = 3; i >= 0; --i) {
    2594:	02 da       	rcall	.-3068   	; 0x199a <delayMs>
    2596:	03 e0       	ldi	r16, 0x03	; 3
    2598:	10 e0       	ldi	r17, 0x00	; 0
        displayCounter(i);
    259a:	07 c0       	rjmp	.+14     	; 0x25aa <prog1+0xf6>
    259c:	c8 01       	movw	r24, r16
    259e:	5f df       	rcall	.-322    	; 0x245e <displayCounter>
        delayMs(1000);
    25a0:	88 ee       	ldi	r24, 0xE8	; 232
    25a2:	93 e0       	ldi	r25, 0x03	; 3
    25a4:	fa d9       	rcall	.-3084   	; 0x199a <delayMs>
    25a6:	01 50       	subi	r16, 0x01	; 1
    //! Sending Text
    rfAdapter_sendLcdPrint(serialAdapter_address, "lcd_clear() in");
    delayMs(50);

    //! Countdown for Clear
    for (int i = 3; i >= 0; --i) {
    25a8:	11 09       	sbc	r17, r1
    25aa:	11 23       	and	r17, r17
    25ac:	bc f7       	brge	.-18     	; 0x259c <prog1+0xe8>
        displayCounter(i);
        delayMs(1000);
    }

    //! Sending LCDClear
    rfAdapter_sendLcdClear(serialAdapter_address);
    25ae:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    25b2:	0e 94 49 04 	call	0x892	; 0x892 <rfAdapter_sendLcdClear>
    delayMs(2000);
    25b6:	80 ed       	ldi	r24, 0xD0	; 208
    25b8:	97 e0       	ldi	r25, 0x07	; 7
    25ba:	ef d9       	rcall	.-3106   	; 0x199a <delayMs>
    25bc:	0e 94 1c 08 	call	0x1038	; 0x1038 <lcd_clear>
#if PHASE_4 == 1
    /*!
     * Send LCD GoTo and LCD Print ProcMem to Broadcast Address
     */

    lcd_clear();
    25c0:	8e e8       	ldi	r24, 0x8E	; 142
    lcd_writeProgString(PSTR("Phase 4:"));
    25c2:	95 e0       	ldi	r25, 0x05	; 5
    25c4:	0e 94 ba 08 	call	0x1174	; 0x1174 <lcd_writeProgString>
    lcd_line2();
    25c8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <lcd_line2>
    lcd_writeProgString(PSTR("    -->  <--"));
    25cc:	81 e8       	ldi	r24, 0x81	; 129
    25ce:	95 e0       	ldi	r25, 0x05	; 5
    25d0:	0e 94 ba 08 	call	0x1174	; 0x1174 <lcd_writeProgString>
    delayMs(2000);
    25d4:	80 ed       	ldi	r24, 0xD0	; 208
    25d6:	97 e0       	ldi	r25, 0x07	; 7
    25d8:	e0 d9       	rcall	.-3136   	; 0x199a <delayMs>
    25da:	47 e0       	ldi	r20, 0x07	; 7

    //! Sending Okay between the Errors
    rfAdapter_sendLcdGoto(ADDRESS_BROADCAST, 1, 7);
    25dc:	61 e0       	ldi	r22, 0x01	; 1
    25de:	8f ef       	ldi	r24, 0xFF	; 255
    25e0:	0e 94 74 04 	call	0x8e8	; 0x8e8 <rfAdapter_sendLcdGoto>
    rfAdapter_sendLcdPrintProcMem(ADDRESS_BROADCAST, PSTR("OK"));
    25e4:	6e e7       	ldi	r22, 0x7E	; 126
    25e6:	75 e0       	ldi	r23, 0x05	; 5
    25e8:	8f ef       	ldi	r24, 0xFF	; 255
    25ea:	0e 94 f5 04 	call	0x9ea	; 0x9ea <rfAdapter_sendLcdPrintProcMem>
    delayMs(3000);
    25ee:	88 eb       	ldi	r24, 0xB8	; 184
    25f0:	9b e0       	ldi	r25, 0x0B	; 11
    25f2:	d3 d9       	rcall	.-3162   	; 0x199a <delayMs>
    /*!
     * Sends a reference frame to check compatibility with the other implementation.
     * Addressed to Broadcast Address
     */

    lcd_clear();
    25f4:	0e 94 1c 08 	call	0x1038	; 0x1038 <lcd_clear>
    lcd_writeProgString(PSTR("Phase 5:  refer-ence frame "));
    25f8:	82 e6       	ldi	r24, 0x62	; 98
    25fa:	95 e0       	ldi	r25, 0x05	; 5
    25fc:	0e 94 ba 08 	call	0x1174	; 0x1174 <lcd_writeProgString>
    lcd_goto(1,14);
    2600:	6e e0       	ldi	r22, 0x0E	; 14
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	0e 94 2f 08 	call	0x105e	; 0x105e <lcd_goto>
    delayMs(1000);
    2608:	88 ee       	ldi	r24, 0xE8	; 232
    260a:	93 e0       	ldi	r25, 0x03	; 3
    260c:	c6 d9       	rcall	.-3188   	; 0x199a <delayMs>
    260e:	8a e0       	ldi	r24, 0x0A	; 10

    //! The reference frame is equal to rfAdapter_sendLcdPrint(ADDRESS_BROADCAST, "OK");
    //! Created by using lcd_writeHexByte() in xbee_write().
    uint8_t data[] = {0x46, 0x52, 0x08, 0xFF, 0x04, 0x12, 0x02, 0x4F, 0x4B, 0xF3};
    2610:	ef e1       	ldi	r30, 0x1F	; 31
    2612:	f2 e0       	ldi	r31, 0x02	; 2
    2614:	de 01       	movw	r26, r28
    2616:	11 96       	adiw	r26, 0x01	; 1
    2618:	01 90       	ld	r0, Z+
    261a:	0d 92       	st	X+, r0
    261c:	8a 95       	dec	r24
    261e:	e1 f7       	brne	.-8      	; 0x2618 <prog1+0x164>
    uint8_t length = sizeof(data);

    //! Write directly to UART
    xbee_writeData(&data, length);
    2620:	6a e0       	ldi	r22, 0x0A	; 10
    2622:	ce 01       	movw	r24, r28
    2624:	01 96       	adiw	r24, 0x01	; 1
    2626:	0e 94 be 06 	call	0xd7c	; 0xd7c <xbee_writeData>

    delayMs(2000);
    262a:	80 ed       	ldi	r24, 0xD0	; 208
    262c:	97 e0       	ldi	r25, 0x07	; 7
    262e:	b5 d9       	rcall	.-3222   	; 0x199a <delayMs>
    2630:	0e 94 1c 08 	call	0x1038	; 0x1038 <lcd_clear>

#endif

    //! Show finished screen
    lcd_clear();
    2634:	83 e5       	ldi	r24, 0x53	; 83
    lcd_writeProgString(PSTR(" Test finished"));
    2636:	95 e0       	ldi	r25, 0x05	; 5
    2638:	0e 94 ba 08 	call	0x1174	; 0x1174 <lcd_writeProgString>
    263c:	ff cf       	rjmp	.-2      	; 0x263c <prog1+0x188>

0000263e <__udivmodsi4>:
    263e:	a1 e2       	ldi	r26, 0x21	; 33
    2640:	1a 2e       	mov	r1, r26
    2642:	aa 1b       	sub	r26, r26
    2644:	bb 1b       	sub	r27, r27
    2646:	fd 01       	movw	r30, r26
    2648:	0d c0       	rjmp	.+26     	; 0x2664 <__udivmodsi4_ep>

0000264a <__udivmodsi4_loop>:
    264a:	aa 1f       	adc	r26, r26
    264c:	bb 1f       	adc	r27, r27
    264e:	ee 1f       	adc	r30, r30
    2650:	ff 1f       	adc	r31, r31
    2652:	a2 17       	cp	r26, r18
    2654:	b3 07       	cpc	r27, r19
    2656:	e4 07       	cpc	r30, r20
    2658:	f5 07       	cpc	r31, r21
    265a:	20 f0       	brcs	.+8      	; 0x2664 <__udivmodsi4_ep>
    265c:	a2 1b       	sub	r26, r18
    265e:	b3 0b       	sbc	r27, r19
    2660:	e4 0b       	sbc	r30, r20
    2662:	f5 0b       	sbc	r31, r21

00002664 <__udivmodsi4_ep>:
    2664:	66 1f       	adc	r22, r22
    2666:	77 1f       	adc	r23, r23
    2668:	88 1f       	adc	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	1a 94       	dec	r1
    266e:	69 f7       	brne	.-38     	; 0x264a <__udivmodsi4_loop>
    2670:	60 95       	com	r22
    2672:	70 95       	com	r23
    2674:	80 95       	com	r24
    2676:	90 95       	com	r25
    2678:	9b 01       	movw	r18, r22
    267a:	ac 01       	movw	r20, r24
    267c:	bd 01       	movw	r22, r26
    267e:	cf 01       	movw	r24, r30
    2680:	08 95       	ret

00002682 <__tablejump2__>:
    2682:	ee 0f       	add	r30, r30
    2684:	ff 1f       	adc	r31, r31
    2686:	88 1f       	adc	r24, r24
    2688:	8b bf       	out	0x3b, r24	; 59
    268a:	07 90       	elpm	r0, Z+
    268c:	f6 91       	elpm	r31, Z
    268e:	e0 2d       	mov	r30, r0
    2690:	19 94       	eijmp

00002692 <__umulhisi3>:
    2692:	a2 9f       	mul	r26, r18
    2694:	b0 01       	movw	r22, r0
    2696:	b3 9f       	mul	r27, r19
    2698:	c0 01       	movw	r24, r0
    269a:	a3 9f       	mul	r26, r19
    269c:	70 0d       	add	r23, r0
    269e:	81 1d       	adc	r24, r1
    26a0:	11 24       	eor	r1, r1
    26a2:	91 1d       	adc	r25, r1
    26a4:	b2 9f       	mul	r27, r18
    26a6:	70 0d       	add	r23, r0
    26a8:	81 1d       	adc	r24, r1
    26aa:	11 24       	eor	r1, r1
    26ac:	91 1d       	adc	r25, r1
    26ae:	08 95       	ret

000026b0 <memcpy>:
    26b0:	fb 01       	movw	r30, r22
    26b2:	dc 01       	movw	r26, r24
    26b4:	02 c0       	rjmp	.+4      	; 0x26ba <memcpy+0xa>
    26b6:	01 90       	ld	r0, Z+
    26b8:	0d 92       	st	X+, r0
    26ba:	41 50       	subi	r20, 0x01	; 1
    26bc:	50 40       	sbci	r21, 0x00	; 0
    26be:	d8 f7       	brcc	.-10     	; 0x26b6 <memcpy+0x6>
    26c0:	08 95       	ret

000026c2 <strncpy>:
    26c2:	fb 01       	movw	r30, r22
    26c4:	dc 01       	movw	r26, r24
    26c6:	41 50       	subi	r20, 0x01	; 1
    26c8:	50 40       	sbci	r21, 0x00	; 0
    26ca:	48 f0       	brcs	.+18     	; 0x26de <strncpy+0x1c>
    26cc:	01 90       	ld	r0, Z+
    26ce:	0d 92       	st	X+, r0
    26d0:	00 20       	and	r0, r0
    26d2:	c9 f7       	brne	.-14     	; 0x26c6 <strncpy+0x4>
    26d4:	01 c0       	rjmp	.+2      	; 0x26d8 <strncpy+0x16>
    26d6:	1d 92       	st	X+, r1
    26d8:	41 50       	subi	r20, 0x01	; 1
    26da:	50 40       	sbci	r21, 0x00	; 0
    26dc:	e0 f7       	brcc	.-8      	; 0x26d6 <strncpy+0x14>
    26de:	08 95       	ret

000026e0 <printf>:
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	ae 01       	movw	r20, r28
    26ea:	4a 5f       	subi	r20, 0xFA	; 250
    26ec:	5f 4f       	sbci	r21, 0xFF	; 255
    26ee:	fa 01       	movw	r30, r20
    26f0:	61 91       	ld	r22, Z+
    26f2:	71 91       	ld	r23, Z+
    26f4:	af 01       	movw	r20, r30
    26f6:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <__iob+0x2>
    26fa:	90 91 a5 05 	lds	r25, 0x05A5	; 0x8005a5 <__iob+0x3>
    26fe:	38 d0       	rcall	.+112    	; 0x2770 <vfprintf>
    2700:	df 91       	pop	r29
    2702:	cf 91       	pop	r28
    2704:	08 95       	ret

00002706 <printf_P>:
    2706:	0f 93       	push	r16
    2708:	1f 93       	push	r17
    270a:	cf 93       	push	r28
    270c:	df 93       	push	r29
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	ae 01       	movw	r20, r28
    2714:	48 5f       	subi	r20, 0xF8	; 248
    2716:	5f 4f       	sbci	r21, 0xFF	; 255
    2718:	da 01       	movw	r26, r20
    271a:	6d 91       	ld	r22, X+
    271c:	7d 91       	ld	r23, X+
    271e:	ad 01       	movw	r20, r26
    2720:	02 ea       	ldi	r16, 0xA2	; 162
    2722:	15 e0       	ldi	r17, 0x05	; 5
    2724:	f8 01       	movw	r30, r16
    2726:	82 81       	ldd	r24, Z+2	; 0x02
    2728:	93 81       	ldd	r25, Z+3	; 0x03
    272a:	dc 01       	movw	r26, r24
    272c:	13 96       	adiw	r26, 0x03	; 3
    272e:	2c 91       	ld	r18, X
    2730:	13 97       	sbiw	r26, 0x03	; 3
    2732:	28 60       	ori	r18, 0x08	; 8
    2734:	13 96       	adiw	r26, 0x03	; 3
    2736:	2c 93       	st	X, r18
    2738:	1b d0       	rcall	.+54     	; 0x2770 <vfprintf>
    273a:	d8 01       	movw	r26, r16
    273c:	12 96       	adiw	r26, 0x02	; 2
    273e:	ed 91       	ld	r30, X+
    2740:	fc 91       	ld	r31, X
    2742:	13 97       	sbiw	r26, 0x03	; 3
    2744:	23 81       	ldd	r18, Z+3	; 0x03
    2746:	27 7f       	andi	r18, 0xF7	; 247
    2748:	23 83       	std	Z+3, r18	; 0x03
    274a:	df 91       	pop	r29
    274c:	cf 91       	pop	r28
    274e:	1f 91       	pop	r17
    2750:	0f 91       	pop	r16
    2752:	08 95       	ret

00002754 <vfprintf_P>:
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	ec 01       	movw	r28, r24
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	88 60       	ori	r24, 0x08	; 8
    275e:	8b 83       	std	Y+3, r24	; 0x03
    2760:	ce 01       	movw	r24, r28
    2762:	06 d0       	rcall	.+12     	; 0x2770 <vfprintf>
    2764:	2b 81       	ldd	r18, Y+3	; 0x03
    2766:	27 7f       	andi	r18, 0xF7	; 247
    2768:	2b 83       	std	Y+3, r18	; 0x03
    276a:	df 91       	pop	r29
    276c:	cf 91       	pop	r28
    276e:	08 95       	ret

00002770 <vfprintf>:
    2770:	2f 92       	push	r2
    2772:	3f 92       	push	r3
    2774:	4f 92       	push	r4
    2776:	5f 92       	push	r5
    2778:	6f 92       	push	r6
    277a:	7f 92       	push	r7
    277c:	8f 92       	push	r8
    277e:	9f 92       	push	r9
    2780:	af 92       	push	r10
    2782:	bf 92       	push	r11
    2784:	cf 92       	push	r12
    2786:	df 92       	push	r13
    2788:	ef 92       	push	r14
    278a:	ff 92       	push	r15
    278c:	0f 93       	push	r16
    278e:	1f 93       	push	r17
    2790:	cf 93       	push	r28
    2792:	df 93       	push	r29
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	2b 97       	sbiw	r28, 0x0b	; 11
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	6c 01       	movw	r12, r24
    27a6:	7b 01       	movw	r14, r22
    27a8:	8a 01       	movw	r16, r20
    27aa:	fc 01       	movw	r30, r24
    27ac:	17 82       	std	Z+7, r1	; 0x07
    27ae:	16 82       	std	Z+6, r1	; 0x06
    27b0:	83 81       	ldd	r24, Z+3	; 0x03
    27b2:	81 ff       	sbrs	r24, 1
    27b4:	bf c1       	rjmp	.+894    	; 0x2b34 <vfprintf+0x3c4>
    27b6:	ce 01       	movw	r24, r28
    27b8:	01 96       	adiw	r24, 0x01	; 1
    27ba:	3c 01       	movw	r6, r24
    27bc:	f6 01       	movw	r30, r12
    27be:	93 81       	ldd	r25, Z+3	; 0x03
    27c0:	f7 01       	movw	r30, r14
    27c2:	93 fd       	sbrc	r25, 3
    27c4:	85 91       	lpm	r24, Z+
    27c6:	93 ff       	sbrs	r25, 3
    27c8:	81 91       	ld	r24, Z+
    27ca:	7f 01       	movw	r14, r30
    27cc:	88 23       	and	r24, r24
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <vfprintf+0x62>
    27d0:	ad c1       	rjmp	.+858    	; 0x2b2c <vfprintf+0x3bc>
    27d2:	85 32       	cpi	r24, 0x25	; 37
    27d4:	39 f4       	brne	.+14     	; 0x27e4 <vfprintf+0x74>
    27d6:	93 fd       	sbrc	r25, 3
    27d8:	85 91       	lpm	r24, Z+
    27da:	93 ff       	sbrs	r25, 3
    27dc:	81 91       	ld	r24, Z+
    27de:	7f 01       	movw	r14, r30
    27e0:	85 32       	cpi	r24, 0x25	; 37
    27e2:	21 f4       	brne	.+8      	; 0x27ec <vfprintf+0x7c>
    27e4:	b6 01       	movw	r22, r12
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	d6 d1       	rcall	.+940    	; 0x2b96 <fputc>
    27ea:	e8 cf       	rjmp	.-48     	; 0x27bc <vfprintf+0x4c>
    27ec:	91 2c       	mov	r9, r1
    27ee:	21 2c       	mov	r2, r1
    27f0:	31 2c       	mov	r3, r1
    27f2:	ff e1       	ldi	r31, 0x1F	; 31
    27f4:	f3 15       	cp	r31, r3
    27f6:	d8 f0       	brcs	.+54     	; 0x282e <vfprintf+0xbe>
    27f8:	8b 32       	cpi	r24, 0x2B	; 43
    27fa:	79 f0       	breq	.+30     	; 0x281a <vfprintf+0xaa>
    27fc:	38 f4       	brcc	.+14     	; 0x280c <vfprintf+0x9c>
    27fe:	80 32       	cpi	r24, 0x20	; 32
    2800:	79 f0       	breq	.+30     	; 0x2820 <vfprintf+0xb0>
    2802:	83 32       	cpi	r24, 0x23	; 35
    2804:	a1 f4       	brne	.+40     	; 0x282e <vfprintf+0xbe>
    2806:	23 2d       	mov	r18, r3
    2808:	20 61       	ori	r18, 0x10	; 16
    280a:	1d c0       	rjmp	.+58     	; 0x2846 <vfprintf+0xd6>
    280c:	8d 32       	cpi	r24, 0x2D	; 45
    280e:	61 f0       	breq	.+24     	; 0x2828 <vfprintf+0xb8>
    2810:	80 33       	cpi	r24, 0x30	; 48
    2812:	69 f4       	brne	.+26     	; 0x282e <vfprintf+0xbe>
    2814:	23 2d       	mov	r18, r3
    2816:	21 60       	ori	r18, 0x01	; 1
    2818:	16 c0       	rjmp	.+44     	; 0x2846 <vfprintf+0xd6>
    281a:	83 2d       	mov	r24, r3
    281c:	82 60       	ori	r24, 0x02	; 2
    281e:	38 2e       	mov	r3, r24
    2820:	e3 2d       	mov	r30, r3
    2822:	e4 60       	ori	r30, 0x04	; 4
    2824:	3e 2e       	mov	r3, r30
    2826:	2a c0       	rjmp	.+84     	; 0x287c <vfprintf+0x10c>
    2828:	f3 2d       	mov	r31, r3
    282a:	f8 60       	ori	r31, 0x08	; 8
    282c:	1d c0       	rjmp	.+58     	; 0x2868 <vfprintf+0xf8>
    282e:	37 fc       	sbrc	r3, 7
    2830:	2d c0       	rjmp	.+90     	; 0x288c <vfprintf+0x11c>
    2832:	20 ed       	ldi	r18, 0xD0	; 208
    2834:	28 0f       	add	r18, r24
    2836:	2a 30       	cpi	r18, 0x0A	; 10
    2838:	40 f0       	brcs	.+16     	; 0x284a <vfprintf+0xda>
    283a:	8e 32       	cpi	r24, 0x2E	; 46
    283c:	b9 f4       	brne	.+46     	; 0x286c <vfprintf+0xfc>
    283e:	36 fc       	sbrc	r3, 6
    2840:	75 c1       	rjmp	.+746    	; 0x2b2c <vfprintf+0x3bc>
    2842:	23 2d       	mov	r18, r3
    2844:	20 64       	ori	r18, 0x40	; 64
    2846:	32 2e       	mov	r3, r18
    2848:	19 c0       	rjmp	.+50     	; 0x287c <vfprintf+0x10c>
    284a:	36 fe       	sbrs	r3, 6
    284c:	06 c0       	rjmp	.+12     	; 0x285a <vfprintf+0xea>
    284e:	8a e0       	ldi	r24, 0x0A	; 10
    2850:	98 9e       	mul	r9, r24
    2852:	20 0d       	add	r18, r0
    2854:	11 24       	eor	r1, r1
    2856:	92 2e       	mov	r9, r18
    2858:	11 c0       	rjmp	.+34     	; 0x287c <vfprintf+0x10c>
    285a:	ea e0       	ldi	r30, 0x0A	; 10
    285c:	2e 9e       	mul	r2, r30
    285e:	20 0d       	add	r18, r0
    2860:	11 24       	eor	r1, r1
    2862:	22 2e       	mov	r2, r18
    2864:	f3 2d       	mov	r31, r3
    2866:	f0 62       	ori	r31, 0x20	; 32
    2868:	3f 2e       	mov	r3, r31
    286a:	08 c0       	rjmp	.+16     	; 0x287c <vfprintf+0x10c>
    286c:	8c 36       	cpi	r24, 0x6C	; 108
    286e:	21 f4       	brne	.+8      	; 0x2878 <vfprintf+0x108>
    2870:	83 2d       	mov	r24, r3
    2872:	80 68       	ori	r24, 0x80	; 128
    2874:	38 2e       	mov	r3, r24
    2876:	02 c0       	rjmp	.+4      	; 0x287c <vfprintf+0x10c>
    2878:	88 36       	cpi	r24, 0x68	; 104
    287a:	41 f4       	brne	.+16     	; 0x288c <vfprintf+0x11c>
    287c:	f7 01       	movw	r30, r14
    287e:	93 fd       	sbrc	r25, 3
    2880:	85 91       	lpm	r24, Z+
    2882:	93 ff       	sbrs	r25, 3
    2884:	81 91       	ld	r24, Z+
    2886:	7f 01       	movw	r14, r30
    2888:	81 11       	cpse	r24, r1
    288a:	b3 cf       	rjmp	.-154    	; 0x27f2 <vfprintf+0x82>
    288c:	98 2f       	mov	r25, r24
    288e:	9f 7d       	andi	r25, 0xDF	; 223
    2890:	95 54       	subi	r25, 0x45	; 69
    2892:	93 30       	cpi	r25, 0x03	; 3
    2894:	28 f4       	brcc	.+10     	; 0x28a0 <vfprintf+0x130>
    2896:	0c 5f       	subi	r16, 0xFC	; 252
    2898:	1f 4f       	sbci	r17, 0xFF	; 255
    289a:	9f e3       	ldi	r25, 0x3F	; 63
    289c:	99 83       	std	Y+1, r25	; 0x01
    289e:	0d c0       	rjmp	.+26     	; 0x28ba <vfprintf+0x14a>
    28a0:	83 36       	cpi	r24, 0x63	; 99
    28a2:	31 f0       	breq	.+12     	; 0x28b0 <vfprintf+0x140>
    28a4:	83 37       	cpi	r24, 0x73	; 115
    28a6:	71 f0       	breq	.+28     	; 0x28c4 <vfprintf+0x154>
    28a8:	83 35       	cpi	r24, 0x53	; 83
    28aa:	09 f0       	breq	.+2      	; 0x28ae <vfprintf+0x13e>
    28ac:	55 c0       	rjmp	.+170    	; 0x2958 <vfprintf+0x1e8>
    28ae:	20 c0       	rjmp	.+64     	; 0x28f0 <vfprintf+0x180>
    28b0:	f8 01       	movw	r30, r16
    28b2:	80 81       	ld	r24, Z
    28b4:	89 83       	std	Y+1, r24	; 0x01
    28b6:	0e 5f       	subi	r16, 0xFE	; 254
    28b8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ba:	88 24       	eor	r8, r8
    28bc:	83 94       	inc	r8
    28be:	91 2c       	mov	r9, r1
    28c0:	53 01       	movw	r10, r6
    28c2:	12 c0       	rjmp	.+36     	; 0x28e8 <vfprintf+0x178>
    28c4:	28 01       	movw	r4, r16
    28c6:	f2 e0       	ldi	r31, 0x02	; 2
    28c8:	4f 0e       	add	r4, r31
    28ca:	51 1c       	adc	r5, r1
    28cc:	f8 01       	movw	r30, r16
    28ce:	a0 80       	ld	r10, Z
    28d0:	b1 80       	ldd	r11, Z+1	; 0x01
    28d2:	36 fe       	sbrs	r3, 6
    28d4:	03 c0       	rjmp	.+6      	; 0x28dc <vfprintf+0x16c>
    28d6:	69 2d       	mov	r22, r9
    28d8:	70 e0       	ldi	r23, 0x00	; 0
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <vfprintf+0x170>
    28dc:	6f ef       	ldi	r22, 0xFF	; 255
    28de:	7f ef       	ldi	r23, 0xFF	; 255
    28e0:	c5 01       	movw	r24, r10
    28e2:	4e d1       	rcall	.+668    	; 0x2b80 <strnlen>
    28e4:	4c 01       	movw	r8, r24
    28e6:	82 01       	movw	r16, r4
    28e8:	f3 2d       	mov	r31, r3
    28ea:	ff 77       	andi	r31, 0x7F	; 127
    28ec:	3f 2e       	mov	r3, r31
    28ee:	15 c0       	rjmp	.+42     	; 0x291a <vfprintf+0x1aa>
    28f0:	28 01       	movw	r4, r16
    28f2:	22 e0       	ldi	r18, 0x02	; 2
    28f4:	42 0e       	add	r4, r18
    28f6:	51 1c       	adc	r5, r1
    28f8:	f8 01       	movw	r30, r16
    28fa:	a0 80       	ld	r10, Z
    28fc:	b1 80       	ldd	r11, Z+1	; 0x01
    28fe:	36 fe       	sbrs	r3, 6
    2900:	03 c0       	rjmp	.+6      	; 0x2908 <vfprintf+0x198>
    2902:	69 2d       	mov	r22, r9
    2904:	70 e0       	ldi	r23, 0x00	; 0
    2906:	02 c0       	rjmp	.+4      	; 0x290c <vfprintf+0x19c>
    2908:	6f ef       	ldi	r22, 0xFF	; 255
    290a:	7f ef       	ldi	r23, 0xFF	; 255
    290c:	c5 01       	movw	r24, r10
    290e:	2d d1       	rcall	.+602    	; 0x2b6a <strnlen_P>
    2910:	4c 01       	movw	r8, r24
    2912:	f3 2d       	mov	r31, r3
    2914:	f0 68       	ori	r31, 0x80	; 128
    2916:	3f 2e       	mov	r3, r31
    2918:	82 01       	movw	r16, r4
    291a:	33 fc       	sbrc	r3, 3
    291c:	19 c0       	rjmp	.+50     	; 0x2950 <vfprintf+0x1e0>
    291e:	82 2d       	mov	r24, r2
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	88 16       	cp	r8, r24
    2924:	99 06       	cpc	r9, r25
    2926:	a0 f4       	brcc	.+40     	; 0x2950 <vfprintf+0x1e0>
    2928:	b6 01       	movw	r22, r12
    292a:	80 e2       	ldi	r24, 0x20	; 32
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	33 d1       	rcall	.+614    	; 0x2b96 <fputc>
    2930:	2a 94       	dec	r2
    2932:	f5 cf       	rjmp	.-22     	; 0x291e <vfprintf+0x1ae>
    2934:	f5 01       	movw	r30, r10
    2936:	37 fc       	sbrc	r3, 7
    2938:	85 91       	lpm	r24, Z+
    293a:	37 fe       	sbrs	r3, 7
    293c:	81 91       	ld	r24, Z+
    293e:	5f 01       	movw	r10, r30
    2940:	b6 01       	movw	r22, r12
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	28 d1       	rcall	.+592    	; 0x2b96 <fputc>
    2946:	21 10       	cpse	r2, r1
    2948:	2a 94       	dec	r2
    294a:	21 e0       	ldi	r18, 0x01	; 1
    294c:	82 1a       	sub	r8, r18
    294e:	91 08       	sbc	r9, r1
    2950:	81 14       	cp	r8, r1
    2952:	91 04       	cpc	r9, r1
    2954:	79 f7       	brne	.-34     	; 0x2934 <vfprintf+0x1c4>
    2956:	e1 c0       	rjmp	.+450    	; 0x2b1a <vfprintf+0x3aa>
    2958:	84 36       	cpi	r24, 0x64	; 100
    295a:	11 f0       	breq	.+4      	; 0x2960 <vfprintf+0x1f0>
    295c:	89 36       	cpi	r24, 0x69	; 105
    295e:	39 f5       	brne	.+78     	; 0x29ae <vfprintf+0x23e>
    2960:	f8 01       	movw	r30, r16
    2962:	37 fe       	sbrs	r3, 7
    2964:	07 c0       	rjmp	.+14     	; 0x2974 <vfprintf+0x204>
    2966:	60 81       	ld	r22, Z
    2968:	71 81       	ldd	r23, Z+1	; 0x01
    296a:	82 81       	ldd	r24, Z+2	; 0x02
    296c:	93 81       	ldd	r25, Z+3	; 0x03
    296e:	0c 5f       	subi	r16, 0xFC	; 252
    2970:	1f 4f       	sbci	r17, 0xFF	; 255
    2972:	08 c0       	rjmp	.+16     	; 0x2984 <vfprintf+0x214>
    2974:	60 81       	ld	r22, Z
    2976:	71 81       	ldd	r23, Z+1	; 0x01
    2978:	07 2e       	mov	r0, r23
    297a:	00 0c       	add	r0, r0
    297c:	88 0b       	sbc	r24, r24
    297e:	99 0b       	sbc	r25, r25
    2980:	0e 5f       	subi	r16, 0xFE	; 254
    2982:	1f 4f       	sbci	r17, 0xFF	; 255
    2984:	f3 2d       	mov	r31, r3
    2986:	ff 76       	andi	r31, 0x6F	; 111
    2988:	3f 2e       	mov	r3, r31
    298a:	97 ff       	sbrs	r25, 7
    298c:	09 c0       	rjmp	.+18     	; 0x29a0 <vfprintf+0x230>
    298e:	90 95       	com	r25
    2990:	80 95       	com	r24
    2992:	70 95       	com	r23
    2994:	61 95       	neg	r22
    2996:	7f 4f       	sbci	r23, 0xFF	; 255
    2998:	8f 4f       	sbci	r24, 0xFF	; 255
    299a:	9f 4f       	sbci	r25, 0xFF	; 255
    299c:	f0 68       	ori	r31, 0x80	; 128
    299e:	3f 2e       	mov	r3, r31
    29a0:	2a e0       	ldi	r18, 0x0A	; 10
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	a3 01       	movw	r20, r6
    29a6:	33 d1       	rcall	.+614    	; 0x2c0e <__ultoa_invert>
    29a8:	88 2e       	mov	r8, r24
    29aa:	86 18       	sub	r8, r6
    29ac:	44 c0       	rjmp	.+136    	; 0x2a36 <vfprintf+0x2c6>
    29ae:	85 37       	cpi	r24, 0x75	; 117
    29b0:	31 f4       	brne	.+12     	; 0x29be <vfprintf+0x24e>
    29b2:	23 2d       	mov	r18, r3
    29b4:	2f 7e       	andi	r18, 0xEF	; 239
    29b6:	b2 2e       	mov	r11, r18
    29b8:	2a e0       	ldi	r18, 0x0A	; 10
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	25 c0       	rjmp	.+74     	; 0x2a08 <vfprintf+0x298>
    29be:	93 2d       	mov	r25, r3
    29c0:	99 7f       	andi	r25, 0xF9	; 249
    29c2:	b9 2e       	mov	r11, r25
    29c4:	8f 36       	cpi	r24, 0x6F	; 111
    29c6:	c1 f0       	breq	.+48     	; 0x29f8 <vfprintf+0x288>
    29c8:	18 f4       	brcc	.+6      	; 0x29d0 <vfprintf+0x260>
    29ca:	88 35       	cpi	r24, 0x58	; 88
    29cc:	79 f0       	breq	.+30     	; 0x29ec <vfprintf+0x27c>
    29ce:	ae c0       	rjmp	.+348    	; 0x2b2c <vfprintf+0x3bc>
    29d0:	80 37       	cpi	r24, 0x70	; 112
    29d2:	19 f0       	breq	.+6      	; 0x29da <vfprintf+0x26a>
    29d4:	88 37       	cpi	r24, 0x78	; 120
    29d6:	21 f0       	breq	.+8      	; 0x29e0 <vfprintf+0x270>
    29d8:	a9 c0       	rjmp	.+338    	; 0x2b2c <vfprintf+0x3bc>
    29da:	e9 2f       	mov	r30, r25
    29dc:	e0 61       	ori	r30, 0x10	; 16
    29de:	be 2e       	mov	r11, r30
    29e0:	b4 fe       	sbrs	r11, 4
    29e2:	0d c0       	rjmp	.+26     	; 0x29fe <vfprintf+0x28e>
    29e4:	fb 2d       	mov	r31, r11
    29e6:	f4 60       	ori	r31, 0x04	; 4
    29e8:	bf 2e       	mov	r11, r31
    29ea:	09 c0       	rjmp	.+18     	; 0x29fe <vfprintf+0x28e>
    29ec:	34 fe       	sbrs	r3, 4
    29ee:	0a c0       	rjmp	.+20     	; 0x2a04 <vfprintf+0x294>
    29f0:	29 2f       	mov	r18, r25
    29f2:	26 60       	ori	r18, 0x06	; 6
    29f4:	b2 2e       	mov	r11, r18
    29f6:	06 c0       	rjmp	.+12     	; 0x2a04 <vfprintf+0x294>
    29f8:	28 e0       	ldi	r18, 0x08	; 8
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	05 c0       	rjmp	.+10     	; 0x2a08 <vfprintf+0x298>
    29fe:	20 e1       	ldi	r18, 0x10	; 16
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <vfprintf+0x298>
    2a04:	20 e1       	ldi	r18, 0x10	; 16
    2a06:	32 e0       	ldi	r19, 0x02	; 2
    2a08:	f8 01       	movw	r30, r16
    2a0a:	b7 fe       	sbrs	r11, 7
    2a0c:	07 c0       	rjmp	.+14     	; 0x2a1c <vfprintf+0x2ac>
    2a0e:	60 81       	ld	r22, Z
    2a10:	71 81       	ldd	r23, Z+1	; 0x01
    2a12:	82 81       	ldd	r24, Z+2	; 0x02
    2a14:	93 81       	ldd	r25, Z+3	; 0x03
    2a16:	0c 5f       	subi	r16, 0xFC	; 252
    2a18:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1a:	06 c0       	rjmp	.+12     	; 0x2a28 <vfprintf+0x2b8>
    2a1c:	60 81       	ld	r22, Z
    2a1e:	71 81       	ldd	r23, Z+1	; 0x01
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	0e 5f       	subi	r16, 0xFE	; 254
    2a26:	1f 4f       	sbci	r17, 0xFF	; 255
    2a28:	a3 01       	movw	r20, r6
    2a2a:	f1 d0       	rcall	.+482    	; 0x2c0e <__ultoa_invert>
    2a2c:	88 2e       	mov	r8, r24
    2a2e:	86 18       	sub	r8, r6
    2a30:	fb 2d       	mov	r31, r11
    2a32:	ff 77       	andi	r31, 0x7F	; 127
    2a34:	3f 2e       	mov	r3, r31
    2a36:	36 fe       	sbrs	r3, 6
    2a38:	0d c0       	rjmp	.+26     	; 0x2a54 <vfprintf+0x2e4>
    2a3a:	23 2d       	mov	r18, r3
    2a3c:	2e 7f       	andi	r18, 0xFE	; 254
    2a3e:	a2 2e       	mov	r10, r18
    2a40:	89 14       	cp	r8, r9
    2a42:	58 f4       	brcc	.+22     	; 0x2a5a <vfprintf+0x2ea>
    2a44:	34 fe       	sbrs	r3, 4
    2a46:	0b c0       	rjmp	.+22     	; 0x2a5e <vfprintf+0x2ee>
    2a48:	32 fc       	sbrc	r3, 2
    2a4a:	09 c0       	rjmp	.+18     	; 0x2a5e <vfprintf+0x2ee>
    2a4c:	83 2d       	mov	r24, r3
    2a4e:	8e 7e       	andi	r24, 0xEE	; 238
    2a50:	a8 2e       	mov	r10, r24
    2a52:	05 c0       	rjmp	.+10     	; 0x2a5e <vfprintf+0x2ee>
    2a54:	b8 2c       	mov	r11, r8
    2a56:	a3 2c       	mov	r10, r3
    2a58:	03 c0       	rjmp	.+6      	; 0x2a60 <vfprintf+0x2f0>
    2a5a:	b8 2c       	mov	r11, r8
    2a5c:	01 c0       	rjmp	.+2      	; 0x2a60 <vfprintf+0x2f0>
    2a5e:	b9 2c       	mov	r11, r9
    2a60:	a4 fe       	sbrs	r10, 4
    2a62:	0f c0       	rjmp	.+30     	; 0x2a82 <vfprintf+0x312>
    2a64:	fe 01       	movw	r30, r28
    2a66:	e8 0d       	add	r30, r8
    2a68:	f1 1d       	adc	r31, r1
    2a6a:	80 81       	ld	r24, Z
    2a6c:	80 33       	cpi	r24, 0x30	; 48
    2a6e:	21 f4       	brne	.+8      	; 0x2a78 <vfprintf+0x308>
    2a70:	9a 2d       	mov	r25, r10
    2a72:	99 7e       	andi	r25, 0xE9	; 233
    2a74:	a9 2e       	mov	r10, r25
    2a76:	09 c0       	rjmp	.+18     	; 0x2a8a <vfprintf+0x31a>
    2a78:	a2 fe       	sbrs	r10, 2
    2a7a:	06 c0       	rjmp	.+12     	; 0x2a88 <vfprintf+0x318>
    2a7c:	b3 94       	inc	r11
    2a7e:	b3 94       	inc	r11
    2a80:	04 c0       	rjmp	.+8      	; 0x2a8a <vfprintf+0x31a>
    2a82:	8a 2d       	mov	r24, r10
    2a84:	86 78       	andi	r24, 0x86	; 134
    2a86:	09 f0       	breq	.+2      	; 0x2a8a <vfprintf+0x31a>
    2a88:	b3 94       	inc	r11
    2a8a:	a3 fc       	sbrc	r10, 3
    2a8c:	10 c0       	rjmp	.+32     	; 0x2aae <vfprintf+0x33e>
    2a8e:	a0 fe       	sbrs	r10, 0
    2a90:	06 c0       	rjmp	.+12     	; 0x2a9e <vfprintf+0x32e>
    2a92:	b2 14       	cp	r11, r2
    2a94:	80 f4       	brcc	.+32     	; 0x2ab6 <vfprintf+0x346>
    2a96:	28 0c       	add	r2, r8
    2a98:	92 2c       	mov	r9, r2
    2a9a:	9b 18       	sub	r9, r11
    2a9c:	0d c0       	rjmp	.+26     	; 0x2ab8 <vfprintf+0x348>
    2a9e:	b2 14       	cp	r11, r2
    2aa0:	58 f4       	brcc	.+22     	; 0x2ab8 <vfprintf+0x348>
    2aa2:	b6 01       	movw	r22, r12
    2aa4:	80 e2       	ldi	r24, 0x20	; 32
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	76 d0       	rcall	.+236    	; 0x2b96 <fputc>
    2aaa:	b3 94       	inc	r11
    2aac:	f8 cf       	rjmp	.-16     	; 0x2a9e <vfprintf+0x32e>
    2aae:	b2 14       	cp	r11, r2
    2ab0:	18 f4       	brcc	.+6      	; 0x2ab8 <vfprintf+0x348>
    2ab2:	2b 18       	sub	r2, r11
    2ab4:	02 c0       	rjmp	.+4      	; 0x2aba <vfprintf+0x34a>
    2ab6:	98 2c       	mov	r9, r8
    2ab8:	21 2c       	mov	r2, r1
    2aba:	a4 fe       	sbrs	r10, 4
    2abc:	0f c0       	rjmp	.+30     	; 0x2adc <vfprintf+0x36c>
    2abe:	b6 01       	movw	r22, r12
    2ac0:	80 e3       	ldi	r24, 0x30	; 48
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	68 d0       	rcall	.+208    	; 0x2b96 <fputc>
    2ac6:	a2 fe       	sbrs	r10, 2
    2ac8:	16 c0       	rjmp	.+44     	; 0x2af6 <vfprintf+0x386>
    2aca:	a1 fc       	sbrc	r10, 1
    2acc:	03 c0       	rjmp	.+6      	; 0x2ad4 <vfprintf+0x364>
    2ace:	88 e7       	ldi	r24, 0x78	; 120
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <vfprintf+0x368>
    2ad4:	88 e5       	ldi	r24, 0x58	; 88
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	b6 01       	movw	r22, r12
    2ada:	0c c0       	rjmp	.+24     	; 0x2af4 <vfprintf+0x384>
    2adc:	8a 2d       	mov	r24, r10
    2ade:	86 78       	andi	r24, 0x86	; 134
    2ae0:	51 f0       	breq	.+20     	; 0x2af6 <vfprintf+0x386>
    2ae2:	a1 fe       	sbrs	r10, 1
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <vfprintf+0x37a>
    2ae6:	8b e2       	ldi	r24, 0x2B	; 43
    2ae8:	01 c0       	rjmp	.+2      	; 0x2aec <vfprintf+0x37c>
    2aea:	80 e2       	ldi	r24, 0x20	; 32
    2aec:	a7 fc       	sbrc	r10, 7
    2aee:	8d e2       	ldi	r24, 0x2D	; 45
    2af0:	b6 01       	movw	r22, r12
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	50 d0       	rcall	.+160    	; 0x2b96 <fputc>
    2af6:	89 14       	cp	r8, r9
    2af8:	30 f4       	brcc	.+12     	; 0x2b06 <vfprintf+0x396>
    2afa:	b6 01       	movw	r22, r12
    2afc:	80 e3       	ldi	r24, 0x30	; 48
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	4a d0       	rcall	.+148    	; 0x2b96 <fputc>
    2b02:	9a 94       	dec	r9
    2b04:	f8 cf       	rjmp	.-16     	; 0x2af6 <vfprintf+0x386>
    2b06:	8a 94       	dec	r8
    2b08:	f3 01       	movw	r30, r6
    2b0a:	e8 0d       	add	r30, r8
    2b0c:	f1 1d       	adc	r31, r1
    2b0e:	80 81       	ld	r24, Z
    2b10:	b6 01       	movw	r22, r12
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	40 d0       	rcall	.+128    	; 0x2b96 <fputc>
    2b16:	81 10       	cpse	r8, r1
    2b18:	f6 cf       	rjmp	.-20     	; 0x2b06 <vfprintf+0x396>
    2b1a:	22 20       	and	r2, r2
    2b1c:	09 f4       	brne	.+2      	; 0x2b20 <vfprintf+0x3b0>
    2b1e:	4e ce       	rjmp	.-868    	; 0x27bc <vfprintf+0x4c>
    2b20:	b6 01       	movw	r22, r12
    2b22:	80 e2       	ldi	r24, 0x20	; 32
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	37 d0       	rcall	.+110    	; 0x2b96 <fputc>
    2b28:	2a 94       	dec	r2
    2b2a:	f7 cf       	rjmp	.-18     	; 0x2b1a <vfprintf+0x3aa>
    2b2c:	f6 01       	movw	r30, r12
    2b2e:	86 81       	ldd	r24, Z+6	; 0x06
    2b30:	97 81       	ldd	r25, Z+7	; 0x07
    2b32:	02 c0       	rjmp	.+4      	; 0x2b38 <vfprintf+0x3c8>
    2b34:	8f ef       	ldi	r24, 0xFF	; 255
    2b36:	9f ef       	ldi	r25, 0xFF	; 255
    2b38:	2b 96       	adiw	r28, 0x0b	; 11
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	df 91       	pop	r29
    2b46:	cf 91       	pop	r28
    2b48:	1f 91       	pop	r17
    2b4a:	0f 91       	pop	r16
    2b4c:	ff 90       	pop	r15
    2b4e:	ef 90       	pop	r14
    2b50:	df 90       	pop	r13
    2b52:	cf 90       	pop	r12
    2b54:	bf 90       	pop	r11
    2b56:	af 90       	pop	r10
    2b58:	9f 90       	pop	r9
    2b5a:	8f 90       	pop	r8
    2b5c:	7f 90       	pop	r7
    2b5e:	6f 90       	pop	r6
    2b60:	5f 90       	pop	r5
    2b62:	4f 90       	pop	r4
    2b64:	3f 90       	pop	r3
    2b66:	2f 90       	pop	r2
    2b68:	08 95       	ret

00002b6a <strnlen_P>:
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	05 90       	lpm	r0, Z+
    2b6e:	61 50       	subi	r22, 0x01	; 1
    2b70:	70 40       	sbci	r23, 0x00	; 0
    2b72:	01 10       	cpse	r0, r1
    2b74:	d8 f7       	brcc	.-10     	; 0x2b6c <strnlen_P+0x2>
    2b76:	80 95       	com	r24
    2b78:	90 95       	com	r25
    2b7a:	8e 0f       	add	r24, r30
    2b7c:	9f 1f       	adc	r25, r31
    2b7e:	08 95       	ret

00002b80 <strnlen>:
    2b80:	fc 01       	movw	r30, r24
    2b82:	61 50       	subi	r22, 0x01	; 1
    2b84:	70 40       	sbci	r23, 0x00	; 0
    2b86:	01 90       	ld	r0, Z+
    2b88:	01 10       	cpse	r0, r1
    2b8a:	d8 f7       	brcc	.-10     	; 0x2b82 <strnlen+0x2>
    2b8c:	80 95       	com	r24
    2b8e:	90 95       	com	r25
    2b90:	8e 0f       	add	r24, r30
    2b92:	9f 1f       	adc	r25, r31
    2b94:	08 95       	ret

00002b96 <fputc>:
    2b96:	0f 93       	push	r16
    2b98:	1f 93       	push	r17
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
    2b9e:	fb 01       	movw	r30, r22
    2ba0:	23 81       	ldd	r18, Z+3	; 0x03
    2ba2:	21 fd       	sbrc	r18, 1
    2ba4:	03 c0       	rjmp	.+6      	; 0x2bac <fputc+0x16>
    2ba6:	8f ef       	ldi	r24, 0xFF	; 255
    2ba8:	9f ef       	ldi	r25, 0xFF	; 255
    2baa:	2c c0       	rjmp	.+88     	; 0x2c04 <fputc+0x6e>
    2bac:	22 ff       	sbrs	r18, 2
    2bae:	16 c0       	rjmp	.+44     	; 0x2bdc <fputc+0x46>
    2bb0:	46 81       	ldd	r20, Z+6	; 0x06
    2bb2:	57 81       	ldd	r21, Z+7	; 0x07
    2bb4:	24 81       	ldd	r18, Z+4	; 0x04
    2bb6:	35 81       	ldd	r19, Z+5	; 0x05
    2bb8:	42 17       	cp	r20, r18
    2bba:	53 07       	cpc	r21, r19
    2bbc:	44 f4       	brge	.+16     	; 0x2bce <fputc+0x38>
    2bbe:	a0 81       	ld	r26, Z
    2bc0:	b1 81       	ldd	r27, Z+1	; 0x01
    2bc2:	9d 01       	movw	r18, r26
    2bc4:	2f 5f       	subi	r18, 0xFF	; 255
    2bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc8:	31 83       	std	Z+1, r19	; 0x01
    2bca:	20 83       	st	Z, r18
    2bcc:	8c 93       	st	X, r24
    2bce:	26 81       	ldd	r18, Z+6	; 0x06
    2bd0:	37 81       	ldd	r19, Z+7	; 0x07
    2bd2:	2f 5f       	subi	r18, 0xFF	; 255
    2bd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd6:	37 83       	std	Z+7, r19	; 0x07
    2bd8:	26 83       	std	Z+6, r18	; 0x06
    2bda:	14 c0       	rjmp	.+40     	; 0x2c04 <fputc+0x6e>
    2bdc:	8b 01       	movw	r16, r22
    2bde:	ec 01       	movw	r28, r24
    2be0:	fb 01       	movw	r30, r22
    2be2:	00 84       	ldd	r0, Z+8	; 0x08
    2be4:	f1 85       	ldd	r31, Z+9	; 0x09
    2be6:	e0 2d       	mov	r30, r0
    2be8:	19 95       	eicall
    2bea:	89 2b       	or	r24, r25
    2bec:	e1 f6       	brne	.-72     	; 0x2ba6 <fputc+0x10>
    2bee:	d8 01       	movw	r26, r16
    2bf0:	16 96       	adiw	r26, 0x06	; 6
    2bf2:	8d 91       	ld	r24, X+
    2bf4:	9c 91       	ld	r25, X
    2bf6:	17 97       	sbiw	r26, 0x07	; 7
    2bf8:	01 96       	adiw	r24, 0x01	; 1
    2bfa:	17 96       	adiw	r26, 0x07	; 7
    2bfc:	9c 93       	st	X, r25
    2bfe:	8e 93       	st	-X, r24
    2c00:	16 97       	sbiw	r26, 0x06	; 6
    2c02:	ce 01       	movw	r24, r28
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	1f 91       	pop	r17
    2c0a:	0f 91       	pop	r16
    2c0c:	08 95       	ret

00002c0e <__ultoa_invert>:
    2c0e:	fa 01       	movw	r30, r20
    2c10:	aa 27       	eor	r26, r26
    2c12:	28 30       	cpi	r18, 0x08	; 8
    2c14:	51 f1       	breq	.+84     	; 0x2c6a <__ultoa_invert+0x5c>
    2c16:	20 31       	cpi	r18, 0x10	; 16
    2c18:	81 f1       	breq	.+96     	; 0x2c7a <__ultoa_invert+0x6c>
    2c1a:	e8 94       	clt
    2c1c:	6f 93       	push	r22
    2c1e:	6e 7f       	andi	r22, 0xFE	; 254
    2c20:	6e 5f       	subi	r22, 0xFE	; 254
    2c22:	7f 4f       	sbci	r23, 0xFF	; 255
    2c24:	8f 4f       	sbci	r24, 0xFF	; 255
    2c26:	9f 4f       	sbci	r25, 0xFF	; 255
    2c28:	af 4f       	sbci	r26, 0xFF	; 255
    2c2a:	b1 e0       	ldi	r27, 0x01	; 1
    2c2c:	3e d0       	rcall	.+124    	; 0x2caa <__ultoa_invert+0x9c>
    2c2e:	b4 e0       	ldi	r27, 0x04	; 4
    2c30:	3c d0       	rcall	.+120    	; 0x2caa <__ultoa_invert+0x9c>
    2c32:	67 0f       	add	r22, r23
    2c34:	78 1f       	adc	r23, r24
    2c36:	89 1f       	adc	r24, r25
    2c38:	9a 1f       	adc	r25, r26
    2c3a:	a1 1d       	adc	r26, r1
    2c3c:	68 0f       	add	r22, r24
    2c3e:	79 1f       	adc	r23, r25
    2c40:	8a 1f       	adc	r24, r26
    2c42:	91 1d       	adc	r25, r1
    2c44:	a1 1d       	adc	r26, r1
    2c46:	6a 0f       	add	r22, r26
    2c48:	71 1d       	adc	r23, r1
    2c4a:	81 1d       	adc	r24, r1
    2c4c:	91 1d       	adc	r25, r1
    2c4e:	a1 1d       	adc	r26, r1
    2c50:	20 d0       	rcall	.+64     	; 0x2c92 <__ultoa_invert+0x84>
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <__ultoa_invert+0x48>
    2c54:	68 94       	set
    2c56:	3f 91       	pop	r19
    2c58:	2a e0       	ldi	r18, 0x0A	; 10
    2c5a:	26 9f       	mul	r18, r22
    2c5c:	11 24       	eor	r1, r1
    2c5e:	30 19       	sub	r19, r0
    2c60:	30 5d       	subi	r19, 0xD0	; 208
    2c62:	31 93       	st	Z+, r19
    2c64:	de f6       	brtc	.-74     	; 0x2c1c <__ultoa_invert+0xe>
    2c66:	cf 01       	movw	r24, r30
    2c68:	08 95       	ret
    2c6a:	46 2f       	mov	r20, r22
    2c6c:	47 70       	andi	r20, 0x07	; 7
    2c6e:	40 5d       	subi	r20, 0xD0	; 208
    2c70:	41 93       	st	Z+, r20
    2c72:	b3 e0       	ldi	r27, 0x03	; 3
    2c74:	0f d0       	rcall	.+30     	; 0x2c94 <__ultoa_invert+0x86>
    2c76:	c9 f7       	brne	.-14     	; 0x2c6a <__ultoa_invert+0x5c>
    2c78:	f6 cf       	rjmp	.-20     	; 0x2c66 <__ultoa_invert+0x58>
    2c7a:	46 2f       	mov	r20, r22
    2c7c:	4f 70       	andi	r20, 0x0F	; 15
    2c7e:	40 5d       	subi	r20, 0xD0	; 208
    2c80:	4a 33       	cpi	r20, 0x3A	; 58
    2c82:	18 f0       	brcs	.+6      	; 0x2c8a <__ultoa_invert+0x7c>
    2c84:	49 5d       	subi	r20, 0xD9	; 217
    2c86:	31 fd       	sbrc	r19, 1
    2c88:	40 52       	subi	r20, 0x20	; 32
    2c8a:	41 93       	st	Z+, r20
    2c8c:	02 d0       	rcall	.+4      	; 0x2c92 <__ultoa_invert+0x84>
    2c8e:	a9 f7       	brne	.-22     	; 0x2c7a <__ultoa_invert+0x6c>
    2c90:	ea cf       	rjmp	.-44     	; 0x2c66 <__ultoa_invert+0x58>
    2c92:	b4 e0       	ldi	r27, 0x04	; 4
    2c94:	a6 95       	lsr	r26
    2c96:	97 95       	ror	r25
    2c98:	87 95       	ror	r24
    2c9a:	77 95       	ror	r23
    2c9c:	67 95       	ror	r22
    2c9e:	ba 95       	dec	r27
    2ca0:	c9 f7       	brne	.-14     	; 0x2c94 <__ultoa_invert+0x86>
    2ca2:	00 97       	sbiw	r24, 0x00	; 0
    2ca4:	61 05       	cpc	r22, r1
    2ca6:	71 05       	cpc	r23, r1
    2ca8:	08 95       	ret
    2caa:	9b 01       	movw	r18, r22
    2cac:	ac 01       	movw	r20, r24
    2cae:	0a 2e       	mov	r0, r26
    2cb0:	06 94       	lsr	r0
    2cb2:	57 95       	ror	r21
    2cb4:	47 95       	ror	r20
    2cb6:	37 95       	ror	r19
    2cb8:	27 95       	ror	r18
    2cba:	ba 95       	dec	r27
    2cbc:	c9 f7       	brne	.-14     	; 0x2cb0 <__ultoa_invert+0xa2>
    2cbe:	62 0f       	add	r22, r18
    2cc0:	73 1f       	adc	r23, r19
    2cc2:	84 1f       	adc	r24, r20
    2cc4:	95 1f       	adc	r25, r21
    2cc6:	a0 1d       	adc	r26, r0
    2cc8:	08 95       	ret

00002cca <_exit>:
    2cca:	f8 94       	cli

00002ccc <__stop_program>:
    2ccc:	ff cf       	rjmp	.-2      	; 0x2ccc <__stop_program>

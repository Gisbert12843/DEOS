
DEOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800200  00002e34  00002ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025a  00800320  00800320  00002fe8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003044  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006d8  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000069a6  00000000  00000000  0000375c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024fc  00000000  00000000  0000a102  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b67  00000000  00000000  0000c5fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001480  00000000  00000000  00010168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a8d  00000000  00000000  000115e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004864  00000000  00000000  00013075  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000668  00000000  00000000  000178d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	36 c3       	rjmp	.+1644   	; 0x66e <__ctors_end>
       2:	00 00       	nop
       4:	65 c3       	rjmp	.+1738   	; 0x6d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c3       	rjmp	.+1734   	; 0x6d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c3       	rjmp	.+1730   	; 0x6d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c3       	rjmp	.+1726   	; 0x6d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c3       	rjmp	.+1722   	; 0x6d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c3       	rjmp	.+1718   	; 0x6d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c3       	rjmp	.+1714   	; 0x6d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c3       	rjmp	.+1710   	; 0x6d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c3       	rjmp	.+1706   	; 0x6d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c3       	rjmp	.+1702   	; 0x6d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c3       	rjmp	.+1698   	; 0x6d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c3       	rjmp	.+1694   	; 0x6d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 7f 10 	jmp	0x20fe	; 0x20fe <__vector_13>
      38:	4b c3       	rjmp	.+1686   	; 0x6d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c3       	rjmp	.+1682   	; 0x6d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c3       	rjmp	.+1678   	; 0x6d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__vector_17>
      48:	43 c3       	rjmp	.+1670   	; 0x6d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c3       	rjmp	.+1666   	; 0x6d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c3       	rjmp	.+1662   	; 0x6d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__vector_21>
      58:	3b c3       	rjmp	.+1654   	; 0x6d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c3       	rjmp	.+1650   	; 0x6d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c3       	rjmp	.+1646   	; 0x6d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__vector_25>
      68:	0c 94 50 0b 	jmp	0x16a0	; 0x16a0 <__vector_26>
      6c:	31 c3       	rjmp	.+1634   	; 0x6d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c3       	rjmp	.+1630   	; 0x6d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c3       	rjmp	.+1626   	; 0x6d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c3       	rjmp	.+1622   	; 0x6d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c3       	rjmp	.+1618   	; 0x6d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c3       	rjmp	.+1614   	; 0x6d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c3       	rjmp	.+1610   	; 0x6d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c3       	rjmp	.+1606   	; 0x6d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c3       	rjmp	.+1602   	; 0x6d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__vector_36>
      94:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__vector_37>
      98:	1b c3       	rjmp	.+1590   	; 0x6d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	19 c3       	rjmp	.+1586   	; 0x6d0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	17 c3       	rjmp	.+1582   	; 0x6d0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	15 c3       	rjmp	.+1578   	; 0x6d0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	13 c3       	rjmp	.+1574   	; 0x6d0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	11 c3       	rjmp	.+1570   	; 0x6d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c3       	rjmp	.+1566   	; 0x6d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c3       	rjmp	.+1562   	; 0x6d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c3       	rjmp	.+1558   	; 0x6d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c3       	rjmp	.+1554   	; 0x6d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c3       	rjmp	.+1550   	; 0x6d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c3       	rjmp	.+1546   	; 0x6d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c3       	rjmp	.+1542   	; 0x6d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__vector_51>
      d0:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__vector_52>
      d4:	fd c2       	rjmp	.+1530   	; 0x6d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__vector_54>
      dc:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__vector_55>
      e0:	f7 c2       	rjmp	.+1518   	; 0x6d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	31 09       	sbc	r19, r1
      e6:	32 09       	sbc	r19, r2
      e8:	32 09       	sbc	r19, r2
      ea:	32 09       	sbc	r19, r2
      ec:	32 09       	sbc	r19, r2
      ee:	32 09       	sbc	r19, r2
      f0:	32 09       	sbc	r19, r2
      f2:	32 09       	sbc	r19, r2
      f4:	32 09       	sbc	r19, r2
      f6:	32 09       	sbc	r19, r2
      f8:	32 09       	sbc	r19, r2
      fa:	32 09       	sbc	r19, r2
      fc:	32 09       	sbc	r19, r2
      fe:	32 09       	sbc	r19, r2
     100:	32 09       	sbc	r19, r2
     102:	32 09       	sbc	r19, r2
     104:	32 09       	sbc	r19, r2
     106:	32 09       	sbc	r19, r2
     108:	29 09       	sbc	r18, r9
     10a:	32 09       	sbc	r19, r2
     10c:	32 09       	sbc	r19, r2
     10e:	32 09       	sbc	r19, r2
     110:	32 09       	sbc	r19, r2
     112:	32 09       	sbc	r19, r2
     114:	2b 09       	sbc	r18, r11
     116:	32 09       	sbc	r19, r2
     118:	32 09       	sbc	r19, r2
     11a:	27 09       	sbc	r18, r7
     11c:	32 09       	sbc	r19, r2
     11e:	32 09       	sbc	r19, r2
     120:	32 09       	sbc	r19, r2
     122:	32 09       	sbc	r19, r2
     124:	31 09       	sbc	r19, r1
     126:	32 09       	sbc	r19, r2
     128:	32 09       	sbc	r19, r2
     12a:	32 09       	sbc	r19, r2
     12c:	32 09       	sbc	r19, r2
     12e:	32 09       	sbc	r19, r2
     130:	32 09       	sbc	r19, r2
     132:	32 09       	sbc	r19, r2
     134:	32 09       	sbc	r19, r2
     136:	32 09       	sbc	r19, r2
     138:	32 09       	sbc	r19, r2
     13a:	32 09       	sbc	r19, r2
     13c:	2d 09       	sbc	r18, r13
     13e:	32 09       	sbc	r19, r2
     140:	32 09       	sbc	r19, r2
     142:	32 09       	sbc	r19, r2
     144:	32 09       	sbc	r19, r2
     146:	2f 09       	sbc	r18, r15
     148:	23 09       	sbc	r18, r3
     14a:	32 09       	sbc	r19, r2
     14c:	32 09       	sbc	r19, r2
     14e:	32 09       	sbc	r19, r2
     150:	32 09       	sbc	r19, r2
     152:	32 09       	sbc	r19, r2
     154:	25 09       	sbc	r18, r5

00000156 <__trampolines_end>:
     156:	50 72       	andi	r21, 0x20	; 32
     158:	69 6e       	ori	r22, 0xE9	; 233
     15a:	74 69       	ori	r23, 0x94	; 148
     15c:	6e 67       	ori	r22, 0x7E	; 126
     15e:	20 74       	andi	r18, 0x40	; 64
     160:	6f 20       	and	r6, r15
     162:	4c 43       	sbci	r20, 0x3C	; 60
     164:	44 3a       	cpi	r20, 0xA4	; 164
     166:	20 25       	eor	r18, r0
     168:	73 0a       	sbc	r7, r19
	...

0000016b <__c.2504>:
     16b:	49 6e 76 61 6c 69 64 20 6c 65 6e 67 74 68 20 66     Invalid length f
     17b:	6f 72 20 43 4d 44 5f 4c 43 44 5f 50 52 49 4e 54     or CMD_LCD_PRINT
     18b:	2e 20 4c 65 6e 67 74 68 20 77 2f 6f 20 63 6f 6d     . Length w/o com
     19b:	6d 61 6e 64 20 69 73 20 25 64 20 69 6e 73 74 65     mand is %d inste
     1ab:	61 64 20 6f 66 20 25 64 0a 00                       ad of %d..

000001b5 <__c.2501>:
     1b5:	47 6f 74 6f 20 4c 43 44 3a 20 25 64 2c 20 25 64     Goto LCD: %d, %d
     1c5:	0a 00                                               ..

000001c7 <__c.2499>:
     1c7:	49 6e 76 61 6c 69 64 20 6c 65 6e 67 74 68 20 66     Invalid length f
     1d7:	6f 72 20 43 4d 44 5f 4c 43 44 5f 47 4f 54 4f 2e     or CMD_LCD_GOTO.
     1e7:	20 4c 65 6e 67 74 68 20 77 2f 6f 20 63 6f 6d 6d      Length w/o comm
     1f7:	61 6e 64 20 69 73 20 25 64 20 69 6e 73 74 65 61     and is %d instea
     207:	64 20 6f 66 20 25 64 0a 00                          d of %d..

00000210 <__c.2496>:
     210:	43 6c 65 61 72 69 6e 67 20 4c 43 44 0a 00           Clearing LCD..

0000021e <__c.2493>:
     21e:	54 6f 67 67 6c 69 6e 67 20 4c 45 44 0a 00           Toggling LED..

0000022c <__c.2489>:
     22c:	53 65 74 74 69 6e 67 20 4c 45 44 20 74 6f 20 25     Setting LED to %
     23c:	64 0a 00                                            d..

0000023f <__c.2551>:
     23f:	0a 46 72 61 6d 65 20 46 6f 6f 74 65 72 3a 0a 20     .Frame Footer:. 
     24f:	20 e2 94 94 e2 94 80 20 43 68 65 63 6b 73 75 6d      ...... Checksum
     25f:	3a 20 20 20 20 20 20 20 20 20 20 20 20 20 30 78     :             0x
     26f:	25 30 32 58 0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     %02X.===========
     27f:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     28f:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     29f:	3d 3d 3d 3d 3d 0a 0a 00                             =====...

000002a7 <__c.2549>:
     2a7:	20 20 e2 94 94 e2 94 80 20 4e 6f 20 44 61 74 61       ...... No Data
     2b7:	0a 00                                               ..

000002b9 <__c.2547>:
     2b9:	20 20 e2 94 94 e2 94 80 20 45 6e 64 20 6f 66 20       ...... End of 
     2c9:	44 61 74 61 0a 00                                   Data..

000002cf <__c.2542>:
     2cf:	20 20 e2 94 9c e2 94 80 20 42 79 74 65 20 25 64       ...... Byte %d
     2df:	3a 20 30 78 25 30 32 58 0a 00                       : 0x%02X..

000002e9 <__c.2539>:
     2e9:	0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     .===============
     2f9:	3d 20 25 73 20 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     = %s ===========
     309:	3d 3d 3d 3d 3d 0a 46 72 61 6d 65 20 48 65 61 64     =====.Frame Head
     319:	65 72 3a 0a 20 20 e2 94 9c e2 94 80 20 53 74 61     er:.  ...... Sta
     329:	72 74 20 46 6c 61 67 3a 20 20 20 20 20 20 20 20     rt Flag:        
     339:	20 20 20 30 78 25 30 34 58 0a 20 20 e2 94 9c e2        0x%04X.  ....
     349:	94 80 20 53 6f 75 72 63 65 20 41 64 64 72 65 73     .. Source Addres
     359:	73 3a 20 20 20 20 20 20 20 25 75 0a 20 20 e2 94     s:       %u.  ..
     369:	9c e2 94 80 20 44 65 73 74 69 6e 61 74 69 6f 6e     .... Destination
     379:	20 41 64 64 72 65 73 73 3a 20 20 25 75 0a 20 20      Address:  %u.  
     389:	e2 94 94 e2 94 80 20 4c 65 6e 67 74 68 3a 20 20     ...... Length:  
     399:	20 20 20 20 20 20 20 20 20 20 20 20 20 25 75 0a                  %u.
     3a9:	0a 49 6e 6e 65 72 20 46 72 61 6d 65 20 44 61 74     .Inner Frame Dat
     3b9:	61 3a 0a 00                                         a:..

000003bd <__c.2288>:
     3bd:	43 61 6e 27 74 20 70 6f 70 20 66 72 6f 6d 20 65     Can't pop from e
     3cd:	6d 70 74 79 20 72 65 61 64 79 20 71 75 65 75 65     mpty ready queue
	...

000003de <__c.2283>:
     3de:	43 61 6e 27 74 20 70 75 73 68 20 6f 6e 20 66 75     Can't push on fu
     3ee:	6c 6c 20 72 65 61 64 79 20 71 75 65 75 65 00        ll ready queue.

000003fd <__c.2073>:
     3fd:	20 20 20 20 20 20 20 20 00                                  .

00000406 <__c.2289>:
     406:	5b 45 52 52 4f 52 5d 20 00                          [ERROR] .

0000040f <__c.2283>:
     40f:	20 53 74 61 63 6b 20 63 6f 6c 6c 69 64 65 73 20      Stack collides 
     41f:	77 69 74 68 20 67 6c 6f 62 61 6c 20 76 61 72 73     with global vars
	...

00000430 <__c.2281>:
     430:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     440:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     450:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     460:	2d 2d 0a 00                                         --..

00000464 <__c.2277>:
     464:	5b 49 4e 46 4f 5d 20 20 00                          [INFO]  .

0000046d <__c.2279>:
     46d:	55 73 65 64 20 67 6c 6f 62 61 6c 20 76 61 72 73     Used global vars
     47d:	3a 20 25 64 2f 25 64 20 62 79 74 65 73 00           : %d/%d bytes.

0000048b <__c.2273>:
     48b:	5b 49 4e 46 4f 5d 20 20 00                          [INFO]  .

00000494 <__c.2275>:
     494:	42 6f 6f 74 69 6e 67 20 44 45 4f 53 20 2e 2e 2e     Booting DEOS ...
	...

000004a5 <__c.2271>:
     4a5:	0a 0a 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ..##############
     4b5:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
     4c5:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
     4d5:	23 23 23 23 0a 00                                   ####..

000004db <__c.2269>:
     4db:	42 6f 6f 74 69 6e 67 20 44 45 4f 53 20 2e 2e 2e     Booting DEOS ...
	...

000004ec <__c.2445>:
     4ec:	6f 73 5f 73 74 61 72 74 53 63 68 65 64 75 6c 65     os_startSchedule
     4fc:	72 28 29 20 74 65 72 6d 69 6e 61 74 65 64 20 61     r() terminated a
     50c:	67 61 69 6e 73 74 20 61 6c 6c 20 6f 64 64 73 20     gainst all odds 
     51c:	2d 20 73 63 61 72 79 20 73 74 75 66 66 2e 2e 2e     - scary stuff...
	...

0000052d <__c.2440>:
     52d:	54 68 65 72 65 20 69 73 20 6e 6f 20 69 64 6c 65     There is no idle
     53d:	20 70 72 6f 63 00                                    proc.

00000543 <__c.2418>:
     543:	6f 73 5f 65 78 65 63 28 29 20 2d 3e 20 00           os_exec() -> .

00000551 <__c.2420>:
     551:	4e 6f 20 66 72 65 65 20 73 6c 6f 74 20 61 76 61     No free slot ava
     561:	69 6c 61 62 6c 65 0a 00                             ilable..

00000569 <__c.2384>:
     569:	43 68 65 63 6b 73 75 6d 20 6d 69 73 6d 61 74 63     Checksum mismatc
     579:	68 20 69 6e 20 70 72 6f 63 65 73 73 20 25 64 00     h in process %d.

00000589 <__c.2378>:
     589:	53 74 61 63 6b 20 70 6f 69 6e 74 65 72 20 6f 75     Stack pointer ou
     599:	74 20 6f 66 20 62 6f 75 6e 64 73 20 69 6e 20 70     t of bounds in p
     5a9:	72 6f 63 65 73 73 20 25 64 00                       rocess %d.

000005b3 <__c.2371>:
     5b3:	43 72 69 74 2e 20 53 65 63 74 69 6f 6e 20 20 20     Crit. Section   
     5c3:	75 6e 64 65 72 66 6c 6f 77 00                       underflow.

000005cd <__c.2365>:
     5cd:	43 72 69 74 2e 20 53 65 63 74 69 6f 6e 20 20 20     Crit. Section   
     5dd:	6f 76 65 72 66 6c 6f 77 00                          overflow.

000005e6 <__c.2376>:
     5e6:	20 54 65 73 74 20 66 69 6e 69 73 68 65 64 00         Test finished.

000005f5 <__c.2372>:
     5f5:	50 68 61 73 65 20 35 3a 20 20 72 65 66 65 72 2d     Phase 5:  refer-
     605:	65 6e 63 65 20 66 72 61 6d 65 20 00                 ence frame .

00000611 <__c.2370>:
     611:	4f 4b 00                                            OK.

00000614 <__c.2368>:
     614:	20 20 20 20 2d 2d 3e 20 20 3c 2d 2d 00                  -->  <--.

00000621 <__c.2366>:
     621:	50 68 61 73 65 20 34 3a 00                          Phase 4:.

0000062a <__c.2360>:
     62a:	50 68 61 73 65 20 33 3a 00                          Phase 3:.

00000633 <__c.2354>:
     633:	4c 45 44 20 4f 66 66 00                             LED Off.

0000063b <__c.2348>:
     63b:	4c 45 44 20 4f 6e 00                                LED On.

00000642 <__c.2346>:
     642:	50 68 61 73 65 20 32 3a 00                          Phase 2:.

0000064b <__c.2340>:
     64b:	4f 6e 62 6f 61 72 64 20 4c 45 44 00                 Onboard LED.

00000657 <__c.2338>:
     657:	50 68 61 73 65 20 31 3a 20 54 6f 67 67 6c 65 00     Phase 1: Toggle.
	...

00000668 <__ctors_start>:
     668:	d7 0e       	add	r13, r23
     66a:	a8 12       	cpse	r10, r24
     66c:	b9 12       	cpse	r11, r25

0000066e <__ctors_end>:
     66e:	11 24       	eor	r1, r1
     670:	1f be       	out	0x3f, r1	; 63
     672:	cf ef       	ldi	r28, 0xFF	; 255
     674:	d1 e2       	ldi	r29, 0x21	; 33
     676:	de bf       	out	0x3e, r29	; 62
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	00 e0       	ldi	r16, 0x00	; 0
     67c:	0c bf       	out	0x3c, r16	; 60

0000067e <__do_copy_data>:
     67e:	13 e0       	ldi	r17, 0x03	; 3
     680:	a0 e0       	ldi	r26, 0x00	; 0
     682:	b2 e0       	ldi	r27, 0x02	; 2
     684:	e4 e3       	ldi	r30, 0x34	; 52
     686:	fe e2       	ldi	r31, 0x2E	; 46
     688:	00 e0       	ldi	r16, 0x00	; 0
     68a:	0b bf       	out	0x3b, r16	; 59
     68c:	02 c0       	rjmp	.+4      	; 0x692 <__do_copy_data+0x14>
     68e:	07 90       	elpm	r0, Z+
     690:	0d 92       	st	X+, r0
     692:	a0 32       	cpi	r26, 0x20	; 32
     694:	b1 07       	cpc	r27, r17
     696:	d9 f7       	brne	.-10     	; 0x68e <__do_copy_data+0x10>

00000698 <__do_clear_bss>:
     698:	25 e0       	ldi	r18, 0x05	; 5
     69a:	a0 e2       	ldi	r26, 0x20	; 32
     69c:	b3 e0       	ldi	r27, 0x03	; 3
     69e:	01 c0       	rjmp	.+2      	; 0x6a2 <.do_clear_bss_start>

000006a0 <.do_clear_bss_loop>:
     6a0:	1d 92       	st	X+, r1

000006a2 <.do_clear_bss_start>:
     6a2:	aa 37       	cpi	r26, 0x7A	; 122
     6a4:	b2 07       	cpc	r27, r18
     6a6:	e1 f7       	brne	.-8      	; 0x6a0 <.do_clear_bss_loop>

000006a8 <__do_global_ctors>:
     6a8:	13 e0       	ldi	r17, 0x03	; 3
     6aa:	c7 e3       	ldi	r28, 0x37	; 55
     6ac:	d3 e0       	ldi	r29, 0x03	; 3
     6ae:	00 e0       	ldi	r16, 0x00	; 0
     6b0:	06 c0       	rjmp	.+12     	; 0x6be <__do_global_ctors+0x16>
     6b2:	21 97       	sbiw	r28, 0x01	; 1
     6b4:	01 09       	sbc	r16, r1
     6b6:	80 2f       	mov	r24, r16
     6b8:	fe 01       	movw	r30, r28
     6ba:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__tablejump2__>
     6be:	c4 33       	cpi	r28, 0x34	; 52
     6c0:	d1 07       	cpc	r29, r17
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	08 07       	cpc	r16, r24
     6c6:	a9 f7       	brne	.-22     	; 0x6b2 <__do_global_ctors+0xa>
     6c8:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <main>
     6cc:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <_exit>

000006d0 <__bad_interrupt>:
     6d0:	97 cc       	rjmp	.-1746   	; 0x0 <__vectors>

000006d2 <rfAdapter_init>:
 * \return True if the communication has been initialized
 */
uint8_t rfAdapter_isInitialized()
{
	return rfAdapter_initialized;
}
     6d2:	75 d2       	rcall	.+1258   	; 0xbbe <serialAdapter_init>
     6d4:	84 b1       	in	r24, 0x04	; 4
     6d6:	80 68       	ori	r24, 0x80	; 128
     6d8:	84 b9       	out	0x04, r24	; 4
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__data_end>
     6e0:	08 95       	ret

000006e2 <rfAdapter_worker>:
/*!
 *  Main task of adapter
 */
void rfAdapter_worker()
{
	serialAdapter_worker();
     6e2:	f4 c2       	rjmp	.+1512   	; 0xccc <serialAdapter_worker>
     6e4:	08 95       	ret

000006e6 <rfAdapter_receiveSetLed>:
 *  \param data Payload of received frame
 */
void rfAdapter_receiveSetLed(cmd_setLed_t *data)
{
	// printf("rfAdapter_receiveSetLed()");
	if ((bool)data->enable)
     6e6:	fc 01       	movw	r30, r24
     6e8:	80 81       	ld	r24, Z
     6ea:	88 23       	and	r24, r24
     6ec:	21 f0       	breq	.+8      	; 0x6f6 <rfAdapter_receiveSetLed+0x10>
	{
		PORTB |= (1 << PB7); // on
     6ee:	85 b1       	in	r24, 0x05	; 5
     6f0:	80 68       	ori	r24, 0x80	; 128
     6f2:	85 b9       	out	0x05, r24	; 5
     6f4:	08 95       	ret
	}
	else
	{
		PORTB &= ~(1 << PB7); // off
     6f6:	85 b1       	in	r24, 0x05	; 5
     6f8:	8f 77       	andi	r24, 0x7F	; 127
     6fa:	85 b9       	out	0x05, r24	; 5
     6fc:	08 95       	ret

000006fe <rfAdapter_receiveToggleLed>:
 *  Handler that's called when command CMD_TOGGLE_LED was received
 */
void rfAdapter_receiveToggleLed()
{
	// printf("rfAdapter_receiveToggleLed()");
	PORTB ^= (1 << PB7);
     6fe:	85 b1       	in	r24, 0x05	; 5
     700:	80 58       	subi	r24, 0x80	; 128
     702:	85 b9       	out	0x05, r24	; 5
     704:	08 95       	ret

00000706 <rfAdapter_receiveLcdClear>:
 *  Handler that's called when command CMD_LCD_CLEAR was received
 */
void rfAdapter_receiveLcdClear()
{
	// printf("rfAdapter_receiveLcdClear()");
	lcd_clear();
     706:	33 c5       	rjmp	.+2662   	; 0x116e <lcd_clear>
     708:	08 95       	ret

0000070a <rfAdapter_receiveLcdGoto>:
 *  \param data Payload of received frame
 */
void rfAdapter_receiveLcdGoto(cmd_lcdGoto_t *data)
{
	// printf("rfAdapter_receiveLcdGoto()");
	lcd_goto(data->x, data->y);
     70a:	fc 01       	movw	r30, r24
     70c:	61 81       	ldd	r22, Z+1	; 0x01
     70e:	80 81       	ld	r24, Z
     710:	41 c5       	rjmp	.+2690   	; 0x1194 <lcd_goto>
     712:	08 95       	ret

00000714 <rfAdapter_receiveLcdPrint>:
 *  Handler that's called when command CMD_LCD_PRINT was received
 *
 *  \param data Payload of received frame
 */
void rfAdapter_receiveLcdPrint(cmd_lcdPrint_t *data)
{
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	a1 97       	sbiw	r28, 0x21	; 33
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
	// printf("rfAdapter_receiveLcdPrint()");
	if (data->length > 32)
     72c:	fc 01       	movw	r30, r24
     72e:	40 81       	ld	r20, Z
     730:	41 32       	cpi	r20, 0x21	; 33
     732:	a8 f4       	brcc	.+42     	; 0x75e <rfAdapter_receiveLcdPrint+0x4a>
     734:	8c 01       	movw	r16, r24
		return;

	char buffer[33];
	memcpy(buffer, data->message, data->length);
     736:	bc 01       	movw	r22, r24
     738:	6f 5f       	subi	r22, 0xFF	; 255
     73a:	7f 4f       	sbci	r23, 0xFF	; 255
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	0e 94 0b 14 	call	0x2816	; 0x2816 <memcpy>
	buffer[data->length] = '\0';
     746:	f8 01       	movw	r30, r16
     748:	80 81       	ld	r24, Z
     74a:	e1 e0       	ldi	r30, 0x01	; 1
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	ec 0f       	add	r30, r28
     750:	fd 1f       	adc	r31, r29
     752:	e8 0f       	add	r30, r24
     754:	f1 1d       	adc	r31, r1
     756:	10 82       	st	Z, r1
	lcd_writeString(buffer);
     758:	ce 01       	movw	r24, r28
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	91 d5       	rcall	.+2850   	; 0x1280 <lcd_writeString>
}
     75e:	a1 96       	adiw	r28, 0x21	; 33
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	08 95       	ret

00000774 <serialAdapter_processFrame>:
 *  Is called on command frame receive
 *
 *  \param frame Received frame
 */
void serialAdapter_processFrame(frame_t *frame)
{
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	fc 01       	movw	r30, r24

	if (frame->header.length > COMM_MAX_PAYLOAD_LENGTH + sizeof(uint8_t) || frame->header.length < sizeof(command_t))
     77e:	94 81       	ldd	r25, Z+4	; 0x04
     780:	91 50       	subi	r25, 0x01	; 1
     782:	91 33       	cpi	r25, 0x31	; 49
     784:	08 f0       	brcs	.+2      	; 0x788 <serialAdapter_processFrame+0x14>
     786:	9d c0       	rjmp	.+314    	; 0x8c2 <serialAdapter_processFrame+0x14e>
     788:	ef 01       	movw	r28, r30
	{
		return;
	}

	printFrame(frame, "serialAdapter_processFrame");
     78a:	69 e2       	ldi	r22, 0x29	; 41
     78c:	72 e0       	ldi	r23, 0x02	; 2
     78e:	cf 01       	movw	r24, r30
     790:	27 d3       	rcall	.+1614   	; 0xde0 <printFrame>

	switch (frame->innerFrame.command)
     792:	8d 81       	ldd	r24, Y+5	; 0x05
     794:	80 31       	cpi	r24, 0x10	; 16
     796:	79 f1       	breq	.+94     	; 0x7f6 <serialAdapter_processFrame+0x82>
     798:	28 f4       	brcc	.+10     	; 0x7a4 <serialAdapter_processFrame+0x30>
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	49 f0       	breq	.+18     	; 0x7b0 <serialAdapter_processFrame+0x3c>
     79e:	82 30       	cpi	r24, 0x02	; 2
     7a0:	e1 f0       	breq	.+56     	; 0x7da <serialAdapter_processFrame+0x66>
     7a2:	8f c0       	rjmp	.+286    	; 0x8c2 <serialAdapter_processFrame+0x14e>
     7a4:	81 31       	cpi	r24, 0x11	; 17
     7a6:	a9 f1       	breq	.+106    	; 0x812 <serialAdapter_processFrame+0x9e>
     7a8:	82 31       	cpi	r24, 0x12	; 18
     7aa:	09 f4       	brne	.+2      	; 0x7ae <serialAdapter_processFrame+0x3a>
     7ac:	5f c0       	rjmp	.+190    	; 0x86c <serialAdapter_processFrame+0xf8>
     7ae:	89 c0       	rjmp	.+274    	; 0x8c2 <serialAdapter_processFrame+0x14e>
	{
	case CMD_SET_LED:
	{
		if (frame->header.length - sizeof(command_t) != sizeof(cmd_setLed_t))
     7b0:	8c 81       	ldd	r24, Y+4	; 0x04
     7b2:	82 30       	cpi	r24, 0x02	; 2
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <serialAdapter_processFrame+0x44>
     7b6:	85 c0       	rjmp	.+266    	; 0x8c2 <serialAdapter_processFrame+0x14e>
		{
			return;
		}
		else
		{
			printf_P(PSTR("Setting LED to %d\n"), ((cmd_setLed_t *)&(frame->innerFrame.payload))->enable);
     7b8:	8e 81       	ldd	r24, Y+6	; 0x06
     7ba:	1f 92       	push	r1
     7bc:	8f 93       	push	r24
     7be:	8c e2       	ldi	r24, 0x2C	; 44
     7c0:	92 e0       	ldi	r25, 0x02	; 2
     7c2:	9f 93       	push	r25
     7c4:	8f 93       	push	r24
     7c6:	0e 94 36 14 	call	0x286c	; 0x286c <printf_P>
			rfAdapter_receiveSetLed(((cmd_setLed_t *)&(frame->innerFrame.payload)));
     7ca:	ce 01       	movw	r24, r28
     7cc:	06 96       	adiw	r24, 0x06	; 6
     7ce:	8b df       	rcall	.-234    	; 0x6e6 <rfAdapter_receiveSetLed>
		}
	}
	break;
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	74 c0       	rjmp	.+232    	; 0x8c2 <serialAdapter_processFrame+0x14e>
	case CMD_TOGGLE_LED:
	{
		if (frame->header.length - sizeof(command_t) != 0)
     7da:	8c 81       	ldd	r24, Y+4	; 0x04
     7dc:	81 30       	cpi	r24, 0x01	; 1
     7de:	09 f0       	breq	.+2      	; 0x7e2 <serialAdapter_processFrame+0x6e>
     7e0:	70 c0       	rjmp	.+224    	; 0x8c2 <serialAdapter_processFrame+0x14e>
		{
			return;
		}
		else
		{
			printf_P(PSTR("Toggling LED\n"));
     7e2:	8e e1       	ldi	r24, 0x1E	; 30
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	9f 93       	push	r25
     7e8:	8f 93       	push	r24
     7ea:	0e 94 36 14 	call	0x286c	; 0x286c <printf_P>
			rfAdapter_receiveToggleLed();
     7ee:	87 df       	rcall	.-242    	; 0x6fe <rfAdapter_receiveToggleLed>
		}
	}
	break;
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	66 c0       	rjmp	.+204    	; 0x8c2 <serialAdapter_processFrame+0x14e>

	case CMD_LCD_CLEAR:
	{
		if (frame->header.length - sizeof(command_t) != 0)
     7f6:	8c 81       	ldd	r24, Y+4	; 0x04
     7f8:	81 30       	cpi	r24, 0x01	; 1
     7fa:	09 f0       	breq	.+2      	; 0x7fe <serialAdapter_processFrame+0x8a>
     7fc:	62 c0       	rjmp	.+196    	; 0x8c2 <serialAdapter_processFrame+0x14e>
		{
			return;
		}
		else
		{
			printf_P(PSTR("Clearing LCD\n"));
     7fe:	80 e1       	ldi	r24, 0x10	; 16
     800:	92 e0       	ldi	r25, 0x02	; 2
     802:	9f 93       	push	r25
     804:	8f 93       	push	r24
     806:	0e 94 36 14 	call	0x286c	; 0x286c <printf_P>
			rfAdapter_receiveLcdClear();
     80a:	7d df       	rcall	.-262    	; 0x706 <rfAdapter_receiveLcdClear>
		}
	}
	break;
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	58 c0       	rjmp	.+176    	; 0x8c2 <serialAdapter_processFrame+0x14e>

	case CMD_LCD_GOTO:
	{
		if (frame->header.length - sizeof(command_t) != sizeof(cmd_lcdGoto_t))
     812:	8c 81       	ldd	r24, Y+4	; 0x04
     814:	83 30       	cpi	r24, 0x03	; 3
     816:	a1 f0       	breq	.+40     	; 0x840 <serialAdapter_processFrame+0xcc>
		{
			printf_P(PSTR("Invalid length for CMD_LCD_GOTO. Length w/o command is %d instead of %d\n"), frame->header.length - sizeof(command_t), sizeof(cmd_lcdGoto_t));
     818:	1f 92       	push	r1
     81a:	92 e0       	ldi	r25, 0x02	; 2
     81c:	9f 93       	push	r25
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	01 97       	sbiw	r24, 0x01	; 1
     822:	9f 93       	push	r25
     824:	8f 93       	push	r24
     826:	87 ec       	ldi	r24, 0xC7	; 199
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	9f 93       	push	r25
     82c:	8f 93       	push	r24
     82e:	0e 94 36 14 	call	0x286c	; 0x286c <printf_P>
			return;
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	41 c0       	rjmp	.+130    	; 0x8c2 <serialAdapter_processFrame+0x14e>
		}
		else
		{
			printf_P(PSTR("Goto LCD: %d, %d\n"), ((cmd_lcdGoto_t *)&(frame->innerFrame.payload))->x, ((cmd_lcdGoto_t *)&(frame->innerFrame.payload))->y);
     840:	9f 81       	ldd	r25, Y+7	; 0x07
     842:	8e 81       	ldd	r24, Y+6	; 0x06
     844:	1f 92       	push	r1
     846:	9f 93       	push	r25
     848:	1f 92       	push	r1
     84a:	8f 93       	push	r24
     84c:	85 eb       	ldi	r24, 0xB5	; 181
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	9f 93       	push	r25
     852:	8f 93       	push	r24
     854:	0e 94 36 14 	call	0x286c	; 0x286c <printf_P>
			rfAdapter_receiveLcdGoto((cmd_lcdGoto_t *)&(frame->innerFrame.payload));
     858:	ce 01       	movw	r24, r28
     85a:	06 96       	adiw	r24, 0x06	; 6
     85c:	56 df       	rcall	.-340    	; 0x70a <rfAdapter_receiveLcdGoto>
		}
	}
	break;
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	2b c0       	rjmp	.+86     	; 0x8c2 <serialAdapter_processFrame+0x14e>

	case CMD_LCD_PRINT:
	{
		if (frame->header.length - sizeof(command_t) > sizeof(cmd_lcdPrint_t))
     86c:	8c 81       	ldd	r24, Y+4	; 0x04
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	82 32       	cpi	r24, 0x22	; 34
     874:	91 05       	cpc	r25, r1
     876:	90 f0       	brcs	.+36     	; 0x89c <serialAdapter_processFrame+0x128>
		{
			printf_P(PSTR("Invalid length for CMD_LCD_PRINT. Length w/o command is %d instead of %d\n"), frame->header.length - sizeof(command_t), sizeof(cmd_lcdPrint_t));
     878:	1f 92       	push	r1
     87a:	21 e2       	ldi	r18, 0x21	; 33
     87c:	2f 93       	push	r18
     87e:	9f 93       	push	r25
     880:	8f 93       	push	r24
     882:	8b e6       	ldi	r24, 0x6B	; 107
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	9f 93       	push	r25
     888:	8f 93       	push	r24
     88a:	0e 94 36 14 	call	0x286c	; 0x286c <printf_P>
			return;
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	13 c0       	rjmp	.+38     	; 0x8c2 <serialAdapter_processFrame+0x14e>
		}
		else
		{
			printf_P(PSTR("Printing to LCD: %s\n"), ((cmd_lcdPrint_t *)&(frame->innerFrame.payload))->message);
     89c:	8e 01       	movw	r16, r28
     89e:	0a 5f       	subi	r16, 0xFA	; 250
     8a0:	1f 4f       	sbci	r17, 0xFF	; 255
     8a2:	fe 01       	movw	r30, r28
     8a4:	37 96       	adiw	r30, 0x07	; 7
     8a6:	ff 93       	push	r31
     8a8:	ef 93       	push	r30
     8aa:	86 e5       	ldi	r24, 0x56	; 86
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	9f 93       	push	r25
     8b0:	8f 93       	push	r24
     8b2:	0e 94 36 14 	call	0x286c	; 0x286c <printf_P>

			rfAdapter_receiveLcdPrint((cmd_lcdPrint_t *)&(frame->innerFrame.payload));
     8b6:	c8 01       	movw	r24, r16
     8b8:	2d df       	rcall	.-422    	; 0x714 <rfAdapter_receiveLcdPrint>
		}
	}
	break;
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
	break;

	default:
		return;
	}
}
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	08 95       	ret

000008cc <rfAdapter_sendSetLed>:
 *
 *  \param destAddr Where to send the frame
 *  \param enable Whether the receiver should enable or disable their led
 */
void rfAdapter_sendSetLed(address_t destAddr, bool enable)
{
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	e1 97       	sbiw	r28, 0x31	; 49
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
     8e2:	18 2f       	mov	r17, r24

	inner_frame_t inner_frame;
	inner_frame.command = CMD_SET_LED;
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	89 83       	std	Y+1, r24	; 0x01
	inner_frame.payload[0] = enable;
     8e8:	6a 83       	std	Y+2, r22	; 0x02

	int size = sizeof(command_t) + sizeof(enable);

	printf("rfAdapter_sendSetLed() with size: %d\n",size );
     8ea:	1f 92       	push	r1
     8ec:	82 e0       	ldi	r24, 0x02	; 2
     8ee:	8f 93       	push	r24
     8f0:	84 e4       	ldi	r24, 0x44	; 68
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	9f 93       	push	r25
     8f6:	8f 93       	push	r24
     8f8:	0e 94 23 14 	call	0x2846	; 0x2846 <printf>


	serialAdapter_writeFrame(destAddr, size, &inner_frame);
     8fc:	ae 01       	movw	r20, r28
     8fe:	4f 5f       	subi	r20, 0xFF	; 255
     900:	5f 4f       	sbci	r21, 0xFF	; 255
     902:	62 e0       	ldi	r22, 0x02	; 2
     904:	81 2f       	mov	r24, r17
     906:	a2 d1       	rcall	.+836    	; 0xc4c <serialAdapter_writeFrame>
}
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	e1 96       	adiw	r28, 0x31	; 49
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	08 95       	ret

00000924 <rfAdapter_sendToggleLed>:
 *  Sends a frame with command CMD_TOGGLE_LED
 *
 *  \param destAddr Where to send the frame
 */
void rfAdapter_sendToggleLed(address_t destAddr)
{
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	e1 97       	sbiw	r28, 0x31	; 49
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	de bf       	out	0x3e, r29	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	18 2f       	mov	r17, r24
	inner_frame_t inner_frame;
	inner_frame.command = CMD_TOGGLE_LED;
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	89 83       	std	Y+1, r24	; 0x01

	int size = sizeof(command_t);

	printf("rfAdapter_sendToggleLed() with size: %d\n", size);
     940:	1f 92       	push	r1
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	8f 93       	push	r24
     946:	8a e6       	ldi	r24, 0x6A	; 106
     948:	92 e0       	ldi	r25, 0x02	; 2
     94a:	9f 93       	push	r25
     94c:	8f 93       	push	r24
     94e:	0e 94 23 14 	call	0x2846	; 0x2846 <printf>

	serialAdapter_writeFrame(destAddr, size, &inner_frame);
     952:	ae 01       	movw	r20, r28
     954:	4f 5f       	subi	r20, 0xFF	; 255
     956:	5f 4f       	sbci	r21, 0xFF	; 255
     958:	61 e0       	ldi	r22, 0x01	; 1
     95a:	81 2f       	mov	r24, r17
     95c:	77 d1       	rcall	.+750    	; 0xc4c <serialAdapter_writeFrame>
}
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	e1 96       	adiw	r28, 0x31	; 49
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	cd bf       	out	0x3d, r28	; 61
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	1f 91       	pop	r17
     978:	08 95       	ret

0000097a <rfAdapter_sendLcdClear>:
 *  Sends a frame with command CMD_LCD_CLEAR
 *
 *  \param destAddr Where to send the frame
 */
void rfAdapter_sendLcdClear(address_t destAddr)
{
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
     984:	e1 97       	sbiw	r28, 0x31	; 49
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	18 2f       	mov	r17, r24
	inner_frame_t inner_frame;
	inner_frame.command = CMD_LCD_CLEAR;
     992:	80 e1       	ldi	r24, 0x10	; 16
     994:	89 83       	std	Y+1, r24	; 0x01

	int size = sizeof(command_t);

	printf("rfAdapter_sendLcdClear() with size: %d\n", size);
     996:	1f 92       	push	r1
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	8f 93       	push	r24
     99c:	83 e9       	ldi	r24, 0x93	; 147
     99e:	92 e0       	ldi	r25, 0x02	; 2
     9a0:	9f 93       	push	r25
     9a2:	8f 93       	push	r24
     9a4:	0e 94 23 14 	call	0x2846	; 0x2846 <printf>

	serialAdapter_writeFrame(destAddr,size, &inner_frame);
     9a8:	ae 01       	movw	r20, r28
     9aa:	4f 5f       	subi	r20, 0xFF	; 255
     9ac:	5f 4f       	sbci	r21, 0xFF	; 255
     9ae:	61 e0       	ldi	r22, 0x01	; 1
     9b0:	81 2f       	mov	r24, r17
     9b2:	4c d1       	rcall	.+664    	; 0xc4c <serialAdapter_writeFrame>
}
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	e1 96       	adiw	r28, 0x31	; 49
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	08 95       	ret

000009d0 <rfAdapter_sendLcdGoto>:
 *  \param destAddr Where to send the frame
 *  \param x Which column should be selected by the receiver
 *  \param y Which row should be selected by the receiver
 */
void rfAdapter_sendLcdGoto(address_t destAddr, uint8_t x, uint8_t y)
{
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	e1 97       	sbiw	r28, 0x31	; 49
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	f8 94       	cli
     9e0:	de bf       	out	0x3e, r29	; 62
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	cd bf       	out	0x3d, r28	; 61
     9e6:	18 2f       	mov	r17, r24
	inner_frame_t inner_frame;
	inner_frame.command = CMD_LCD_GOTO;
     9e8:	81 e1       	ldi	r24, 0x11	; 17
     9ea:	89 83       	std	Y+1, r24	; 0x01

	cmd_lcdGoto_t cmd;
	cmd.x = x;
	cmd.y = y;
	memcpy(&inner_frame.payload, &cmd, sizeof(cmd));
     9ec:	6a 83       	std	Y+2, r22	; 0x02
     9ee:	4b 83       	std	Y+3, r20	; 0x03

	int size = sizeof(command_t) + sizeof(cmd_lcdGoto_t);

	printf("rfAdapter_sendLcdGoto() with size: %d\n", size);
     9f0:	1f 92       	push	r1
     9f2:	83 e0       	ldi	r24, 0x03	; 3
     9f4:	8f 93       	push	r24
     9f6:	8b eb       	ldi	r24, 0xBB	; 187
     9f8:	92 e0       	ldi	r25, 0x02	; 2
     9fa:	9f 93       	push	r25
     9fc:	8f 93       	push	r24
     9fe:	0e 94 23 14 	call	0x2846	; 0x2846 <printf>

	serialAdapter_writeFrame(destAddr, size, &inner_frame);
     a02:	ae 01       	movw	r20, r28
     a04:	4f 5f       	subi	r20, 0xFF	; 255
     a06:	5f 4f       	sbci	r21, 0xFF	; 255
     a08:	63 e0       	ldi	r22, 0x03	; 3
     a0a:	81 2f       	mov	r24, r17
     a0c:	1f d1       	rcall	.+574    	; 0xc4c <serialAdapter_writeFrame>
}
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	e1 96       	adiw	r28, 0x31	; 49
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	cd bf       	out	0x3d, r28	; 61
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	08 95       	ret

00000a2a <rfAdapter_sendLcdPrint>:
 *
 *  \param destAddr Where to send the frame
 *  \param message Which message should be printed on receiver side
 */
void rfAdapter_sendLcdPrint(address_t destAddr, const char *message)
{
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	c2 55       	subi	r28, 0x52	; 82
     a3a:	d1 09       	sbc	r29, r1
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	f8 2e       	mov	r15, r24
	inner_frame_t inner_frame;
	inner_frame.command = CMD_LCD_PRINT;
     a48:	82 e1       	ldi	r24, 0x12	; 18
     a4a:	89 83       	std	Y+1, r24	; 0x01

	cmd_lcdPrint_t cmd;
	cmd.length = strlen(message);
     a4c:	fb 01       	movw	r30, r22
     a4e:	01 90       	ld	r0, Z+
     a50:	00 20       	and	r0, r0
     a52:	e9 f7       	brne	.-6      	; 0xa4e <rfAdapter_sendLcdPrint+0x24>
     a54:	31 97       	sbiw	r30, 0x01	; 1
     a56:	e6 1b       	sub	r30, r22
     a58:	f7 0b       	sbc	r31, r23
     a5a:	ea ab       	std	Y+50, r30	; 0x32
	if (cmd.length > 32)
     a5c:	e1 32       	cpi	r30, 0x21	; 33
     a5e:	10 f0       	brcs	.+4      	; 0xa64 <rfAdapter_sendLcdPrint+0x3a>
		cmd.length = 32;
     a60:	80 e2       	ldi	r24, 0x20	; 32
     a62:	8a ab       	std	Y+50, r24	; 0x32

	strncpy(cmd.message, message, cmd.length);
     a64:	0a a9       	ldd	r16, Y+50	; 0x32
     a66:	10 e0       	ldi	r17, 0x00	; 0
     a68:	a8 01       	movw	r20, r16
     a6a:	ce 01       	movw	r24, r28
     a6c:	c3 96       	adiw	r24, 0x33	; 51
     a6e:	0e 94 14 14 	call	0x2828	; 0x2828 <strncpy>
	cmd.message[cmd.length] = '\0';
     a72:	e3 e3       	ldi	r30, 0x33	; 51
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	ec 0f       	add	r30, r28
     a78:	fd 1f       	adc	r31, r29
     a7a:	e0 0f       	add	r30, r16
     a7c:	f1 1f       	adc	r31, r17
     a7e:	10 82       	st	Z, r1

	memcpy(inner_frame.payload, &cmd, sizeof(cmd));
     a80:	81 e2       	ldi	r24, 0x21	; 33
     a82:	fe 01       	movw	r30, r28
     a84:	f2 96       	adiw	r30, 0x32	; 50
     a86:	de 01       	movw	r26, r28
     a88:	12 96       	adiw	r26, 0x02	; 2
     a8a:	01 90       	ld	r0, Z+
     a8c:	0d 92       	st	X+, r0
     a8e:	8a 95       	dec	r24
     a90:	e1 f7       	brne	.-8      	; 0xa8a <rfAdapter_sendLcdPrint+0x60>

	int size = sizeof(command_t) + sizeof(cmd_lcdPrint_t);

	printf("rfAdapter_sendLcdPrint() with size: %d\n", size);
     a92:	1f 92       	push	r1
     a94:	82 e2       	ldi	r24, 0x22	; 34
     a96:	8f 93       	push	r24
     a98:	82 ee       	ldi	r24, 0xE2	; 226
     a9a:	92 e0       	ldi	r25, 0x02	; 2
     a9c:	9f 93       	push	r25
     a9e:	8f 93       	push	r24
     aa0:	0e 94 23 14 	call	0x2846	; 0x2846 <printf>

	serialAdapter_writeFrame(destAddr, size, &inner_frame);
     aa4:	ae 01       	movw	r20, r28
     aa6:	4f 5f       	subi	r20, 0xFF	; 255
     aa8:	5f 4f       	sbci	r21, 0xFF	; 255
     aaa:	62 e2       	ldi	r22, 0x22	; 34
     aac:	8f 2d       	mov	r24, r15
     aae:	ce d0       	rcall	.+412    	; 0xc4c <serialAdapter_writeFrame>
}
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	ce 5a       	subi	r28, 0xAE	; 174
     aba:	df 4f       	sbci	r29, 0xFF	; 255
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	ff 90       	pop	r15
     ad0:	08 95       	ret

00000ad2 <rfAdapter_sendLcdPrintProcMem>:
 *
 *  \param destAddr Where to send the frame
 *  \param message Which message should be printed on receiver side as address to program memory. Use PSTR for creating strings on program memory
 */
void rfAdapter_sendLcdPrintProcMem(address_t destAddr, const char *message)
{
     ad2:	ff 92       	push	r15
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	c2 55       	subi	r28, 0x52	; 82
     ae2:	d1 09       	sbc	r29, r1
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	f8 2e       	mov	r15, r24
     af0:	8b 01       	movw	r16, r22
	inner_frame_t inner_frame;
	inner_frame.command = CMD_LCD_PRINT;
     af2:	82 e1       	ldi	r24, 0x12	; 18
     af4:	89 83       	std	Y+1, r24	; 0x01
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
     af6:	cb 01       	movw	r24, r22
     af8:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <__strlen_P>

	cmd_lcdPrint_t cmd;
	cmd.length = strlen_P((PGM_P)message);
     afc:	8a ab       	std	Y+50, r24	; 0x32
	if (cmd.length > 32)
     afe:	81 32       	cpi	r24, 0x21	; 33
     b00:	10 f0       	brcs	.+4      	; 0xb06 <rfAdapter_sendLcdPrintProcMem+0x34>
		cmd.length = 32;
     b02:	80 e2       	ldi	r24, 0x20	; 32
     b04:	8a ab       	std	Y+50, r24	; 0x32

	strncpy_P(cmd.message, message, cmd.length);
     b06:	4a a9       	ldd	r20, Y+50	; 0x32
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	b8 01       	movw	r22, r16
     b0c:	ce 01       	movw	r24, r28
     b0e:	c3 96       	adiw	r24, 0x33	; 51
     b10:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <strncpy_P>
	cmd.message[cmd.length] = '\0';
     b14:	8a a9       	ldd	r24, Y+50	; 0x32
     b16:	e3 e3       	ldi	r30, 0x33	; 51
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	ec 0f       	add	r30, r28
     b1c:	fd 1f       	adc	r31, r29
     b1e:	e8 0f       	add	r30, r24
     b20:	f1 1d       	adc	r31, r1
     b22:	10 82       	st	Z, r1

	memcpy(inner_frame.payload, &cmd, sizeof(cmd));
     b24:	81 e2       	ldi	r24, 0x21	; 33
     b26:	fe 01       	movw	r30, r28
     b28:	f2 96       	adiw	r30, 0x32	; 50
     b2a:	de 01       	movw	r26, r28
     b2c:	12 96       	adiw	r26, 0x02	; 2
     b2e:	01 90       	ld	r0, Z+
     b30:	0d 92       	st	X+, r0
     b32:	8a 95       	dec	r24
     b34:	e1 f7       	brne	.-8      	; 0xb2e <rfAdapter_sendLcdPrintProcMem+0x5c>

	int size = sizeof(command_t) + sizeof(cmd_lcdPrint_t);

	printf("rfAdapter_sendLcdPrint() with size: %d\n", size);
     b36:	1f 92       	push	r1
     b38:	82 e2       	ldi	r24, 0x22	; 34
     b3a:	8f 93       	push	r24
     b3c:	82 ee       	ldi	r24, 0xE2	; 226
     b3e:	92 e0       	ldi	r25, 0x02	; 2
     b40:	9f 93       	push	r25
     b42:	8f 93       	push	r24
     b44:	0e 94 23 14 	call	0x2846	; 0x2846 <printf>

	serialAdapter_writeFrame(destAddr, size, &inner_frame);
     b48:	ae 01       	movw	r20, r28
     b4a:	4f 5f       	subi	r20, 0xFF	; 255
     b4c:	5f 4f       	sbci	r21, 0xFF	; 255
     b4e:	62 e2       	ldi	r22, 0x22	; 34
     b50:	8f 2d       	mov	r24, r15
     b52:	7c d0       	rcall	.+248    	; 0xc4c <serialAdapter_writeFrame>
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	ce 5a       	subi	r28, 0xAE	; 174
     b5e:	df 4f       	sbci	r29, 0xFF	; 255
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	cd bf       	out	0x3d, r28	; 61
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	ff 90       	pop	r15
     b74:	08 95       	ret

00000b76 <serialAdapter_hasTimeout>:
{
	while (xbee_getNumberOfBytesReceived() == 0)
	{
		os_yield();
	}
}
     b76:	8f 92       	push	r8
     b78:	9f 92       	push	r9
     b7a:	af 92       	push	r10
     b7c:	bf 92       	push	r11
     b7e:	cf 92       	push	r12
     b80:	df 92       	push	r13
     b82:	ef 92       	push	r14
     b84:	ff 92       	push	r15
     b86:	4b 01       	movw	r8, r22
     b88:	5c 01       	movw	r10, r24
     b8a:	69 01       	movw	r12, r18
     b8c:	7a 01       	movw	r14, r20
     b8e:	73 d7       	rcall	.+3814   	; 0x1a76 <getSystemTime_ms>
     b90:	dc 01       	movw	r26, r24
     b92:	cb 01       	movw	r24, r22
     b94:	88 19       	sub	r24, r8
     b96:	99 09       	sbc	r25, r9
     b98:	aa 09       	sbc	r26, r10
     b9a:	bb 09       	sbc	r27, r11
     b9c:	21 e0       	ldi	r18, 0x01	; 1
     b9e:	8c 15       	cp	r24, r12
     ba0:	9d 05       	cpc	r25, r13
     ba2:	ae 05       	cpc	r26, r14
     ba4:	bf 05       	cpc	r27, r15
     ba6:	08 f4       	brcc	.+2      	; 0xbaa <serialAdapter_hasTimeout+0x34>
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	82 2f       	mov	r24, r18
     bac:	ff 90       	pop	r15
     bae:	ef 90       	pop	r14
     bb0:	df 90       	pop	r13
     bb2:	cf 90       	pop	r12
     bb4:	bf 90       	pop	r11
     bb6:	af 90       	pop	r10
     bb8:	9f 90       	pop	r9
     bba:	8f 90       	pop	r8
     bbc:	08 95       	ret

00000bbe <serialAdapter_init>:
/*!
 *  Initializes the serialAdapter and their dependencies
 */
void serialAdapter_init(void)
{
	xbee_init();
     bbe:	73 c1       	rjmp	.+742    	; 0xea6 <xbee_init>
     bc0:	08 95       	ret

00000bc2 <serialAdapter_waitForData>:
 *  \param byteCount Count of bytes that need to arrive so that the function will unblock
 *  \param frameTimestamp Start time of the first byte arrived from which the timeout will be calculated on
 *  \return False when it times out.
 */
bool serialAdapter_waitForData(uint16_t byteCount, time_t frameTimestamp)
{
     bc2:	cf 92       	push	r12
     bc4:	df 92       	push	r13
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	ec 01       	movw	r28, r24
     bd0:	6a 01       	movw	r12, r20
     bd2:	7b 01       	movw	r14, r22
	int i = xbee_getNumberOfBytesReceived();
     bd4:	b3 d1       	rcall	.+870    	; 0xf3c <xbee_getNumberOfBytesReceived>

	while (i < byteCount)
     bd6:	0c c0       	rjmp	.+24     	; 0xbf0 <serialAdapter_waitForData+0x2e>
	{
		if (serialAdapter_hasTimeout(frameTimestamp, SERIAL_ADAPTER_READ_TIMEOUT_MS))
     bd8:	24 ef       	ldi	r18, 0xF4	; 244
     bda:	31 e0       	ldi	r19, 0x01	; 1
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	c7 01       	movw	r24, r14
     be2:	b6 01       	movw	r22, r12
     be4:	c8 df       	rcall	.-112    	; 0xb76 <serialAdapter_hasTimeout>
     be6:	81 11       	cpse	r24, r1
     be8:	08 c0       	rjmp	.+16     	; 0xbfa <serialAdapter_waitForData+0x38>
			return false;
		else
			os_yield();
     bea:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <os_yield>
		i = xbee_getNumberOfBytesReceived();
     bee:	a6 d1       	rcall	.+844    	; 0xf3c <xbee_getNumberOfBytesReceived>
 */
bool serialAdapter_waitForData(uint16_t byteCount, time_t frameTimestamp)
{
	int i = xbee_getNumberOfBytesReceived();

	while (i < byteCount)
     bf0:	8c 17       	cp	r24, r28
     bf2:	9d 07       	cpc	r25, r29
     bf4:	88 f3       	brcs	.-30     	; 0xbd8 <serialAdapter_waitForData+0x16>
			return false;
		else
			os_yield();
		i = xbee_getNumberOfBytesReceived();
	}
	return true;
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	01 c0       	rjmp	.+2      	; 0xbfc <serialAdapter_waitForData+0x3a>
	int i = xbee_getNumberOfBytesReceived();

	while (i < byteCount)
	{
		if (serialAdapter_hasTimeout(frameTimestamp, SERIAL_ADAPTER_READ_TIMEOUT_MS))
			return false;
     bfa:	80 e0       	ldi	r24, 0x00	; 0
		else
			os_yield();
		i = xbee_getNumberOfBytesReceived();
	}
	return true;
}
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	df 90       	pop	r13
     c06:	cf 90       	pop	r12
     c08:	08 95       	ret

00000c0a <serialAdapter_calculateChecksum>:
 *  \param checksum pointer to a checksum that will be updated
 *  \param data buffer on which the checksum will be calculated
 *  \param length size of the given buffer
 */
void serialAdapter_calculateChecksum(checksum_t *checksum, void *data, uint8_t length)
{
     c0a:	fc 01       	movw	r30, r24
	for (uint8_t i = 0; i < length; i++)
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	08 c0       	rjmp	.+16     	; 0xc20 <serialAdapter_calculateChecksum+0x16>
	{
		*checksum ^= ((uint8_t *)data)[i];
     c10:	db 01       	movw	r26, r22
     c12:	a9 0f       	add	r26, r25
     c14:	b1 1d       	adc	r27, r1
     c16:	2c 91       	ld	r18, X
     c18:	80 81       	ld	r24, Z
     c1a:	28 27       	eor	r18, r24
     c1c:	20 83       	st	Z, r18
 *  \param data buffer on which the checksum will be calculated
 *  \param length size of the given buffer
 */
void serialAdapter_calculateChecksum(checksum_t *checksum, void *data, uint8_t length)
{
	for (uint8_t i = 0; i < length; i++)
     c1e:	9f 5f       	subi	r25, 0xFF	; 255
     c20:	94 17       	cp	r25, r20
     c22:	b0 f3       	brcs	.-20     	; 0xc10 <serialAdapter_calculateChecksum+0x6>
	{
		*checksum ^= ((uint8_t *)data)[i];
	}
}
     c24:	08 95       	ret

00000c26 <serialAdapter_calculateFrameChecksum>:
 *
 *  \param checksum pointer to a checksum that will be updated
 *  \param frame data on which the checksum will be calculated
 */
void serialAdapter_calculateFrameChecksum(checksum_t *checksum, frame_t *frame)
{
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	8c 01       	movw	r16, r24
     c30:	eb 01       	movw	r28, r22
	serialAdapter_calculateChecksum(checksum, &frame->header, sizeof(frame->header));
     c32:	45 e0       	ldi	r20, 0x05	; 5
     c34:	ea df       	rcall	.-44     	; 0xc0a <serialAdapter_calculateChecksum>
	serialAdapter_calculateChecksum(checksum, &frame->innerFrame, frame->header.length);
     c36:	be 01       	movw	r22, r28
     c38:	6b 5f       	subi	r22, 0xFB	; 251
     c3a:	7f 4f       	sbci	r23, 0xFF	; 255
     c3c:	4c 81       	ldd	r20, Y+4	; 0x04
     c3e:	c8 01       	movw	r24, r16
     c40:	e4 df       	rcall	.-56     	; 0xc0a <serialAdapter_calculateChecksum>
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	08 95       	ret

00000c4c <serialAdapter_writeFrame>:
 *  \param destAddr where to send the frame to
 *  \param length how many bytes the innerFrame has
 *  \param innerFrame buffer as payload of the frame
 */
void serialAdapter_writeFrame(address_t destAddr, inner_frame_length_t length, inner_frame_t *innerFrame)
{
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	e7 97       	sbiw	r28, 0x37	; 55
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	f6 2e       	mov	r15, r22
     c68:	8a 01       	movw	r16, r20
	// Prepare frame
	frame_t newFrame;

	newFrame.header.destAddr = destAddr;
     c6a:	8c 83       	std	Y+4, r24	; 0x04
	newFrame.header.length = length;
     c6c:	6d 83       	std	Y+5, r22	; 0x05
	newFrame.header.srcAddr = serialAdapter_address;
     c6e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     c72:	8b 83       	std	Y+3, r24	; 0x03
	newFrame.header.startFlag = serialAdapter_startFlag;
     c74:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <serialAdapter_startFlag>
     c78:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <serialAdapter_startFlag+0x1>
     c7c:	9a 83       	std	Y+2, r25	; 0x02
     c7e:	89 83       	std	Y+1, r24	; 0x01


	newFrame.footer.checksum = INITIAL_CHECKSUM_VALUE;
     c80:	1f aa       	std	Y+55, r1	; 0x37

	newFrame.header = newFrame.header;
	newFrame.innerFrame = *innerFrame;
     c82:	81 e3       	ldi	r24, 0x31	; 49
     c84:	fa 01       	movw	r30, r20
     c86:	de 01       	movw	r26, r28
     c88:	16 96       	adiw	r26, 0x06	; 6
     c8a:	01 90       	ld	r0, Z+
     c8c:	0d 92       	st	X+, r0
     c8e:	8a 95       	dec	r24
     c90:	e1 f7       	brne	.-8      	; 0xc8a <serialAdapter_writeFrame+0x3e>
	newFrame.footer = newFrame.footer;

	serialAdapter_calculateFrameChecksum(&newFrame.footer.checksum, &newFrame);
     c92:	be 01       	movw	r22, r28
     c94:	6f 5f       	subi	r22, 0xFF	; 255
     c96:	7f 4f       	sbci	r23, 0xFF	; 255
     c98:	ce 01       	movw	r24, r28
     c9a:	c7 96       	adiw	r24, 0x37	; 55
     c9c:	c4 df       	rcall	.-120    	; 0xc26 <serialAdapter_calculateFrameChecksum>

	xbee_writeData(&newFrame.header, sizeof(newFrame.header));
     c9e:	65 e0       	ldi	r22, 0x05	; 5
     ca0:	ce 01       	movw	r24, r28
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	06 d1       	rcall	.+524    	; 0xeb2 <xbee_writeData>
	xbee_writeData(innerFrame, length);
     ca6:	6f 2d       	mov	r22, r15
     ca8:	c8 01       	movw	r24, r16
     caa:	03 d1       	rcall	.+518    	; 0xeb2 <xbee_writeData>
	xbee_writeData(&newFrame.footer, sizeof(newFrame.footer));
     cac:	61 e0       	ldi	r22, 0x01	; 1
     cae:	ce 01       	movw	r24, r28
     cb0:	c7 96       	adiw	r24, 0x37	; 55
     cb2:	ff d0       	rcall	.+510    	; 0xeb2 <xbee_writeData>
}
     cb4:	e7 96       	adiw	r28, 0x37	; 55
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	ff 90       	pop	r15
     cca:	08 95       	ret

00000ccc <serialAdapter_worker>:
/*!
 *  Reads incoming data and processes it. Needs to be called periodically.
 *  Don't read from UART in any other process while this is running.
 */
void serialAdapter_worker()
{
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	ea 97       	sbiw	r28, 0x3a	; 58
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
	if (!serialAdapter_waitForData(sizeof(start_flag_t), getSystemTime_ms()))
     ce0:	ca d6       	rcall	.+3476   	; 0x1a76 <getSystemTime_ms>
     ce2:	ab 01       	movw	r20, r22
     ce4:	bc 01       	movw	r22, r24
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	6b df       	rcall	.-298    	; 0xbc2 <serialAdapter_waitForData>
     cec:	88 23       	and	r24, r24
     cee:	09 f4       	brne	.+2      	; 0xcf2 <serialAdapter_worker+0x26>
     cf0:	6e c0       	rjmp	.+220    	; 0xdce <serialAdapter_worker+0x102>
	}

	// Parse header one by one, abort if first byte is not part of the start flag
	uint8_t flag_buffer[sizeof(start_flag_t)];

	if (xbee_readBuffer(&flag_buffer[0], 1) != XBEE_SUCCESS)
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	ce 01       	movw	r24, r28
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	23 d1       	rcall	.+582    	; 0xf40 <xbee_readBuffer>
     cfa:	81 11       	cpse	r24, r1
     cfc:	68 c0       	rjmp	.+208    	; 0xdce <serialAdapter_worker+0x102>
	{
		return;
	}
	if (xbee_readBuffer(&flag_buffer[1], 1) != XBEE_SUCCESS)
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	ce 01       	movw	r24, r28
     d02:	02 96       	adiw	r24, 0x02	; 2
     d04:	1d d1       	rcall	.+570    	; 0xf40 <xbee_readBuffer>
     d06:	81 11       	cpse	r24, r1
     d08:	62 c0       	rjmp	.+196    	; 0xdce <serialAdapter_worker+0x102>
	{
		return;
	}

	if (flag_buffer[0] != (serialAdapter_startFlag & 0xFF))
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <serialAdapter_startFlag>
     d12:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <serialAdapter_startFlag+0x1>
     d16:	a9 01       	movw	r20, r18
     d18:	55 27       	eor	r21, r21
     d1a:	84 17       	cp	r24, r20
     d1c:	95 07       	cpc	r25, r21
     d1e:	09 f0       	breq	.+2      	; 0xd22 <serialAdapter_worker+0x56>
     d20:	56 c0       	rjmp	.+172    	; 0xdce <serialAdapter_worker+0x102>
		return;
	if (flag_buffer[1] != ((serialAdapter_startFlag >> 8) & 0xFF))
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	23 2f       	mov	r18, r19
     d28:	33 27       	eor	r19, r19
     d2a:	82 17       	cp	r24, r18
     d2c:	93 07       	cpc	r25, r19
     d2e:	09 f0       	breq	.+2      	; 0xd32 <serialAdapter_worker+0x66>
		return;

	// Wait for arrival of complete header

	if (!serialAdapter_waitForData(sizeof(frame_header_t) - (sizeof(start_flag_t)), getSystemTime_ms()))
     d30:	4e c0       	rjmp	.+156    	; 0xdce <serialAdapter_worker+0x102>
     d32:	a1 d6       	rcall	.+3394   	; 0x1a76 <getSystemTime_ms>
     d34:	ab 01       	movw	r20, r22
     d36:	bc 01       	movw	r22, r24
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	42 df       	rcall	.-380    	; 0xbc2 <serialAdapter_waitForData>
     d3e:	88 23       	and	r24, r24
     d40:	09 f4       	brne	.+2      	; 0xd44 <serialAdapter_worker+0x78>
     d42:	45 c0       	rjmp	.+138    	; 0xdce <serialAdapter_worker+0x102>
	}


	frame_t received_frame;

	received_frame.header.startFlag = serialAdapter_startFlag;
     d44:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <serialAdapter_startFlag>
     d48:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <serialAdapter_startFlag+0x1>
     d4c:	9c 83       	std	Y+4, r25	; 0x04

	int err;
	err = xbee_readBuffer((uint8_t *)&received_frame.header.srcAddr, sizeof(received_frame.header.srcAddr));
     d4e:	8b 83       	std	Y+3, r24	; 0x03
     d50:	61 e0       	ldi	r22, 0x01	; 1
     d52:	ce 01       	movw	r24, r28
     d54:	05 96       	adiw	r24, 0x05	; 5
	if (err != XBEE_SUCCESS)
     d56:	f4 d0       	rcall	.+488    	; 0xf40 <xbee_readBuffer>
     d58:	81 11       	cpse	r24, r1
	{
		return;
	}

	err = xbee_readBuffer((uint8_t *)&received_frame.header.destAddr, sizeof(received_frame.header.destAddr));
     d5a:	39 c0       	rjmp	.+114    	; 0xdce <serialAdapter_worker+0x102>
     d5c:	61 e0       	ldi	r22, 0x01	; 1
     d5e:	ce 01       	movw	r24, r28
     d60:	06 96       	adiw	r24, 0x06	; 6
	if (err != XBEE_SUCCESS)
     d62:	ee d0       	rcall	.+476    	; 0xf40 <xbee_readBuffer>
     d64:	81 11       	cpse	r24, r1
	{
		return;
	}

	err = xbee_readBuffer((uint8_t *)&received_frame.header.length, sizeof(received_frame.header.length));
     d66:	33 c0       	rjmp	.+102    	; 0xdce <serialAdapter_worker+0x102>
     d68:	61 e0       	ldi	r22, 0x01	; 1
     d6a:	ce 01       	movw	r24, r28
     d6c:	07 96       	adiw	r24, 0x07	; 7
	if (err != XBEE_SUCCESS)
     d6e:	e8 d0       	rcall	.+464    	; 0xf40 <xbee_readBuffer>
     d70:	81 11       	cpse	r24, r1





	if (received_frame.header.length > COMM_MAX_INNER_FRAME_LENGTH)
     d72:	2d c0       	rjmp	.+90     	; 0xdce <serialAdapter_worker+0x102>
     d74:	8f 81       	ldd	r24, Y+7	; 0x07
		return;

	// Wait for complete inner frame and footer
	if (!serialAdapter_waitForData(received_frame.header.length + sizeof(frame_footer_t), getSystemTime_ms()))
     d76:	82 33       	cpi	r24, 0x32	; 50
     d78:	50 f5       	brcc	.+84     	; 0xdce <serialAdapter_worker+0x102>
     d7a:	7d d6       	rcall	.+3322   	; 0x1a76 <getSystemTime_ms>
     d7c:	ab 01       	movw	r20, r22
     d7e:	bc 01       	movw	r22, r24
     d80:	8f 81       	ldd	r24, Y+7	; 0x07
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	1d df       	rcall	.-454    	; 0xbc2 <serialAdapter_waitForData>
	{
		return;
	}

	// Read inner frame
	err = xbee_readBuffer((uint8_t *)&received_frame.innerFrame, received_frame.header.length);
     d88:	88 23       	and	r24, r24
     d8a:	09 f1       	breq	.+66     	; 0xdce <serialAdapter_worker+0x102>
     d8c:	6f 81       	ldd	r22, Y+7	; 0x07
     d8e:	ce 01       	movw	r24, r28
     d90:	08 96       	adiw	r24, 0x08	; 8
	if (err != XBEE_SUCCESS)
     d92:	d6 d0       	rcall	.+428    	; 0xf40 <xbee_readBuffer>
     d94:	81 11       	cpse	r24, r1
	{
		return;
	}

	// Read footer
	err = xbee_readBuffer((uint8_t *)&received_frame.footer, sizeof(frame_footer_t));
     d96:	1b c0       	rjmp	.+54     	; 0xdce <serialAdapter_worker+0x102>
     d98:	61 e0       	ldi	r22, 0x01	; 1
     d9a:	ce 01       	movw	r24, r28
     d9c:	c9 96       	adiw	r24, 0x39	; 57
	if (err != XBEE_SUCCESS)
     d9e:	d0 d0       	rcall	.+416    	; 0xf40 <xbee_readBuffer>
     da0:	81 11       	cpse	r24, r1
		return;
	}


	// Read checksum
	checksum_t frame_checksum = INITIAL_CHECKSUM_VALUE;
     da2:	15 c0       	rjmp	.+42     	; 0xdce <serialAdapter_worker+0x102>
	serialAdapter_calculateFrameChecksum(&frame_checksum, &received_frame);
     da4:	1a ae       	std	Y+58, r1	; 0x3a
     da6:	be 01       	movw	r22, r28
     da8:	6d 5f       	subi	r22, 0xFD	; 253
     daa:	7f 4f       	sbci	r23, 0xFF	; 255
     dac:	ce 01       	movw	r24, r28
     dae:	ca 96       	adiw	r24, 0x3a	; 58
	


	// Verify checksum
	if (frame_checksum != received_frame.footer.checksum)
     db0:	3a df       	rcall	.-396    	; 0xc26 <serialAdapter_calculateFrameChecksum>
     db2:	99 ad       	ldd	r25, Y+57	; 0x39
     db4:	8a ad       	ldd	r24, Y+58	; 0x3a
     db6:	98 13       	cpse	r25, r24
		return;

	// Check if we are addressed by this frame
	if (received_frame.header.destAddr != ADDRESS_BROADCAST && received_frame.header.destAddr != serialAdapter_address)
     db8:	0a c0       	rjmp	.+20     	; 0xdce <serialAdapter_worker+0x102>
     dba:	8e 81       	ldd	r24, Y+6	; 0x06
     dbc:	8f 3f       	cpi	r24, 0xFF	; 255
     dbe:	21 f0       	breq	.+8      	; 0xdc8 <serialAdapter_worker+0xfc>
     dc0:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     dc4:	89 13       	cpse	r24, r25
		return;



	// Forward to next layer
	serialAdapter_processFrame(&received_frame);
     dc6:	03 c0       	rjmp	.+6      	; 0xdce <serialAdapter_worker+0x102>
     dc8:	ce 01       	movw	r24, r28
     dca:	03 96       	adiw	r24, 0x03	; 3
     dcc:	d3 dc       	rcall	.-1626   	; 0x774 <serialAdapter_processFrame>
}
     dce:	ea 96       	adiw	r28, 0x3a	; 58
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	08 95       	ret

00000de0 <printFrame>:
	serialAdapter_calculateChecksum(checksum, &frame->header, sizeof(frame->header));
	serialAdapter_calculateChecksum(checksum, &frame->innerFrame, frame->header.length);
}

void printFrame(frame_t *frame, char* func_name)
{
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	8c 01       	movw	r16, r24
		     "Inner Frame Data:\n"),
		func_name,
		frame->header.startFlag,
		frame->header.srcAddr,
		frame->header.destAddr,
		frame->header.length);
     de8:	fc 01       	movw	r30, r24
     dea:	24 81       	ldd	r18, Z+4	; 0x04
		     "  └─ Length:               %u\n\n"
		     "Inner Frame Data:\n"),
		func_name,
		frame->header.startFlag,
		frame->header.srcAddr,
		frame->header.destAddr,
     dec:	93 81       	ldd	r25, Z+3	; 0x03
		     "  ├─ Destination Address:  %u\n"
		     "  └─ Length:               %u\n\n"
		     "Inner Frame Data:\n"),
		func_name,
		frame->header.startFlag,
		frame->header.srcAddr,
     dee:	82 81       	ldd	r24, Z+2	; 0x02
	serialAdapter_calculateChecksum(checksum, &frame->innerFrame, frame->header.length);
}

void printFrame(frame_t *frame, char* func_name)
{
	printf_P(
     df0:	1f 92       	push	r1
     df2:	2f 93       	push	r18
     df4:	1f 92       	push	r1
     df6:	9f 93       	push	r25
     df8:	1f 92       	push	r1
     dfa:	8f 93       	push	r24
     dfc:	81 81       	ldd	r24, Z+1	; 0x01
     dfe:	8f 93       	push	r24
     e00:	80 81       	ld	r24, Z
     e02:	8f 93       	push	r24
     e04:	7f 93       	push	r23
     e06:	6f 93       	push	r22
     e08:	89 ee       	ldi	r24, 0xE9	; 233
     e0a:	92 e0       	ldi	r25, 0x02	; 2
     e0c:	9f 93       	push	r25
     e0e:	8f 93       	push	r24
     e10:	0e 94 36 14 	call	0x286c	; 0x286c <printf_P>
		frame->header.srcAddr,
		frame->header.destAddr,
		frame->header.length);

	// Inline printing of frame data
	for (uint8_t i = 0; i < frame->header.length; i++)
     e14:	8d b7       	in	r24, 0x3d	; 61
     e16:	9e b7       	in	r25, 0x3e	; 62
     e18:	0c 96       	adiw	r24, 0x0c	; 12
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	9e bf       	out	0x3e, r25	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	8d bf       	out	0x3d, r24	; 61
     e24:	c0 e0       	ldi	r28, 0x00	; 0
     e26:	16 c0       	rjmp	.+44     	; 0xe54 <printFrame+0x74>
	{
		printf_P(PSTR("  ├─ Byte %d: 0x%02X\n"), i, ((uint8_t *)&frame->innerFrame)[i]);
     e28:	f8 01       	movw	r30, r16
     e2a:	35 96       	adiw	r30, 0x05	; 5
     e2c:	ec 0f       	add	r30, r28
     e2e:	f1 1d       	adc	r31, r1
     e30:	80 81       	ld	r24, Z
     e32:	1f 92       	push	r1
     e34:	8f 93       	push	r24
     e36:	1f 92       	push	r1
     e38:	cf 93       	push	r28
     e3a:	8f ec       	ldi	r24, 0xCF	; 207
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	9f 93       	push	r25
     e40:	8f 93       	push	r24
     e42:	0e 94 36 14 	call	0x286c	; 0x286c <printf_P>
		frame->header.srcAddr,
		frame->header.destAddr,
		frame->header.length);

	// Inline printing of frame data
	for (uint8_t i = 0; i < frame->header.length; i++)
     e46:	cf 5f       	subi	r28, 0xFF	; 255
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	f8 01       	movw	r30, r16
     e56:	84 81       	ldd	r24, Z+4	; 0x04
     e58:	c8 17       	cp	r28, r24
     e5a:	30 f3       	brcs	.-52     	; 0xe28 <printFrame+0x48>
	{
		printf_P(PSTR("  ├─ Byte %d: 0x%02X\n"), i, ((uint8_t *)&frame->innerFrame)[i]);
	}

	// Conditionally print end of data or no data
	if (frame->header.length > 0)
     e5c:	88 23       	and	r24, r24
     e5e:	49 f0       	breq	.+18     	; 0xe72 <printFrame+0x92>
	{
		printf_P(PSTR("  └─ End of Data\n"));
     e60:	89 eb       	ldi	r24, 0xB9	; 185
     e62:	92 e0       	ldi	r25, 0x02	; 2
     e64:	9f 93       	push	r25
     e66:	8f 93       	push	r24
     e68:	0e 94 36 14 	call	0x286c	; 0x286c <printf_P>
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	08 c0       	rjmp	.+16     	; 0xe82 <printFrame+0xa2>
	}
	else
	{
		printf_P(PSTR("  └─ No Data\n"));
     e72:	87 ea       	ldi	r24, 0xA7	; 167
     e74:	92 e0       	ldi	r25, 0x02	; 2
     e76:	9f 93       	push	r25
     e78:	8f 93       	push	r24
     e7a:	0e 94 36 14 	call	0x286c	; 0x286c <printf_P>
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
	// Print footer and close
	printf_P(
		PSTR("\nFrame Footer:\n"
		     "  └─ Checksum:             0x%02X\n"
		     "================================================\n\n"),
		frame->footer.checksum);
     e82:	f8 01       	movw	r30, r16
     e84:	86 a9       	ldd	r24, Z+54	; 0x36
	{
		printf_P(PSTR("  └─ No Data\n"));
	}

	// Print footer and close
	printf_P(
     e86:	1f 92       	push	r1
     e88:	8f 93       	push	r24
     e8a:	8f e3       	ldi	r24, 0x3F	; 63
     e8c:	92 e0       	ldi	r25, 0x02	; 2
     e8e:	9f 93       	push	r25
     e90:	8f 93       	push	r24
     e92:	0e 94 36 14 	call	0x286c	; 0x286c <printf_P>
		PSTR("\nFrame Footer:\n"
		     "  └─ Checksum:             0x%02X\n"
		     "================================================\n\n"),
		frame->footer.checksum);
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	08 95       	ret

00000ea6 <xbee_init>:
/*!
 *  Initializes the XBee
 */
void xbee_init()
{
	uart3_init(UART_BAUD_SELECT(38400,16000000UL));
     ea6:	89 e1       	ldi	r24, 0x19	; 25
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	44 c5       	rjmp	.+2696   	; 0x1934 <uart3_init>
     eac:	08 95       	ret

00000eae <xbee_write>:
 *
 *  \param byte one byte that will be sent through UART
 */
void xbee_write(uint8_t byte)
{
	uart3_putc(byte);
     eae:	7a c5       	rjmp	.+2804   	; 0x19a4 <uart3_putc>
     eb0:	08 95       	ret

00000eb2 <xbee_writeData>:
 *
 *  \param data buffer with will be sent through UART
 *  \param length size of the buffer
 */
void xbee_writeData(void *data, uint8_t length)
{
     eb2:	ef 92       	push	r14
     eb4:	ff 92       	push	r15
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	7c 01       	movw	r14, r24
     ebe:	16 2f       	mov	r17, r22
	for(int i = 0; i < length;i++)
     ec0:	c0 e0       	ldi	r28, 0x00	; 0
     ec2:	d0 e0       	ldi	r29, 0x00	; 0
     ec4:	06 c0       	rjmp	.+12     	; 0xed2 <xbee_writeData+0x20>
	{
		xbee_write(*(((uint8_t*)data)+i));
     ec6:	f7 01       	movw	r30, r14
     ec8:	ec 0f       	add	r30, r28
     eca:	fd 1f       	adc	r31, r29
     ecc:	80 81       	ld	r24, Z
     ece:	ef df       	rcall	.-34     	; 0xeae <xbee_write>
 *  \param data buffer with will be sent through UART
 *  \param length size of the buffer
 */
void xbee_writeData(void *data, uint8_t length)
{
	for(int i = 0; i < length;i++)
     ed0:	21 96       	adiw	r28, 0x01	; 1
     ed2:	81 2f       	mov	r24, r17
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	c8 17       	cp	r28, r24
     ed8:	d9 07       	cpc	r29, r25
     eda:	ac f3       	brlt	.-22     	; 0xec6 <xbee_writeData+0x14>
	{
		xbee_write(*(((uint8_t*)data)+i));
	}
}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	08 95       	ret

00000ee8 <xbee_read>:
 *
 *  \param byte Reference parameter where the read byte will be written to
 *  \return Error code or XBEE_SUCCESS. When XBEE_BUFFER_INCONSISTENCY gets returned, `byte` still gets updated
 */
uint8_t xbee_read(uint8_t *byte)
{
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	ec 01       	movw	r28, r24
	//we are assuming that "int" from the uart library is implemented as uint16_t, kinda ugly ngl
	uint16_t temp = (uint16_t)uart3_getc();
     eee:	3d d5       	rcall	.+2682   	; 0x196a <uart3_getc>
	
	switch((temp >> 8) & 0xFF)
     ef0:	29 2f       	mov	r18, r25
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	21 15       	cp	r18, r1
     ef6:	92 e0       	ldi	r25, 0x02	; 2
     ef8:	39 07       	cpc	r19, r25
     efa:	b9 f0       	breq	.+46     	; 0xf2a <xbee_read+0x42>
     efc:	38 f4       	brcc	.+14     	; 0xf0c <xbee_read+0x24>
     efe:	21 15       	cp	r18, r1
     f00:	31 05       	cpc	r19, r1
     f02:	69 f0       	breq	.+26     	; 0xf1e <xbee_read+0x36>
     f04:	21 15       	cp	r18, r1
     f06:	31 40       	sbci	r19, 0x01	; 1
     f08:	a9 f0       	breq	.+42     	; 0xf34 <xbee_read+0x4c>
     f0a:	12 c0       	rjmp	.+36     	; 0xf30 <xbee_read+0x48>
     f0c:	21 15       	cp	r18, r1
     f0e:	98 e0       	ldi	r25, 0x08	; 8
     f10:	39 07       	cpc	r19, r25
     f12:	41 f0       	breq	.+16     	; 0xf24 <xbee_read+0x3c>
     f14:	21 15       	cp	r18, r1
     f16:	30 41       	sbci	r19, 0x10	; 16
     f18:	59 f4       	brne	.+22     	; 0xf30 <xbee_read+0x48>
		}
		break;
		
		case UART_FRAME_ERROR:
		{
			return XBEE_READ_ERROR;
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	0c c0       	rjmp	.+24     	; 0xf36 <xbee_read+0x4e>
	
	switch((temp >> 8) & 0xFF)
	{
		case 0:
		{
			*byte = (uint8_t)temp;
     f1e:	88 83       	st	Y, r24
			return XBEE_SUCCESS;
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	09 c0       	rjmp	.+18     	; 0xf36 <xbee_read+0x4e>
		}
		break;
		
		case UART_OVERRUN_ERROR:
		{
			*byte = (uint8_t)temp;
     f24:	88 83       	st	Y, r24
			return XBEE_BUFFER_INCONSISTENCY;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	06 c0       	rjmp	.+12     	; 0xf36 <xbee_read+0x4e>
		}
		break;
		
		case UART_BUFFER_OVERFLOW:
		{
			*byte = (uint8_t)temp;
     f2a:	88 83       	st	Y, r24
			return XBEE_BUFFER_INCONSISTENCY;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <xbee_read+0x4e>
		}
		break;
		default:
			break;
	}
	return 255;
     f30:	8f ef       	ldi	r24, 0xFF	; 255
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <xbee_read+0x4e>
		}
		break;
		
		case UART_NO_DATA:
		{
			return XBEE_DATA_MISSING;
     f34:	84 e0       	ldi	r24, 0x04	; 4
		break;
		default:
			break;
	}
	return 255;
}
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <xbee_getNumberOfBytesReceived>:
 *
 *  \return count of bytes that can be received through `xbee_read`
 */
uint16_t xbee_getNumberOfBytesReceived()
{
	return uart3_getrxcount();
     f3c:	47 c5       	rjmp	.+2702   	; 0x19cc <uart3_getrxcount>
}
     f3e:	08 95       	ret

00000f40 <xbee_readBuffer>:
 *	\param message_buffer Buffer where to store received bytes
 *  \param buffer_size Amount of bytes that need to be received
 *  \return error Code if there is any. If it's not XBEE_SUCCESS, you shouldn't use the result
 */
uint8_t xbee_readBuffer(uint8_t *buffer, uint8_t length)
{
     f40:	6f 92       	push	r6
     f42:	7f 92       	push	r7
     f44:	8f 92       	push	r8
     f46:	9f 92       	push	r9
     f48:	af 92       	push	r10
     f4a:	bf 92       	push	r11
     f4c:	cf 92       	push	r12
     f4e:	df 92       	push	r13
     f50:	ef 92       	push	r14
     f52:	ff 92       	push	r15
     f54:	0f 93       	push	r16
     f56:	1f 93       	push	r17
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	4c 01       	movw	r8, r24
     f62:	66 2e       	mov	r6, r22

	// Copy received data into destination buffer
	memcpy(buffer, temp_buff, length);

	return XBEE_SUCCESS;
}
     f64:	ed b6       	in	r14, 0x3d	; 61
     f66:	fe b6       	in	r15, 0x3e	; 62
 *  \param buffer_size Amount of bytes that need to be received
 *  \return error Code if there is any. If it's not XBEE_SUCCESS, you shouldn't use the result
 */
uint8_t xbee_readBuffer(uint8_t *buffer, uint8_t length)
{
	if (xbee_getNumberOfBytesReceived() < length)
     f68:	e9 df       	rcall	.-46     	; 0xf3c <xbee_getNumberOfBytesReceived>
     f6a:	06 2d       	mov	r16, r6
     f6c:	10 e0       	ldi	r17, 0x00	; 0
     f6e:	80 17       	cp	r24, r16
     f70:	91 07       	cpc	r25, r17
     f72:	f0 f0       	brcs	.+60     	; 0xfb0 <xbee_readBuffer+0x70>
		return XBEE_DATA_MISSING;

	uint8_t temp_buff[length];
     f74:	8d b7       	in	r24, 0x3d	; 61
     f76:	9e b7       	in	r25, 0x3e	; 62
     f78:	80 1b       	sub	r24, r16
     f7a:	91 0b       	sbc	r25, r17
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	9e bf       	out	0x3e, r25	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	8d bf       	out	0x3d, r24	; 61
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	6c 01       	movw	r12, r24
     f8a:	5c 01       	movw	r10, r24
	
	for (uint8_t i = 0; i < length; i++)
     f8c:	71 2c       	mov	r7, r1
     f8e:	07 c0       	rjmp	.+14     	; 0xf9e <xbee_readBuffer+0x5e>
	{
		uint8_t err = xbee_read(&temp_buff[i]);
     f90:	c5 01       	movw	r24, r10
     f92:	87 0d       	add	r24, r7
     f94:	91 1d       	adc	r25, r1
     f96:	a8 df       	rcall	.-176    	; 0xee8 <xbee_read>
		if (err != XBEE_SUCCESS)
     f98:	81 11       	cpse	r24, r1
     f9a:	0b c0       	rjmp	.+22     	; 0xfb2 <xbee_readBuffer+0x72>
	if (xbee_getNumberOfBytesReceived() < length)
		return XBEE_DATA_MISSING;

	uint8_t temp_buff[length];
	
	for (uint8_t i = 0; i < length; i++)
     f9c:	73 94       	inc	r7
     f9e:	76 14       	cp	r7, r6
     fa0:	b8 f3       	brcs	.-18     	; 0xf90 <xbee_readBuffer+0x50>
		if (err != XBEE_SUCCESS)
			return err; // Early return if an error occurs
	}

	// Copy received data into destination buffer
	memcpy(buffer, temp_buff, length);
     fa2:	a8 01       	movw	r20, r16
     fa4:	b6 01       	movw	r22, r12
     fa6:	c4 01       	movw	r24, r8
     fa8:	0e 94 0b 14 	call	0x2816	; 0x2816 <memcpy>

	return XBEE_SUCCESS;
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <xbee_readBuffer+0x72>
 *  \return error Code if there is any. If it's not XBEE_SUCCESS, you shouldn't use the result
 */
uint8_t xbee_readBuffer(uint8_t *buffer, uint8_t length)
{
	if (xbee_getNumberOfBytesReceived() < length)
		return XBEE_DATA_MISSING;
     fb0:	84 e0       	ldi	r24, 0x04	; 4

	// Copy received data into destination buffer
	memcpy(buffer, temp_buff, length);

	return XBEE_SUCCESS;
}
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	fe be       	out	0x3e, r15	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	ed be       	out	0x3d, r14	; 61
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	df 90       	pop	r13
     fca:	cf 90       	pop	r12
     fcc:	bf 90       	pop	r11
     fce:	af 90       	pop	r10
     fd0:	9f 90       	pop	r9
     fd2:	8f 90       	pop	r8
     fd4:	7f 90       	pop	r7
     fd6:	6f 90       	pop	r6
     fd8:	08 95       	ret

00000fda <lcd_enablePulse>:
			lcd_writeHexNibble(number >> nib);
		}
	}

	os_leaveCriticalSection();
}
     fda:	a7 d6       	rcall	.+3406   	; 0x1d2a <os_enterCriticalSection>
     fdc:	e2 e0       	ldi	r30, 0x02	; 2
     fde:	f1 e0       	ldi	r31, 0x01	; 1
     fe0:	80 81       	ld	r24, Z
     fe2:	80 64       	ori	r24, 0x40	; 64
     fe4:	80 83       	st	Z, r24
     fe6:	85 e0       	ldi	r24, 0x05	; 5
     fe8:	8a 95       	dec	r24
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <lcd_enablePulse+0xe>
     fec:	00 00       	nop
     fee:	80 81       	ld	r24, Z
     ff0:	8f 7b       	andi	r24, 0xBF	; 191
     ff2:	80 83       	st	Z, r24
     ff4:	8f e8       	ldi	r24, 0x8F	; 143
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <lcd_enablePulse+0x1e>
     ffc:	00 c0       	rjmp	.+0      	; 0xffe <lcd_enablePulse+0x24>
     ffe:	00 00       	nop
    1000:	b3 c6       	rjmp	.+3430   	; 0x1d68 <os_leaveCriticalSection>
    1002:	08 95       	ret

00001004 <lcd_sendNibble>:
    1004:	cf 93       	push	r28
    1006:	c8 2f       	mov	r28, r24
    1008:	90 d6       	rcall	.+3360   	; 0x1d2a <os_enterCriticalSection>
    100a:	c0 ff       	sbrs	r28, 0
    100c:	04 c0       	rjmp	.+8      	; 0x1016 <lcd_sendNibble+0x12>
    100e:	84 b3       	in	r24, 0x14	; 20
    1010:	80 62       	ori	r24, 0x20	; 32
    1012:	84 bb       	out	0x14, r24	; 20
    1014:	03 c0       	rjmp	.+6      	; 0x101c <lcd_sendNibble+0x18>
    1016:	84 b3       	in	r24, 0x14	; 20
    1018:	8f 7d       	andi	r24, 0xDF	; 223
    101a:	84 bb       	out	0x14, r24	; 20
    101c:	c1 ff       	sbrs	r28, 1
    101e:	04 c0       	rjmp	.+8      	; 0x1028 <lcd_sendNibble+0x24>
    1020:	8e b1       	in	r24, 0x0e	; 14
    1022:	88 60       	ori	r24, 0x08	; 8
    1024:	8e b9       	out	0x0e, r24	; 14
    1026:	03 c0       	rjmp	.+6      	; 0x102e <lcd_sendNibble+0x2a>
    1028:	8e b1       	in	r24, 0x0e	; 14
    102a:	87 7f       	andi	r24, 0xF7	; 247
    102c:	8e b9       	out	0x0e, r24	; 14
    102e:	c2 ff       	sbrs	r28, 2
    1030:	06 c0       	rjmp	.+12     	; 0x103e <lcd_sendNibble+0x3a>
    1032:	e2 e0       	ldi	r30, 0x02	; 2
    1034:	f1 e0       	ldi	r31, 0x01	; 1
    1036:	80 81       	ld	r24, Z
    1038:	88 60       	ori	r24, 0x08	; 8
    103a:	80 83       	st	Z, r24
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <lcd_sendNibble+0x44>
    103e:	e2 e0       	ldi	r30, 0x02	; 2
    1040:	f1 e0       	ldi	r31, 0x01	; 1
    1042:	80 81       	ld	r24, Z
    1044:	87 7f       	andi	r24, 0xF7	; 247
    1046:	80 83       	st	Z, r24
    1048:	c3 ff       	sbrs	r28, 3
    104a:	06 c0       	rjmp	.+12     	; 0x1058 <lcd_sendNibble+0x54>
    104c:	e2 e0       	ldi	r30, 0x02	; 2
    104e:	f1 e0       	ldi	r31, 0x01	; 1
    1050:	80 81       	ld	r24, Z
    1052:	80 61       	ori	r24, 0x10	; 16
    1054:	80 83       	st	Z, r24
    1056:	05 c0       	rjmp	.+10     	; 0x1062 <lcd_sendNibble+0x5e>
    1058:	e2 e0       	ldi	r30, 0x02	; 2
    105a:	f1 e0       	ldi	r31, 0x01	; 1
    105c:	80 81       	ld	r24, Z
    105e:	8f 7e       	andi	r24, 0xEF	; 239
    1060:	80 83       	st	Z, r24
    1062:	bb df       	rcall	.-138    	; 0xfda <lcd_enablePulse>
    1064:	81 d6       	rcall	.+3330   	; 0x1d68 <os_leaveCriticalSection>
    1066:	cf 91       	pop	r28
    1068:	08 95       	ret

0000106a <lcd_printf_p>:
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	ae 01       	movw	r20, r28
    1078:	48 5f       	subi	r20, 0xF8	; 248
    107a:	5f 4f       	sbci	r21, 0xFF	; 255
    107c:	da 01       	movw	r26, r20
    107e:	6d 91       	ld	r22, X+
    1080:	7d 91       	ld	r23, X+
    1082:	ad 01       	movw	r20, r26
    1084:	04 e7       	ldi	r16, 0x74	; 116
    1086:	15 e0       	ldi	r17, 0x05	; 5
    1088:	d8 01       	movw	r26, r16
    108a:	12 96       	adiw	r26, 0x02	; 2
    108c:	ed 91       	ld	r30, X+
    108e:	fc 91       	ld	r31, X
    1090:	13 97       	sbiw	r26, 0x03	; 3
    1092:	83 81       	ldd	r24, Z+3	; 0x03
    1094:	88 60       	ori	r24, 0x08	; 8
    1096:	83 83       	std	Z+3, r24	; 0x03
    1098:	83 e0       	ldi	r24, 0x03	; 3
    109a:	92 e0       	ldi	r25, 0x02	; 2
    109c:	0e 94 5d 14 	call	0x28ba	; 0x28ba <vfprintf_P>
    10a0:	d8 01       	movw	r26, r16
    10a2:	12 96       	adiw	r26, 0x02	; 2
    10a4:	ed 91       	ld	r30, X+
    10a6:	fc 91       	ld	r31, X
    10a8:	13 97       	sbiw	r26, 0x03	; 3
    10aa:	83 81       	ldd	r24, Z+3	; 0x03
    10ac:	87 7f       	andi	r24, 0xF7	; 247
    10ae:	83 83       	std	Z+3, r24	; 0x03
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	08 95       	ret

000010ba <lcd_sendCommand>:
    10ba:	cf 93       	push	r28
    10bc:	c8 2f       	mov	r28, r24
    10be:	35 d6       	rcall	.+3178   	; 0x1d2a <os_enterCriticalSection>
    10c0:	e2 e0       	ldi	r30, 0x02	; 2
    10c2:	f1 e0       	ldi	r31, 0x01	; 1
    10c4:	80 81       	ld	r24, Z
    10c6:	8f 7d       	andi	r24, 0xDF	; 223
    10c8:	80 83       	st	Z, r24
    10ca:	8c 2f       	mov	r24, r28
    10cc:	82 95       	swap	r24
    10ce:	8f 70       	andi	r24, 0x0F	; 15
    10d0:	99 df       	rcall	.-206    	; 0x1004 <lcd_sendNibble>
    10d2:	8c 2f       	mov	r24, r28
    10d4:	97 df       	rcall	.-210    	; 0x1004 <lcd_sendNibble>
    10d6:	85 ed       	ldi	r24, 0xD5	; 213
    10d8:	8a 95       	dec	r24
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <lcd_sendCommand+0x1e>
    10dc:	00 00       	nop
    10de:	44 d6       	rcall	.+3208   	; 0x1d68 <os_leaveCriticalSection>
    10e0:	cf 91       	pop	r28
    10e2:	08 95       	ret

000010e4 <lcd_init>:
    10e4:	22 d6       	rcall	.+3140   	; 0x1d2a <os_enterCriticalSection>
    10e6:	e1 e0       	ldi	r30, 0x01	; 1
    10e8:	f1 e0       	ldi	r31, 0x01	; 1
    10ea:	80 81       	ld	r24, Z
    10ec:	88 67       	ori	r24, 0x78	; 120
    10ee:	80 83       	st	Z, r24
    10f0:	8d b1       	in	r24, 0x0d	; 13
    10f2:	88 60       	ori	r24, 0x08	; 8
    10f4:	8d b9       	out	0x0d, r24	; 13
    10f6:	83 b3       	in	r24, 0x13	; 19
    10f8:	80 62       	ori	r24, 0x20	; 32
    10fa:	83 bb       	out	0x13, r24	; 19
    10fc:	80 b3       	in	r24, 0x10	; 16
    10fe:	81 60       	ori	r24, 0x01	; 1
    1100:	80 bb       	out	0x10, r24	; 16
    1102:	81 b3       	in	r24, 0x11	; 17
    1104:	8e 7f       	andi	r24, 0xFE	; 254
    1106:	81 bb       	out	0x11, r24	; 17
    1108:	2f ef       	ldi	r18, 0xFF	; 255
    110a:	80 e7       	ldi	r24, 0x70	; 112
    110c:	92 e0       	ldi	r25, 0x02	; 2
    110e:	21 50       	subi	r18, 0x01	; 1
    1110:	80 40       	sbci	r24, 0x00	; 0
    1112:	90 40       	sbci	r25, 0x00	; 0
    1114:	e1 f7       	brne	.-8      	; 0x110e <lcd_init+0x2a>
    1116:	00 c0       	rjmp	.+0      	; 0x1118 <lcd_init+0x34>
    1118:	00 00       	nop
    111a:	83 e0       	ldi	r24, 0x03	; 3
    111c:	73 df       	rcall	.-282    	; 0x1004 <lcd_sendNibble>
    111e:	8f e1       	ldi	r24, 0x1F	; 31
    1120:	9e e4       	ldi	r25, 0x4E	; 78
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	f1 f7       	brne	.-4      	; 0x1122 <lcd_init+0x3e>
    1126:	00 c0       	rjmp	.+0      	; 0x1128 <lcd_init+0x44>
    1128:	00 00       	nop
    112a:	83 e0       	ldi	r24, 0x03	; 3
    112c:	6b df       	rcall	.-298    	; 0x1004 <lcd_sendNibble>
    112e:	8f e1       	ldi	r24, 0x1F	; 31
    1130:	93 e0       	ldi	r25, 0x03	; 3
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <lcd_init+0x4e>
    1136:	00 c0       	rjmp	.+0      	; 0x1138 <lcd_init+0x54>
    1138:	00 00       	nop
    113a:	83 e0       	ldi	r24, 0x03	; 3
    113c:	63 df       	rcall	.-314    	; 0x1004 <lcd_sendNibble>
    113e:	8f e1       	ldi	r24, 0x1F	; 31
    1140:	93 e0       	ldi	r25, 0x03	; 3
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <lcd_init+0x5e>
    1146:	00 c0       	rjmp	.+0      	; 0x1148 <lcd_init+0x64>
    1148:	00 00       	nop
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	5b df       	rcall	.-330    	; 0x1004 <lcd_sendNibble>
    114e:	88 e2       	ldi	r24, 0x28	; 40
    1150:	b4 df       	rcall	.-152    	; 0x10ba <lcd_sendCommand>
    1152:	8c e0       	ldi	r24, 0x0C	; 12
    1154:	b2 df       	rcall	.-156    	; 0x10ba <lcd_sendCommand>
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	b0 df       	rcall	.-160    	; 0x10ba <lcd_sendCommand>
    115a:	86 e0       	ldi	r24, 0x06	; 6
    115c:	ae df       	rcall	.-164    	; 0x10ba <lcd_sendCommand>
    115e:	8f e1       	ldi	r24, 0x1F	; 31
    1160:	9e e4       	ldi	r25, 0x4E	; 78
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <lcd_init+0x7e>
    1166:	00 c0       	rjmp	.+0      	; 0x1168 <lcd_init+0x84>
    1168:	00 00       	nop
    116a:	fe c5       	rjmp	.+3068   	; 0x1d68 <os_leaveCriticalSection>
    116c:	08 95       	ret

0000116e <lcd_clear>:
    116e:	dd d5       	rcall	.+3002   	; 0x1d2a <os_enterCriticalSection>
    1170:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <charCtr>
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	a1 df       	rcall	.-190    	; 0x10ba <lcd_sendCommand>
    1178:	8f e3       	ldi	r24, 0x3F	; 63
    117a:	9f e1       	ldi	r25, 0x1F	; 31
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <lcd_clear+0xe>
    1180:	00 c0       	rjmp	.+0      	; 0x1182 <lcd_clear+0x14>
    1182:	00 00       	nop
    1184:	f1 c5       	rjmp	.+3042   	; 0x1d68 <os_leaveCriticalSection>
    1186:	08 95       	ret

00001188 <lcd_displayOn>:
    1188:	8c e0       	ldi	r24, 0x0C	; 12
    118a:	97 cf       	rjmp	.-210    	; 0x10ba <lcd_sendCommand>
    118c:	08 95       	ret

0000118e <lcd_displayOff>:
    118e:	88 e0       	ldi	r24, 0x08	; 8
    1190:	94 cf       	rjmp	.-216    	; 0x10ba <lcd_sendCommand>
    1192:	08 95       	ret

00001194 <lcd_goto>:
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	d8 2f       	mov	r29, r24
    119a:	c6 2f       	mov	r28, r22
    119c:	82 30       	cpi	r24, 0x02	; 2
    119e:	08 f0       	brcs	.+2      	; 0x11a2 <lcd_goto+0xe>
    11a0:	d1 e0       	ldi	r29, 0x01	; 1
    11a2:	c3 d5       	rcall	.+2950   	; 0x1d2a <os_enterCriticalSection>
    11a4:	8c 2f       	mov	r24, r28
    11a6:	90 e4       	ldi	r25, 0x40	; 64
    11a8:	d9 9f       	mul	r29, r25
    11aa:	80 0d       	add	r24, r0
    11ac:	11 24       	eor	r1, r1
    11ae:	80 68       	ori	r24, 0x80	; 128
    11b0:	84 df       	rcall	.-248    	; 0x10ba <lcd_sendCommand>
    11b2:	80 e1       	ldi	r24, 0x10	; 16
    11b4:	d8 9f       	mul	r29, r24
    11b6:	c0 0d       	add	r28, r0
    11b8:	11 24       	eor	r1, r1
    11ba:	c0 93 fc 04 	sts	0x04FC, r28	; 0x8004fc <charCtr>
    11be:	d4 d5       	rcall	.+2984   	; 0x1d68 <os_leaveCriticalSection>
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <lcd_sendData>:
    11c6:	cf 93       	push	r28
    11c8:	c8 2f       	mov	r28, r24
    11ca:	af d5       	rcall	.+2910   	; 0x1d2a <os_enterCriticalSection>
    11cc:	e2 e0       	ldi	r30, 0x02	; 2
    11ce:	f1 e0       	ldi	r31, 0x01	; 1
    11d0:	80 81       	ld	r24, Z
    11d2:	80 62       	ori	r24, 0x20	; 32
    11d4:	80 83       	st	Z, r24
    11d6:	8c 2f       	mov	r24, r28
    11d8:	82 95       	swap	r24
    11da:	8f 70       	andi	r24, 0x0F	; 15
    11dc:	13 df       	rcall	.-474    	; 0x1004 <lcd_sendNibble>
    11de:	8c 2f       	mov	r24, r28
    11e0:	11 df       	rcall	.-478    	; 0x1004 <lcd_sendNibble>
    11e2:	85 ed       	ldi	r24, 0xD5	; 213
    11e4:	8a 95       	dec	r24
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <lcd_sendData+0x1e>
    11e8:	00 00       	nop
    11ea:	be d5       	rcall	.+2940   	; 0x1d68 <os_leaveCriticalSection>
    11ec:	cf 91       	pop	r28
    11ee:	08 95       	ret

000011f0 <lcd_line1>:
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	cf cf       	rjmp	.-98     	; 0x1194 <lcd_goto>
    11f6:	08 95       	ret

000011f8 <lcd_line2>:
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	cb cf       	rjmp	.-106    	; 0x1194 <lcd_goto>
    11fe:	08 95       	ret

00001200 <lcd_writeChar>:
    1200:	cf 93       	push	r28
    1202:	c8 2f       	mov	r28, r24
    1204:	92 d5       	rcall	.+2852   	; 0x1d2a <os_enterCriticalSection>
    1206:	ca 30       	cpi	r28, 0x0A	; 10
    1208:	31 f4       	brne	.+12     	; 0x1216 <lcd_writeChar+0x16>
    120a:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <charCtr>
    120e:	80 71       	andi	r24, 0x10	; 16
    1210:	80 5f       	subi	r24, 0xF0	; 240
    1212:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <charCtr>
    1216:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <charCtr>
    121a:	80 31       	cpi	r24, 0x10	; 16
    121c:	11 f4       	brne	.+4      	; 0x1222 <lcd_writeChar+0x22>
    121e:	ec df       	rcall	.-40     	; 0x11f8 <lcd_line2>
    1220:	04 c0       	rjmp	.+8      	; 0x122a <lcd_writeChar+0x2a>
    1222:	80 32       	cpi	r24, 0x20	; 32
    1224:	11 f4       	brne	.+4      	; 0x122a <lcd_writeChar+0x2a>
    1226:	a3 df       	rcall	.-186    	; 0x116e <lcd_clear>
    1228:	e3 df       	rcall	.-58     	; 0x11f0 <lcd_line1>
    122a:	8c 2f       	mov	r24, r28
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	fc 01       	movw	r30, r24
    1230:	e4 58       	subi	r30, 0x84	; 132
    1232:	f1 09       	sbc	r31, r1
    1234:	e9 33       	cpi	r30, 0x39	; 57
    1236:	f1 05       	cpc	r31, r1
    1238:	a8 f4       	brcc	.+42     	; 0x1264 <lcd_writeChar+0x64>
    123a:	88 27       	eor	r24, r24
    123c:	ee 58       	subi	r30, 0x8E	; 142
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	8f 4f       	sbci	r24, 0xFF	; 255
    1242:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <__tablejump2__>
    1246:	cf ee       	ldi	r28, 0xEF	; 239
    1248:	0d c0       	rjmp	.+26     	; 0x1264 <lcd_writeChar+0x64>
    124a:	c5 ef       	ldi	r28, 0xF5	; 245
    124c:	0b c0       	rjmp	.+22     	; 0x1264 <lcd_writeChar+0x64>
    124e:	c2 ee       	ldi	r28, 0xE2	; 226
    1250:	09 c0       	rjmp	.+18     	; 0x1264 <lcd_writeChar+0x64>
    1252:	cf ee       	ldi	r28, 0xEF	; 239
    1254:	07 c0       	rjmp	.+14     	; 0x1264 <lcd_writeChar+0x64>
    1256:	c5 ef       	ldi	r28, 0xF5	; 245
    1258:	05 c0       	rjmp	.+10     	; 0x1264 <lcd_writeChar+0x64>
    125a:	cf ed       	ldi	r28, 0xDF	; 223
    125c:	03 c0       	rjmp	.+6      	; 0x1264 <lcd_writeChar+0x64>
    125e:	c4 ee       	ldi	r28, 0xE4	; 228
    1260:	01 c0       	rjmp	.+2      	; 0x1264 <lcd_writeChar+0x64>
    1262:	c1 ee       	ldi	r28, 0xE1	; 225
    1264:	8c 2f       	mov	r24, r28
    1266:	af df       	rcall	.-162    	; 0x11c6 <lcd_sendData>
    1268:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <charCtr>
    126c:	8f 5f       	subi	r24, 0xFF	; 255
    126e:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <charCtr>
    1272:	7a d5       	rcall	.+2804   	; 0x1d68 <os_leaveCriticalSection>
    1274:	cf 91       	pop	r28
    1276:	08 95       	ret

00001278 <lcd_stdioPutChar>:
    1278:	c3 df       	rcall	.-122    	; 0x1200 <lcd_writeChar>
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	08 95       	ret

00001280 <lcd_writeString>:
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	ec 01       	movw	r28, r24
    128a:	4f d5       	rcall	.+2718   	; 0x1d2a <os_enterCriticalSection>
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <lcd_writeString+0x12>
    128e:	b8 df       	rcall	.-144    	; 0x1200 <lcd_writeChar>
    1290:	e8 01       	movw	r28, r16
    1292:	8e 01       	movw	r16, r28
    1294:	0f 5f       	subi	r16, 0xFF	; 255
    1296:	1f 4f       	sbci	r17, 0xFF	; 255
    1298:	88 81       	ld	r24, Y
    129a:	81 11       	cpse	r24, r1
    129c:	f8 cf       	rjmp	.-16     	; 0x128e <lcd_writeString+0xe>
    129e:	64 d5       	rcall	.+2760   	; 0x1d68 <os_leaveCriticalSection>
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	08 95       	ret

000012aa <lcd_writeProgString>:
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	ec 01       	movw	r28, r24
    12b4:	3a d5       	rcall	.+2676   	; 0x1d2a <os_enterCriticalSection>
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <lcd_writeProgString+0x12>
    12b8:	a3 df       	rcall	.-186    	; 0x1200 <lcd_writeChar>
    12ba:	e8 01       	movw	r28, r16
    12bc:	8e 01       	movw	r16, r28
    12be:	0f 5f       	subi	r16, 0xFF	; 255
    12c0:	1f 4f       	sbci	r17, 0xFF	; 255
    12c2:	fe 01       	movw	r30, r28
    12c4:	84 91       	lpm	r24, Z
    12c6:	81 11       	cpse	r24, r1
    12c8:	f7 cf       	rjmp	.-18     	; 0x12b8 <lcd_writeProgString+0xe>
    12ca:	4e d5       	rcall	.+2716   	; 0x1d68 <os_leaveCriticalSection>
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	08 95       	ret

000012d6 <lcd_writeDec>:
 *  Writes a 16 bit integer as a decimal number without leading 0s
 *
 *  \param number The number to be written.
 */
void lcd_writeDec(uint16_t number)
{
    12d6:	cf 92       	push	r12
    12d8:	df 92       	push	r13
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	1f 93       	push	r17
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	ec 01       	movw	r28, r24
	if (!number)
    12e6:	89 2b       	or	r24, r25
    12e8:	19 f4       	brne	.+6      	; 0x12f0 <lcd_writeDec+0x1a>
	{
		lcd_writeChar('0');
    12ea:	80 e3       	ldi	r24, 0x30	; 48
    12ec:	89 df       	rcall	.-238    	; 0x1200 <lcd_writeChar>
	}

	uint32_t pos = 10000;
	uint8_t print = 0;

	os_enterCriticalSection();
    12ee:	30 c0       	rjmp	.+96     	; 0x1350 <lcd_writeDec+0x7a>
    12f0:	1c d5       	rcall	.+2616   	; 0x1d2a <os_enterCriticalSection>
		lcd_writeChar('0');
		return;
	}

	uint32_t pos = 10000;
	uint8_t print = 0;
    12f2:	10 e0       	ldi	r17, 0x00	; 0
	{
		lcd_writeChar('0');
		return;
	}

	uint32_t pos = 10000;
    12f4:	0f 2e       	mov	r0, r31
    12f6:	f0 e1       	ldi	r31, 0x10	; 16
    12f8:	cf 2e       	mov	r12, r31
    12fa:	f7 e2       	ldi	r31, 0x27	; 39
    12fc:	df 2e       	mov	r13, r31
    12fe:	e1 2c       	mov	r14, r1
    1300:	f1 2c       	mov	r15, r1
    1302:	f0 2d       	mov	r31, r0

	os_enterCriticalSection();

	do
	{
		uint8_t const digit = number / pos;
    1304:	be 01       	movw	r22, r28
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a7 01       	movw	r20, r14
    130c:	96 01       	movw	r18, r12
    130e:	0e 94 ba 13 	call	0x2774	; 0x2774 <__udivmodsi4>
		number -= digit * pos;
    1312:	42 2f       	mov	r20, r18
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	4c 9d       	mul	r20, r12
    1318:	c0 01       	movw	r24, r0
    131a:	4d 9d       	mul	r20, r13
    131c:	90 0d       	add	r25, r0
    131e:	5c 9d       	mul	r21, r12
    1320:	90 0d       	add	r25, r0
    1322:	11 24       	eor	r1, r1
    1324:	c8 1b       	sub	r28, r24
    1326:	d9 0b       	sbc	r29, r25
		if (print |= digit)
    1328:	12 2b       	or	r17, r18
    132a:	19 f0       	breq	.+6      	; 0x1332 <lcd_writeDec+0x5c>
			lcd_writeChar(digit + '0');
    132c:	80 e3       	ldi	r24, 0x30	; 48
    132e:	82 0f       	add	r24, r18
    1330:	67 df       	rcall	.-306    	; 0x1200 <lcd_writeChar>
	} while (pos /= 10);
    1332:	c7 01       	movw	r24, r14
    1334:	b6 01       	movw	r22, r12
    1336:	2a e0       	ldi	r18, 0x0A	; 10
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	0e 94 ba 13 	call	0x2774	; 0x2774 <__udivmodsi4>
    1342:	69 01       	movw	r12, r18
    1344:	7a 01       	movw	r14, r20
    1346:	23 2b       	or	r18, r19
    1348:	24 2b       	or	r18, r20
    134a:	25 2b       	or	r18, r21

	os_leaveCriticalSection();
    134c:	d9 f6       	brne	.-74     	; 0x1304 <lcd_writeDec+0x2e>
    134e:	0c d5       	rcall	.+2584   	; 0x1d68 <os_leaveCriticalSection>
}
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	ff 90       	pop	r15
    1358:	ef 90       	pop	r14
    135a:	df 90       	pop	r13
    135c:	cf 90       	pop	r12
    135e:	08 95       	ret

00001360 <rq_isEmpty>:
 *  \param queue The queue it will check
 *  \return True if queue is empty, false if it's not empty
 */
bool rq_isEmpty(ready_queue_t *queue)
{
	return queue->head == queue->tail;
    1360:	fc 01       	movw	r30, r24
    1362:	21 85       	ldd	r18, Z+9	; 0x09
    1364:	92 85       	ldd	r25, Z+10	; 0x0a
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	29 13       	cpse	r18, r25
    136a:	80 e0       	ldi	r24, 0x00	; 0
}
    136c:	08 95       	ret

0000136e <rq_pop>:
 *  \param queue The queue it will push to
 *  \param process The process that will be pushed
 *  \return Popped process id
 */
process_id_t rq_pop(ready_queue_t *queue)
{
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	ec 01       	movw	r28, r24
	if (rq_isEmpty(queue))
    1374:	f5 df       	rcall	.-22     	; 0x1360 <rq_isEmpty>
    1376:	88 23       	and	r24, r24
    1378:	39 f0       	breq	.+14     	; 0x1388 <rq_pop+0x1a>
	{
		os_error("Can't pop from empty ready queue");
    137a:	8d eb       	ldi	r24, 0xBD	; 189
    137c:	93 e0       	ldi	r25, 0x03	; 3
    137e:	9f 93       	push	r25
    1380:	8f 93       	push	r24
    1382:	4e d4       	rcall	.+2204   	; 0x1c20 <os_errorPstr>
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
	}
	process_id_t process = queue->processes[queue->head];
    1388:	99 85       	ldd	r25, Y+9	; 0x09
    138a:	29 2f       	mov	r18, r25
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	fe 01       	movw	r30, r28
    1390:	e2 0f       	add	r30, r18
    1392:	f3 1f       	adc	r31, r19
    1394:	80 81       	ld	r24, Z
	queue->head = next(queue->head);
    1396:	2f 5f       	subi	r18, 0xFF	; 255
    1398:	3f 4f       	sbci	r19, 0xFF	; 255
    139a:	29 30       	cpi	r18, 0x09	; 9
    139c:	31 05       	cpc	r19, r1
    139e:	14 f4       	brge	.+4      	; 0x13a4 <rq_pop+0x36>
    13a0:	9f 5f       	subi	r25, 0xFF	; 255
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <rq_pop+0x38>
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	99 87       	std	Y+9, r25	; 0x09
	return process;
}
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <rq_isFull>:
 *  \param queue The queue it will check
 *  \return True if queue is full, false if it's not completely filled
 */
bool rq_isFull(ready_queue_t *queue)
{
	return next(queue->tail) == queue->head;
    13ae:	fc 01       	movw	r30, r24
    13b0:	22 85       	ldd	r18, Z+10	; 0x0a
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	2f 5f       	subi	r18, 0xFF	; 255
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    13b8:	29 30       	cpi	r18, 0x09	; 9
    13ba:	31 05       	cpc	r19, r1
    13bc:	14 f0       	brlt	.+4      	; 0x13c2 <rq_isFull+0x14>
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	fc 01       	movw	r30, r24
    13c4:	41 85       	ldd	r20, Z+9	; 0x09
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	24 17       	cp	r18, r20
    13cc:	35 07       	cpc	r19, r21
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <rq_isFull+0x24>
    13d0:	80 e0       	ldi	r24, 0x00	; 0
}
    13d2:	08 95       	ret

000013d4 <rq_push>:
 *
 *  \param queue The queue it will push to
 *  \param process The process that will be pushed
 */
void rq_push(ready_queue_t *queue, process_id_t process)
{
    13d4:	1f 93       	push	r17
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	ec 01       	movw	r28, r24
    13dc:	16 2f       	mov	r17, r22
	if (rq_isFull(queue))
    13de:	e7 df       	rcall	.-50     	; 0x13ae <rq_isFull>
    13e0:	88 23       	and	r24, r24
    13e2:	39 f0       	breq	.+14     	; 0x13f2 <rq_push+0x1e>
	{
		os_error("Can't push on full ready queue");
    13e4:	8e ed       	ldi	r24, 0xDE	; 222
    13e6:	93 e0       	ldi	r25, 0x03	; 3
    13e8:	9f 93       	push	r25
    13ea:	8f 93       	push	r24
    13ec:	19 d4       	rcall	.+2098   	; 0x1c20 <os_errorPstr>
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
	}
	queue->processes[queue->tail] = process;
    13f2:	2a 85       	ldd	r18, Y+10	; 0x0a
    13f4:	82 2f       	mov	r24, r18
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	fe 01       	movw	r30, r28
    13fa:	e8 0f       	add	r30, r24
    13fc:	f9 1f       	adc	r31, r25
    13fe:	10 83       	st	Z, r17
	queue->tail = next(queue->tail);
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	09 97       	sbiw	r24, 0x09	; 9
    1404:	14 f4       	brge	.+4      	; 0x140a <rq_push+0x36>
    1406:	2f 5f       	subi	r18, 0xFF	; 255
    1408:	01 c0       	rjmp	.+2      	; 0x140c <rq_push+0x38>
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	2a 87       	std	Y+10, r18	; 0x0a
}
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	1f 91       	pop	r17
    1414:	08 95       	ret

00001416 <rq_clear>:
 *
 *  \param queue The queue that should be emptied
 */
void rq_clear(ready_queue_t *queue)
{
	queue->head = 0;
    1416:	fc 01       	movw	r30, r24
    1418:	11 86       	std	Z+9, r1	; 0x09
	queue->tail = 0;
    141a:	12 86       	std	Z+10, r1	; 0x0a
    141c:	08 95       	ret

0000141e <rq_remove>:
 *  \param queue The queue that should be removed from
 *  \param process The process that should be removed
 *  \return True if the process was removed, false if it wasn't found
 */
bool rq_remove(ready_queue_t *queue, process_id_t process)
{
    141e:	fc 01       	movw	r30, r24
	for (int i = queue->head; i != queue->tail; i = next(i))
    1420:	21 85       	ldd	r18, Z+9	; 0x09
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	32 c0       	rjmp	.+100    	; 0x148a <rq_remove+0x6c>
	{
		if (queue->processes[i] == process)
    1426:	df 01       	movw	r26, r30
    1428:	a2 0f       	add	r26, r18
    142a:	b3 1f       	adc	r27, r19
    142c:	5c 91       	ld	r21, X
    142e:	56 13       	cpse	r21, r22
    1430:	24 c0       	rjmp	.+72     	; 0x147a <rq_remove+0x5c>
    1432:	18 c0       	rjmp	.+48     	; 0x1464 <rq_remove+0x46>
		{
			for (int j = i; j != queue->tail; j = next(j))
			{
				queue->processes[j] = queue->processes[next(j)];
    1434:	b9 01       	movw	r22, r18
    1436:	6f 5f       	subi	r22, 0xFF	; 255
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
    143a:	69 30       	cpi	r22, 0x09	; 9
    143c:	71 05       	cpc	r23, r1
    143e:	1c f0       	brlt	.+6      	; 0x1446 <rq_remove+0x28>
    1440:	a0 e0       	ldi	r26, 0x00	; 0
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <rq_remove+0x2a>
    1446:	db 01       	movw	r26, r22
    1448:	ae 0f       	add	r26, r30
    144a:	bf 1f       	adc	r27, r31
    144c:	5c 91       	ld	r21, X
    144e:	df 01       	movw	r26, r30
    1450:	a2 0f       	add	r26, r18
    1452:	b3 1f       	adc	r27, r19
    1454:	5c 93       	st	X, r21
{
	for (int i = queue->head; i != queue->tail; i = next(i))
	{
		if (queue->processes[i] == process)
		{
			for (int j = i; j != queue->tail; j = next(j))
    1456:	69 30       	cpi	r22, 0x09	; 9
    1458:	71 05       	cpc	r23, r1
    145a:	1c f0       	brlt	.+6      	; 0x1462 <rq_remove+0x44>
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <rq_remove+0x46>
    1462:	9b 01       	movw	r18, r22
    1464:	28 17       	cp	r18, r24
    1466:	39 07       	cpc	r19, r25
    1468:	29 f7       	brne	.-54     	; 0x1434 <rq_remove+0x16>
			{
				queue->processes[j] = queue->processes[next(j)];
			}
			queue->tail = prev(queue->tail);
    146a:	44 23       	and	r20, r20
    146c:	11 f0       	breq	.+4      	; 0x1472 <rq_remove+0x54>
    146e:	41 50       	subi	r20, 0x01	; 1
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <rq_remove+0x56>
    1472:	48 e0       	ldi	r20, 0x08	; 8
    1474:	42 87       	std	Z+10, r20	; 0x0a
			return true;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	08 95       	ret
 *  \param process The process that should be removed
 *  \return True if the process was removed, false if it wasn't found
 */
bool rq_remove(ready_queue_t *queue, process_id_t process)
{
	for (int i = queue->head; i != queue->tail; i = next(i))
    147a:	c9 01       	movw	r24, r18
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	89 30       	cpi	r24, 0x09	; 9
    1484:	91 05       	cpc	r25, r1
    1486:	0c f4       	brge	.+2      	; 0x148a <rq_remove+0x6c>
    1488:	9c 01       	movw	r18, r24
    148a:	42 85       	ldd	r20, Z+10	; 0x0a
    148c:	84 2f       	mov	r24, r20
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	28 17       	cp	r18, r24
    1492:	39 07       	cpc	r19, r25
    1494:	41 f6       	brne	.-112    	; 0x1426 <rq_remove+0x8>
			}
			queue->tail = prev(queue->tail);
			return true;
		}
	}
	return false;
    1496:	80 e0       	ldi	r24, 0x00	; 0
}
    1498:	08 95       	ret

0000149a <__vector_17>:
 */
void stopWatch_activateInterrupt(void)
{
    cbi(TCCR1B, CS10); // /8 prescaler	0
    sbi(TCCR1B, CS11); // /8 prescaler	1
    cbi(TCCR1B, CS12); // /8 prescaler	0
    149a:	1f 92       	push	r1
    149c:	0f 92       	push	r0
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	0f 92       	push	r0
    14a2:	11 24       	eor	r1, r1
    14a4:	8f 93       	push	r24
    14a6:	9f 93       	push	r25
    14a8:	af 93       	push	r26
    14aa:	bf 93       	push	r27
    14ac:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <stopWatch_time>
    14b0:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <stopWatch_time+0x1>
    14b4:	a0 91 23 03 	lds	r26, 0x0323	; 0x800323 <stopWatch_time+0x2>
    14b8:	b0 91 24 03 	lds	r27, 0x0324	; 0x800324 <stopWatch_time+0x3>
    14bc:	90 58       	subi	r25, 0x80	; 128
    14be:	af 4f       	sbci	r26, 0xFF	; 255
    14c0:	bf 4f       	sbci	r27, 0xFF	; 255
    14c2:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <stopWatch_time>
    14c6:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <stopWatch_time+0x1>
    14ca:	a0 93 23 03 	sts	0x0323, r26	; 0x800323 <stopWatch_time+0x2>
    14ce:	b0 93 24 03 	sts	0x0324, r27	; 0x800324 <stopWatch_time+0x3>
    14d2:	bf 91       	pop	r27
    14d4:	af 91       	pop	r26
    14d6:	9f 91       	pop	r25
    14d8:	8f 91       	pop	r24
    14da:	0f 90       	pop	r0
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	0f 90       	pop	r0
    14e0:	1f 90       	pop	r1
    14e2:	18 95       	reti

000014e4 <stopWatch_deactivateInterrupt>:
    14e4:	e1 e8       	ldi	r30, 0x81	; 129
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8e 7f       	andi	r24, 0xFE	; 254
    14ec:	80 83       	st	Z, r24
    14ee:	80 81       	ld	r24, Z
    14f0:	8d 7f       	andi	r24, 0xFD	; 253
    14f2:	80 83       	st	Z, r24
    14f4:	80 81       	ld	r24, Z
    14f6:	8b 7f       	andi	r24, 0xFB	; 251
    14f8:	80 83       	st	Z, r24
    14fa:	08 95       	ret

000014fc <stopWatch_init>:
 *  Initializes the stop watch
 */
void stopWatch_init(void)
{
    // Set Timer/Counter Control Registers to 0
    TCCR1A = 0x00; // Normal mode
    14fc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>

    // Set the Timer/Counter Register to 0
    TCNT1 = 0;
    1500:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
    1504:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

    // Set the compare match value to 1 (1 microsecond)
    OCR1A = 1;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    1510:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>

    // Enable the Output Compare Match A interrupt
    TIMSK1 |= (1 << TOIE1);
    1514:	ef e6       	ldi	r30, 0x6F	; 111
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	81 60       	ori	r24, 0x01	; 1
    151c:	80 83       	st	Z, r24

    stopWatch_deactivateInterrupt();
    151e:	e2 cf       	rjmp	.-60     	; 0x14e4 <stopWatch_deactivateInterrupt>
    1520:	08 95       	ret

00001522 <usb2_init>:
 *
 *  \param str  The string to be written (a pointer to the first character).
 */
void terminal_writeString(char *str)
{
    usb2_writeString(str);
    1522:	03 d4       	rcall	.+2054   	; 0x1d2a <os_enterCriticalSection>
    1524:	83 e0       	ldi	r24, 0x03	; 3
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
    152c:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
    1530:	e0 ed       	ldi	r30, 0xD0	; 208
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	8d 7f       	andi	r24, 0xFD	; 253
    1538:	80 83       	st	Z, r24
    153a:	e1 ed       	ldi	r30, 0xD1	; 209
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 61       	ori	r24, 0x10	; 16
    1542:	80 83       	st	Z, r24
    1544:	80 81       	ld	r24, Z
    1546:	88 60       	ori	r24, 0x08	; 8
    1548:	80 83       	st	Z, r24
    154a:	0e c4       	rjmp	.+2076   	; 0x1d68 <os_leaveCriticalSection>
    154c:	08 95       	ret

0000154e <usb2_write>:
    154e:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
    1552:	95 ff       	sbrs	r25, 5
    1554:	fc cf       	rjmp	.-8      	; 0x154e <usb2_write>
    1556:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    155a:	08 95       	ret

0000155c <usb2_writeProgString>:
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	8c 01       	movw	r16, r24
    1566:	e1 d3       	rcall	.+1986   	; 0x1d2a <os_enterCriticalSection>
    1568:	d0 e0       	ldi	r29, 0x00	; 0
    156a:	0d c0       	rjmp	.+26     	; 0x1586 <usb2_writeProgString+0x2a>
    156c:	f8 01       	movw	r30, r16
    156e:	ed 0f       	add	r30, r29
    1570:	f1 1d       	adc	r31, r1
    1572:	c4 91       	lpm	r28, Z
    1574:	ca 30       	cpi	r28, 0x0A	; 10
    1576:	11 f4       	brne	.+4      	; 0x157c <usb2_writeProgString+0x20>
    1578:	8d e0       	ldi	r24, 0x0D	; 13
    157a:	e9 df       	rcall	.-46     	; 0x154e <usb2_write>
    157c:	cc 23       	and	r28, r28
    157e:	29 f0       	breq	.+10     	; 0x158a <usb2_writeProgString+0x2e>
    1580:	8c 2f       	mov	r24, r28
    1582:	e5 df       	rcall	.-54     	; 0x154e <usb2_write>
    1584:	df 5f       	subi	r29, 0xFF	; 255
    1586:	df 3f       	cpi	r29, 0xFF	; 255
    1588:	89 f7       	brne	.-30     	; 0x156c <usb2_writeProgString+0x10>
    158a:	ee d3       	rcall	.+2012   	; 0x1d68 <os_leaveCriticalSection>
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	08 95       	ret

00001596 <terminal_init>:
    1596:	c5 df       	rcall	.-118    	; 0x1522 <usb2_init>
    1598:	81 e1       	ldi	r24, 0x11	; 17
    159a:	92 e0       	ldi	r25, 0x02	; 2
    159c:	90 93 77 05 	sts	0x0577, r25	; 0x800577 <__iob+0x3>
    15a0:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <__iob+0x2>
    15a4:	08 95       	ret

000015a6 <terminal_writeChar>:
    15a6:	cf 93       	push	r28
    15a8:	c8 2f       	mov	r28, r24
    15aa:	8a 30       	cpi	r24, 0x0A	; 10
    15ac:	11 f4       	brne	.+4      	; 0x15b2 <terminal_writeChar+0xc>
    15ae:	8d e0       	ldi	r24, 0x0D	; 13
    15b0:	ce df       	rcall	.-100    	; 0x154e <usb2_write>
    15b2:	8c 2f       	mov	r24, r28
    15b4:	cc df       	rcall	.-104    	; 0x154e <usb2_write>
    15b6:	cf 91       	pop	r28
    15b8:	08 95       	ret

000015ba <terminal_writeProgString>:
 *
 *  \param pstr  The string to be written (a pointer to the first character).
 */
void terminal_writeProgString(const char *pstr)
{
	usb2_writeProgString(pstr);
    15ba:	d0 cf       	rjmp	.-96     	; 0x155c <usb2_writeProgString>
    15bc:	08 95       	ret

000015be <stdio_put_char>:

//----------------------------------------------------------------------------
// Configuration of stdio.h
//----------------------------------------------------------------------------
int stdio_put_char(char c, FILE *stream)
{
    15be:	cf 93       	push	r28
    15c0:	c8 2f       	mov	r28, r24
    os_enterCriticalSection();
    15c2:	b3 d3       	rcall	.+1894   	; 0x1d2a <os_enterCriticalSection>

    terminal_writeChar(c);
    15c4:	8c 2f       	mov	r24, r28
    15c6:	ef df       	rcall	.-34     	; 0x15a6 <terminal_writeChar>
    if (c == '\n') { terminal_writeProgString(PSTR("        ")); }
    15c8:	ca 30       	cpi	r28, 0x0A	; 10
    15ca:	19 f4       	brne	.+6      	; 0x15d2 <stdio_put_char+0x14>
    15cc:	8d ef       	ldi	r24, 0xFD	; 253
    15ce:	93 e0       	ldi	r25, 0x03	; 3

    os_leaveCriticalSection();
    15d0:	f4 df       	rcall	.-24     	; 0x15ba <terminal_writeProgString>
    15d2:	ca d3       	rcall	.+1940   	; 0x1d68 <os_leaveCriticalSection>
    return 0;
}
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <terminal_newLine>:
/*!
 *  Write a new line
 */
void terminal_newLine()
{
    terminal_writeChar('\n');
    15dc:	8a e0       	ldi	r24, 0x0A	; 10
    15de:	e3 cf       	rjmp	.-58     	; 0x15a6 <terminal_writeChar>
    15e0:	08 95       	ret

000015e2 <terminal_log_printf_p>:
    os_leaveCriticalSection();
    return 0;
}

void terminal_log_printf_p(const char *prefix, const char *fmt, ...)
{
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    os_enterCriticalSection();
    15ee:	9d d3       	rcall	.+1850   	; 0x1d2a <os_enterCriticalSection>

    terminal_writeProgString(prefix);
    15f0:	88 85       	ldd	r24, Y+8	; 0x08
    15f2:	99 85       	ldd	r25, Y+9	; 0x09
    15f4:	e2 df       	rcall	.-60     	; 0x15ba <terminal_writeProgString>

    va_list args;
    va_start(args, fmt);
    stdout->flags |= __SPGM;
    15f6:	04 e7       	ldi	r16, 0x74	; 116
    15f8:	15 e0       	ldi	r17, 0x05	; 5
    15fa:	d8 01       	movw	r26, r16
    15fc:	12 96       	adiw	r26, 0x02	; 2
    15fe:	ed 91       	ld	r30, X+
    1600:	fc 91       	ld	r31, X
    1602:	13 97       	sbiw	r26, 0x03	; 3
    1604:	83 81       	ldd	r24, Z+3	; 0x03
    1606:	88 60       	ori	r24, 0x08	; 8
    1608:	83 83       	std	Z+3, r24	; 0x03
    vfprintf_P(stdout, fmt, args);
    160a:	ae 01       	movw	r20, r28
    160c:	44 5f       	subi	r20, 0xF4	; 244
    160e:	5f 4f       	sbci	r21, 0xFF	; 255
    1610:	6a 85       	ldd	r22, Y+10	; 0x0a
    1612:	7b 85       	ldd	r23, Y+11	; 0x0b
    1614:	12 96       	adiw	r26, 0x02	; 2
    1616:	8d 91       	ld	r24, X+
    1618:	9c 91       	ld	r25, X
    161a:	13 97       	sbiw	r26, 0x03	; 3
    161c:	0e 94 5d 14 	call	0x28ba	; 0x28ba <vfprintf_P>
    stdout->flags &= ~__SPGM;
    1620:	d8 01       	movw	r26, r16
    1622:	12 96       	adiw	r26, 0x02	; 2
    1624:	ed 91       	ld	r30, X+
    1626:	fc 91       	ld	r31, X
    1628:	13 97       	sbiw	r26, 0x03	; 3
    162a:	83 81       	ldd	r24, Z+3	; 0x03
    162c:	87 7f       	andi	r24, 0xF7	; 247
    va_end(args);

    terminal_newLine();
    162e:	83 83       	std	Z+3, r24	; 0x03
    1630:	d5 df       	rcall	.-86     	; 0x15dc <terminal_newLine>

    os_leaveCriticalSection();
    1632:	9a d3       	rcall	.+1844   	; 0x1d68 <os_leaveCriticalSection>
    1634:	df 91       	pop	r29
}
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	08 95       	ret

0000163e <__vector_25>:
    163e:	1f 92       	push	r1
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart3_putc(c);

}/* uart3_puts_p */
    1640:	0f 92       	push	r0
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	0f 92       	push	r0
    1646:	11 24       	eor	r1, r1
    1648:	0b b6       	in	r0, 0x3b	; 59
    164a:	0f 92       	push	r0
    164c:	2f 93       	push	r18
    164e:	8f 93       	push	r24
    1650:	9f 93       	push	r25
    1652:	ef 93       	push	r30
    1654:	ff 93       	push	r31
    1656:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    165a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    165e:	8c 71       	andi	r24, 0x1C	; 28
    1660:	e0 91 f6 04 	lds	r30, 0x04F6	; 0x8004f6 <UART0_RxHead>
    1664:	ef 5f       	subi	r30, 0xFF	; 255
    1666:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <UART0_RxTail>
    166a:	e9 17       	cp	r30, r25
    166c:	39 f0       	breq	.+14     	; 0x167c <__vector_25+0x3e>
    166e:	e0 93 f6 04 	sts	0x04F6, r30	; 0x8004f6 <UART0_RxHead>
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	e7 50       	subi	r30, 0x07	; 7
    1676:	fb 4f       	sbci	r31, 0xFB	; 251
    1678:	20 83       	st	Z, r18
    167a:	01 c0       	rjmp	.+2      	; 0x167e <__vector_25+0x40>
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	90 91 f4 04 	lds	r25, 0x04F4	; 0x8004f4 <UART0_LastRxError>
    1682:	89 2b       	or	r24, r25
    1684:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <UART0_LastRxError>
    1688:	ff 91       	pop	r31
    168a:	ef 91       	pop	r30
    168c:	9f 91       	pop	r25
    168e:	8f 91       	pop	r24
    1690:	2f 91       	pop	r18
    1692:	0f 90       	pop	r0
    1694:	0b be       	out	0x3b, r0	; 59
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f 90       	pop	r0
    169c:	1f 90       	pop	r1
    169e:	18 95       	reti

000016a0 <__vector_26>:
    16a0:	1f 92       	push	r1
    16a2:	0f 92       	push	r0
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	0f 92       	push	r0
    16a8:	11 24       	eor	r1, r1
    16aa:	0b b6       	in	r0, 0x3b	; 59
    16ac:	0f 92       	push	r0
    16ae:	8f 93       	push	r24
    16b0:	9f 93       	push	r25
    16b2:	ef 93       	push	r30
    16b4:	ff 93       	push	r31
    16b6:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <UART0_TxHead>
    16ba:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <UART0_TxTail>
    16be:	98 17       	cp	r25, r24
    16c0:	61 f0       	breq	.+24     	; 0x16da <__vector_26+0x3a>
    16c2:	e0 91 f7 04 	lds	r30, 0x04F7	; 0x8004f7 <UART0_TxTail>
    16c6:	ef 5f       	subi	r30, 0xFF	; 255
    16c8:	e0 93 f7 04 	sts	0x04F7, r30	; 0x8004f7 <UART0_TxTail>
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	e7 50       	subi	r30, 0x07	; 7
    16d0:	fb 4f       	sbci	r31, 0xFB	; 251
    16d2:	80 81       	ld	r24, Z
    16d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    16d8:	05 c0       	rjmp	.+10     	; 0x16e4 <__vector_26+0x44>
    16da:	e1 ec       	ldi	r30, 0xC1	; 193
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8f 7d       	andi	r24, 0xDF	; 223
    16e2:	80 83       	st	Z, r24
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	9f 91       	pop	r25
    16ea:	8f 91       	pop	r24
    16ec:	0f 90       	pop	r0
    16ee:	0b be       	out	0x3b, r0	; 59
    16f0:	0f 90       	pop	r0
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	0f 90       	pop	r0
    16f6:	1f 90       	pop	r1
    16f8:	18 95       	reti

000016fa <__vector_36>:
    16fa:	1f 92       	push	r1
    16fc:	0f 92       	push	r0
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	0f 92       	push	r0
    1702:	11 24       	eor	r1, r1
    1704:	0b b6       	in	r0, 0x3b	; 59
    1706:	0f 92       	push	r0
    1708:	2f 93       	push	r18
    170a:	8f 93       	push	r24
    170c:	9f 93       	push	r25
    170e:	ef 93       	push	r30
    1710:	ff 93       	push	r31
    1712:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    1716:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    171a:	8c 71       	andi	r24, 0x1C	; 28
    171c:	e0 91 b1 03 	lds	r30, 0x03B1	; 0x8003b1 <UART1_RxHead>
    1720:	ef 5f       	subi	r30, 0xFF	; 255
    1722:	90 91 b0 03 	lds	r25, 0x03B0	; 0x8003b0 <UART1_RxTail>
    1726:	e9 17       	cp	r30, r25
    1728:	39 f0       	breq	.+14     	; 0x1738 <__vector_36+0x3e>
    172a:	e0 93 b1 03 	sts	0x03B1, r30	; 0x8003b1 <UART1_RxHead>
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	ec 54       	subi	r30, 0x4C	; 76
    1732:	fc 4f       	sbci	r31, 0xFC	; 252
    1734:	20 83       	st	Z, r18
    1736:	01 c0       	rjmp	.+2      	; 0x173a <__vector_36+0x40>
    1738:	82 e0       	ldi	r24, 0x02	; 2
    173a:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <UART1_LastRxError>
    173e:	89 2b       	or	r24, r25
    1740:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <UART1_LastRxError>
    1744:	ff 91       	pop	r31
    1746:	ef 91       	pop	r30
    1748:	9f 91       	pop	r25
    174a:	8f 91       	pop	r24
    174c:	2f 91       	pop	r18
    174e:	0f 90       	pop	r0
    1750:	0b be       	out	0x3b, r0	; 59
    1752:	0f 90       	pop	r0
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	0f 90       	pop	r0
    1758:	1f 90       	pop	r1
    175a:	18 95       	reti

0000175c <__vector_37>:
    175c:	1f 92       	push	r1
    175e:	0f 92       	push	r0
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	0f 92       	push	r0
    1764:	11 24       	eor	r1, r1
    1766:	0b b6       	in	r0, 0x3b	; 59
    1768:	0f 92       	push	r0
    176a:	8f 93       	push	r24
    176c:	9f 93       	push	r25
    176e:	ef 93       	push	r30
    1770:	ff 93       	push	r31
    1772:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <UART1_TxHead>
    1776:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <UART1_TxTail>
    177a:	98 17       	cp	r25, r24
    177c:	69 f0       	breq	.+26     	; 0x1798 <__vector_37+0x3c>
    177e:	e0 91 b2 03 	lds	r30, 0x03B2	; 0x8003b2 <UART1_TxTail>
    1782:	ef 5f       	subi	r30, 0xFF	; 255
    1784:	ef 73       	andi	r30, 0x3F	; 63
    1786:	e0 93 b2 03 	sts	0x03B2, r30	; 0x8003b2 <UART1_TxTail>
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	ec 54       	subi	r30, 0x4C	; 76
    178e:	fb 4f       	sbci	r31, 0xFB	; 251
    1790:	80 81       	ld	r24, Z
    1792:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <__vector_37+0x46>
    1798:	e9 ec       	ldi	r30, 0xC9	; 201
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	8f 7d       	andi	r24, 0xDF	; 223
    17a0:	80 83       	st	Z, r24
    17a2:	ff 91       	pop	r31
    17a4:	ef 91       	pop	r30
    17a6:	9f 91       	pop	r25
    17a8:	8f 91       	pop	r24
    17aa:	0f 90       	pop	r0
    17ac:	0b be       	out	0x3b, r0	; 59
    17ae:	0f 90       	pop	r0
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	0f 90       	pop	r0
    17b4:	1f 90       	pop	r1
    17b6:	18 95       	reti

000017b8 <__vector_51>:
    17b8:	1f 92       	push	r1
    17ba:	0f 92       	push	r0
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	0f 92       	push	r0
    17c0:	11 24       	eor	r1, r1
    17c2:	0b b6       	in	r0, 0x3b	; 59
    17c4:	0f 92       	push	r0
    17c6:	2f 93       	push	r18
    17c8:	8f 93       	push	r24
    17ca:	9f 93       	push	r25
    17cc:	ef 93       	push	r30
    17ce:	ff 93       	push	r31
    17d0:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
    17d4:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    17d8:	8c 71       	andi	r24, 0x1C	; 28
    17da:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <UART2_RxHead>
    17de:	ef 5f       	subi	r30, 0xFF	; 255
    17e0:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <UART2_RxTail>
    17e4:	e9 17       	cp	r30, r25
    17e6:	39 f0       	breq	.+14     	; 0x17f6 <__vector_51+0x3e>
    17e8:	e0 93 6c 03 	sts	0x036C, r30	; 0x80036c <UART2_RxHead>
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	e1 59       	subi	r30, 0x91	; 145
    17f0:	fc 4f       	sbci	r31, 0xFC	; 252
    17f2:	20 83       	st	Z, r18
    17f4:	01 c0       	rjmp	.+2      	; 0x17f8 <__vector_51+0x40>
    17f6:	82 e0       	ldi	r24, 0x02	; 2
    17f8:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <UART2_LastRxError>
    17fc:	89 2b       	or	r24, r25
    17fe:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <UART2_LastRxError>
    1802:	ff 91       	pop	r31
    1804:	ef 91       	pop	r30
    1806:	9f 91       	pop	r25
    1808:	8f 91       	pop	r24
    180a:	2f 91       	pop	r18
    180c:	0f 90       	pop	r0
    180e:	0b be       	out	0x3b, r0	; 59
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti

0000181a <__vector_52>:
    181a:	1f 92       	push	r1
    181c:	0f 92       	push	r0
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	0f 92       	push	r0
    1822:	11 24       	eor	r1, r1
    1824:	0b b6       	in	r0, 0x3b	; 59
    1826:	0f 92       	push	r0
    1828:	8f 93       	push	r24
    182a:	9f 93       	push	r25
    182c:	ef 93       	push	r30
    182e:	ff 93       	push	r31
    1830:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <UART2_TxHead>
    1834:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <UART2_TxTail>
    1838:	98 17       	cp	r25, r24
    183a:	69 f0       	breq	.+26     	; 0x1856 <__vector_52+0x3c>
    183c:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <UART2_TxTail>
    1840:	ef 5f       	subi	r30, 0xFF	; 255
    1842:	ef 73       	andi	r30, 0x3F	; 63
    1844:	e0 93 6d 03 	sts	0x036D, r30	; 0x80036d <UART2_TxTail>
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	e1 59       	subi	r30, 0x91	; 145
    184c:	fc 4f       	sbci	r31, 0xFC	; 252
    184e:	80 81       	ld	r24, Z
    1850:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    1854:	05 c0       	rjmp	.+10     	; 0x1860 <__vector_52+0x46>
    1856:	e1 ed       	ldi	r30, 0xD1	; 209
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	8f 7d       	andi	r24, 0xDF	; 223
    185e:	80 83       	st	Z, r24
    1860:	ff 91       	pop	r31
    1862:	ef 91       	pop	r30
    1864:	9f 91       	pop	r25
    1866:	8f 91       	pop	r24
    1868:	0f 90       	pop	r0
    186a:	0b be       	out	0x3b, r0	; 59
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0
    1872:	1f 90       	pop	r1
    1874:	18 95       	reti

00001876 <__vector_54>:
    1876:	1f 92       	push	r1
    1878:	0f 92       	push	r0
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	0f 92       	push	r0
    187e:	11 24       	eor	r1, r1
    1880:	0b b6       	in	r0, 0x3b	; 59
    1882:	0f 92       	push	r0
    1884:	2f 93       	push	r18
    1886:	8f 93       	push	r24
    1888:	9f 93       	push	r25
    188a:	ef 93       	push	r30
    188c:	ff 93       	push	r31
    188e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
    1892:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    1896:	8c 71       	andi	r24, 0x1C	; 28
    1898:	e0 91 27 03 	lds	r30, 0x0327	; 0x800327 <UART3_RxHead>
    189c:	ef 5f       	subi	r30, 0xFF	; 255
    189e:	ef 73       	andi	r30, 0x3F	; 63
    18a0:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <UART3_RxTail>
    18a4:	e9 17       	cp	r30, r25
    18a6:	39 f0       	breq	.+14     	; 0x18b6 <__vector_54+0x40>
    18a8:	e0 93 27 03 	sts	0x0327, r30	; 0x800327 <UART3_RxHead>
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	e6 5d       	subi	r30, 0xD6	; 214
    18b0:	fc 4f       	sbci	r31, 0xFC	; 252
    18b2:	20 83       	st	Z, r18
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <__vector_54+0x42>
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <UART3_LastRxError>
    18bc:	89 2b       	or	r24, r25
    18be:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <UART3_LastRxError>
    18c2:	ff 91       	pop	r31
    18c4:	ef 91       	pop	r30
    18c6:	9f 91       	pop	r25
    18c8:	8f 91       	pop	r24
    18ca:	2f 91       	pop	r18
    18cc:	0f 90       	pop	r0
    18ce:	0b be       	out	0x3b, r0	; 59
    18d0:	0f 90       	pop	r0
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	0f 90       	pop	r0
    18d6:	1f 90       	pop	r1
    18d8:	18 95       	reti

000018da <__vector_55>:
    18da:	1f 92       	push	r1
    18dc:	0f 92       	push	r0
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	0f 92       	push	r0
    18e2:	11 24       	eor	r1, r1
    18e4:	0b b6       	in	r0, 0x3b	; 59
    18e6:	0f 92       	push	r0
    18e8:	8f 93       	push	r24
    18ea:	9f 93       	push	r25
    18ec:	ef 93       	push	r30
    18ee:	ff 93       	push	r31
    18f0:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <UART3_TxHead>
    18f4:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <UART3_TxTail>
    18f8:	98 17       	cp	r25, r24
    18fa:	61 f0       	breq	.+24     	; 0x1914 <__vector_55+0x3a>
    18fc:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <UART3_TxTail>
    1900:	ef 5f       	subi	r30, 0xFF	; 255
    1902:	e0 93 28 03 	sts	0x0328, r30	; 0x800328 <UART3_TxTail>
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	e6 59       	subi	r30, 0x96	; 150
    190a:	fc 4f       	sbci	r31, 0xFC	; 252
    190c:	80 81       	ld	r24, Z
    190e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    1912:	05 c0       	rjmp	.+10     	; 0x191e <__vector_55+0x44>
    1914:	e1 e3       	ldi	r30, 0x31	; 49
    1916:	f1 e0       	ldi	r31, 0x01	; 1
    1918:	80 81       	ld	r24, Z
    191a:	8f 7d       	andi	r24, 0xDF	; 223
    191c:	80 83       	st	Z, r24
    191e:	ff 91       	pop	r31
    1920:	ef 91       	pop	r30
    1922:	9f 91       	pop	r25
    1924:	8f 91       	pop	r24
    1926:	0f 90       	pop	r0
    1928:	0b be       	out	0x3b, r0	; 59
    192a:	0f 90       	pop	r0
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	0f 90       	pop	r0
    1930:	1f 90       	pop	r1
    1932:	18 95       	reti

00001934 <uart3_init>:
    1934:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <UART3_TxHead>
    1938:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <UART3_TxTail>
    193c:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <UART3_RxHead>
    1940:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <UART3_RxTail>
    1944:	28 2f       	mov	r18, r24
    1946:	39 2f       	mov	r19, r25
    1948:	33 23       	and	r19, r19
    194a:	1c f4       	brge	.+6      	; 0x1952 <uart3_init+0x1e>
    194c:	22 e0       	ldi	r18, 0x02	; 2
    194e:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
    1952:	90 78       	andi	r25, 0x80	; 128
    1954:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
    1958:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
    195c:	88 e9       	ldi	r24, 0x98	; 152
    195e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
    1962:	86 e0       	ldi	r24, 0x06	; 6
    1964:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>
    1968:	08 95       	ret

0000196a <uart3_getc>:
    196a:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <UART3_RxHead>
    196e:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <UART3_RxTail>
    1972:	98 17       	cp	r25, r24
    1974:	a1 f0       	breq	.+40     	; 0x199e <uart3_getc+0x34>
    1976:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <UART3_RxTail>
    197a:	8f 5f       	subi	r24, 0xFF	; 255
    197c:	8f 73       	andi	r24, 0x3F	; 63
    197e:	e8 2f       	mov	r30, r24
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	e6 5d       	subi	r30, 0xD6	; 214
    1984:	fc 4f       	sbci	r31, 0xFC	; 252
    1986:	20 81       	ld	r18, Z
    1988:	30 91 25 03 	lds	r19, 0x0325	; 0x800325 <UART3_LastRxError>
    198c:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <UART3_RxTail>
    1990:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <UART3_LastRxError>
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	93 2f       	mov	r25, r19
    1998:	82 0f       	add	r24, r18
    199a:	91 1d       	adc	r25, r1
    199c:	08 95       	ret
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	91 e0       	ldi	r25, 0x01	; 1
    19a2:	08 95       	ret

000019a4 <uart3_putc>:
    19a4:	20 91 29 03 	lds	r18, 0x0329	; 0x800329 <UART3_TxHead>
    19a8:	2f 5f       	subi	r18, 0xFF	; 255
    19aa:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <UART3_TxTail>
    19ae:	29 17       	cp	r18, r25
    19b0:	e1 f3       	breq	.-8      	; 0x19aa <uart3_putc+0x6>
    19b2:	e2 2f       	mov	r30, r18
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	e6 59       	subi	r30, 0x96	; 150
    19b8:	fc 4f       	sbci	r31, 0xFC	; 252
    19ba:	80 83       	st	Z, r24
    19bc:	20 93 29 03 	sts	0x0329, r18	; 0x800329 <UART3_TxHead>
    19c0:	e1 e3       	ldi	r30, 0x31	; 49
    19c2:	f1 e0       	ldi	r31, 0x01	; 1
    19c4:	80 81       	ld	r24, Z
    19c6:	80 62       	ori	r24, 0x20	; 32
    19c8:	80 83       	st	Z, r24
    19ca:	08 95       	ret

000019cc <uart3_getrxcount>:
/*
 * Returns current filling of the buffer in byte
 */
uint16_t uart3_getrxcount()
{
	return BUFFER_FILLING(UART3_RxHead, UART3_RxTail, UART3_RX_BUFFER_SIZE);
    19cc:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <UART3_RxTail>
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <UART3_RxHead>
    19d6:	90 e0       	ldi	r25, 0x00	; 0
#define cbi(x, b) (x &= ~(1 << (b)))
#endif

inline uint16_t BUFFER_FILLING(uint16_t head, uint16_t tail, uint16_t size)
{
	if (head >= tail) { return head - tail; }
    19d8:	82 17       	cp	r24, r18
    19da:	93 07       	cpc	r25, r19
    19dc:	18 f0       	brcs	.+6      	; 0x19e4 <uart3_getrxcount+0x18>
    19de:	82 1b       	sub	r24, r18
    19e0:	93 0b       	sbc	r25, r19
    19e2:	08 95       	ret
	return size - tail + head;
    19e4:	40 e4       	ldi	r20, 0x40	; 64
    19e6:	50 e0       	ldi	r21, 0x00	; 0
    19e8:	ba 01       	movw	r22, r20
    19ea:	62 1b       	sub	r22, r18
    19ec:	73 0b       	sbc	r23, r19
    19ee:	86 0f       	add	r24, r22
    19f0:	97 1f       	adc	r25, r23
 * Returns current filling of the buffer in byte
 */
uint16_t uart3_getrxcount()
{
	return BUFFER_FILLING(UART3_RxHead, UART3_RxTail, UART3_RX_BUFFER_SIZE);
}
    19f2:	08 95       	ret

000019f4 <__vector_21>:

/*!
 *  ISR that counts the number of occurred Timer 0 compare matches for the getSystemTime function mainly used in delayMs.
 */
ISR(TIMER0_COMPA_vect)
{
    19f4:	1f 92       	push	r1
    19f6:	0f 92       	push	r0
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	0f 92       	push	r0
    19fc:	11 24       	eor	r1, r1
    19fe:	8f 93       	push	r24
    1a00:	9f 93       	push	r25
    1a02:	af 93       	push	r26
    1a04:	bf 93       	push	r27
	++os_coarseSystemTime;
    1a06:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <os_coarseSystemTime>
    1a0a:	90 91 fe 04 	lds	r25, 0x04FE	; 0x8004fe <os_coarseSystemTime+0x1>
    1a0e:	a0 91 ff 04 	lds	r26, 0x04FF	; 0x8004ff <os_coarseSystemTime+0x2>
    1a12:	b0 91 00 05 	lds	r27, 0x0500	; 0x800500 <os_coarseSystemTime+0x3>
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	a1 1d       	adc	r26, r1
    1a1a:	b1 1d       	adc	r27, r1
    1a1c:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <os_coarseSystemTime>
    1a20:	90 93 fe 04 	sts	0x04FE, r25	; 0x8004fe <os_coarseSystemTime+0x1>
    1a24:	a0 93 ff 04 	sts	0x04FF, r26	; 0x8004ff <os_coarseSystemTime+0x2>
    1a28:	b0 93 00 05 	sts	0x0500, r27	; 0x800500 <os_coarseSystemTime+0x3>
}
    1a2c:	bf 91       	pop	r27
    1a2e:	af 91       	pop	r26
    1a30:	9f 91       	pop	r25
    1a32:	8f 91       	pop	r24
    1a34:	0f 90       	pop	r0
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	0f 90       	pop	r0
    1a3a:	1f 90       	pop	r1
    1a3c:	18 95       	reti

00001a3e <initSystemTime>:
/*!
 *  Initializes Timer 0 as system clock
 */
void initSystemTime(void)
{
	os_coarseSystemTime = 0;
    1a3e:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <os_coarseSystemTime>
    1a42:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <os_coarseSystemTime+0x1>
    1a46:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <os_coarseSystemTime+0x2>
    1a4a:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <os_coarseSystemTime+0x3>

	// Init timer 0 with prescaler 64
	sbi(TCCR0B, CS00);
    1a4e:	85 b5       	in	r24, 0x25	; 37
    1a50:	81 60       	ori	r24, 0x01	; 1
    1a52:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS01);
    1a54:	85 b5       	in	r24, 0x25	; 37
    1a56:	82 60       	ori	r24, 0x02	; 2
    1a58:	85 bd       	out	0x25, r24	; 37
	cbi(TCCR0B, CS02);
    1a5a:	85 b5       	in	r24, 0x25	; 37
    1a5c:	8b 7f       	andi	r24, 0xFB	; 251
    1a5e:	85 bd       	out	0x25, r24	; 37

	// CTC mode
	sbi(TCCR0A, WGM01);
    1a60:	84 b5       	in	r24, 0x24	; 36
    1a62:	82 60       	ori	r24, 0x02	; 2
    1a64:	84 bd       	out	0x24, r24	; 36

	// Compare Match after 61 timer ticks = 1ms
	OCR0A = TIMER_OCR;
    1a66:	89 ef       	ldi	r24, 0xF9	; 249
    1a68:	87 bd       	out	0x27, r24	; 39
	sbi(TIMSK0, OCIE0A);
    1a6a:	ee e6       	ldi	r30, 0x6E	; 110
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	82 60       	ori	r24, 0x02	; 2
    1a72:	80 83       	st	Z, r24
    1a74:	08 95       	ret

00001a76 <getSystemTime_ms>:
 */
time_t getSystemTime_ms(void)
{
	// In case interrupts are off we check the OCF manually, clear it and
	// increment os_coarseSystemTime to avoid freezing the system time
	if (!gbi(SREG, 7) && gbi(TIFR0, OCF0A))
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	07 fc       	sbrc	r0, 7
    1a7a:	18 c0       	rjmp	.+48     	; 0x1aac <getSystemTime_ms+0x36>
    1a7c:	a9 9b       	sbis	0x15, 1	; 21
    1a7e:	16 c0       	rjmp	.+44     	; 0x1aac <getSystemTime_ms+0x36>
	{
		sbi(TIFR0, OCF0A);
    1a80:	85 b3       	in	r24, 0x15	; 21
    1a82:	82 60       	ori	r24, 0x02	; 2
    1a84:	85 bb       	out	0x15, r24	; 21
		++os_coarseSystemTime;
    1a86:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <os_coarseSystemTime>
    1a8a:	90 91 fe 04 	lds	r25, 0x04FE	; 0x8004fe <os_coarseSystemTime+0x1>
    1a8e:	a0 91 ff 04 	lds	r26, 0x04FF	; 0x8004ff <os_coarseSystemTime+0x2>
    1a92:	b0 91 00 05 	lds	r27, 0x0500	; 0x800500 <os_coarseSystemTime+0x3>
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	a1 1d       	adc	r26, r1
    1a9a:	b1 1d       	adc	r27, r1
    1a9c:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <os_coarseSystemTime>
    1aa0:	90 93 fe 04 	sts	0x04FE, r25	; 0x8004fe <os_coarseSystemTime+0x1>
    1aa4:	a0 93 ff 04 	sts	0x04FF, r26	; 0x8004ff <os_coarseSystemTime+0x2>
    1aa8:	b0 93 00 05 	sts	0x0500, r27	; 0x800500 <os_coarseSystemTime+0x3>
	}

	// Synchronize access to os_coarseSystemTime
	uint8_t ie = gbi(SREG, 7);
    1aac:	8f b7       	in	r24, 0x3f	; 63
    1aae:	28 2f       	mov	r18, r24
    1ab0:	22 1f       	adc	r18, r18
    1ab2:	22 27       	eor	r18, r18
    1ab4:	22 1f       	adc	r18, r18
	cli();
    1ab6:	f8 94       	cli
	time_t t = os_coarseSystemTime;
    1ab8:	60 91 fd 04 	lds	r22, 0x04FD	; 0x8004fd <os_coarseSystemTime>
    1abc:	70 91 fe 04 	lds	r23, 0x04FE	; 0x8004fe <os_coarseSystemTime+0x1>
    1ac0:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <os_coarseSystemTime+0x2>
    1ac4:	90 91 00 05 	lds	r25, 0x0500	; 0x800500 <os_coarseSystemTime+0x3>
	if (ie)
    1ac8:	22 23       	and	r18, r18
    1aca:	09 f0       	breq	.+2      	; 0x1ace <getSystemTime_ms+0x58>
	{
		sei();
    1acc:	78 94       	sei
	}

	return t;
}
    1ace:	08 95       	ret

00001ad0 <delayMs>:
 *  in order to get the destination time. Then, we wait until a temporary variable reaches this value.
 *
 *  \param ms  The time to be waited in milliseconds (max. 65535)
 */
void delayMs(uint16_t ms)
{
    1ad0:	cf 92       	push	r12
    1ad2:	df 92       	push	r13
    1ad4:	ef 92       	push	r14
    1ad6:	ff 92       	push	r15
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
#ifdef RUNNING_WITH_SIMULATOR
	return;
#endif

	if (ms == 0)
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	d1 f0       	breq	.+52     	; 0x1b18 <delayMs+0x48>
    1ae4:	ec 01       	movw	r28, r24
	{
		return;
	}
	time_t startTime = getSystemTime_ms();
    1ae6:	c7 df       	rcall	.-114    	; 0x1a76 <getSystemTime_ms>
    1ae8:	6b 01       	movw	r12, r22
    1aea:	7c 01       	movw	r14, r24

	while (getSystemTime_ms() - startTime < ms)
    1aec:	06 c0       	rjmp	.+12     	; 0x1afa <delayMs+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1aee:	8f e8       	ldi	r24, 0x8F	; 143
    1af0:	91 e0       	ldi	r25, 0x01	; 1
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <delayMs+0x22>
    1af6:	00 c0       	rjmp	.+0      	; 0x1af8 <delayMs+0x28>
    1af8:	00 00       	nop
    1afa:	bd df       	rcall	.-134    	; 0x1a76 <getSystemTime_ms>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	8c 19       	sub	r24, r12
    1b02:	9d 09       	sbc	r25, r13
    1b04:	ae 09       	sbc	r26, r14
    1b06:	bf 09       	sbc	r27, r15
    1b08:	8e 01       	movw	r16, r28
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	80 17       	cp	r24, r16
    1b10:	91 07       	cpc	r25, r17
    1b12:	a2 07       	cpc	r26, r18
    1b14:	b3 07       	cpc	r27, r19
    1b16:	58 f3       	brcs	.-42     	; 0x1aee <delayMs+0x1e>
	{
		_delay_us(100);
	}
}
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	ff 90       	pop	r15
    1b22:	ef 90       	pop	r14
    1b24:	df 90       	pop	r13
    1b26:	cf 90       	pop	r12
    1b28:	08 95       	ret

00001b2a <assertPstr>:
 *
 *  \param exp The boolean expression that is expected to be true.
 *  \param errormsg The string that shall be shown as an error message if the given expression is false as progmem string.
 */
void assertPstr(bool exp, const char *errormsg, ...)
{
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	9f 81       	ldd	r25, Y+7	; 0x07
    1b34:	28 85       	ldd	r18, Y+8	; 0x08
	if (!exp)
    1b36:	8e 81       	ldd	r24, Y+6	; 0x06
    1b38:	81 11       	cpse	r24, r1
    1b3a:	0c c0       	rjmp	.+24     	; 0x1b54 <assertPstr+0x2a>
	{
		va_list args;
		va_start(args, errormsg);
    1b3c:	ae 01       	movw	r20, r28
    1b3e:	47 5f       	subi	r20, 0xF7	; 247
    1b40:	5f 4f       	sbci	r21, 0xFF	; 255
		os_errorPstr(errormsg, args);
    1b42:	5f 93       	push	r21
    1b44:	4f 93       	push	r20
    1b46:	2f 93       	push	r18
    1b48:	9f 93       	push	r25
    1b4a:	6a d0       	rcall	.+212    	; 0x1c20 <os_errorPstr>
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
		va_end(args);
	}
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	08 95       	ret

00001b5a <main>:
//! Program's entry point
int main(void)
{
	// Give the operating system a chance to initialize its private data.
	// This also registers and starts the idle program.
	os_init();
    1b5a:	21 d0       	rcall	.+66     	; 0x1b9e <os_init>

	// os_init shows a boot message
	// Wait and clear the LCD
	delayMs(600);
    1b5c:	88 e5       	ldi	r24, 0x58	; 88
    1b5e:	92 e0       	ldi	r25, 0x02	; 2
	lcd_clear();
    1b60:	b7 df       	rcall	.-146    	; 0x1ad0 <delayMs>
    1b62:	05 db       	rcall	.-2550   	; 0x116e <lcd_clear>

	// Start the operating system
	os_startScheduler();
    1b64:	35 d1       	rcall	.+618    	; 0x1dd0 <os_startScheduler>
    1b66:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	08 95       	ret

00001b6c <os_initTimer>:
    1b6c:	e0 eb       	ldi	r30, 0xB0	; 176
 *  Initializes the used timers.
 */
void os_initTimer(void)
{
	// Init timer 2 (Scheduler)
	sbi(TCCR2A, WGM21); // Clear on timer compare match
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	82 60       	ori	r24, 0x02	; 2
    1b74:	80 83       	st	Z, r24

	sbi(TCCR2B, CS22);	 // Prescaler 1024  1
    1b76:	e1 eb       	ldi	r30, 0xB1	; 177
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	84 60       	ori	r24, 0x04	; 4
    1b7e:	80 83       	st	Z, r24
	sbi(TCCR2B, CS21);	 // Prescaler 1024  1
    1b80:	80 81       	ld	r24, Z
    1b82:	82 60       	ori	r24, 0x02	; 2
    1b84:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20);	 // Prescaler 1024  1
    1b86:	80 81       	ld	r24, Z
    1b88:	81 60       	ori	r24, 0x01	; 1
    1b8a:	80 83       	st	Z, r24
	sbi(TIMSK2, OCIE2A); // Enable interrupt
    1b8c:	e0 e7       	ldi	r30, 0x70	; 112
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	82 60       	ori	r24, 0x02	; 2
    1b94:	80 83       	st	Z, r24
	OCR2A = 60;
    1b96:	8c e3       	ldi	r24, 0x3C	; 60
    1b98:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
    1b9c:	08 95       	ret

00001b9e <os_init>:
 *  Readies stack, scheduler and heap for first use. Additionally, the LCD is initialized. In order to do those tasks,
 *  it calls the subfunction os_initScheduler().
 */
void os_init()
{
	initSystemTime();
    1b9e:	4f df       	rcall	.-354    	; 0x1a3e <initSystemTime>
	os_initTimer();
    1ba0:	e5 df       	rcall	.-54     	; 0x1b6c <os_initTimer>
	stopWatch_init();
    1ba2:	ac dc       	rcall	.-1704   	; 0x14fc <stopWatch_init>

	// Init LCD display
	lcd_init();
    1ba4:	9f da       	rcall	.-2754   	; 0x10e4 <lcd_init>
	terminal_init();
    1ba6:	f7 dc       	rcall	.-1554   	; 0x1596 <terminal_init>

	// display on
	lcd_displayOn();
    1ba8:	ef da       	rcall	.-2594   	; 0x1188 <lcd_displayOn>
    1baa:	e1 da       	rcall	.-2622   	; 0x116e <lcd_clear>
	lcd_clear();
    1bac:	8b ed       	ldi	r24, 0xDB	; 219

	lcd_writeProgString(PSTR("Booting DEOS ..."));
    1bae:	94 e0       	ldi	r25, 0x04	; 4
    1bb0:	7c db       	rcall	.-2312   	; 0x12aa <lcd_writeProgString>
    1bb2:	85 ea       	ldi	r24, 0xA5	; 165
    1bb4:	94 e0       	ldi	r25, 0x04	; 4

	terminal_writeProgString(PSTR("\n\n##################################################\n"));
    1bb6:	01 dd       	rcall	.-1534   	; 0x15ba <terminal_writeProgString>
    1bb8:	84 e9       	ldi	r24, 0x94	; 148
    1bba:	94 e0       	ldi	r25, 0x04	; 4
	INFO("Booting DEOS ...");
    1bbc:	9f 93       	push	r25
    1bbe:	8f 93       	push	r24
    1bc0:	8b e8       	ldi	r24, 0x8B	; 139
    1bc2:	94 e0       	ldi	r25, 0x04	; 4
    1bc4:	9f 93       	push	r25
    1bc6:	8f 93       	push	r24
    1bc8:	0c dd       	rcall	.-1512   	; 0x15e2 <terminal_log_printf_p>
    1bca:	83 e0       	ldi	r24, 0x03	; 3
    1bcc:	8f 93       	push	r24
    1bce:	88 ee       	ldi	r24, 0xE8	; 232
	INFO("Used global vars: %d/%d bytes", (uint16_t)&__heap_start - AVR_SRAM_START, STACK_OFFSET);
    1bd0:	8f 93       	push	r24
    1bd2:	8a e7       	ldi	r24, 0x7A	; 122
    1bd4:	93 e0       	ldi	r25, 0x03	; 3
    1bd6:	9f 93       	push	r25
    1bd8:	8f 93       	push	r24
    1bda:	8d e6       	ldi	r24, 0x6D	; 109
    1bdc:	94 e0       	ldi	r25, 0x04	; 4
    1bde:	9f 93       	push	r25
    1be0:	8f 93       	push	r24
    1be2:	84 e6       	ldi	r24, 0x64	; 100
    1be4:	94 e0       	ldi	r25, 0x04	; 4
    1be6:	9f 93       	push	r25
    1be8:	8f 93       	push	r24
    1bea:	fb dc       	rcall	.-1546   	; 0x15e2 <terminal_log_printf_p>
    1bec:	80 e3       	ldi	r24, 0x30	; 48
    1bee:	94 e0       	ldi	r25, 0x04	; 4
	terminal_writeProgString(PSTR("--------------------------------------------------\n"));
    1bf0:	e4 dc       	rcall	.-1592   	; 0x15ba <terminal_writeProgString>
    1bf2:	8f e0       	ldi	r24, 0x0F	; 15
    1bf4:	94 e0       	ldi	r25, 0x04	; 4
    1bf6:	9f 93       	push	r25

	// Security check if the stack crushes global variables
	assert((uint16_t)&__heap_start < AVR_SRAM_START + STACK_OFFSET, " Stack collides with global vars");
    1bf8:	8f 93       	push	r24
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	2a e7       	ldi	r18, 0x7A	; 122
    1bfe:	35 e0       	ldi	r19, 0x05	; 5
    1c00:	28 3e       	cpi	r18, 0xE8	; 232
    1c02:	35 40       	sbci	r19, 0x05	; 5
    1c04:	08 f0       	brcs	.+2      	; 0x1c08 <os_init+0x6a>
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	8f 93       	push	r24
    1c0a:	8f df       	rcall	.-226    	; 0x1b2a <assertPstr>
    1c0c:	f4 d1       	rcall	.+1000   	; 0x1ff6 <os_initScheduler>
    1c0e:	8d b7       	in	r24, 0x3d	; 61

	os_initScheduler();
    1c10:	9e b7       	in	r25, 0x3e	; 62
    1c12:	0f 96       	adiw	r24, 0x0f	; 15
}
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	9e bf       	out	0x3e, r25	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	8d bf       	out	0x3d, r24	; 61
    1c1e:	08 95       	ret

00001c20 <os_errorPstr>:
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	cd b7       	in	r28, 0x3d	; 61
 *
 *  \param msg The error to be displayed as progmem string
 *  \param ... Formatting arguments for the error message
 */
void os_errorPstr(const char *msg, ...)
{
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	1e 81       	ldd	r17, Y+6	; 0x06
    1c2a:	0f 81       	ldd	r16, Y+7	; 0x07
	cli();
    1c2c:	f8 94       	cli

	// Make sure we have enough stack left for sure (we can mess with it because we won't go out of this function)
	SP = BOTTOM_OF_MAIN_STACK;
    1c2e:	8f ef       	ldi	r24, 0xFF	; 255
    1c30:	91 e2       	ldi	r25, 0x21	; 33
    1c32:	9e bf       	out	0x3e, r25	; 62
    1c34:	8d bf       	out	0x3d, r24	; 61

	// Clear display and write error message
	lcd_clear();
    1c36:	9b da       	rcall	.-2762   	; 0x116e <lcd_clear>

	// Print error message to lcd (variadic arguments)
	va_list args;
	va_start(args, msg);
    1c38:	ce 01       	movw	r24, r28
    1c3a:	08 96       	adiw	r24, 0x08	; 8
	lcd_printf_p(msg, args);
    1c3c:	9f 93       	push	r25
    1c3e:	8f 93       	push	r24
    1c40:	0f 93       	push	r16
    1c42:	1f 93       	push	r17
    1c44:	12 da       	rcall	.-3036   	; 0x106a <lcd_printf_p>
	va_end(args);

	// Print error message to terminal (variadic arguments)
	va_start(args, msg);
    1c46:	ce 01       	movw	r24, r28
    1c48:	08 96       	adiw	r24, 0x08	; 8
	terminal_log_printf_p(PSTR("[ERROR] "), msg, args);
    1c4a:	9f 93       	push	r25
    1c4c:	8f 93       	push	r24
    1c4e:	0f 93       	push	r16
    1c50:	1f 93       	push	r17
    1c52:	86 e0       	ldi	r24, 0x06	; 6
    1c54:	94 e0       	ldi	r25, 0x04	; 4
    1c56:	9f 93       	push	r25
    1c58:	8f 93       	push	r24
    1c5a:	c3 dc       	rcall	.-1658   	; 0x15e2 <terminal_log_printf_p>
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
	va_end(args);

	// Catch system in this infinite loop and play a small animation to indicate an error
	while (1)
	{
		lcd_displayOn();
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	90 da       	rcall	.-2784   	; 0x1188 <lcd_displayOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c68:	9f ef       	ldi	r25, 0xFF	; 255
    1c6a:	2d e3       	ldi	r18, 0x3D	; 61
    1c6c:	89 e4       	ldi	r24, 0x49	; 73
    1c6e:	91 50       	subi	r25, 0x01	; 1
    1c70:	20 40       	sbci	r18, 0x00	; 0
    1c72:	80 40       	sbci	r24, 0x00	; 0
    1c74:	e1 f7       	brne	.-8      	; 0x1c6e <os_errorPstr+0x4e>
    1c76:	00 c0       	rjmp	.+0      	; 0x1c78 <os_errorPstr+0x58>
		_delay_ms(1500);
		lcd_displayOff();
    1c78:	00 00       	nop
    1c7a:	89 da       	rcall	.-2798   	; 0x118e <lcd_displayOff>
    1c7c:	9f ef       	ldi	r25, 0xFF	; 255
    1c7e:	21 ee       	ldi	r18, 0xE1	; 225
    1c80:	84 e0       	ldi	r24, 0x04	; 4
    1c82:	91 50       	subi	r25, 0x01	; 1
    1c84:	20 40       	sbci	r18, 0x00	; 0
    1c86:	80 40       	sbci	r24, 0x00	; 0
    1c88:	e1 f7       	brne	.-8      	; 0x1c82 <os_errorPstr+0x62>
    1c8a:	00 c0       	rjmp	.+0      	; 0x1c8c <os_errorPstr+0x6c>
    1c8c:	00 00       	nop
    1c8e:	eb cf       	rjmp	.-42     	; 0x1c66 <os_errorPstr+0x46>

00001c90 <prog0>:

/*!
 *  This is the idle program. The idle process owns all the memory
 *  and processor time no other process wants to have.
 */
PROGRAM(0, AUTOSTART)
    1c90:	c0 e0       	ldi	r28, 0x00	; 0
    1c92:	d0 e0       	ldi	r29, 0x00	; 0
    1c94:	06 c0       	rjmp	.+12     	; 0x1ca2 <prog0+0x12>
    1c96:	8e e2       	ldi	r24, 0x2E	; 46
    1c98:	b3 da       	rcall	.-2714   	; 0x1200 <lcd_writeChar>
    1c9a:	84 e6       	ldi	r24, 0x64	; 100
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	18 df       	rcall	.-464    	; 0x1ad0 <delayMs>
    1ca0:	21 96       	adiw	r28, 0x01	; 1
    1ca2:	c3 30       	cpi	r28, 0x03	; 3
    1ca4:	d1 05       	cpc	r29, r1
    1ca6:	bc f3       	brlt	.-18     	; 0x1c96 <prog0+0x6>
    1ca8:	62 da       	rcall	.-2876   	; 0x116e <lcd_clear>
    1caa:	84 e6       	ldi	r24, 0x64	; 100
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	10 df       	rcall	.-480    	; 0x1ad0 <delayMs>
    1cb0:	ef cf       	rjmp	.-34     	; 0x1c90 <prog0>

00001cb2 <addressOfProgram>:
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	99 0f       	add	r25, r25
    1cb6:	88 0b       	sbc	r24, r24
    1cb8:	99 0b       	sbc	r25, r25
    1cba:	08 95       	ret

00001cbc <os_checkAutostartProgram>:
    1cbc:	21 e0       	ldi	r18, 0x01	; 1
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <os_checkAutostartProgram+0xa>
    1cc2:	22 0f       	add	r18, r18
    1cc4:	33 1f       	adc	r19, r19
    1cc6:	8a 95       	dec	r24
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <os_checkAutostartProgram+0x6>
    1cca:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <os_autostart>
    1cce:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <os_autostart+0x1>
    1cd2:	28 23       	and	r18, r24
    1cd4:	39 23       	and	r19, r25
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	23 2b       	or	r18, r19
    1cda:	09 f4       	brne	.+2      	; 0x1cde <os_checkAutostartProgram+0x22>
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	08 95       	ret

00001ce0 <os_lookupProgramFunction>:
    1ce0:	80 31       	cpi	r24, 0x10	; 16
    1ce2:	48 f4       	brcc	.+18     	; 0x1cf6 <os_lookupProgramFunction+0x16>
    1ce4:	e8 2f       	mov	r30, r24
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	ee 0f       	add	r30, r30
    1cea:	ff 1f       	adc	r31, r31
    1cec:	ef 5c       	subi	r30, 0xCF	; 207
    1cee:	fa 4f       	sbci	r31, 0xFA	; 250
    1cf0:	80 81       	ld	r24, Z
    1cf2:	91 81       	ldd	r25, Z+1	; 0x01
    1cf4:	08 95       	ret
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	08 95       	ret

00001cfc <os_getProcessSlot>:
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9c 01       	movw	r18, r24
    1d00:	22 0f       	add	r18, r18
    1d02:	33 1f       	adc	r19, r19
    1d04:	82 0f       	add	r24, r18
    1d06:	93 1f       	adc	r25, r19
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	8f 5f       	subi	r24, 0xFF	; 255
    1d0e:	9a 4f       	sbci	r25, 0xFA	; 250
    1d10:	08 95       	ret

00001d12 <os_getProgramSlot>:
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	88 0f       	add	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	8f 5c       	subi	r24, 0xCF	; 207
    1d1a:	9a 4f       	sbci	r25, 0xFA	; 250
    1d1c:	08 95       	ret

00001d1e <os_getCurrentProc>:
    1d1e:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <currentProc>
    1d22:	08 95       	ret

00001d24 <os_getSchedulingStrategy>:
    1d24:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <currSchedStrat>
    1d28:	08 95       	ret

00001d2a <os_enterCriticalSection>:
    1d2a:	cf 93       	push	r28
    1d2c:	cf b7       	in	r28, 0x3f	; 63
    1d2e:	cc 1f       	adc	r28, r28
    1d30:	cc 27       	eor	r28, r28
    1d32:	cc 1f       	adc	r28, r28
    1d34:	f8 94       	cli
    1d36:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <criticalSectionCount>
    1d3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1d3c:	41 f4       	brne	.+16     	; 0x1d4e <os_enterCriticalSection+0x24>
    1d3e:	8d ec       	ldi	r24, 0xCD	; 205
    1d40:	95 e0       	ldi	r25, 0x05	; 5
    1d42:	9f 93       	push	r25
    1d44:	8f 93       	push	r24
    1d46:	6c df       	rcall	.-296    	; 0x1c20 <os_errorPstr>
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	03 c0       	rjmp	.+6      	; 0x1d54 <os_enterCriticalSection+0x2a>
    1d4e:	8f 5f       	subi	r24, 0xFF	; 255
    1d50:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <criticalSectionCount>
    1d54:	e0 e7       	ldi	r30, 0x70	; 112
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	8d 7f       	andi	r24, 0xFD	; 253
    1d5c:	80 83       	st	Z, r24
    1d5e:	cc 23       	and	r28, r28
    1d60:	09 f0       	breq	.+2      	; 0x1d64 <os_enterCriticalSection+0x3a>
    1d62:	78 94       	sei
    1d64:	cf 91       	pop	r28
    1d66:	08 95       	ret

00001d68 <os_leaveCriticalSection>:
    1d68:	cf 93       	push	r28
    1d6a:	cf b7       	in	r28, 0x3f	; 63
    1d6c:	cc 1f       	adc	r28, r28
    1d6e:	cc 27       	eor	r28, r28
    1d70:	cc 1f       	adc	r28, r28
    1d72:	f8 94       	cli
    1d74:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <criticalSectionCount>
    1d78:	81 11       	cpse	r24, r1
    1d7a:	08 c0       	rjmp	.+16     	; 0x1d8c <os_leaveCriticalSection+0x24>
    1d7c:	83 eb       	ldi	r24, 0xB3	; 179
    1d7e:	95 e0       	ldi	r25, 0x05	; 5
    1d80:	9f 93       	push	r25
    1d82:	8f 93       	push	r24
    1d84:	4d df       	rcall	.-358    	; 0x1c20 <os_errorPstr>
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	03 c0       	rjmp	.+6      	; 0x1d92 <os_leaveCriticalSection+0x2a>
    1d8c:	81 50       	subi	r24, 0x01	; 1
    1d8e:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <criticalSectionCount>
    1d92:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <criticalSectionCount>
    1d96:	81 11       	cpse	r24, r1
    1d98:	05 c0       	rjmp	.+10     	; 0x1da4 <os_leaveCriticalSection+0x3c>
    1d9a:	e0 e7       	ldi	r30, 0x70	; 112
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	82 60       	ori	r24, 0x02	; 2
    1da2:	80 83       	st	Z, r24
    1da4:	cc 23       	and	r28, r28
    1da6:	09 f0       	breq	.+2      	; 0x1daa <os_leaveCriticalSection+0x42>
    1da8:	78 94       	sei
    1daa:	cf 91       	pop	r28
    1dac:	08 95       	ret

00001dae <registerProgram0>:
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	b0 df       	rcall	.-160    	; 0x1d12 <os_getProgramSlot>
    1db2:	28 e4       	ldi	r18, 0x48	; 72
    1db4:	3e e0       	ldi	r19, 0x0E	; 14
    1db6:	fc 01       	movw	r30, r24
    1db8:	31 83       	std	Z+1, r19	; 0x01
    1dba:	20 83       	st	Z, r18
    1dbc:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <os_autostart>
    1dc0:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <os_autostart+0x1>
    1dc4:	81 60       	ori	r24, 0x01	; 1
    1dc6:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <os_autostart+0x1>
    1dca:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <os_autostart>
    1dce:	08 95       	ret

00001dd0 <os_startScheduler>:
 *  function to start the concurrent execution of the applications.
 */
void os_startScheduler(void)
{
	 // Set currentProc to idle process
	 currentProc = 0;
    1dd0:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <currentProc>

	 // Set the state of the now chosen process to running
	 os_processes[currentProc].state = OS_PS_RUNNING;
    1dd4:	e1 e0       	ldi	r30, 0x01	; 1
    1dd6:	f5 e0       	ldi	r31, 0x05	; 5
    1dd8:	82 e0       	ldi	r24, 0x02	; 2
    1dda:	81 83       	std	Z+1, r24	; 0x01

	 // Set SP on the stack of the idle process, this will cause the idle process to start running,
	 // as the SP now points onto the idle functions address
	 SP = os_processes[currentProc].sp.as_int;
    1ddc:	82 81       	ldd	r24, Z+2	; 0x02
    1dde:	93 81       	ldd	r25, Z+3	; 0x03
    1de0:	9e bf       	out	0x3e, r25	; 62
    1de2:	8d bf       	out	0x3d, r24	; 61

	 // Load initial context and start the idle process
	 restoreContext();
    1de4:	0f 90       	pop	r0
    1de6:	1f 90       	pop	r1
    1de8:	2f 90       	pop	r2
    1dea:	3f 90       	pop	r3
    1dec:	4f 90       	pop	r4
    1dee:	5f 90       	pop	r5
    1df0:	6f 90       	pop	r6
    1df2:	7f 90       	pop	r7
    1df4:	8f 90       	pop	r8
    1df6:	9f 90       	pop	r9
    1df8:	af 90       	pop	r10
    1dfa:	bf 90       	pop	r11
    1dfc:	cf 90       	pop	r12
    1dfe:	df 90       	pop	r13
    1e00:	ef 90       	pop	r14
    1e02:	ff 90       	pop	r15
    1e04:	0f 91       	pop	r16
    1e06:	1f 91       	pop	r17
    1e08:	2f 91       	pop	r18
    1e0a:	3f 91       	pop	r19
    1e0c:	4f 91       	pop	r20
    1e0e:	5f 91       	pop	r21
    1e10:	6f 91       	pop	r22
    1e12:	7f 91       	pop	r23
    1e14:	8f 91       	pop	r24
    1e16:	9f 91       	pop	r25
    1e18:	af 91       	pop	r26
    1e1a:	bf 91       	pop	r27
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	ef 91       	pop	r30
    1e22:	ff 91       	pop	r31
    1e24:	ff bf       	out	0x3f, r31	; 63
    1e26:	ff 91       	pop	r31
    1e28:	18 95       	reti

	 os_error("os_startScheduler() terminated against all odds - scary stuff...");
    1e2a:	8c ee       	ldi	r24, 0xEC	; 236
    1e2c:	94 e0       	ldi	r25, 0x04	; 4
    1e2e:	9f 93       	push	r25
    1e30:	8f 93       	push	r24
    1e32:	f6 de       	rcall	.-532    	; 0x1c20 <os_errorPstr>
	 // You should never get here, as the scheduler must not terminate
	

}
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	08 95       	ret

00001e3a <os_getStackChecksum>:
	// Be aware of cases where the whole stack is less than 10 bytes
	// (although this actually won't happen due to the call to saveContext() beforehand, which always puts 33 bytes on to the stack already)
	
	
	stack_checksum_t checksum = 0;
	uint8_t *stack_bottom = (uint8_t *)(uintptr_t)PROCESS_STACK_BOTTOM(pid);
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	27 e6       	ldi	r18, 0x67	; 103
    1e3e:	33 e0       	ldi	r19, 0x03	; 3
    1e40:	82 9f       	mul	r24, r18
    1e42:	a0 01       	movw	r20, r0
    1e44:	83 9f       	mul	r24, r19
    1e46:	50 0d       	add	r21, r0
    1e48:	92 9f       	mul	r25, r18
    1e4a:	50 0d       	add	r21, r0
    1e4c:	11 24       	eor	r1, r1
    1e4e:	2f e1       	ldi	r18, 0x1F	; 31
    1e50:	31 e2       	ldi	r19, 0x21	; 33
    1e52:	24 1b       	sub	r18, r20
    1e54:	35 0b       	sbc	r19, r21
	uint8_t *stack_top = (uint8_t *)(uintptr_t)(os_processes[pid].sp.as_int);
    1e56:	fc 01       	movw	r30, r24
    1e58:	ee 0f       	add	r30, r30
    1e5a:	ff 1f       	adc	r31, r31
    1e5c:	e8 0f       	add	r30, r24
    1e5e:	f9 1f       	adc	r31, r25
    1e60:	ee 0f       	add	r30, r30
    1e62:	ff 1f       	adc	r31, r31
    1e64:	ef 5f       	subi	r30, 0xFF	; 255
    1e66:	fa 4f       	sbci	r31, 0xFA	; 250
    1e68:	42 81       	ldd	r20, Z+2	; 0x02
    1e6a:	53 81       	ldd	r21, Z+3	; 0x03
	uint8_t stack_size = stack_bottom - stack_top;
    1e6c:	24 1b       	sub	r18, r20

	if (stack_size >= 16)
    1e6e:	20 31       	cpi	r18, 0x10	; 16
    1e70:	78 f4       	brcc	.+30     	; 0x1e90 <os_getStackChecksum+0x56>
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	17 c0       	rjmp	.+46     	; 0x1ea6 <os_getStackChecksum+0x6c>
	{
		for (uint8_t i = 0; i < 16; i++)
		{
			checksum ^= stack_top[i * (stack_size / 16)];
    1e78:	32 2f       	mov	r19, r18
    1e7a:	32 95       	swap	r19
    1e7c:	3f 70       	andi	r19, 0x0F	; 15
    1e7e:	fa 01       	movw	r30, r20
    1e80:	39 9f       	mul	r19, r25
    1e82:	e0 0d       	add	r30, r0
    1e84:	f1 1d       	adc	r31, r1
    1e86:	11 24       	eor	r1, r1
    1e88:	30 81       	ld	r19, Z
    1e8a:	83 27       	eor	r24, r19
	uint8_t *stack_top = (uint8_t *)(uintptr_t)(os_processes[pid].sp.as_int);
	uint8_t stack_size = stack_bottom - stack_top;

	if (stack_size >= 16)
	{
		for (uint8_t i = 0; i < 16; i++)
    1e8c:	9f 5f       	subi	r25, 0xFF	; 255
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <os_getStackChecksum+0x5a>
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 31       	cpi	r25, 0x10	; 16
    1e96:	80 f3       	brcs	.-32     	; 0x1e78 <os_getStackChecksum+0x3e>
    1e98:	08 95       	ret
	}
	else
	{
		for (uint8_t i = 0; i < stack_size; i++)
		{
			checksum ^= stack_top[i];
    1e9a:	fa 01       	movw	r30, r20
    1e9c:	e9 0f       	add	r30, r25
    1e9e:	f1 1d       	adc	r31, r1
    1ea0:	30 81       	ld	r19, Z
    1ea2:	83 27       	eor	r24, r19
			checksum ^= stack_top[i * (stack_size / 16)];
		}
	}
	else
	{
		for (uint8_t i = 0; i < stack_size; i++)
    1ea4:	9f 5f       	subi	r25, 0xFF	; 255
    1ea6:	92 17       	cp	r25, r18
    1ea8:	c0 f3       	brcs	.-16     	; 0x1e9a <os_getStackChecksum+0x60>
		}
	}

	return checksum;

}
    1eaa:	08 95       	ret

00001eac <os_exec>:
 *                  strategies.
 *  \return The index of the new process (throws error on failure and returns
 *          INVALID_PROCESS as specified in defines.h).
 */
process_id_t os_exec(program_id_t programID, priority_t priority)
{
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	e8 2e       	mov	r14, r24
    1eba:	f6 2e       	mov	r15, r22
	// 1. Enter a critical section
	os_enterCriticalSection();
    1ebc:	36 df       	rcall	.-404    	; 0x1d2a <os_enterCriticalSection>

	// 2. Find free slot in os_processes array
	int free_slot = -1;

	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    1ebe:	c0 e0       	ldi	r28, 0x00	; 0
    1ec0:	d0 e0       	ldi	r29, 0x00	; 0
    1ec2:	0d c0       	rjmp	.+26     	; 0x1ede <os_exec+0x32>
	{
		if (os_processes[i].state == OS_PS_UNUSED)
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	ee 0f       	add	r30, r30
    1ec8:	ff 1f       	adc	r31, r31
    1eca:	ec 0f       	add	r30, r28
    1ecc:	fd 1f       	adc	r31, r29
    1ece:	ee 0f       	add	r30, r30
    1ed0:	ff 1f       	adc	r31, r31
    1ed2:	ef 5f       	subi	r30, 0xFF	; 255
    1ed4:	fa 4f       	sbci	r31, 0xFA	; 250
    1ed6:	81 81       	ldd	r24, Z+1	; 0x01
    1ed8:	88 23       	and	r24, r24
    1eda:	31 f0       	breq	.+12     	; 0x1ee8 <os_exec+0x3c>
	os_enterCriticalSection();

	// 2. Find free slot in os_processes array
	int free_slot = -1;

	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    1edc:	21 96       	adiw	r28, 0x01	; 1
    1ede:	c8 30       	cpi	r28, 0x08	; 8
    1ee0:	d1 05       	cpc	r29, r1
    1ee2:	84 f3       	brlt	.-32     	; 0x1ec4 <os_exec+0x18>
{
	// 1. Enter a critical section
	os_enterCriticalSection();

	// 2. Find free slot in os_processes array
	int free_slot = -1;
    1ee4:	cf ef       	ldi	r28, 0xFF	; 255
    1ee6:	df ef       	ldi	r29, 0xFF	; 255
			break;
		}
	}


	if (free_slot == -1)
    1ee8:	cf 3f       	cpi	r28, 0xFF	; 255
    1eea:	8f ef       	ldi	r24, 0xFF	; 255
    1eec:	d8 07       	cpc	r29, r24
    1eee:	81 f4       	brne	.+32     	; 0x1f10 <os_exec+0x64>
	{
		// os_error("No free slot available");
		terminal_log_printf_p(PSTR("os_exec() -> "), PSTR("No free slot available\n"));
    1ef0:	81 e5       	ldi	r24, 0x51	; 81
    1ef2:	95 e0       	ldi	r25, 0x05	; 5
    1ef4:	9f 93       	push	r25
    1ef6:	8f 93       	push	r24
    1ef8:	83 e4       	ldi	r24, 0x43	; 67
    1efa:	95 e0       	ldi	r25, 0x05	; 5
    1efc:	9f 93       	push	r25
    1efe:	8f 93       	push	r24
		os_leaveCriticalSection();
    1f00:	70 db       	rcall	.-2336   	; 0x15e2 <terminal_log_printf_p>
    1f02:	32 df       	rcall	.-412    	; 0x1d68 <os_leaveCriticalSection>
		return INVALID_PROCESS;
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	1f ef       	ldi	r17, 0xFF	; 255
    1f0e:	6b c0       	rjmp	.+214    	; 0x1fe6 <os_exec+0x13a>
		os_leaveCriticalSection();
		return INVALID_PROCESS;
	}

	// 4. Save ProgramID and the process' state (and some more)
	os_processes[free_slot].progID = programID;
    1f10:	8e 01       	movw	r16, r28
    1f12:	00 0f       	add	r16, r16
    1f14:	11 1f       	adc	r17, r17
    1f16:	0c 0f       	add	r16, r28
    1f18:	1d 1f       	adc	r17, r29
    1f1a:	00 0f       	add	r16, r16
    1f1c:	11 1f       	adc	r17, r17
    1f1e:	0f 5f       	subi	r16, 0xFF	; 255
    1f20:	1a 4f       	sbci	r17, 0xFA	; 250
    1f22:	d8 01       	movw	r26, r16
    1f24:	ec 92       	st	X, r14
	os_processes[free_slot].state = OS_PS_READY;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	11 96       	adiw	r26, 0x01	; 1
    1f2a:	8c 93       	st	X, r24
    1f2c:	11 97       	sbiw	r26, 0x01	; 1
	os_processes[free_slot].priority = priority;
    1f2e:	14 96       	adiw	r26, 0x04	; 4
    1f30:	fc 92       	st	X, r15
    1f32:	14 97       	sbiw	r26, 0x04	; 4

	// Initialize the stack pointer
	os_processes[free_slot].sp.as_int = PROCESS_STACK_BOTTOM(free_slot);
    1f34:	87 e6       	ldi	r24, 0x67	; 103
    1f36:	93 e0       	ldi	r25, 0x03	; 3
    1f38:	c8 9f       	mul	r28, r24
    1f3a:	90 01       	movw	r18, r0
    1f3c:	c9 9f       	mul	r28, r25
    1f3e:	30 0d       	add	r19, r0
    1f40:	d8 9f       	mul	r29, r24
    1f42:	30 0d       	add	r19, r0
    1f44:	11 24       	eor	r1, r1
    1f46:	8f e1       	ldi	r24, 0x1F	; 31
    1f48:	91 e2       	ldi	r25, 0x21	; 33
    1f4a:	7c 01       	movw	r14, r24
    1f4c:	e2 1a       	sub	r14, r18
    1f4e:	f3 0a       	sbc	r15, r19

	// 5.1 push the address of the function to the stack
	// Note for task 2: use address of os_dispatcher instead

	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)(addressOfProgram(function));
    1f50:	c7 01       	movw	r24, r14
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	13 96       	adiw	r26, 0x03	; 3
    1f56:	9c 93       	st	X, r25
    1f58:	8e 93       	st	-X, r24
    1f5a:	12 97       	sbiw	r26, 0x02	; 2
    1f5c:	89 e9       	ldi	r24, 0x99	; 153
    1f5e:	91 e1       	ldi	r25, 0x11	; 17
    1f60:	a8 de       	rcall	.-688    	; 0x1cb2 <addressOfProgram>
    1f62:	f7 01       	movw	r30, r14
    1f64:	60 83       	st	Z, r22
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 8));
    1f66:	d8 01       	movw	r26, r16
    1f68:	12 96       	adiw	r26, 0x02	; 2
    1f6a:	ed 91       	ld	r30, X+
    1f6c:	fc 91       	ld	r31, X
    1f6e:	13 97       	sbiw	r26, 0x03	; 3
    1f70:	9f 01       	movw	r18, r30
    1f72:	21 50       	subi	r18, 0x01	; 1
    1f74:	31 09       	sbc	r19, r1
    1f76:	13 96       	adiw	r26, 0x03	; 3
    1f78:	3c 93       	st	X, r19
    1f7a:	2e 93       	st	-X, r18
    1f7c:	12 97       	sbiw	r26, 0x02	; 2
    1f7e:	70 83       	st	Z, r23
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 16));
    1f80:	12 96       	adiw	r26, 0x02	; 2
    1f82:	ed 91       	ld	r30, X+
    1f84:	fc 91       	ld	r31, X
    1f86:	13 97       	sbiw	r26, 0x03	; 3
    1f88:	9f 01       	movw	r18, r30
    1f8a:	21 50       	subi	r18, 0x01	; 1
    1f8c:	31 09       	sbc	r19, r1
    1f8e:	13 96       	adiw	r26, 0x03	; 3
    1f90:	3c 93       	st	X, r19
    1f92:	2e 93       	st	-X, r18
    1f94:	12 97       	sbiw	r26, 0x02	; 2
    1f96:	80 83       	st	Z, r24

	// 5.2 leave space on the process stack for register entries
	for (uint8_t i = 0; i < 33; i++)
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	12 c0       	rjmp	.+36     	; 0x1fc0 <os_exec+0x114>
	{
		*os_processes[free_slot].sp.as_ptr-- = 0;
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	ee 0f       	add	r30, r30
    1fa0:	ff 1f       	adc	r31, r31
    1fa2:	ec 0f       	add	r30, r28
    1fa4:	fd 1f       	adc	r31, r29
    1fa6:	ee 0f       	add	r30, r30
    1fa8:	ff 1f       	adc	r31, r31
    1faa:	ef 5f       	subi	r30, 0xFF	; 255
    1fac:	fa 4f       	sbci	r31, 0xFA	; 250
    1fae:	a2 81       	ldd	r26, Z+2	; 0x02
    1fb0:	b3 81       	ldd	r27, Z+3	; 0x03
    1fb2:	9d 01       	movw	r18, r26
    1fb4:	21 50       	subi	r18, 0x01	; 1
    1fb6:	31 09       	sbc	r19, r1
    1fb8:	33 83       	std	Z+3, r19	; 0x03
    1fba:	22 83       	std	Z+2, r18	; 0x02
    1fbc:	1c 92       	st	X, r1
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)(addressOfProgram(function));
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 8));
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 16));

	// 5.2 leave space on the process stack for register entries
	for (uint8_t i = 0; i < 33; i++)
    1fbe:	8f 5f       	subi	r24, 0xFF	; 255
    1fc0:	81 32       	cpi	r24, 0x21	; 33
	{
		*os_processes[free_slot].sp.as_ptr-- = 0;
	}

	// For task 2: Save the stack checksum
	os_processes[free_slot].checksum = os_getStackChecksum(free_slot);
    1fc2:	60 f3       	brcs	.-40     	; 0x1f9c <os_exec+0xf0>
    1fc4:	1c 2f       	mov	r17, r28
    1fc6:	8c 2f       	mov	r24, r28
    1fc8:	38 df       	rcall	.-400    	; 0x1e3a <os_getStackChecksum>
    1fca:	fe 01       	movw	r30, r28
    1fcc:	ee 0f       	add	r30, r30
    1fce:	ff 1f       	adc	r31, r31
    1fd0:	ec 0f       	add	r30, r28
    1fd2:	fd 1f       	adc	r31, r29
    1fd4:	ee 0f       	add	r30, r30
    1fd6:	ff 1f       	adc	r31, r31
    1fd8:	ef 5f       	subi	r30, 0xFF	; 255

	os_resetProcessSchedulingInformation(os_getSchedulingStrategy(), free_slot);
    1fda:	fa 4f       	sbci	r31, 0xFA	; 250
    1fdc:	85 83       	std	Z+5, r24	; 0x05
    1fde:	a2 de       	rcall	.-700    	; 0x1d24 <os_getSchedulingStrategy>
    1fe0:	6c 2f       	mov	r22, r28
    1fe2:	fe d1       	rcall	.+1020   	; 0x23e0 <os_resetProcessSchedulingInformation>

	// 6. Leave Critical Section
	os_leaveCriticalSection();
    1fe4:	c1 de       	rcall	.-638    	; 0x1d68 <os_leaveCriticalSection>
    1fe6:	81 2f       	mov	r24, r17
	return free_slot;
	
	
	

}
    1fe8:	df 91       	pop	r29
    1fea:	cf 91       	pop	r28
    1fec:	1f 91       	pop	r17
    1fee:	0f 91       	pop	r16
    1ff0:	ff 90       	pop	r15
    1ff2:	ef 90       	pop	r14
    1ff4:	08 95       	ret

00001ff6 <os_initScheduler>:
    1ff6:	cf 93       	push	r28
 *  In order for the scheduler to work properly, it must have the chance to
 *  initialize its internal data-structures and register and start the idle
 *  program.
 */
void os_initScheduler(void)
{
    1ff8:	df 93       	push	r29
	// 1.
	// As the processes are just being initialized, all slots should be unused so far.
	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	0b c0       	rjmp	.+22     	; 0x2016 <__DATA_REGION_LENGTH__+0x16>
	{
		os_processes[i].state = OS_PS_UNUSED;
    2000:	fc 01       	movw	r30, r24
    2002:	ee 0f       	add	r30, r30
    2004:	ff 1f       	adc	r31, r31
    2006:	e8 0f       	add	r30, r24
    2008:	f9 1f       	adc	r31, r25
    200a:	ee 0f       	add	r30, r30
    200c:	ff 1f       	adc	r31, r31
    200e:	ef 5f       	subi	r30, 0xFF	; 255
    2010:	fa 4f       	sbci	r31, 0xFA	; 250
    2012:	11 82       	std	Z+1, r1	; 0x01
 */
void os_initScheduler(void)
{
	// 1.
	// As the processes are just being initialized, all slots should be unused so far.
	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    2014:	01 96       	adiw	r24, 0x01	; 1
    2016:	88 30       	cpi	r24, 0x08	; 8
    2018:	91 05       	cpc	r25, r1
    201a:	94 f3       	brlt	.-28     	; 0x2000 <__DATA_REGION_LENGTH__>
    201c:	c0 e0       	ldi	r28, 0x00	; 0
    201e:	d0 e0       	ldi	r29, 0x00	; 0
    2020:	08 c0       	rjmp	.+16     	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
	}

	// Start all registered programs, which a flagged as autostart (i.e. call os_exec on them).
	for (int i = 0; i < MAX_NUMBER_OF_PROGRAMS; i++)
	{
		if (os_checkAutostartProgram(i))
    2022:	8c 2f       	mov	r24, r28
    2024:	4b de       	rcall	.-874    	; 0x1cbc <os_checkAutostartProgram>
    2026:	88 23       	and	r24, r24
    2028:	19 f0       	breq	.+6      	; 0x2030 <__DATA_REGION_LENGTH__+0x30>
		{
			os_exec(i, DEFAULT_PRIORITY);
    202a:	62 e0       	ldi	r22, 0x02	; 2
    202c:	8c 2f       	mov	r24, r28
    202e:	3e df       	rcall	.-388    	; 0x1eac <os_exec>
	{
		os_processes[i].state = OS_PS_UNUSED;
	}

	// Start all registered programs, which a flagged as autostart (i.e. call os_exec on them).
	for (int i = 0; i < MAX_NUMBER_OF_PROGRAMS; i++)
    2030:	21 96       	adiw	r28, 0x01	; 1
    2032:	c0 31       	cpi	r28, 0x10	; 16
    2034:	d1 05       	cpc	r29, r1
    2036:	ac f3       	brlt	.-22     	; 0x2022 <__DATA_REGION_LENGTH__+0x22>
		{
			os_exec(i, DEFAULT_PRIORITY);
		}

	}
	os_resetSchedulingInformation(currSchedStrat);
    2038:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <currSchedStrat>
    203c:	f9 d1       	rcall	.+1010   	; 0x2430 <os_resetSchedulingInformation>

	delayMs(3000);
    203e:	88 eb       	ldi	r24, 0xB8	; 184
    2040:	9b e0       	ldi	r25, 0x0B	; 11
    2042:	46 dd       	rcall	.-1396   	; 0x1ad0 <delayMs>
    2044:	20 91 31 05 	lds	r18, 0x0531	; 0x800531 <os_programs>

	// Uncomment:
	assert(os_programs[0] != NULL, "There is no idle proc");
    2048:	30 91 32 05 	lds	r19, 0x0532	; 0x800532 <os_programs+0x1>
    204c:	8d e2       	ldi	r24, 0x2D	; 45
    204e:	95 e0       	ldi	r25, 0x05	; 5
    2050:	9f 93       	push	r25
    2052:	8f 93       	push	r24
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	23 2b       	or	r18, r19
    2058:	09 f4       	brne	.+2      	; 0x205c <__DATA_REGION_LENGTH__+0x5c>
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	8f 93       	push	r24
    205e:	65 dd       	rcall	.-1334   	; 0x1b2a <assertPstr>
    2060:	0f 90       	pop	r0
}
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	08 95       	ret

0000206c <os_isStackInBounds>:
    206c:	8f 92       	push	r8
 *
 *  \param pid The ID of the process for which the stack pointer has to be checked.
 *  \return True if the stack pointer is still in its bounds.
 */
bool os_isStackInBounds(process_id_t pid)
{
    206e:	9f 92       	push	r9
    2070:	af 92       	push	r10
    2072:	bf 92       	push	r11
    2074:	cf 92       	push	r12
    2076:	df 92       	push	r13
    2078:	ef 92       	push	r14
    207a:	ff 92       	push	r15
    207c:	0f 93       	push	r16
    207e:	1f 93       	push	r17
	if (os_processes[pid].sp.as_int > PROCESS_STACK_BOTTOM(pid) || os_processes[pid].sp.as_int < PROCESS_STACK_BOTTOM(pid) - STACK_SIZE_PROC)
    2080:	48 2f       	mov	r20, r24
    2082:	50 e0       	ldi	r21, 0x00	; 0
    2084:	fa 01       	movw	r30, r20
    2086:	ee 0f       	add	r30, r30
    2088:	ff 1f       	adc	r31, r31
    208a:	e4 0f       	add	r30, r20
    208c:	f5 1f       	adc	r31, r21
    208e:	ee 0f       	add	r30, r30
    2090:	ff 1f       	adc	r31, r31
    2092:	ef 5f       	subi	r30, 0xFF	; 255
    2094:	fa 4f       	sbci	r31, 0xFA	; 250
    2096:	c2 80       	ldd	r12, Z+2	; 0x02
    2098:	d3 80       	ldd	r13, Z+3	; 0x03
    209a:	e1 2c       	mov	r14, r1
    209c:	f1 2c       	mov	r15, r1
    209e:	9a 01       	movw	r18, r20
    20a0:	a7 e6       	ldi	r26, 0x67	; 103
    20a2:	b3 e0       	ldi	r27, 0x03	; 3
    20a4:	91 d3       	rcall	.+1826   	; 0x27c8 <__umulhisi3>
    20a6:	0f e1       	ldi	r16, 0x1F	; 31
    20a8:	11 e2       	ldi	r17, 0x21	; 33
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	06 1b       	sub	r16, r22
    20b0:	17 0b       	sbc	r17, r23
    20b2:	28 0b       	sbc	r18, r24
    20b4:	39 0b       	sbc	r19, r25
    20b6:	0c 15       	cp	r16, r12
    20b8:	1d 05       	cpc	r17, r13
    20ba:	2e 05       	cpc	r18, r14
    20bc:	3f 05       	cpc	r19, r15
    20be:	88 f0       	brcs	.+34     	; 0x20e2 <os_isStackInBounds+0x76>
    20c0:	08 eb       	ldi	r16, 0xB8	; 184
    20c2:	1d e1       	ldi	r17, 0x1D	; 29
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	48 01       	movw	r8, r16
    20ca:	59 01       	movw	r10, r18
    20cc:	86 1a       	sub	r8, r22
    20ce:	97 0a       	sbc	r9, r23
    20d0:	a8 0a       	sbc	r10, r24
    20d2:	b9 0a       	sbc	r11, r25
    20d4:	c8 14       	cp	r12, r8
    20d6:	d9 04       	cpc	r13, r9
    20d8:	ea 04       	cpc	r14, r10
    20da:	fb 04       	cpc	r15, r11
    20dc:	20 f4       	brcc	.+8      	; 0x20e6 <os_isStackInBounds+0x7a>
	{
		return false;
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	03 c0       	rjmp	.+6      	; 0x20e8 <os_isStackInBounds+0x7c>
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	01 c0       	rjmp	.+2      	; 0x20e8 <os_isStackInBounds+0x7c>
	}
	return true;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
}
    20e8:	1f 91       	pop	r17
    20ea:	0f 91       	pop	r16
    20ec:	ff 90       	pop	r15
    20ee:	ef 90       	pop	r14
    20f0:	df 90       	pop	r13
    20f2:	cf 90       	pop	r12
    20f4:	bf 90       	pop	r11
    20f6:	af 90       	pop	r10
    20f8:	9f 90       	pop	r9
    20fa:	8f 90       	pop	r8
    20fc:	08 95       	ret

000020fe <__vector_13>:
ISR(TIMER2_COMPA_vect)
{
	// 1. Is implicitly done

	// 2. Save runtime-context of recently current process using the well-known macro
	saveContext();
    20fe:	ff 93       	push	r31
    2100:	ff b7       	in	r31, 0x3f	; 63
    2102:	ff 93       	push	r31
    2104:	ef 93       	push	r30
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	bf 93       	push	r27
    210c:	af 93       	push	r26
    210e:	9f 93       	push	r25
    2110:	8f 93       	push	r24
    2112:	7f 93       	push	r23
    2114:	6f 93       	push	r22
    2116:	5f 93       	push	r21
    2118:	4f 93       	push	r20
    211a:	3f 93       	push	r19
    211c:	2f 93       	push	r18
    211e:	1f 93       	push	r17
    2120:	0f 93       	push	r16
    2122:	ff 92       	push	r15
    2124:	ef 92       	push	r14
    2126:	df 92       	push	r13
    2128:	cf 92       	push	r12
    212a:	bf 92       	push	r11
    212c:	af 92       	push	r10
    212e:	9f 92       	push	r9
    2130:	8f 92       	push	r8
    2132:	7f 92       	push	r7
    2134:	6f 92       	push	r6
    2136:	5f 92       	push	r5
    2138:	4f 92       	push	r4
    213a:	3f 92       	push	r3
    213c:	2f 92       	push	r2
    213e:	1f 92       	push	r1
    2140:	11 24       	eor	r1, r1
    2142:	0f 92       	push	r0

	// 3. Save stack pointer of current process
	os_processes[currentProc].sp.as_int = SP;
    2144:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <currentProc>
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	2d b7       	in	r18, 0x3d	; 61
    214c:	3e b7       	in	r19, 0x3e	; 62
    214e:	fc 01       	movw	r30, r24
    2150:	ee 0f       	add	r30, r30
    2152:	ff 1f       	adc	r31, r31
    2154:	e8 0f       	add	r30, r24
    2156:	f9 1f       	adc	r31, r25
    2158:	ee 0f       	add	r30, r30
    215a:	ff 1f       	adc	r31, r31
    215c:	ef 5f       	subi	r30, 0xFF	; 255
    215e:	fa 4f       	sbci	r31, 0xFA	; 250
    2160:	33 83       	std	Z+3, r19	; 0x03
    2162:	22 83       	std	Z+2, r18	; 0x02

	// 4. Set stack pointer onto ISR-Stack
	SP = BOTTOM_OF_ISR_STACK;
    2164:	8f ed       	ldi	r24, 0xDF	; 223
    2166:	91 e2       	ldi	r25, 0x21	; 33
    2168:	9e bf       	out	0x3e, r25	; 62
    216a:	8d bf       	out	0x3d, r24	; 61

	// 5. Set process state to ready
	if (os_processes[currentProc].state == OS_PS_RUNNING)
    216c:	10 91 fb 04 	lds	r17, 0x04FB	; 0x8004fb <currentProc>
    2170:	c1 2f       	mov	r28, r17
    2172:	d0 e0       	ldi	r29, 0x00	; 0
    2174:	fe 01       	movw	r30, r28
    2176:	ee 0f       	add	r30, r30
    2178:	ff 1f       	adc	r31, r31
    217a:	ec 0f       	add	r30, r28
    217c:	fd 1f       	adc	r31, r29
    217e:	ee 0f       	add	r30, r30
    2180:	ff 1f       	adc	r31, r31
    2182:	ef 5f       	subi	r30, 0xFF	; 255
    2184:	fa 4f       	sbci	r31, 0xFA	; 250
    2186:	81 81       	ldd	r24, Z+1	; 0x01
    2188:	82 30       	cpi	r24, 0x02	; 2
    218a:	59 f4       	brne	.+22     	; 0x21a2 <__vector_13+0xa4>
	{
		os_processes[currentProc].state = OS_PS_READY;
    218c:	fe 01       	movw	r30, r28
    218e:	ee 0f       	add	r30, r30
    2190:	ff 1f       	adc	r31, r31
    2192:	ec 0f       	add	r30, r28
    2194:	fd 1f       	adc	r31, r29
    2196:	ee 0f       	add	r30, r30
    2198:	ff 1f       	adc	r31, r31
    219a:	ef 5f       	subi	r30, 0xFF	; 255
    219c:	fa 4f       	sbci	r31, 0xFA	; 250
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	81 83       	std	Z+1, r24	; 0x01
	}
	// Note for task 2: Only set to ready if it is currently running because of os_kill

	// In task 2: Save the processes stack checksum
	os_processes[currentProc].checksum = os_getStackChecksum(currentProc);
    21a2:	81 2f       	mov	r24, r17
    21a4:	4a de       	rcall	.-876    	; 0x1e3a <os_getStackChecksum>
    21a6:	9e 01       	movw	r18, r28
    21a8:	22 0f       	add	r18, r18
    21aa:	33 1f       	adc	r19, r19
    21ac:	c2 0f       	add	r28, r18
    21ae:	d3 1f       	adc	r29, r19
    21b0:	cc 0f       	add	r28, r28
    21b2:	dd 1f       	adc	r29, r29
    21b4:	cf 5f       	subi	r28, 0xFF	; 255
    21b6:	da 4f       	sbci	r29, 0xFA	; 250
    21b8:	8d 83       	std	Y+5, r24	; 0x05

	// In task 2: Check if the stack pointer has an invalid value
	if (!os_isStackInBounds(currentProc))
    21ba:	81 2f       	mov	r24, r17
    21bc:	57 df       	rcall	.-338    	; 0x206c <os_isStackInBounds>
    21be:	81 11       	cpse	r24, r1
    21c0:	0b c0       	rjmp	.+22     	; 0x21d8 <__vector_13+0xda>
	{
		os_error("Stack pointer out of bounds in process %d", currentProc);
    21c2:	1f 92       	push	r1
    21c4:	1f 93       	push	r17
    21c6:	89 e8       	ldi	r24, 0x89	; 137
    21c8:	95 e0       	ldi	r25, 0x05	; 5
    21ca:	9f 93       	push	r25
    21cc:	8f 93       	push	r24
    21ce:	28 dd       	rcall	.-1456   	; 0x1c20 <os_errorPstr>
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
	}

	// 6. Find next process using the set scheduling strategy

	switch (os_getSchedulingStrategy())
    21d6:	0f 90       	pop	r0
    21d8:	a5 dd       	rcall	.-1206   	; 0x1d24 <os_getSchedulingStrategy>
    21da:	88 23       	and	r24, r24
    21dc:	19 f0       	breq	.+6      	; 0x21e4 <__vector_13+0xe6>
    21de:	81 30       	cpi	r24, 0x01	; 1
    21e0:	49 f0       	breq	.+18     	; 0x21f4 <__vector_13+0xf6>
    21e2:	10 c0       	rjmp	.+32     	; 0x2204 <__stack+0x5>
	{
		case OS_SS_ROUND_ROBIN:
		currentProc = os_scheduler_RoundRobin(os_processes, currentProc);
    21e4:	60 91 fb 04 	lds	r22, 0x04FB	; 0x8004fb <currentProc>
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	95 e0       	ldi	r25, 0x05	; 5
    21ec:	bf d0       	rcall	.+382    	; 0x236c <os_scheduler_RoundRobin>
    21ee:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <currentProc>
		break;
		case OS_SS_DYNAMIC_PRIORITY_ROUND_ROBIN:
		currentProc = os_scheduler_DynamicPriorityRoundRobin(os_processes, currentProc);
    21f2:	0a c0       	rjmp	.+20     	; 0x2208 <__stack+0x9>
    21f4:	60 91 fb 04 	lds	r22, 0x04FB	; 0x8004fb <currentProc>
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	95 e0       	ldi	r25, 0x05	; 5
    21fc:	43 d1       	rcall	.+646    	; 0x2484 <os_scheduler_DynamicPriorityRoundRobin>
    21fe:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <currentProc>
		break;
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <__stack+0x9>
		default:
		currentProc = 0;
    2204:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <currentProc>
		break;
	}

	// In task 2: Check if the checksum changed since the process was interrupted
	if (os_processes[currentProc].checksum != os_getStackChecksum(currentProc))
    2208:	c0 91 fb 04 	lds	r28, 0x04FB	; 0x8004fb <currentProc>
    220c:	8c 2f       	mov	r24, r28
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	fc 01       	movw	r30, r24
    2212:	ee 0f       	add	r30, r30
    2214:	ff 1f       	adc	r31, r31
    2216:	e8 0f       	add	r30, r24
    2218:	f9 1f       	adc	r31, r25
    221a:	ee 0f       	add	r30, r30
    221c:	ff 1f       	adc	r31, r31
    221e:	ef 5f       	subi	r30, 0xFF	; 255
    2220:	fa 4f       	sbci	r31, 0xFA	; 250
    2222:	d5 81       	ldd	r29, Z+5	; 0x05
    2224:	8c 2f       	mov	r24, r28
    2226:	09 de       	rcall	.-1006   	; 0x1e3a <os_getStackChecksum>
    2228:	d8 17       	cp	r29, r24
    222a:	59 f0       	breq	.+22     	; 0x2242 <__stack+0x43>
	{
		os_error("Checksum mismatch in process %d", currentProc);
    222c:	1f 92       	push	r1
    222e:	cf 93       	push	r28
    2230:	89 e6       	ldi	r24, 0x69	; 105
    2232:	95 e0       	ldi	r25, 0x05	; 5
    2234:	9f 93       	push	r25
    2236:	8f 93       	push	r24
    2238:	f3 dc       	rcall	.-1562   	; 0x1c20 <os_errorPstr>
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <currentProc>
	}

	// 7. Set the state of the now chosen process to running
	os_processes[currentProc].state = OS_PS_RUNNING;
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	fc 01       	movw	r30, r24
    224a:	ee 0f       	add	r30, r30
    224c:	ff 1f       	adc	r31, r31
    224e:	df 01       	movw	r26, r30
    2250:	a8 0f       	add	r26, r24
    2252:	b9 1f       	adc	r27, r25
    2254:	aa 0f       	add	r26, r26
    2256:	bb 1f       	adc	r27, r27
    2258:	af 5f       	subi	r26, 0xFF	; 255
    225a:	ba 4f       	sbci	r27, 0xFA	; 250
    225c:	22 e0       	ldi	r18, 0x02	; 2
    225e:	11 96       	adiw	r26, 0x01	; 1
    2260:	2c 93       	st	X, r18
    2262:	11 97       	sbiw	r26, 0x01	; 1
    2264:	fd 01       	movw	r30, r26

	// 8. Set SP to where it was when the resuming process was interrupted
	SP = os_processes[currentProc].sp.as_int;
    2266:	82 81       	ldd	r24, Z+2	; 0x02
    2268:	93 81       	ldd	r25, Z+3	; 0x03
    226a:	9e bf       	out	0x3e, r25	; 62
    226c:	8d bf       	out	0x3d, r24	; 61
    226e:	0f 90       	pop	r0

	// 9. Restore runtime context using the well-known macro.
	// This will cause the process to continue where it was interrupted.
	// Any code after the macro won't be executed as it has an reti() instruction at the end.
	restoreContext();
    2270:	1f 90       	pop	r1
    2272:	2f 90       	pop	r2
    2274:	3f 90       	pop	r3
    2276:	4f 90       	pop	r4
    2278:	5f 90       	pop	r5
    227a:	6f 90       	pop	r6
    227c:	7f 90       	pop	r7
    227e:	8f 90       	pop	r8
    2280:	9f 90       	pop	r9
    2282:	af 90       	pop	r10
    2284:	bf 90       	pop	r11
    2286:	cf 90       	pop	r12
    2288:	df 90       	pop	r13
    228a:	ef 90       	pop	r14
    228c:	ff 90       	pop	r15
    228e:	0f 91       	pop	r16
    2290:	1f 91       	pop	r17
    2292:	2f 91       	pop	r18
    2294:	3f 91       	pop	r19
    2296:	4f 91       	pop	r20
    2298:	5f 91       	pop	r21
    229a:	6f 91       	pop	r22
    229c:	7f 91       	pop	r23
    229e:	8f 91       	pop	r24
    22a0:	9f 91       	pop	r25
    22a2:	af 91       	pop	r26
    22a4:	bf 91       	pop	r27
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	ef 91       	pop	r30
    22ac:	ff 91       	pop	r31
    22ae:	ff bf       	out	0x3f, r31	; 63
    22b0:	ff 91       	pop	r31
    22b2:	18 95       	reti

000022b4 <os_yield>:
    22b4:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <criticalSectionCount>
/*!
 * Triggers scheduler to schedule another process.
 */
void os_yield()
{
	if (criticalSectionCount != 0)
    22b8:	81 11       	cpse	r24, r1
    22ba:	04 c0       	rjmp	.+8      	; 0x22c4 <os_yield+0x10>
	{
		return;
	}
	cli();
    22bc:	f8 94       	cli
	TCNT2 = 0;
    22be:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
	TIMER2_COMPA_vect();
    22c2:	1d cf       	rjmp	.-454    	; 0x20fe <__vector_13>
    22c4:	08 95       	ret

000022c6 <os_kill>:
 *
 *  \param pid The process id of the process to be killed
 *  \return True, if the killing process was successful
 */
bool os_kill(process_id_t pid)
{
    22c6:	cf 93       	push	r28
	
	// If the pid is invalid, return false
	if (pid >= MAX_NUMBER_OF_PROCESSES || pid == 0 || os_processes[pid].state == OS_PS_UNUSED)
    22c8:	9f ef       	ldi	r25, 0xFF	; 255
    22ca:	98 0f       	add	r25, r24
    22cc:	97 30       	cpi	r25, 0x07	; 7
    22ce:	60 f5       	brcc	.+88     	; 0x2328 <os_kill+0x62>
    22d0:	28 2f       	mov	r18, r24
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	f9 01       	movw	r30, r18
    22d6:	ee 0f       	add	r30, r30
    22d8:	ff 1f       	adc	r31, r31
    22da:	e2 0f       	add	r30, r18
    22dc:	f3 1f       	adc	r31, r19
    22de:	ee 0f       	add	r30, r30
    22e0:	ff 1f       	adc	r31, r31
    22e2:	ef 5f       	subi	r30, 0xFF	; 255
    22e4:	fa 4f       	sbci	r31, 0xFA	; 250
    22e6:	91 81       	ldd	r25, Z+1	; 0x01
    22e8:	99 23       	and	r25, r25
    22ea:	01 f1       	breq	.+64     	; 0x232c <os_kill+0x66>
    22ec:	c8 2f       	mov	r28, r24
	{
		return false;
	}
	os_enterCriticalSection();
    22ee:	1d dd       	rcall	.-1478   	; 0x1d2a <os_enterCriticalSection>

	os_getProcessSlot(pid)->state = OS_PS_UNUSED;
    22f0:	8c 2f       	mov	r24, r28
    22f2:	04 dd       	rcall	.-1528   	; 0x1cfc <os_getProcessSlot>
    22f4:	fc 01       	movw	r30, r24

	// Tidy up the scheduler
	// (Process needs to be removed from ready queue of DPRR)

	os_resetProcessSchedulingInformation(os_getSchedulingStrategy(), pid);
    22f6:	11 82       	std	Z+1, r1	; 0x01
    22f8:	15 dd       	rcall	.-1494   	; 0x1d24 <os_getSchedulingStrategy>
    22fa:	6c 2f       	mov	r22, r28

	// If the process kills itself, we mustn't return
	if (os_getCurrentProc() == pid)
    22fc:	71 d0       	rcall	.+226    	; 0x23e0 <os_resetProcessSchedulingInformation>
    22fe:	0f dd       	rcall	.-1506   	; 0x1d1e <os_getCurrentProc>
    2300:	c8 13       	cpse	r28, r24
	{
		criticalSectionCount = 1;
    2302:	0e c0       	rjmp	.+28     	; 0x2320 <os_kill+0x5a>
    2304:	81 e0       	ldi	r24, 0x01	; 1
		os_leaveCriticalSection();
    2306:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <criticalSectionCount>
		sei();
		os_yield();
    230a:	2e dd       	rcall	.-1444   	; 0x1d68 <os_leaveCriticalSection>
    230c:	78 94       	sei
		while (1)
			printf("Penis");
    230e:	d2 df       	rcall	.-92     	; 0x22b4 <os_yield>
    2310:	8a e0       	ldi	r24, 0x0A	; 10
    2312:	93 e0       	ldi	r25, 0x03	; 3
    2314:	9f 93       	push	r25
    2316:	8f 93       	push	r24
    2318:	96 d2       	rcall	.+1324   	; 0x2846 <printf>
    231a:	0f 90       	pop	r0
	}
	os_leaveCriticalSection();
    231c:	0f 90       	pop	r0
    231e:	f8 cf       	rjmp	.-16     	; 0x2310 <os_kill+0x4a>
	os_yield();
    2320:	23 dd       	rcall	.-1466   	; 0x1d68 <os_leaveCriticalSection>
    2322:	c8 df       	rcall	.-112    	; 0x22b4 <os_yield>

	return true;
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	03 c0       	rjmp	.+6      	; 0x232e <os_kill+0x68>
{
	
	// If the pid is invalid, return false
	if (pid >= MAX_NUMBER_OF_PROCESSES || pid == 0 || os_processes[pid].state == OS_PS_UNUSED)
	{
		return false;
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	01 c0       	rjmp	.+2      	; 0x232e <os_kill+0x68>
    232c:	80 e0       	ldi	r24, 0x00	; 0
	os_leaveCriticalSection();
	os_yield();

	return true;

}
    232e:	cf 91       	pop	r28
    2330:	08 95       	ret

00002332 <os_dispatcher>:
 * This wrapper enables the possibility to perform a few necessary steps after the actual process
 * function has finished.
 */
void os_dispatcher()
{
	process_id_t currentProc = os_getCurrentProc();
    2332:	f5 dc       	rcall	.-1558   	; 0x1d1e <os_getCurrentProc>
    2334:	c8 2f       	mov	r28, r24
	program_t *function = os_lookupProgramFunction(os_processes[currentProc].progID);
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	fc 01       	movw	r30, r24
    233a:	ee 0f       	add	r30, r30
    233c:	ff 1f       	adc	r31, r31
    233e:	e8 0f       	add	r30, r24
    2340:	f9 1f       	adc	r31, r25
    2342:	ee 0f       	add	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	ef 5f       	subi	r30, 0xFF	; 255
    2348:	fa 4f       	sbci	r31, 0xFA	; 250
    234a:	80 81       	ld	r24, Z
    234c:	c9 dc       	rcall	.-1646   	; 0x1ce0 <os_lookupProgramFunction>
	
	if (function != NULL)
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	11 f0       	breq	.+4      	; 0x2356 <os_dispatcher+0x24>
	function();
    2352:	fc 01       	movw	r30, r24


	os_kill(currentProc);
    2354:	19 95       	eicall
    2356:	8c 2f       	mov	r24, r28


	os_yield();
    2358:	b6 df       	rcall	.-148    	; 0x22c6 <os_kill>
    235a:	ac df       	rcall	.-168    	; 0x22b4 <os_yield>
	while (1)
		printf("Penis");
    235c:	8a e0       	ldi	r24, 0x0A	; 10
    235e:	93 e0       	ldi	r25, 0x03	; 3
    2360:	9f 93       	push	r25
    2362:	8f 93       	push	r24
    2364:	70 d2       	rcall	.+1248   	; 0x2846 <printf>
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	f8 cf       	rjmp	.-16     	; 0x235c <os_dispatcher+0x2a>

0000236c <os_scheduler_RoundRobin>:
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the even strategy.
 */
process_id_t os_scheduler_RoundRobin(process_t const processes[], process_id_t current)
{
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	ec 01       	movw	r28, r24

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process

	// Return resulting process id
	
	process_id_t currentProc = os_getCurrentProc();
    2372:	d5 dc       	rcall	.-1622   	; 0x1d1e <os_getCurrentProc>

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
    2374:	91 e0       	ldi	r25, 0x01	; 1
    2376:	98 0f       	add	r25, r24
    2378:	0f c0       	rjmp	.+30     	; 0x2398 <os_scheduler_RoundRobin+0x2c>
	{
		if (processes[i].state == OS_PS_READY)
    237a:	29 2f       	mov	r18, r25
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	f9 01       	movw	r30, r18
    2380:	ee 0f       	add	r30, r30
    2382:	ff 1f       	adc	r31, r31
    2384:	e2 0f       	add	r30, r18
    2386:	f3 1f       	adc	r31, r19
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	ec 0f       	add	r30, r28
    238e:	fd 1f       	adc	r31, r29
    2390:	21 81       	ldd	r18, Z+1	; 0x01
    2392:	21 30       	cpi	r18, 0x01	; 1
    2394:	f9 f0       	breq	.+62     	; 0x23d4 <os_scheduler_RoundRobin+0x68>
	// Return resulting process id
	
	process_id_t currentProc = os_getCurrentProc();

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
    2396:	9f 5f       	subi	r25, 0xFF	; 255
    2398:	98 30       	cpi	r25, 0x08	; 8
    239a:	78 f3       	brcs	.-34     	; 0x237a <os_scheduler_RoundRobin+0xe>
    239c:	91 e0       	ldi	r25, 0x01	; 1
    239e:	0f c0       	rjmp	.+30     	; 0x23be <os_scheduler_RoundRobin+0x52>
			return i; // Return resulting process id
		}
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
	{
		if (processes[i].state == OS_PS_READY)
    23a0:	29 2f       	mov	r18, r25
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	f9 01       	movw	r30, r18
    23a6:	ee 0f       	add	r30, r30
    23a8:	ff 1f       	adc	r31, r31
    23aa:	e2 0f       	add	r30, r18
    23ac:	f3 1f       	adc	r31, r19
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	ec 0f       	add	r30, r28
    23b4:	fd 1f       	adc	r31, r29
    23b6:	21 81       	ldd	r18, Z+1	; 0x01
    23b8:	21 30       	cpi	r18, 0x01	; 1
    23ba:	71 f0       	breq	.+28     	; 0x23d8 <os_scheduler_RoundRobin+0x6c>
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
		}
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
    23bc:	9f 5f       	subi	r25, 0xFF	; 255
    23be:	49 2f       	mov	r20, r25
    23c0:	50 e0       	ldi	r21, 0x00	; 0
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	2f 5f       	subi	r18, 0xFF	; 255
    23c8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ca:	42 17       	cp	r20, r18
    23cc:	53 07       	cpc	r21, r19
    23ce:	44 f3       	brlt	.-48     	; 0x23a0 <os_scheduler_RoundRobin+0x34>
			return i; // Return resulting process id
		}
	}

	// If no process except idle process ready, choose idle process
	return 0; // Return resulting process id
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	03 c0       	rjmp	.+6      	; 0x23da <os_scheduler_RoundRobin+0x6e>
	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
	{
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
    23d4:	89 2f       	mov	r24, r25
    23d6:	01 c0       	rjmp	.+2      	; 0x23da <os_scheduler_RoundRobin+0x6e>
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
	{
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
    23d8:	89 2f       	mov	r24, r25
	}

	// If no process except idle process ready, choose idle process
	return 0; // Return resulting process id

}
    23da:	df 91       	pop	r29
    23dc:	cf 91       	pop	r28
    23de:	08 95       	ret

000023e0 <os_resetProcessSchedulingInformation>:
 *
 * \param strategy The scheduling strategy currently in use
 * \param id  The process slot to erase state for
 */
void os_resetProcessSchedulingInformation(scheduling_strategy_t strategy, process_id_t id)
{
    23e0:	cf 93       	push	r28
    23e2:	df 93       	push	r29
	
	if (strategy == OS_SS_ROUND_ROBIN)
    23e4:	88 23       	and	r24, r24
    23e6:	09 f1       	breq	.+66     	; 0x242a <os_resetProcessSchedulingInformation+0x4a>
    23e8:	d6 2f       	mov	r29, r22
    23ea:	c0 e0       	ldi	r28, 0x00	; 0
    23ec:	09 c0       	rjmp	.+18     	; 0x2400 <os_resetProcessSchedulingInformation+0x20>
		return;
	}

	for (uint8_t i = OS_PRIO_HIGH; i <= OS_PRIO_LOW; i++)
	{
		rq_remove(&(schedulingInfo.queues_ready[i]), id);
    23ee:	2b e0       	ldi	r18, 0x0B	; 11
    23f0:	c2 9f       	mul	r28, r18
    23f2:	c0 01       	movw	r24, r0
    23f4:	11 24       	eor	r1, r1
    23f6:	6d 2f       	mov	r22, r29
    23f8:	8d 5a       	subi	r24, 0xAD	; 173
    23fa:	9a 4f       	sbci	r25, 0xFA	; 250
    23fc:	10 d8       	rcall	.-4064   	; 0x141e <rq_remove>
	if (strategy == OS_SS_ROUND_ROBIN)
	{
		return;
	}

	for (uint8_t i = OS_PRIO_HIGH; i <= OS_PRIO_LOW; i++)
    23fe:	cf 5f       	subi	r28, 0xFF	; 255
    2400:	c3 30       	cpi	r28, 0x03	; 3
    2402:	a8 f3       	brcs	.-22     	; 0x23ee <os_resetProcessSchedulingInformation+0xe>
	{
		rq_remove(&(schedulingInfo.queues_ready[i]), id);
	}
	if (os_getProcessSlot(id)->state == OS_PS_READY)
    2404:	8d 2f       	mov	r24, r29
    2406:	7a dc       	rcall	.-1804   	; 0x1cfc <os_getProcessSlot>
    2408:	fc 01       	movw	r30, r24
    240a:	81 81       	ldd	r24, Z+1	; 0x01
    240c:	81 30       	cpi	r24, 0x01	; 1
    240e:	69 f4       	brne	.+26     	; 0x242a <os_resetProcessSchedulingInformation+0x4a>
	rq_push(&(schedulingInfo.queues_ready[os_getProcessSlot(id)->priority]), id);
    2410:	8d 2f       	mov	r24, r29
    2412:	74 dc       	rcall	.-1816   	; 0x1cfc <os_getProcessSlot>
    2414:	fc 01       	movw	r30, r24
    2416:	84 81       	ldd	r24, Z+4	; 0x04
    2418:	fb e0       	ldi	r31, 0x0B	; 11
    241a:	8f 9f       	mul	r24, r31
    241c:	c0 01       	movw	r24, r0
    241e:	11 24       	eor	r1, r1
    2420:	6d 2f       	mov	r22, r29
    2422:	8d 5a       	subi	r24, 0xAD	; 173
    2424:	9a 4f       	sbci	r25, 0xFA	; 250
    2426:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <rq_push>
}
    242a:	df 91       	pop	r29
    242c:	cf 91       	pop	r28
    242e:	08 95       	ret

00002430 <os_resetSchedulingInformation>:
 *  and is done when the strategy is changed through os_setSchedulingStrategy
 *
 * \param strategy  The strategy to reset information for
 */
void os_resetSchedulingInformation(scheduling_strategy_t strategy)
{
    2430:	cf 93       	push	r28
	 if (strategy == OS_SS_ROUND_ROBIN)
    2432:	88 23       	and	r24, r24
    2434:	29 f1       	breq	.+74     	; 0x2480 <os_resetSchedulingInformation+0x50>
    2436:	c0 e0       	ldi	r28, 0x00	; 0
    2438:	09 c0       	rjmp	.+18     	; 0x244c <os_resetSchedulingInformation+0x1c>
	 else
	 //terminal_log_printf_p(PSTR("os_resetSchedulingInformation() -> "), PSTR("Resetting scheduling information\n"));

	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
	 {
		 rq_clear(&schedulingInfo.queues_ready[i]);
    243a:	2b e0       	ldi	r18, 0x0B	; 11
    243c:	c2 9f       	mul	r28, r18
    243e:	c0 01       	movw	r24, r0
    2440:	11 24       	eor	r1, r1
    2442:	8d 5a       	subi	r24, 0xAD	; 173
    2444:	9a 4f       	sbci	r25, 0xFA	; 250
    2446:	0e 94 0b 0a 	call	0x1416	; 0x1416 <rq_clear>
		return;
	 }
	 else
	 //terminal_log_printf_p(PSTR("os_resetSchedulingInformation() -> "), PSTR("Resetting scheduling information\n"));

	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
    244a:	cf 5f       	subi	r28, 0xFF	; 255
    244c:	c3 30       	cpi	r28, 0x03	; 3
    244e:	a8 f3       	brcs	.-22     	; 0x243a <os_resetSchedulingInformation+0xa>
    2450:	c1 e0       	ldi	r28, 0x01	; 1
    2452:	14 c0       	rjmp	.+40     	; 0x247c <os_resetSchedulingInformation+0x4c>
		 rq_clear(&schedulingInfo.queues_ready[i]);
	 }

	 for (process_id_t pid = 1; pid < MAX_NUMBER_OF_PROCESSES; pid++)
	 {
		 if (os_getProcessSlot(pid)->state == OS_PS_READY)
    2454:	8c 2f       	mov	r24, r28
    2456:	52 dc       	rcall	.-1884   	; 0x1cfc <os_getProcessSlot>
    2458:	fc 01       	movw	r30, r24
    245a:	81 81       	ldd	r24, Z+1	; 0x01
    245c:	81 30       	cpi	r24, 0x01	; 1
    245e:	69 f4       	brne	.+26     	; 0x247a <os_resetSchedulingInformation+0x4a>
		 {
			 rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(pid)->priority], pid);
    2460:	8c 2f       	mov	r24, r28
    2462:	4c dc       	rcall	.-1896   	; 0x1cfc <os_getProcessSlot>
    2464:	fc 01       	movw	r30, r24
    2466:	84 81       	ldd	r24, Z+4	; 0x04
    2468:	fb e0       	ldi	r31, 0x0B	; 11
    246a:	8f 9f       	mul	r24, r31
    246c:	c0 01       	movw	r24, r0
    246e:	11 24       	eor	r1, r1
    2470:	6c 2f       	mov	r22, r28
    2472:	8d 5a       	subi	r24, 0xAD	; 173
    2474:	9a 4f       	sbci	r25, 0xFA	; 250
    2476:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <rq_push>
	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
	 {
		 rq_clear(&schedulingInfo.queues_ready[i]);
	 }

	 for (process_id_t pid = 1; pid < MAX_NUMBER_OF_PROCESSES; pid++)
    247a:	cf 5f       	subi	r28, 0xFF	; 255
    247c:	c8 30       	cpi	r28, 0x08	; 8
    247e:	50 f3       	brcs	.-44     	; 0x2454 <os_resetSchedulingInformation+0x24>
		 if (os_getProcessSlot(pid)->state == OS_PS_READY)
		 {
			 rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(pid)->priority], pid);
		 }
	 }
}
    2480:	cf 91       	pop	r28
    2482:	08 95       	ret

00002484 <os_scheduler_DynamicPriorityRoundRobin>:
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the dynamic priority round-robin strategy.
 */
process_id_t os_scheduler_DynamicPriorityRoundRobin(process_t const processes[], process_id_t current)
{
    2484:	df 92       	push	r13
    2486:	ef 92       	push	r14
    2488:	ff 92       	push	r15
    248a:	0f 93       	push	r16
    248c:	1f 93       	push	r17
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	d6 2e       	mov	r13, r22

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    2494:	c0 e0       	ldi	r28, 0x00	; 0
    2496:	d0 e0       	ldi	r29, 0x00	; 0
    2498:	21 c0       	rjmp	.+66     	; 0x24dc <os_scheduler_DynamicPriorityRoundRobin+0x58>
	{

		if (!rq_isEmpty(&schedulingInfo.queues_ready[i + 1]))
    249a:	7e 01       	movw	r14, r28
    249c:	2f ef       	ldi	r18, 0xFF	; 255
    249e:	e2 1a       	sub	r14, r18
    24a0:	f2 0a       	sbc	r15, r18
    24a2:	8b e0       	ldi	r24, 0x0B	; 11
    24a4:	8e 9d       	mul	r24, r14
    24a6:	80 01       	movw	r16, r0
    24a8:	8f 9d       	mul	r24, r15
    24aa:	10 0d       	add	r17, r0
    24ac:	11 24       	eor	r1, r1
    24ae:	0d 5a       	subi	r16, 0xAD	; 173
    24b0:	1a 4f       	sbci	r17, 0xFA	; 250
    24b2:	c8 01       	movw	r24, r16
    24b4:	0e 94 b0 09 	call	0x1360	; 0x1360 <rq_isEmpty>
    24b8:	81 11       	cpse	r24, r1
    24ba:	0f c0       	rjmp	.+30     	; 0x24da <os_scheduler_DynamicPriorityRoundRobin+0x56>
		{
			process_id_t pid = rq_pop(&schedulingInfo.queues_ready[i + 1]);
    24bc:	c8 01       	movw	r24, r16
    24be:	0e 94 b7 09 	call	0x136e	; 0x136e <rq_pop>

			rq_push(&schedulingInfo.queues_ready[i], pid);
    24c2:	9b e0       	ldi	r25, 0x0B	; 11
    24c4:	9c 9f       	mul	r25, r28
    24c6:	90 01       	movw	r18, r0
    24c8:	9d 9f       	mul	r25, r29
    24ca:	30 0d       	add	r19, r0
    24cc:	11 24       	eor	r1, r1
    24ce:	68 2f       	mov	r22, r24
    24d0:	c9 01       	movw	r24, r18
    24d2:	8d 5a       	subi	r24, 0xAD	; 173
    24d4:	9a 4f       	sbci	r25, 0xFA	; 250
    24d6:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <rq_push>
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the dynamic priority round-robin strategy.
 */
process_id_t os_scheduler_DynamicPriorityRoundRobin(process_t const processes[], process_id_t current)
{
    24da:	e7 01       	movw	r28, r14

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    24dc:	c2 30       	cpi	r28, 0x02	; 2
    24de:	d1 05       	cpc	r29, r1
    24e0:	e4 f2       	brlt	.-72     	; 0x249a <os_scheduler_DynamicPriorityRoundRobin+0x16>
		else
		{		}
	}

	// 2. Push current process to the ready queue
	if (os_getProcessSlot(current)->state == OS_PS_READY)
    24e2:	8d 2d       	mov	r24, r13
    24e4:	0b dc       	rcall	.-2026   	; 0x1cfc <os_getProcessSlot>
    24e6:	fc 01       	movw	r30, r24
    24e8:	81 81       	ldd	r24, Z+1	; 0x01
    24ea:	81 30       	cpi	r24, 0x01	; 1
    24ec:	69 f4       	brne	.+26     	; 0x2508 <os_scheduler_DynamicPriorityRoundRobin+0x84>
	{
		rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(current)->priority], current);
    24ee:	8d 2d       	mov	r24, r13
    24f0:	05 dc       	rcall	.-2038   	; 0x1cfc <os_getProcessSlot>
    24f2:	fc 01       	movw	r30, r24
    24f4:	84 81       	ldd	r24, Z+4	; 0x04
    24f6:	fb e0       	ldi	r31, 0x0B	; 11
    24f8:	8f 9f       	mul	r24, r31
    24fa:	c0 01       	movw	r24, r0
    24fc:	11 24       	eor	r1, r1
    24fe:	6d 2d       	mov	r22, r13
    2500:	8d 5a       	subi	r24, 0xAD	; 173
    2502:	9a 4f       	sbci	r25, 0xFA	; 250
    2504:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <rq_push>

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    2508:	c0 e0       	ldi	r28, 0x00	; 0
    250a:	d0 e0       	ldi	r29, 0x00	; 0
    250c:	12 c0       	rjmp	.+36     	; 0x2532 <os_scheduler_DynamicPriorityRoundRobin+0xae>
	}
	
	// 3. Get next process from ready queue
	for (int i = 0; i < PRIORITY_COUNT; i++)
	{
		if (!rq_isEmpty(&schedulingInfo.queues_ready[i]))
    250e:	8b e0       	ldi	r24, 0x0B	; 11
    2510:	8c 9f       	mul	r24, r28
    2512:	80 01       	movw	r16, r0
    2514:	8d 9f       	mul	r24, r29
    2516:	10 0d       	add	r17, r0
    2518:	11 24       	eor	r1, r1
    251a:	0d 5a       	subi	r16, 0xAD	; 173
    251c:	1a 4f       	sbci	r17, 0xFA	; 250
    251e:	c8 01       	movw	r24, r16
    2520:	0e 94 b0 09 	call	0x1360	; 0x1360 <rq_isEmpty>
    2524:	81 11       	cpse	r24, r1
    2526:	04 c0       	rjmp	.+8      	; 0x2530 <os_scheduler_DynamicPriorityRoundRobin+0xac>
		{

			process_id_t next_pid = rq_pop(&schedulingInfo.queues_ready[i]);
    2528:	c8 01       	movw	r24, r16
    252a:	0e 94 b7 09 	call	0x136e	; 0x136e <rq_pop>
			return next_pid;
    252e:	05 c0       	rjmp	.+10     	; 0x253a <os_scheduler_DynamicPriorityRoundRobin+0xb6>
	{
		rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(current)->priority], current);
	}
	
	// 3. Get next process from ready queue
	for (int i = 0; i < PRIORITY_COUNT; i++)
    2530:	21 96       	adiw	r28, 0x01	; 1
    2532:	c3 30       	cpi	r28, 0x03	; 3
    2534:	d1 05       	cpc	r29, r1
    2536:	5c f3       	brlt	.-42     	; 0x250e <os_scheduler_DynamicPriorityRoundRobin+0x8a>
		}

	}

	// If no process is ready, return idle process (0)
	return 0;
    2538:	80 e0       	ldi	r24, 0x00	; 0

}
    253a:	df 91       	pop	r29
    253c:	cf 91       	pop	r28
    253e:	1f 91       	pop	r17
    2540:	0f 91       	pop	r16
    2542:	ff 90       	pop	r15
    2544:	ef 90       	pop	r14
    2546:	df 90       	pop	r13
    2548:	08 95       	ret

0000254a <prog2>:
    lcd_writeProgString(PSTR(" Test finished"));
    while(1){}
}

//! This program includes the receiving procedure
PROGRAM(2, AUTOSTART)
    254a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <rfAdapter_worker>
    254e:	fd cf       	rjmp	.-6      	; 0x254a <prog2>

00002550 <registerProgram1>:
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	df db       	rcall	.-2114   	; 0x1d12 <os_getProgramSlot>
    2554:	25 ef       	ldi	r18, 0xF5	; 245
    2556:	32 e1       	ldi	r19, 0x12	; 18
    2558:	fc 01       	movw	r30, r24
    255a:	31 83       	std	Z+1, r19	; 0x01
    255c:	20 83       	st	Z, r18
    255e:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <os_autostart>
    2562:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <os_autostart+0x1>
    2566:	82 60       	ori	r24, 0x02	; 2
    2568:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <os_autostart+0x1>
    256c:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <os_autostart>
    2570:	08 95       	ret

00002572 <registerProgram2>:
    2572:	82 e0       	ldi	r24, 0x02	; 2
    2574:	ce db       	rcall	.-2148   	; 0x1d12 <os_getProgramSlot>
    2576:	25 ea       	ldi	r18, 0xA5	; 165
    2578:	32 e1       	ldi	r19, 0x12	; 18
    257a:	fc 01       	movw	r30, r24
    257c:	31 83       	std	Z+1, r19	; 0x01
    257e:	20 83       	st	Z, r18
    2580:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <os_autostart>
    2584:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <os_autostart+0x1>
    2588:	84 60       	ori	r24, 0x04	; 4
    258a:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <os_autostart+0x1>
    258e:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <os_autostart>
    2592:	08 95       	ret

00002594 <displayCounter>:
/*!
 * Displays a counter in the right corner of the LCD.
 *
 * @param counter The counter value to display (0-99).
 */
void displayCounter(int counter){
    2594:	cf 93       	push	r28
    2596:	df 93       	push	r29
    2598:	ec 01       	movw	r28, r24
    if (counter >= 10){
    259a:	0a 97       	sbiw	r24, 0x0a	; 10
    259c:	3c f0       	brlt	.+14     	; 0x25ac <displayCounter+0x18>
        lcd_goto(2,14);
    259e:	6e e0       	ldi	r22, 0x0E	; 14
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	0e 94 ca 08 	call	0x1194	; 0x1194 <lcd_goto>
        lcd_writeDec(counter);
    25a6:	ce 01       	movw	r24, r28
    25a8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <lcd_writeDec>
    }

    //! Write 0 to the decade
    if(counter == 9){
    25ac:	c9 30       	cpi	r28, 0x09	; 9
    25ae:	d1 05       	cpc	r29, r1
    25b0:	79 f4       	brne	.+30     	; 0x25d0 <displayCounter+0x3c>
        lcd_goto(2,14);
    25b2:	6e e0       	ldi	r22, 0x0E	; 14
    25b4:	82 e0       	ldi	r24, 0x02	; 2
    25b6:	0e 94 ca 08 	call	0x1194	; 0x1194 <lcd_goto>
        lcd_writeDec(0);
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <lcd_writeDec>
        lcd_goto(2,15);
    25c2:	6f e0       	ldi	r22, 0x0F	; 15
    25c4:	82 e0       	ldi	r24, 0x02	; 2
    25c6:	0e 94 ca 08 	call	0x1194	; 0x1194 <lcd_goto>
        lcd_writeDec(counter);
    25ca:	ce 01       	movw	r24, r28
    25cc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <lcd_writeDec>
    }

    if(counter <= 9){
    25d0:	ca 30       	cpi	r28, 0x0A	; 10
    25d2:	d1 05       	cpc	r29, r1
    25d4:	3c f4       	brge	.+14     	; 0x25e4 <displayCounter+0x50>
        lcd_goto(2,15);
    25d6:	6f e0       	ldi	r22, 0x0F	; 15
    25d8:	82 e0       	ldi	r24, 0x02	; 2
    25da:	0e 94 ca 08 	call	0x1194	; 0x1194 <lcd_goto>
        lcd_writeDec(counter);
    25de:	ce 01       	movw	r24, r28
    25e0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <lcd_writeDec>
    }
}
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	08 95       	ret

000025ea <prog1>:
//! Displays a counter in the right corner of the LCD.
void displayCounter(int i);

//! This program includes the sending procedure
PROGRAM(1, AUTOSTART)
{
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	2a 97       	sbiw	r28, 0x0a	; 10
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    rfAdapter_init();
    25fe:	0e 94 69 03 	call	0x6d2	; 0x6d2 <rfAdapter_init>
#if PHASE_1 == 1
    /*!
     * Sending Toggle LED to Board Address
     */

    lcd_writeProgString(PSTR("Phase 1: Toggle"));
    2602:	87 e5       	ldi	r24, 0x57	; 87
    2604:	96 e0       	ldi	r25, 0x06	; 6
    2606:	0e 94 55 09 	call	0x12aa	; 0x12aa <lcd_writeProgString>
    lcd_line2();
    260a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <lcd_line2>
    lcd_writeProgString(PSTR("Onboard LED"));
    260e:	8b e4       	ldi	r24, 0x4B	; 75
    2610:	96 e0       	ldi	r25, 0x06	; 6
    2612:	0e 94 55 09 	call	0x12aa	; 0x12aa <lcd_writeProgString>

    //! Toggle for 15 seconds and display Countdown
    for (int i = 6; i > 0; --i) {
    2616:	06 e0       	ldi	r16, 0x06	; 6
    2618:	10 e0       	ldi	r17, 0x00	; 0
    261a:	0b c0       	rjmp	.+22     	; 0x2632 <prog1+0x48>
        displayCounter(i);
    261c:	c8 01       	movw	r24, r16
    261e:	ba df       	rcall	.-140    	; 0x2594 <displayCounter>
        rfAdapter_sendToggleLed(serialAdapter_address);
    2620:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2624:	0e 94 92 04 	call	0x924	; 0x924 <rfAdapter_sendToggleLed>
        delayMs(1000);
    2628:	88 ee       	ldi	r24, 0xE8	; 232
    262a:	93 e0       	ldi	r25, 0x03	; 3
    262c:	51 da       	rcall	.-2910   	; 0x1ad0 <delayMs>
    lcd_writeProgString(PSTR("Phase 1: Toggle"));
    lcd_line2();
    lcd_writeProgString(PSTR("Onboard LED"));

    //! Toggle for 15 seconds and display Countdown
    for (int i = 6; i > 0; --i) {
    262e:	01 50       	subi	r16, 0x01	; 1
    2630:	11 09       	sbc	r17, r1
    2632:	10 16       	cp	r1, r16
    2634:	11 06       	cpc	r1, r17
    2636:	94 f3       	brlt	.-28     	; 0x261c <prog1+0x32>
#if PHASE_2 == 1
    /*!
     * Sending setLED to Board Address
     */

    lcd_clear();
    2638:	0e 94 b7 08 	call	0x116e	; 0x116e <lcd_clear>
    lcd_writeProgString(PSTR("Phase 2:"));
    263c:	82 e4       	ldi	r24, 0x42	; 66
    263e:	96 e0       	ldi	r25, 0x06	; 6
    2640:	0e 94 55 09 	call	0x12aa	; 0x12aa <lcd_writeProgString>

    //! LED on for 10 seconds and display Countdown
    lcd_line2();
    2644:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <lcd_line2>
    lcd_writeProgString(PSTR("LED On"));
    2648:	8b e3       	ldi	r24, 0x3B	; 59
    264a:	96 e0       	ldi	r25, 0x06	; 6
    264c:	0e 94 55 09 	call	0x12aa	; 0x12aa <lcd_writeProgString>

    rfAdapter_sendSetLed(serialAdapter_address, 1);
    2650:	61 e0       	ldi	r22, 0x01	; 1
    2652:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2656:	0e 94 66 04 	call	0x8cc	; 0x8cc <rfAdapter_sendSetLed>
    for (int i = 10; i > 0; --i) {
    265a:	0a e0       	ldi	r16, 0x0A	; 10
    265c:	10 e0       	ldi	r17, 0x00	; 0
        displayCounter(i);
    265e:	07 c0       	rjmp	.+14     	; 0x266e <prog1+0x84>
    2660:	c8 01       	movw	r24, r16
        delayMs(1000);
    2662:	98 df       	rcall	.-208    	; 0x2594 <displayCounter>
    2664:	88 ee       	ldi	r24, 0xE8	; 232
    2666:	93 e0       	ldi	r25, 0x03	; 3
    2668:	33 da       	rcall	.-2970   	; 0x1ad0 <delayMs>
    //! LED on for 10 seconds and display Countdown
    lcd_line2();
    lcd_writeProgString(PSTR("LED On"));

    rfAdapter_sendSetLed(serialAdapter_address, 1);
    for (int i = 10; i > 0; --i) {
    266a:	01 50       	subi	r16, 0x01	; 1
    266c:	11 09       	sbc	r17, r1
    266e:	10 16       	cp	r1, r16
    2670:	11 06       	cpc	r1, r17
    2672:	b4 f3       	brlt	.-20     	; 0x2660 <prog1+0x76>
        displayCounter(i);
        delayMs(1000);
    }

    //! LED off for 10 seconds and display Countdown
    lcd_line2();
    2674:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <lcd_line2>
    lcd_writeProgString(PSTR("LED Off"));
    2678:	83 e3       	ldi	r24, 0x33	; 51
    267a:	96 e0       	ldi	r25, 0x06	; 6
    267c:	0e 94 55 09 	call	0x12aa	; 0x12aa <lcd_writeProgString>

    rfAdapter_sendSetLed(serialAdapter_address, 0);
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2686:	0e 94 66 04 	call	0x8cc	; 0x8cc <rfAdapter_sendSetLed>
    for (int i = 10; i > 0; --i) {
    268a:	0a e0       	ldi	r16, 0x0A	; 10
    268c:	10 e0       	ldi	r17, 0x00	; 0
        displayCounter(i);
    268e:	07 c0       	rjmp	.+14     	; 0x269e <prog1+0xb4>
    2690:	c8 01       	movw	r24, r16
        delayMs(1000);
    2692:	80 df       	rcall	.-256    	; 0x2594 <displayCounter>
    2694:	88 ee       	ldi	r24, 0xE8	; 232
    2696:	93 e0       	ldi	r25, 0x03	; 3
    2698:	1b da       	rcall	.-3018   	; 0x1ad0 <delayMs>
    //! LED off for 10 seconds and display Countdown
    lcd_line2();
    lcd_writeProgString(PSTR("LED Off"));

    rfAdapter_sendSetLed(serialAdapter_address, 0);
    for (int i = 10; i > 0; --i) {
    269a:	01 50       	subi	r16, 0x01	; 1
    269c:	11 09       	sbc	r17, r1
    269e:	10 16       	cp	r1, r16
    26a0:	11 06       	cpc	r1, r17
    26a2:	b4 f3       	brlt	.-20     	; 0x2690 <prog1+0xa6>
#if PHASE_3 == 1
    /*!
     * Send LCD Print and LCD Clear to Board Address
     */

    lcd_clear();
    26a4:	0e 94 b7 08 	call	0x116e	; 0x116e <lcd_clear>
    lcd_writeProgString(PSTR("Phase 3:"));
    26a8:	8a e2       	ldi	r24, 0x2A	; 42
    26aa:	96 e0       	ldi	r25, 0x06	; 6
    26ac:	0e 94 55 09 	call	0x12aa	; 0x12aa <lcd_writeProgString>
    delayMs(1000);
    26b0:	88 ee       	ldi	r24, 0xE8	; 232
    26b2:	93 e0       	ldi	r25, 0x03	; 3
    26b4:	0d da       	rcall	.-3046   	; 0x1ad0 <delayMs>
    lcd_line2();
    26b6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <lcd_line2>

    //! Sending Text
    rfAdapter_sendLcdPrint(serialAdapter_address, "lcd_clear() in");
    26ba:	60 e1       	ldi	r22, 0x10	; 16
    26bc:	73 e0       	ldi	r23, 0x03	; 3
    26be:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    26c2:	0e 94 15 05 	call	0xa2a	; 0xa2a <rfAdapter_sendLcdPrint>
    delayMs(50);
    26c6:	82 e3       	ldi	r24, 0x32	; 50
    26c8:	90 e0       	ldi	r25, 0x00	; 0

    //! Countdown for Clear
    for (int i = 3; i >= 0; --i) {
    26ca:	02 da       	rcall	.-3068   	; 0x1ad0 <delayMs>
    26cc:	03 e0       	ldi	r16, 0x03	; 3
    26ce:	10 e0       	ldi	r17, 0x00	; 0
        displayCounter(i);
    26d0:	07 c0       	rjmp	.+14     	; 0x26e0 <prog1+0xf6>
    26d2:	c8 01       	movw	r24, r16
    26d4:	5f df       	rcall	.-322    	; 0x2594 <displayCounter>
        delayMs(1000);
    26d6:	88 ee       	ldi	r24, 0xE8	; 232
    26d8:	93 e0       	ldi	r25, 0x03	; 3
    26da:	fa d9       	rcall	.-3084   	; 0x1ad0 <delayMs>
    26dc:	01 50       	subi	r16, 0x01	; 1
    //! Sending Text
    rfAdapter_sendLcdPrint(serialAdapter_address, "lcd_clear() in");
    delayMs(50);

    //! Countdown for Clear
    for (int i = 3; i >= 0; --i) {
    26de:	11 09       	sbc	r17, r1
    26e0:	11 23       	and	r17, r17
    26e2:	bc f7       	brge	.-18     	; 0x26d2 <prog1+0xe8>
        displayCounter(i);
        delayMs(1000);
    }

    //! Sending LCDClear
    rfAdapter_sendLcdClear(serialAdapter_address);
    26e4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    26e8:	0e 94 bd 04 	call	0x97a	; 0x97a <rfAdapter_sendLcdClear>
    delayMs(2000);
    26ec:	80 ed       	ldi	r24, 0xD0	; 208
    26ee:	97 e0       	ldi	r25, 0x07	; 7
    26f0:	ef d9       	rcall	.-3106   	; 0x1ad0 <delayMs>
    26f2:	0e 94 b7 08 	call	0x116e	; 0x116e <lcd_clear>
#if PHASE_4 == 1
    /*!
     * Send LCD GoTo and LCD Print ProcMem to Broadcast Address
     */

    lcd_clear();
    26f6:	81 e2       	ldi	r24, 0x21	; 33
    lcd_writeProgString(PSTR("Phase 4:"));
    26f8:	96 e0       	ldi	r25, 0x06	; 6
    26fa:	0e 94 55 09 	call	0x12aa	; 0x12aa <lcd_writeProgString>
    lcd_line2();
    26fe:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <lcd_line2>
    lcd_writeProgString(PSTR("    -->  <--"));
    2702:	84 e1       	ldi	r24, 0x14	; 20
    2704:	96 e0       	ldi	r25, 0x06	; 6
    2706:	0e 94 55 09 	call	0x12aa	; 0x12aa <lcd_writeProgString>
    delayMs(2000);
    270a:	80 ed       	ldi	r24, 0xD0	; 208
    270c:	97 e0       	ldi	r25, 0x07	; 7
    270e:	e0 d9       	rcall	.-3136   	; 0x1ad0 <delayMs>
    2710:	47 e0       	ldi	r20, 0x07	; 7

    //! Sending Okay between the Errors
    rfAdapter_sendLcdGoto(ADDRESS_BROADCAST, 1, 7);
    2712:	61 e0       	ldi	r22, 0x01	; 1
    2714:	8f ef       	ldi	r24, 0xFF	; 255
    2716:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <rfAdapter_sendLcdGoto>
    rfAdapter_sendLcdPrintProcMem(ADDRESS_BROADCAST, PSTR("OK"));
    271a:	61 e1       	ldi	r22, 0x11	; 17
    271c:	76 e0       	ldi	r23, 0x06	; 6
    271e:	8f ef       	ldi	r24, 0xFF	; 255
    2720:	0e 94 69 05 	call	0xad2	; 0xad2 <rfAdapter_sendLcdPrintProcMem>
    delayMs(3000);
    2724:	88 eb       	ldi	r24, 0xB8	; 184
    2726:	9b e0       	ldi	r25, 0x0B	; 11
    2728:	d3 d9       	rcall	.-3162   	; 0x1ad0 <delayMs>
    /*!
     * Sends a reference frame to check compatibility with the other implementation.
     * Addressed to Broadcast Address
     */

    lcd_clear();
    272a:	0e 94 b7 08 	call	0x116e	; 0x116e <lcd_clear>
    lcd_writeProgString(PSTR("Phase 5:  refer-ence frame "));
    272e:	85 ef       	ldi	r24, 0xF5	; 245
    2730:	95 e0       	ldi	r25, 0x05	; 5
    2732:	0e 94 55 09 	call	0x12aa	; 0x12aa <lcd_writeProgString>
    lcd_goto(1,14);
    2736:	6e e0       	ldi	r22, 0x0E	; 14
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	0e 94 ca 08 	call	0x1194	; 0x1194 <lcd_goto>
    delayMs(1000);
    273e:	88 ee       	ldi	r24, 0xE8	; 232
    2740:	93 e0       	ldi	r25, 0x03	; 3
    2742:	c6 d9       	rcall	.-3188   	; 0x1ad0 <delayMs>
    2744:	8a e0       	ldi	r24, 0x0A	; 10

    //! The reference frame is equal to rfAdapter_sendLcdPrint(ADDRESS_BROADCAST, "OK");
    //! Created by using lcd_writeHexByte() in xbee_write().
    uint8_t data[] = {0x46, 0x52, 0x08, 0xFF, 0x04, 0x12, 0x02, 0x4F, 0x4B, 0xF3};
    2746:	ef e1       	ldi	r30, 0x1F	; 31
    2748:	f2 e0       	ldi	r31, 0x02	; 2
    274a:	de 01       	movw	r26, r28
    274c:	11 96       	adiw	r26, 0x01	; 1
    274e:	01 90       	ld	r0, Z+
    2750:	0d 92       	st	X+, r0
    2752:	8a 95       	dec	r24
    2754:	e1 f7       	brne	.-8      	; 0x274e <prog1+0x164>
    uint8_t length = sizeof(data);

    //! Write directly to UART
    xbee_writeData(data, length);
    2756:	6a e0       	ldi	r22, 0x0A	; 10
    2758:	ce 01       	movw	r24, r28
    275a:	01 96       	adiw	r24, 0x01	; 1
    275c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <xbee_writeData>

    delayMs(2000);
    2760:	80 ed       	ldi	r24, 0xD0	; 208
    2762:	97 e0       	ldi	r25, 0x07	; 7
    2764:	b5 d9       	rcall	.-3222   	; 0x1ad0 <delayMs>
    2766:	0e 94 b7 08 	call	0x116e	; 0x116e <lcd_clear>

#endif

    //! Show finished screen
    lcd_clear();
    276a:	86 ee       	ldi	r24, 0xE6	; 230
    lcd_writeProgString(PSTR(" Test finished"));
    276c:	95 e0       	ldi	r25, 0x05	; 5
    276e:	0e 94 55 09 	call	0x12aa	; 0x12aa <lcd_writeProgString>
    2772:	ff cf       	rjmp	.-2      	; 0x2772 <prog1+0x188>

00002774 <__udivmodsi4>:
    2774:	a1 e2       	ldi	r26, 0x21	; 33
    2776:	1a 2e       	mov	r1, r26
    2778:	aa 1b       	sub	r26, r26
    277a:	bb 1b       	sub	r27, r27
    277c:	fd 01       	movw	r30, r26
    277e:	0d c0       	rjmp	.+26     	; 0x279a <__udivmodsi4_ep>

00002780 <__udivmodsi4_loop>:
    2780:	aa 1f       	adc	r26, r26
    2782:	bb 1f       	adc	r27, r27
    2784:	ee 1f       	adc	r30, r30
    2786:	ff 1f       	adc	r31, r31
    2788:	a2 17       	cp	r26, r18
    278a:	b3 07       	cpc	r27, r19
    278c:	e4 07       	cpc	r30, r20
    278e:	f5 07       	cpc	r31, r21
    2790:	20 f0       	brcs	.+8      	; 0x279a <__udivmodsi4_ep>
    2792:	a2 1b       	sub	r26, r18
    2794:	b3 0b       	sbc	r27, r19
    2796:	e4 0b       	sbc	r30, r20
    2798:	f5 0b       	sbc	r31, r21

0000279a <__udivmodsi4_ep>:
    279a:	66 1f       	adc	r22, r22
    279c:	77 1f       	adc	r23, r23
    279e:	88 1f       	adc	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	1a 94       	dec	r1
    27a4:	69 f7       	brne	.-38     	; 0x2780 <__udivmodsi4_loop>
    27a6:	60 95       	com	r22
    27a8:	70 95       	com	r23
    27aa:	80 95       	com	r24
    27ac:	90 95       	com	r25
    27ae:	9b 01       	movw	r18, r22
    27b0:	ac 01       	movw	r20, r24
    27b2:	bd 01       	movw	r22, r26
    27b4:	cf 01       	movw	r24, r30
    27b6:	08 95       	ret

000027b8 <__tablejump2__>:
    27b8:	ee 0f       	add	r30, r30
    27ba:	ff 1f       	adc	r31, r31
    27bc:	88 1f       	adc	r24, r24
    27be:	8b bf       	out	0x3b, r24	; 59
    27c0:	07 90       	elpm	r0, Z+
    27c2:	f6 91       	elpm	r31, Z
    27c4:	e0 2d       	mov	r30, r0
    27c6:	19 94       	eijmp

000027c8 <__umulhisi3>:
    27c8:	a2 9f       	mul	r26, r18
    27ca:	b0 01       	movw	r22, r0
    27cc:	b3 9f       	mul	r27, r19
    27ce:	c0 01       	movw	r24, r0
    27d0:	a3 9f       	mul	r26, r19
    27d2:	70 0d       	add	r23, r0
    27d4:	81 1d       	adc	r24, r1
    27d6:	11 24       	eor	r1, r1
    27d8:	91 1d       	adc	r25, r1
    27da:	b2 9f       	mul	r27, r18
    27dc:	70 0d       	add	r23, r0
    27de:	81 1d       	adc	r24, r1
    27e0:	11 24       	eor	r1, r1
    27e2:	91 1d       	adc	r25, r1
    27e4:	08 95       	ret

000027e6 <__strlen_P>:
    27e6:	fc 01       	movw	r30, r24
    27e8:	05 90       	lpm	r0, Z+
    27ea:	00 20       	and	r0, r0
    27ec:	e9 f7       	brne	.-6      	; 0x27e8 <__strlen_P+0x2>
    27ee:	80 95       	com	r24
    27f0:	90 95       	com	r25
    27f2:	8e 0f       	add	r24, r30
    27f4:	9f 1f       	adc	r25, r31
    27f6:	08 95       	ret

000027f8 <strncpy_P>:
    27f8:	fb 01       	movw	r30, r22
    27fa:	dc 01       	movw	r26, r24
    27fc:	41 50       	subi	r20, 0x01	; 1
    27fe:	50 40       	sbci	r21, 0x00	; 0
    2800:	48 f0       	brcs	.+18     	; 0x2814 <strncpy_P+0x1c>
    2802:	05 90       	lpm	r0, Z+
    2804:	0d 92       	st	X+, r0
    2806:	00 20       	and	r0, r0
    2808:	c9 f7       	brne	.-14     	; 0x27fc <strncpy_P+0x4>
    280a:	01 c0       	rjmp	.+2      	; 0x280e <strncpy_P+0x16>
    280c:	1d 92       	st	X+, r1
    280e:	41 50       	subi	r20, 0x01	; 1
    2810:	50 40       	sbci	r21, 0x00	; 0
    2812:	e0 f7       	brcc	.-8      	; 0x280c <strncpy_P+0x14>
    2814:	08 95       	ret

00002816 <memcpy>:
    2816:	fb 01       	movw	r30, r22
    2818:	dc 01       	movw	r26, r24
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <memcpy+0xa>
    281c:	01 90       	ld	r0, Z+
    281e:	0d 92       	st	X+, r0
    2820:	41 50       	subi	r20, 0x01	; 1
    2822:	50 40       	sbci	r21, 0x00	; 0
    2824:	d8 f7       	brcc	.-10     	; 0x281c <memcpy+0x6>
    2826:	08 95       	ret

00002828 <strncpy>:
    2828:	fb 01       	movw	r30, r22
    282a:	dc 01       	movw	r26, r24
    282c:	41 50       	subi	r20, 0x01	; 1
    282e:	50 40       	sbci	r21, 0x00	; 0
    2830:	48 f0       	brcs	.+18     	; 0x2844 <strncpy+0x1c>
    2832:	01 90       	ld	r0, Z+
    2834:	0d 92       	st	X+, r0
    2836:	00 20       	and	r0, r0
    2838:	c9 f7       	brne	.-14     	; 0x282c <strncpy+0x4>
    283a:	01 c0       	rjmp	.+2      	; 0x283e <strncpy+0x16>
    283c:	1d 92       	st	X+, r1
    283e:	41 50       	subi	r20, 0x01	; 1
    2840:	50 40       	sbci	r21, 0x00	; 0
    2842:	e0 f7       	brcc	.-8      	; 0x283c <strncpy+0x14>
    2844:	08 95       	ret

00002846 <printf>:
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	ae 01       	movw	r20, r28
    2850:	4a 5f       	subi	r20, 0xFA	; 250
    2852:	5f 4f       	sbci	r21, 0xFF	; 255
    2854:	fa 01       	movw	r30, r20
    2856:	61 91       	ld	r22, Z+
    2858:	71 91       	ld	r23, Z+
    285a:	af 01       	movw	r20, r30
    285c:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <__iob+0x2>
    2860:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <__iob+0x3>
    2864:	38 d0       	rcall	.+112    	; 0x28d6 <vfprintf>
    2866:	df 91       	pop	r29
    2868:	cf 91       	pop	r28
    286a:	08 95       	ret

0000286c <printf_P>:
    286c:	0f 93       	push	r16
    286e:	1f 93       	push	r17
    2870:	cf 93       	push	r28
    2872:	df 93       	push	r29
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	ae 01       	movw	r20, r28
    287a:	48 5f       	subi	r20, 0xF8	; 248
    287c:	5f 4f       	sbci	r21, 0xFF	; 255
    287e:	da 01       	movw	r26, r20
    2880:	6d 91       	ld	r22, X+
    2882:	7d 91       	ld	r23, X+
    2884:	ad 01       	movw	r20, r26
    2886:	04 e7       	ldi	r16, 0x74	; 116
    2888:	15 e0       	ldi	r17, 0x05	; 5
    288a:	f8 01       	movw	r30, r16
    288c:	82 81       	ldd	r24, Z+2	; 0x02
    288e:	93 81       	ldd	r25, Z+3	; 0x03
    2890:	dc 01       	movw	r26, r24
    2892:	13 96       	adiw	r26, 0x03	; 3
    2894:	2c 91       	ld	r18, X
    2896:	13 97       	sbiw	r26, 0x03	; 3
    2898:	28 60       	ori	r18, 0x08	; 8
    289a:	13 96       	adiw	r26, 0x03	; 3
    289c:	2c 93       	st	X, r18
    289e:	1b d0       	rcall	.+54     	; 0x28d6 <vfprintf>
    28a0:	d8 01       	movw	r26, r16
    28a2:	12 96       	adiw	r26, 0x02	; 2
    28a4:	ed 91       	ld	r30, X+
    28a6:	fc 91       	ld	r31, X
    28a8:	13 97       	sbiw	r26, 0x03	; 3
    28aa:	23 81       	ldd	r18, Z+3	; 0x03
    28ac:	27 7f       	andi	r18, 0xF7	; 247
    28ae:	23 83       	std	Z+3, r18	; 0x03
    28b0:	df 91       	pop	r29
    28b2:	cf 91       	pop	r28
    28b4:	1f 91       	pop	r17
    28b6:	0f 91       	pop	r16
    28b8:	08 95       	ret

000028ba <vfprintf_P>:
    28ba:	cf 93       	push	r28
    28bc:	df 93       	push	r29
    28be:	ec 01       	movw	r28, r24
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	88 60       	ori	r24, 0x08	; 8
    28c4:	8b 83       	std	Y+3, r24	; 0x03
    28c6:	ce 01       	movw	r24, r28
    28c8:	06 d0       	rcall	.+12     	; 0x28d6 <vfprintf>
    28ca:	2b 81       	ldd	r18, Y+3	; 0x03
    28cc:	27 7f       	andi	r18, 0xF7	; 247
    28ce:	2b 83       	std	Y+3, r18	; 0x03
    28d0:	df 91       	pop	r29
    28d2:	cf 91       	pop	r28
    28d4:	08 95       	ret

000028d6 <vfprintf>:
    28d6:	2f 92       	push	r2
    28d8:	3f 92       	push	r3
    28da:	4f 92       	push	r4
    28dc:	5f 92       	push	r5
    28de:	6f 92       	push	r6
    28e0:	7f 92       	push	r7
    28e2:	8f 92       	push	r8
    28e4:	9f 92       	push	r9
    28e6:	af 92       	push	r10
    28e8:	bf 92       	push	r11
    28ea:	cf 92       	push	r12
    28ec:	df 92       	push	r13
    28ee:	ef 92       	push	r14
    28f0:	ff 92       	push	r15
    28f2:	0f 93       	push	r16
    28f4:	1f 93       	push	r17
    28f6:	cf 93       	push	r28
    28f8:	df 93       	push	r29
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
    28fe:	2b 97       	sbiw	r28, 0x0b	; 11
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	6c 01       	movw	r12, r24
    290c:	7b 01       	movw	r14, r22
    290e:	8a 01       	movw	r16, r20
    2910:	fc 01       	movw	r30, r24
    2912:	17 82       	std	Z+7, r1	; 0x07
    2914:	16 82       	std	Z+6, r1	; 0x06
    2916:	83 81       	ldd	r24, Z+3	; 0x03
    2918:	81 ff       	sbrs	r24, 1
    291a:	bf c1       	rjmp	.+894    	; 0x2c9a <vfprintf+0x3c4>
    291c:	ce 01       	movw	r24, r28
    291e:	01 96       	adiw	r24, 0x01	; 1
    2920:	3c 01       	movw	r6, r24
    2922:	f6 01       	movw	r30, r12
    2924:	93 81       	ldd	r25, Z+3	; 0x03
    2926:	f7 01       	movw	r30, r14
    2928:	93 fd       	sbrc	r25, 3
    292a:	85 91       	lpm	r24, Z+
    292c:	93 ff       	sbrs	r25, 3
    292e:	81 91       	ld	r24, Z+
    2930:	7f 01       	movw	r14, r30
    2932:	88 23       	and	r24, r24
    2934:	09 f4       	brne	.+2      	; 0x2938 <vfprintf+0x62>
    2936:	ad c1       	rjmp	.+858    	; 0x2c92 <vfprintf+0x3bc>
    2938:	85 32       	cpi	r24, 0x25	; 37
    293a:	39 f4       	brne	.+14     	; 0x294a <vfprintf+0x74>
    293c:	93 fd       	sbrc	r25, 3
    293e:	85 91       	lpm	r24, Z+
    2940:	93 ff       	sbrs	r25, 3
    2942:	81 91       	ld	r24, Z+
    2944:	7f 01       	movw	r14, r30
    2946:	85 32       	cpi	r24, 0x25	; 37
    2948:	21 f4       	brne	.+8      	; 0x2952 <vfprintf+0x7c>
    294a:	b6 01       	movw	r22, r12
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	d6 d1       	rcall	.+940    	; 0x2cfc <fputc>
    2950:	e8 cf       	rjmp	.-48     	; 0x2922 <vfprintf+0x4c>
    2952:	91 2c       	mov	r9, r1
    2954:	21 2c       	mov	r2, r1
    2956:	31 2c       	mov	r3, r1
    2958:	ff e1       	ldi	r31, 0x1F	; 31
    295a:	f3 15       	cp	r31, r3
    295c:	d8 f0       	brcs	.+54     	; 0x2994 <vfprintf+0xbe>
    295e:	8b 32       	cpi	r24, 0x2B	; 43
    2960:	79 f0       	breq	.+30     	; 0x2980 <vfprintf+0xaa>
    2962:	38 f4       	brcc	.+14     	; 0x2972 <vfprintf+0x9c>
    2964:	80 32       	cpi	r24, 0x20	; 32
    2966:	79 f0       	breq	.+30     	; 0x2986 <vfprintf+0xb0>
    2968:	83 32       	cpi	r24, 0x23	; 35
    296a:	a1 f4       	brne	.+40     	; 0x2994 <vfprintf+0xbe>
    296c:	23 2d       	mov	r18, r3
    296e:	20 61       	ori	r18, 0x10	; 16
    2970:	1d c0       	rjmp	.+58     	; 0x29ac <vfprintf+0xd6>
    2972:	8d 32       	cpi	r24, 0x2D	; 45
    2974:	61 f0       	breq	.+24     	; 0x298e <vfprintf+0xb8>
    2976:	80 33       	cpi	r24, 0x30	; 48
    2978:	69 f4       	brne	.+26     	; 0x2994 <vfprintf+0xbe>
    297a:	23 2d       	mov	r18, r3
    297c:	21 60       	ori	r18, 0x01	; 1
    297e:	16 c0       	rjmp	.+44     	; 0x29ac <vfprintf+0xd6>
    2980:	83 2d       	mov	r24, r3
    2982:	82 60       	ori	r24, 0x02	; 2
    2984:	38 2e       	mov	r3, r24
    2986:	e3 2d       	mov	r30, r3
    2988:	e4 60       	ori	r30, 0x04	; 4
    298a:	3e 2e       	mov	r3, r30
    298c:	2a c0       	rjmp	.+84     	; 0x29e2 <vfprintf+0x10c>
    298e:	f3 2d       	mov	r31, r3
    2990:	f8 60       	ori	r31, 0x08	; 8
    2992:	1d c0       	rjmp	.+58     	; 0x29ce <vfprintf+0xf8>
    2994:	37 fc       	sbrc	r3, 7
    2996:	2d c0       	rjmp	.+90     	; 0x29f2 <vfprintf+0x11c>
    2998:	20 ed       	ldi	r18, 0xD0	; 208
    299a:	28 0f       	add	r18, r24
    299c:	2a 30       	cpi	r18, 0x0A	; 10
    299e:	40 f0       	brcs	.+16     	; 0x29b0 <vfprintf+0xda>
    29a0:	8e 32       	cpi	r24, 0x2E	; 46
    29a2:	b9 f4       	brne	.+46     	; 0x29d2 <vfprintf+0xfc>
    29a4:	36 fc       	sbrc	r3, 6
    29a6:	75 c1       	rjmp	.+746    	; 0x2c92 <vfprintf+0x3bc>
    29a8:	23 2d       	mov	r18, r3
    29aa:	20 64       	ori	r18, 0x40	; 64
    29ac:	32 2e       	mov	r3, r18
    29ae:	19 c0       	rjmp	.+50     	; 0x29e2 <vfprintf+0x10c>
    29b0:	36 fe       	sbrs	r3, 6
    29b2:	06 c0       	rjmp	.+12     	; 0x29c0 <vfprintf+0xea>
    29b4:	8a e0       	ldi	r24, 0x0A	; 10
    29b6:	98 9e       	mul	r9, r24
    29b8:	20 0d       	add	r18, r0
    29ba:	11 24       	eor	r1, r1
    29bc:	92 2e       	mov	r9, r18
    29be:	11 c0       	rjmp	.+34     	; 0x29e2 <vfprintf+0x10c>
    29c0:	ea e0       	ldi	r30, 0x0A	; 10
    29c2:	2e 9e       	mul	r2, r30
    29c4:	20 0d       	add	r18, r0
    29c6:	11 24       	eor	r1, r1
    29c8:	22 2e       	mov	r2, r18
    29ca:	f3 2d       	mov	r31, r3
    29cc:	f0 62       	ori	r31, 0x20	; 32
    29ce:	3f 2e       	mov	r3, r31
    29d0:	08 c0       	rjmp	.+16     	; 0x29e2 <vfprintf+0x10c>
    29d2:	8c 36       	cpi	r24, 0x6C	; 108
    29d4:	21 f4       	brne	.+8      	; 0x29de <vfprintf+0x108>
    29d6:	83 2d       	mov	r24, r3
    29d8:	80 68       	ori	r24, 0x80	; 128
    29da:	38 2e       	mov	r3, r24
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <vfprintf+0x10c>
    29de:	88 36       	cpi	r24, 0x68	; 104
    29e0:	41 f4       	brne	.+16     	; 0x29f2 <vfprintf+0x11c>
    29e2:	f7 01       	movw	r30, r14
    29e4:	93 fd       	sbrc	r25, 3
    29e6:	85 91       	lpm	r24, Z+
    29e8:	93 ff       	sbrs	r25, 3
    29ea:	81 91       	ld	r24, Z+
    29ec:	7f 01       	movw	r14, r30
    29ee:	81 11       	cpse	r24, r1
    29f0:	b3 cf       	rjmp	.-154    	; 0x2958 <vfprintf+0x82>
    29f2:	98 2f       	mov	r25, r24
    29f4:	9f 7d       	andi	r25, 0xDF	; 223
    29f6:	95 54       	subi	r25, 0x45	; 69
    29f8:	93 30       	cpi	r25, 0x03	; 3
    29fa:	28 f4       	brcc	.+10     	; 0x2a06 <vfprintf+0x130>
    29fc:	0c 5f       	subi	r16, 0xFC	; 252
    29fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2a00:	9f e3       	ldi	r25, 0x3F	; 63
    2a02:	99 83       	std	Y+1, r25	; 0x01
    2a04:	0d c0       	rjmp	.+26     	; 0x2a20 <vfprintf+0x14a>
    2a06:	83 36       	cpi	r24, 0x63	; 99
    2a08:	31 f0       	breq	.+12     	; 0x2a16 <vfprintf+0x140>
    2a0a:	83 37       	cpi	r24, 0x73	; 115
    2a0c:	71 f0       	breq	.+28     	; 0x2a2a <vfprintf+0x154>
    2a0e:	83 35       	cpi	r24, 0x53	; 83
    2a10:	09 f0       	breq	.+2      	; 0x2a14 <vfprintf+0x13e>
    2a12:	55 c0       	rjmp	.+170    	; 0x2abe <vfprintf+0x1e8>
    2a14:	20 c0       	rjmp	.+64     	; 0x2a56 <vfprintf+0x180>
    2a16:	f8 01       	movw	r30, r16
    2a18:	80 81       	ld	r24, Z
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	0e 5f       	subi	r16, 0xFE	; 254
    2a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a20:	88 24       	eor	r8, r8
    2a22:	83 94       	inc	r8
    2a24:	91 2c       	mov	r9, r1
    2a26:	53 01       	movw	r10, r6
    2a28:	12 c0       	rjmp	.+36     	; 0x2a4e <vfprintf+0x178>
    2a2a:	28 01       	movw	r4, r16
    2a2c:	f2 e0       	ldi	r31, 0x02	; 2
    2a2e:	4f 0e       	add	r4, r31
    2a30:	51 1c       	adc	r5, r1
    2a32:	f8 01       	movw	r30, r16
    2a34:	a0 80       	ld	r10, Z
    2a36:	b1 80       	ldd	r11, Z+1	; 0x01
    2a38:	36 fe       	sbrs	r3, 6
    2a3a:	03 c0       	rjmp	.+6      	; 0x2a42 <vfprintf+0x16c>
    2a3c:	69 2d       	mov	r22, r9
    2a3e:	70 e0       	ldi	r23, 0x00	; 0
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <vfprintf+0x170>
    2a42:	6f ef       	ldi	r22, 0xFF	; 255
    2a44:	7f ef       	ldi	r23, 0xFF	; 255
    2a46:	c5 01       	movw	r24, r10
    2a48:	4e d1       	rcall	.+668    	; 0x2ce6 <strnlen>
    2a4a:	4c 01       	movw	r8, r24
    2a4c:	82 01       	movw	r16, r4
    2a4e:	f3 2d       	mov	r31, r3
    2a50:	ff 77       	andi	r31, 0x7F	; 127
    2a52:	3f 2e       	mov	r3, r31
    2a54:	15 c0       	rjmp	.+42     	; 0x2a80 <vfprintf+0x1aa>
    2a56:	28 01       	movw	r4, r16
    2a58:	22 e0       	ldi	r18, 0x02	; 2
    2a5a:	42 0e       	add	r4, r18
    2a5c:	51 1c       	adc	r5, r1
    2a5e:	f8 01       	movw	r30, r16
    2a60:	a0 80       	ld	r10, Z
    2a62:	b1 80       	ldd	r11, Z+1	; 0x01
    2a64:	36 fe       	sbrs	r3, 6
    2a66:	03 c0       	rjmp	.+6      	; 0x2a6e <vfprintf+0x198>
    2a68:	69 2d       	mov	r22, r9
    2a6a:	70 e0       	ldi	r23, 0x00	; 0
    2a6c:	02 c0       	rjmp	.+4      	; 0x2a72 <vfprintf+0x19c>
    2a6e:	6f ef       	ldi	r22, 0xFF	; 255
    2a70:	7f ef       	ldi	r23, 0xFF	; 255
    2a72:	c5 01       	movw	r24, r10
    2a74:	2d d1       	rcall	.+602    	; 0x2cd0 <strnlen_P>
    2a76:	4c 01       	movw	r8, r24
    2a78:	f3 2d       	mov	r31, r3
    2a7a:	f0 68       	ori	r31, 0x80	; 128
    2a7c:	3f 2e       	mov	r3, r31
    2a7e:	82 01       	movw	r16, r4
    2a80:	33 fc       	sbrc	r3, 3
    2a82:	19 c0       	rjmp	.+50     	; 0x2ab6 <vfprintf+0x1e0>
    2a84:	82 2d       	mov	r24, r2
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	88 16       	cp	r8, r24
    2a8a:	99 06       	cpc	r9, r25
    2a8c:	a0 f4       	brcc	.+40     	; 0x2ab6 <vfprintf+0x1e0>
    2a8e:	b6 01       	movw	r22, r12
    2a90:	80 e2       	ldi	r24, 0x20	; 32
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	33 d1       	rcall	.+614    	; 0x2cfc <fputc>
    2a96:	2a 94       	dec	r2
    2a98:	f5 cf       	rjmp	.-22     	; 0x2a84 <vfprintf+0x1ae>
    2a9a:	f5 01       	movw	r30, r10
    2a9c:	37 fc       	sbrc	r3, 7
    2a9e:	85 91       	lpm	r24, Z+
    2aa0:	37 fe       	sbrs	r3, 7
    2aa2:	81 91       	ld	r24, Z+
    2aa4:	5f 01       	movw	r10, r30
    2aa6:	b6 01       	movw	r22, r12
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	28 d1       	rcall	.+592    	; 0x2cfc <fputc>
    2aac:	21 10       	cpse	r2, r1
    2aae:	2a 94       	dec	r2
    2ab0:	21 e0       	ldi	r18, 0x01	; 1
    2ab2:	82 1a       	sub	r8, r18
    2ab4:	91 08       	sbc	r9, r1
    2ab6:	81 14       	cp	r8, r1
    2ab8:	91 04       	cpc	r9, r1
    2aba:	79 f7       	brne	.-34     	; 0x2a9a <vfprintf+0x1c4>
    2abc:	e1 c0       	rjmp	.+450    	; 0x2c80 <vfprintf+0x3aa>
    2abe:	84 36       	cpi	r24, 0x64	; 100
    2ac0:	11 f0       	breq	.+4      	; 0x2ac6 <vfprintf+0x1f0>
    2ac2:	89 36       	cpi	r24, 0x69	; 105
    2ac4:	39 f5       	brne	.+78     	; 0x2b14 <vfprintf+0x23e>
    2ac6:	f8 01       	movw	r30, r16
    2ac8:	37 fe       	sbrs	r3, 7
    2aca:	07 c0       	rjmp	.+14     	; 0x2ada <vfprintf+0x204>
    2acc:	60 81       	ld	r22, Z
    2ace:	71 81       	ldd	r23, Z+1	; 0x01
    2ad0:	82 81       	ldd	r24, Z+2	; 0x02
    2ad2:	93 81       	ldd	r25, Z+3	; 0x03
    2ad4:	0c 5f       	subi	r16, 0xFC	; 252
    2ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad8:	08 c0       	rjmp	.+16     	; 0x2aea <vfprintf+0x214>
    2ada:	60 81       	ld	r22, Z
    2adc:	71 81       	ldd	r23, Z+1	; 0x01
    2ade:	07 2e       	mov	r0, r23
    2ae0:	00 0c       	add	r0, r0
    2ae2:	88 0b       	sbc	r24, r24
    2ae4:	99 0b       	sbc	r25, r25
    2ae6:	0e 5f       	subi	r16, 0xFE	; 254
    2ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aea:	f3 2d       	mov	r31, r3
    2aec:	ff 76       	andi	r31, 0x6F	; 111
    2aee:	3f 2e       	mov	r3, r31
    2af0:	97 ff       	sbrs	r25, 7
    2af2:	09 c0       	rjmp	.+18     	; 0x2b06 <vfprintf+0x230>
    2af4:	90 95       	com	r25
    2af6:	80 95       	com	r24
    2af8:	70 95       	com	r23
    2afa:	61 95       	neg	r22
    2afc:	7f 4f       	sbci	r23, 0xFF	; 255
    2afe:	8f 4f       	sbci	r24, 0xFF	; 255
    2b00:	9f 4f       	sbci	r25, 0xFF	; 255
    2b02:	f0 68       	ori	r31, 0x80	; 128
    2b04:	3f 2e       	mov	r3, r31
    2b06:	2a e0       	ldi	r18, 0x0A	; 10
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	a3 01       	movw	r20, r6
    2b0c:	33 d1       	rcall	.+614    	; 0x2d74 <__ultoa_invert>
    2b0e:	88 2e       	mov	r8, r24
    2b10:	86 18       	sub	r8, r6
    2b12:	44 c0       	rjmp	.+136    	; 0x2b9c <vfprintf+0x2c6>
    2b14:	85 37       	cpi	r24, 0x75	; 117
    2b16:	31 f4       	brne	.+12     	; 0x2b24 <vfprintf+0x24e>
    2b18:	23 2d       	mov	r18, r3
    2b1a:	2f 7e       	andi	r18, 0xEF	; 239
    2b1c:	b2 2e       	mov	r11, r18
    2b1e:	2a e0       	ldi	r18, 0x0A	; 10
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	25 c0       	rjmp	.+74     	; 0x2b6e <vfprintf+0x298>
    2b24:	93 2d       	mov	r25, r3
    2b26:	99 7f       	andi	r25, 0xF9	; 249
    2b28:	b9 2e       	mov	r11, r25
    2b2a:	8f 36       	cpi	r24, 0x6F	; 111
    2b2c:	c1 f0       	breq	.+48     	; 0x2b5e <vfprintf+0x288>
    2b2e:	18 f4       	brcc	.+6      	; 0x2b36 <vfprintf+0x260>
    2b30:	88 35       	cpi	r24, 0x58	; 88
    2b32:	79 f0       	breq	.+30     	; 0x2b52 <vfprintf+0x27c>
    2b34:	ae c0       	rjmp	.+348    	; 0x2c92 <vfprintf+0x3bc>
    2b36:	80 37       	cpi	r24, 0x70	; 112
    2b38:	19 f0       	breq	.+6      	; 0x2b40 <vfprintf+0x26a>
    2b3a:	88 37       	cpi	r24, 0x78	; 120
    2b3c:	21 f0       	breq	.+8      	; 0x2b46 <vfprintf+0x270>
    2b3e:	a9 c0       	rjmp	.+338    	; 0x2c92 <vfprintf+0x3bc>
    2b40:	e9 2f       	mov	r30, r25
    2b42:	e0 61       	ori	r30, 0x10	; 16
    2b44:	be 2e       	mov	r11, r30
    2b46:	b4 fe       	sbrs	r11, 4
    2b48:	0d c0       	rjmp	.+26     	; 0x2b64 <vfprintf+0x28e>
    2b4a:	fb 2d       	mov	r31, r11
    2b4c:	f4 60       	ori	r31, 0x04	; 4
    2b4e:	bf 2e       	mov	r11, r31
    2b50:	09 c0       	rjmp	.+18     	; 0x2b64 <vfprintf+0x28e>
    2b52:	34 fe       	sbrs	r3, 4
    2b54:	0a c0       	rjmp	.+20     	; 0x2b6a <vfprintf+0x294>
    2b56:	29 2f       	mov	r18, r25
    2b58:	26 60       	ori	r18, 0x06	; 6
    2b5a:	b2 2e       	mov	r11, r18
    2b5c:	06 c0       	rjmp	.+12     	; 0x2b6a <vfprintf+0x294>
    2b5e:	28 e0       	ldi	r18, 0x08	; 8
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	05 c0       	rjmp	.+10     	; 0x2b6e <vfprintf+0x298>
    2b64:	20 e1       	ldi	r18, 0x10	; 16
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	02 c0       	rjmp	.+4      	; 0x2b6e <vfprintf+0x298>
    2b6a:	20 e1       	ldi	r18, 0x10	; 16
    2b6c:	32 e0       	ldi	r19, 0x02	; 2
    2b6e:	f8 01       	movw	r30, r16
    2b70:	b7 fe       	sbrs	r11, 7
    2b72:	07 c0       	rjmp	.+14     	; 0x2b82 <vfprintf+0x2ac>
    2b74:	60 81       	ld	r22, Z
    2b76:	71 81       	ldd	r23, Z+1	; 0x01
    2b78:	82 81       	ldd	r24, Z+2	; 0x02
    2b7a:	93 81       	ldd	r25, Z+3	; 0x03
    2b7c:	0c 5f       	subi	r16, 0xFC	; 252
    2b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b80:	06 c0       	rjmp	.+12     	; 0x2b8e <vfprintf+0x2b8>
    2b82:	60 81       	ld	r22, Z
    2b84:	71 81       	ldd	r23, Z+1	; 0x01
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	0e 5f       	subi	r16, 0xFE	; 254
    2b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b8e:	a3 01       	movw	r20, r6
    2b90:	f1 d0       	rcall	.+482    	; 0x2d74 <__ultoa_invert>
    2b92:	88 2e       	mov	r8, r24
    2b94:	86 18       	sub	r8, r6
    2b96:	fb 2d       	mov	r31, r11
    2b98:	ff 77       	andi	r31, 0x7F	; 127
    2b9a:	3f 2e       	mov	r3, r31
    2b9c:	36 fe       	sbrs	r3, 6
    2b9e:	0d c0       	rjmp	.+26     	; 0x2bba <vfprintf+0x2e4>
    2ba0:	23 2d       	mov	r18, r3
    2ba2:	2e 7f       	andi	r18, 0xFE	; 254
    2ba4:	a2 2e       	mov	r10, r18
    2ba6:	89 14       	cp	r8, r9
    2ba8:	58 f4       	brcc	.+22     	; 0x2bc0 <vfprintf+0x2ea>
    2baa:	34 fe       	sbrs	r3, 4
    2bac:	0b c0       	rjmp	.+22     	; 0x2bc4 <vfprintf+0x2ee>
    2bae:	32 fc       	sbrc	r3, 2
    2bb0:	09 c0       	rjmp	.+18     	; 0x2bc4 <vfprintf+0x2ee>
    2bb2:	83 2d       	mov	r24, r3
    2bb4:	8e 7e       	andi	r24, 0xEE	; 238
    2bb6:	a8 2e       	mov	r10, r24
    2bb8:	05 c0       	rjmp	.+10     	; 0x2bc4 <vfprintf+0x2ee>
    2bba:	b8 2c       	mov	r11, r8
    2bbc:	a3 2c       	mov	r10, r3
    2bbe:	03 c0       	rjmp	.+6      	; 0x2bc6 <vfprintf+0x2f0>
    2bc0:	b8 2c       	mov	r11, r8
    2bc2:	01 c0       	rjmp	.+2      	; 0x2bc6 <vfprintf+0x2f0>
    2bc4:	b9 2c       	mov	r11, r9
    2bc6:	a4 fe       	sbrs	r10, 4
    2bc8:	0f c0       	rjmp	.+30     	; 0x2be8 <vfprintf+0x312>
    2bca:	fe 01       	movw	r30, r28
    2bcc:	e8 0d       	add	r30, r8
    2bce:	f1 1d       	adc	r31, r1
    2bd0:	80 81       	ld	r24, Z
    2bd2:	80 33       	cpi	r24, 0x30	; 48
    2bd4:	21 f4       	brne	.+8      	; 0x2bde <vfprintf+0x308>
    2bd6:	9a 2d       	mov	r25, r10
    2bd8:	99 7e       	andi	r25, 0xE9	; 233
    2bda:	a9 2e       	mov	r10, r25
    2bdc:	09 c0       	rjmp	.+18     	; 0x2bf0 <vfprintf+0x31a>
    2bde:	a2 fe       	sbrs	r10, 2
    2be0:	06 c0       	rjmp	.+12     	; 0x2bee <vfprintf+0x318>
    2be2:	b3 94       	inc	r11
    2be4:	b3 94       	inc	r11
    2be6:	04 c0       	rjmp	.+8      	; 0x2bf0 <vfprintf+0x31a>
    2be8:	8a 2d       	mov	r24, r10
    2bea:	86 78       	andi	r24, 0x86	; 134
    2bec:	09 f0       	breq	.+2      	; 0x2bf0 <vfprintf+0x31a>
    2bee:	b3 94       	inc	r11
    2bf0:	a3 fc       	sbrc	r10, 3
    2bf2:	10 c0       	rjmp	.+32     	; 0x2c14 <vfprintf+0x33e>
    2bf4:	a0 fe       	sbrs	r10, 0
    2bf6:	06 c0       	rjmp	.+12     	; 0x2c04 <vfprintf+0x32e>
    2bf8:	b2 14       	cp	r11, r2
    2bfa:	80 f4       	brcc	.+32     	; 0x2c1c <vfprintf+0x346>
    2bfc:	28 0c       	add	r2, r8
    2bfe:	92 2c       	mov	r9, r2
    2c00:	9b 18       	sub	r9, r11
    2c02:	0d c0       	rjmp	.+26     	; 0x2c1e <vfprintf+0x348>
    2c04:	b2 14       	cp	r11, r2
    2c06:	58 f4       	brcc	.+22     	; 0x2c1e <vfprintf+0x348>
    2c08:	b6 01       	movw	r22, r12
    2c0a:	80 e2       	ldi	r24, 0x20	; 32
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	76 d0       	rcall	.+236    	; 0x2cfc <fputc>
    2c10:	b3 94       	inc	r11
    2c12:	f8 cf       	rjmp	.-16     	; 0x2c04 <vfprintf+0x32e>
    2c14:	b2 14       	cp	r11, r2
    2c16:	18 f4       	brcc	.+6      	; 0x2c1e <vfprintf+0x348>
    2c18:	2b 18       	sub	r2, r11
    2c1a:	02 c0       	rjmp	.+4      	; 0x2c20 <vfprintf+0x34a>
    2c1c:	98 2c       	mov	r9, r8
    2c1e:	21 2c       	mov	r2, r1
    2c20:	a4 fe       	sbrs	r10, 4
    2c22:	0f c0       	rjmp	.+30     	; 0x2c42 <vfprintf+0x36c>
    2c24:	b6 01       	movw	r22, r12
    2c26:	80 e3       	ldi	r24, 0x30	; 48
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	68 d0       	rcall	.+208    	; 0x2cfc <fputc>
    2c2c:	a2 fe       	sbrs	r10, 2
    2c2e:	16 c0       	rjmp	.+44     	; 0x2c5c <vfprintf+0x386>
    2c30:	a1 fc       	sbrc	r10, 1
    2c32:	03 c0       	rjmp	.+6      	; 0x2c3a <vfprintf+0x364>
    2c34:	88 e7       	ldi	r24, 0x78	; 120
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	02 c0       	rjmp	.+4      	; 0x2c3e <vfprintf+0x368>
    2c3a:	88 e5       	ldi	r24, 0x58	; 88
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	b6 01       	movw	r22, r12
    2c40:	0c c0       	rjmp	.+24     	; 0x2c5a <vfprintf+0x384>
    2c42:	8a 2d       	mov	r24, r10
    2c44:	86 78       	andi	r24, 0x86	; 134
    2c46:	51 f0       	breq	.+20     	; 0x2c5c <vfprintf+0x386>
    2c48:	a1 fe       	sbrs	r10, 1
    2c4a:	02 c0       	rjmp	.+4      	; 0x2c50 <vfprintf+0x37a>
    2c4c:	8b e2       	ldi	r24, 0x2B	; 43
    2c4e:	01 c0       	rjmp	.+2      	; 0x2c52 <vfprintf+0x37c>
    2c50:	80 e2       	ldi	r24, 0x20	; 32
    2c52:	a7 fc       	sbrc	r10, 7
    2c54:	8d e2       	ldi	r24, 0x2D	; 45
    2c56:	b6 01       	movw	r22, r12
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	50 d0       	rcall	.+160    	; 0x2cfc <fputc>
    2c5c:	89 14       	cp	r8, r9
    2c5e:	30 f4       	brcc	.+12     	; 0x2c6c <vfprintf+0x396>
    2c60:	b6 01       	movw	r22, r12
    2c62:	80 e3       	ldi	r24, 0x30	; 48
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	4a d0       	rcall	.+148    	; 0x2cfc <fputc>
    2c68:	9a 94       	dec	r9
    2c6a:	f8 cf       	rjmp	.-16     	; 0x2c5c <vfprintf+0x386>
    2c6c:	8a 94       	dec	r8
    2c6e:	f3 01       	movw	r30, r6
    2c70:	e8 0d       	add	r30, r8
    2c72:	f1 1d       	adc	r31, r1
    2c74:	80 81       	ld	r24, Z
    2c76:	b6 01       	movw	r22, r12
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	40 d0       	rcall	.+128    	; 0x2cfc <fputc>
    2c7c:	81 10       	cpse	r8, r1
    2c7e:	f6 cf       	rjmp	.-20     	; 0x2c6c <vfprintf+0x396>
    2c80:	22 20       	and	r2, r2
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <vfprintf+0x3b0>
    2c84:	4e ce       	rjmp	.-868    	; 0x2922 <vfprintf+0x4c>
    2c86:	b6 01       	movw	r22, r12
    2c88:	80 e2       	ldi	r24, 0x20	; 32
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	37 d0       	rcall	.+110    	; 0x2cfc <fputc>
    2c8e:	2a 94       	dec	r2
    2c90:	f7 cf       	rjmp	.-18     	; 0x2c80 <vfprintf+0x3aa>
    2c92:	f6 01       	movw	r30, r12
    2c94:	86 81       	ldd	r24, Z+6	; 0x06
    2c96:	97 81       	ldd	r25, Z+7	; 0x07
    2c98:	02 c0       	rjmp	.+4      	; 0x2c9e <vfprintf+0x3c8>
    2c9a:	8f ef       	ldi	r24, 0xFF	; 255
    2c9c:	9f ef       	ldi	r25, 0xFF	; 255
    2c9e:	2b 96       	adiw	r28, 0x0b	; 11
    2ca0:	0f b6       	in	r0, 0x3f	; 63
    2ca2:	f8 94       	cli
    2ca4:	de bf       	out	0x3e, r29	; 62
    2ca6:	0f be       	out	0x3f, r0	; 63
    2ca8:	cd bf       	out	0x3d, r28	; 61
    2caa:	df 91       	pop	r29
    2cac:	cf 91       	pop	r28
    2cae:	1f 91       	pop	r17
    2cb0:	0f 91       	pop	r16
    2cb2:	ff 90       	pop	r15
    2cb4:	ef 90       	pop	r14
    2cb6:	df 90       	pop	r13
    2cb8:	cf 90       	pop	r12
    2cba:	bf 90       	pop	r11
    2cbc:	af 90       	pop	r10
    2cbe:	9f 90       	pop	r9
    2cc0:	8f 90       	pop	r8
    2cc2:	7f 90       	pop	r7
    2cc4:	6f 90       	pop	r6
    2cc6:	5f 90       	pop	r5
    2cc8:	4f 90       	pop	r4
    2cca:	3f 90       	pop	r3
    2ccc:	2f 90       	pop	r2
    2cce:	08 95       	ret

00002cd0 <strnlen_P>:
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	05 90       	lpm	r0, Z+
    2cd4:	61 50       	subi	r22, 0x01	; 1
    2cd6:	70 40       	sbci	r23, 0x00	; 0
    2cd8:	01 10       	cpse	r0, r1
    2cda:	d8 f7       	brcc	.-10     	; 0x2cd2 <strnlen_P+0x2>
    2cdc:	80 95       	com	r24
    2cde:	90 95       	com	r25
    2ce0:	8e 0f       	add	r24, r30
    2ce2:	9f 1f       	adc	r25, r31
    2ce4:	08 95       	ret

00002ce6 <strnlen>:
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	61 50       	subi	r22, 0x01	; 1
    2cea:	70 40       	sbci	r23, 0x00	; 0
    2cec:	01 90       	ld	r0, Z+
    2cee:	01 10       	cpse	r0, r1
    2cf0:	d8 f7       	brcc	.-10     	; 0x2ce8 <strnlen+0x2>
    2cf2:	80 95       	com	r24
    2cf4:	90 95       	com	r25
    2cf6:	8e 0f       	add	r24, r30
    2cf8:	9f 1f       	adc	r25, r31
    2cfa:	08 95       	ret

00002cfc <fputc>:
    2cfc:	0f 93       	push	r16
    2cfe:	1f 93       	push	r17
    2d00:	cf 93       	push	r28
    2d02:	df 93       	push	r29
    2d04:	fb 01       	movw	r30, r22
    2d06:	23 81       	ldd	r18, Z+3	; 0x03
    2d08:	21 fd       	sbrc	r18, 1
    2d0a:	03 c0       	rjmp	.+6      	; 0x2d12 <fputc+0x16>
    2d0c:	8f ef       	ldi	r24, 0xFF	; 255
    2d0e:	9f ef       	ldi	r25, 0xFF	; 255
    2d10:	2c c0       	rjmp	.+88     	; 0x2d6a <fputc+0x6e>
    2d12:	22 ff       	sbrs	r18, 2
    2d14:	16 c0       	rjmp	.+44     	; 0x2d42 <fputc+0x46>
    2d16:	46 81       	ldd	r20, Z+6	; 0x06
    2d18:	57 81       	ldd	r21, Z+7	; 0x07
    2d1a:	24 81       	ldd	r18, Z+4	; 0x04
    2d1c:	35 81       	ldd	r19, Z+5	; 0x05
    2d1e:	42 17       	cp	r20, r18
    2d20:	53 07       	cpc	r21, r19
    2d22:	44 f4       	brge	.+16     	; 0x2d34 <fputc+0x38>
    2d24:	a0 81       	ld	r26, Z
    2d26:	b1 81       	ldd	r27, Z+1	; 0x01
    2d28:	9d 01       	movw	r18, r26
    2d2a:	2f 5f       	subi	r18, 0xFF	; 255
    2d2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2e:	31 83       	std	Z+1, r19	; 0x01
    2d30:	20 83       	st	Z, r18
    2d32:	8c 93       	st	X, r24
    2d34:	26 81       	ldd	r18, Z+6	; 0x06
    2d36:	37 81       	ldd	r19, Z+7	; 0x07
    2d38:	2f 5f       	subi	r18, 0xFF	; 255
    2d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d3c:	37 83       	std	Z+7, r19	; 0x07
    2d3e:	26 83       	std	Z+6, r18	; 0x06
    2d40:	14 c0       	rjmp	.+40     	; 0x2d6a <fputc+0x6e>
    2d42:	8b 01       	movw	r16, r22
    2d44:	ec 01       	movw	r28, r24
    2d46:	fb 01       	movw	r30, r22
    2d48:	00 84       	ldd	r0, Z+8	; 0x08
    2d4a:	f1 85       	ldd	r31, Z+9	; 0x09
    2d4c:	e0 2d       	mov	r30, r0
    2d4e:	19 95       	eicall
    2d50:	89 2b       	or	r24, r25
    2d52:	e1 f6       	brne	.-72     	; 0x2d0c <fputc+0x10>
    2d54:	d8 01       	movw	r26, r16
    2d56:	16 96       	adiw	r26, 0x06	; 6
    2d58:	8d 91       	ld	r24, X+
    2d5a:	9c 91       	ld	r25, X
    2d5c:	17 97       	sbiw	r26, 0x07	; 7
    2d5e:	01 96       	adiw	r24, 0x01	; 1
    2d60:	17 96       	adiw	r26, 0x07	; 7
    2d62:	9c 93       	st	X, r25
    2d64:	8e 93       	st	-X, r24
    2d66:	16 97       	sbiw	r26, 0x06	; 6
    2d68:	ce 01       	movw	r24, r28
    2d6a:	df 91       	pop	r29
    2d6c:	cf 91       	pop	r28
    2d6e:	1f 91       	pop	r17
    2d70:	0f 91       	pop	r16
    2d72:	08 95       	ret

00002d74 <__ultoa_invert>:
    2d74:	fa 01       	movw	r30, r20
    2d76:	aa 27       	eor	r26, r26
    2d78:	28 30       	cpi	r18, 0x08	; 8
    2d7a:	51 f1       	breq	.+84     	; 0x2dd0 <__ultoa_invert+0x5c>
    2d7c:	20 31       	cpi	r18, 0x10	; 16
    2d7e:	81 f1       	breq	.+96     	; 0x2de0 <__ultoa_invert+0x6c>
    2d80:	e8 94       	clt
    2d82:	6f 93       	push	r22
    2d84:	6e 7f       	andi	r22, 0xFE	; 254
    2d86:	6e 5f       	subi	r22, 0xFE	; 254
    2d88:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d8e:	af 4f       	sbci	r26, 0xFF	; 255
    2d90:	b1 e0       	ldi	r27, 0x01	; 1
    2d92:	3e d0       	rcall	.+124    	; 0x2e10 <__ultoa_invert+0x9c>
    2d94:	b4 e0       	ldi	r27, 0x04	; 4
    2d96:	3c d0       	rcall	.+120    	; 0x2e10 <__ultoa_invert+0x9c>
    2d98:	67 0f       	add	r22, r23
    2d9a:	78 1f       	adc	r23, r24
    2d9c:	89 1f       	adc	r24, r25
    2d9e:	9a 1f       	adc	r25, r26
    2da0:	a1 1d       	adc	r26, r1
    2da2:	68 0f       	add	r22, r24
    2da4:	79 1f       	adc	r23, r25
    2da6:	8a 1f       	adc	r24, r26
    2da8:	91 1d       	adc	r25, r1
    2daa:	a1 1d       	adc	r26, r1
    2dac:	6a 0f       	add	r22, r26
    2dae:	71 1d       	adc	r23, r1
    2db0:	81 1d       	adc	r24, r1
    2db2:	91 1d       	adc	r25, r1
    2db4:	a1 1d       	adc	r26, r1
    2db6:	20 d0       	rcall	.+64     	; 0x2df8 <__ultoa_invert+0x84>
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <__ultoa_invert+0x48>
    2dba:	68 94       	set
    2dbc:	3f 91       	pop	r19
    2dbe:	2a e0       	ldi	r18, 0x0A	; 10
    2dc0:	26 9f       	mul	r18, r22
    2dc2:	11 24       	eor	r1, r1
    2dc4:	30 19       	sub	r19, r0
    2dc6:	30 5d       	subi	r19, 0xD0	; 208
    2dc8:	31 93       	st	Z+, r19
    2dca:	de f6       	brtc	.-74     	; 0x2d82 <__ultoa_invert+0xe>
    2dcc:	cf 01       	movw	r24, r30
    2dce:	08 95       	ret
    2dd0:	46 2f       	mov	r20, r22
    2dd2:	47 70       	andi	r20, 0x07	; 7
    2dd4:	40 5d       	subi	r20, 0xD0	; 208
    2dd6:	41 93       	st	Z+, r20
    2dd8:	b3 e0       	ldi	r27, 0x03	; 3
    2dda:	0f d0       	rcall	.+30     	; 0x2dfa <__ultoa_invert+0x86>
    2ddc:	c9 f7       	brne	.-14     	; 0x2dd0 <__ultoa_invert+0x5c>
    2dde:	f6 cf       	rjmp	.-20     	; 0x2dcc <__ultoa_invert+0x58>
    2de0:	46 2f       	mov	r20, r22
    2de2:	4f 70       	andi	r20, 0x0F	; 15
    2de4:	40 5d       	subi	r20, 0xD0	; 208
    2de6:	4a 33       	cpi	r20, 0x3A	; 58
    2de8:	18 f0       	brcs	.+6      	; 0x2df0 <__ultoa_invert+0x7c>
    2dea:	49 5d       	subi	r20, 0xD9	; 217
    2dec:	31 fd       	sbrc	r19, 1
    2dee:	40 52       	subi	r20, 0x20	; 32
    2df0:	41 93       	st	Z+, r20
    2df2:	02 d0       	rcall	.+4      	; 0x2df8 <__ultoa_invert+0x84>
    2df4:	a9 f7       	brne	.-22     	; 0x2de0 <__ultoa_invert+0x6c>
    2df6:	ea cf       	rjmp	.-44     	; 0x2dcc <__ultoa_invert+0x58>
    2df8:	b4 e0       	ldi	r27, 0x04	; 4
    2dfa:	a6 95       	lsr	r26
    2dfc:	97 95       	ror	r25
    2dfe:	87 95       	ror	r24
    2e00:	77 95       	ror	r23
    2e02:	67 95       	ror	r22
    2e04:	ba 95       	dec	r27
    2e06:	c9 f7       	brne	.-14     	; 0x2dfa <__ultoa_invert+0x86>
    2e08:	00 97       	sbiw	r24, 0x00	; 0
    2e0a:	61 05       	cpc	r22, r1
    2e0c:	71 05       	cpc	r23, r1
    2e0e:	08 95       	ret
    2e10:	9b 01       	movw	r18, r22
    2e12:	ac 01       	movw	r20, r24
    2e14:	0a 2e       	mov	r0, r26
    2e16:	06 94       	lsr	r0
    2e18:	57 95       	ror	r21
    2e1a:	47 95       	ror	r20
    2e1c:	37 95       	ror	r19
    2e1e:	27 95       	ror	r18
    2e20:	ba 95       	dec	r27
    2e22:	c9 f7       	brne	.-14     	; 0x2e16 <__ultoa_invert+0xa2>
    2e24:	62 0f       	add	r22, r18
    2e26:	73 1f       	adc	r23, r19
    2e28:	84 1f       	adc	r24, r20
    2e2a:	95 1f       	adc	r25, r21
    2e2c:	a0 1d       	adc	r26, r0
    2e2e:	08 95       	ret

00002e30 <_exit>:
    2e30:	f8 94       	cli

00002e32 <__stop_program>:
    2e32:	ff cf       	rjmp	.-2      	; 0x2e32 <__stop_program>

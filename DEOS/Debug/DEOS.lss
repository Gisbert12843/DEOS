
DEOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800200  00005982  00005a16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005982  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e4  00800332  00800332  00005b48  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005b48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005ba4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000908  00000000  00000000  00005be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009a38  00000000  00000000  000064ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f4d  00000000  00000000  0000ff24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005307  00000000  00000000  00012e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001cc0  00000000  00000000  00018178  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000237b  00000000  00000000  00019e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000078df  00000000  00000000  0001c1b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008c0  00000000  00000000  00023a92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	d5 c5       	rjmp	.+2986   	; 0xbac <__ctors_end>
       2:	00 00       	nop
       4:	04 c6       	rjmp	.+3080   	; 0xc0e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c6       	rjmp	.+3076   	; 0xc0e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c6       	rjmp	.+3072   	; 0xc0e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c5       	rjmp	.+3068   	; 0xc0e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c5       	rjmp	.+3064   	; 0xc0e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c5       	rjmp	.+3060   	; 0xc0e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c5       	rjmp	.+3056   	; 0xc0e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c5       	rjmp	.+3052   	; 0xc0e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c5       	rjmp	.+3048   	; 0xc0e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c5       	rjmp	.+3044   	; 0xc0e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c5       	rjmp	.+3040   	; 0xc0e <__bad_interrupt>
      2e:	00 00       	nop
      30:	ee c5       	rjmp	.+3036   	; 0xc0e <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 c7 1f 	jmp	0x3f8e	; 0x3f8e <__vector_13>
      38:	ea c5       	rjmp	.+3028   	; 0xc0e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c5       	rjmp	.+3024   	; 0xc0e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c5       	rjmp	.+3020   	; 0xc0e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__vector_17>
      48:	e2 c5       	rjmp	.+3012   	; 0xc0e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c5       	rjmp	.+3008   	; 0xc0e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c5       	rjmp	.+3004   	; 0xc0e <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <__vector_21>
      58:	da c5       	rjmp	.+2996   	; 0xc0e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c5       	rjmp	.+2992   	; 0xc0e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c5       	rjmp	.+2988   	; 0xc0e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 7b 1a 	jmp	0x34f6	; 0x34f6 <__vector_25>
      68:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <__vector_26>
      6c:	d0 c5       	rjmp	.+2976   	; 0xc0e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c5       	rjmp	.+2972   	; 0xc0e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c5       	rjmp	.+2968   	; 0xc0e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c5       	rjmp	.+2964   	; 0xc0e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c5       	rjmp	.+2960   	; 0xc0e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c5       	rjmp	.+2956   	; 0xc0e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c5       	rjmp	.+2952   	; 0xc0e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c5       	rjmp	.+2948   	; 0xc0e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c5       	rjmp	.+2944   	; 0xc0e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <__vector_36>
      94:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__vector_37>
      98:	ba c5       	rjmp	.+2932   	; 0xc0e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	b8 c5       	rjmp	.+2928   	; 0xc0e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	b6 c5       	rjmp	.+2924   	; 0xc0e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c5       	rjmp	.+2920   	; 0xc0e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c5       	rjmp	.+2916   	; 0xc0e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c5       	rjmp	.+2912   	; 0xc0e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c5       	rjmp	.+2908   	; 0xc0e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c5       	rjmp	.+2904   	; 0xc0e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c5       	rjmp	.+2900   	; 0xc0e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c5       	rjmp	.+2896   	; 0xc0e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c5       	rjmp	.+2892   	; 0xc0e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c5       	rjmp	.+2888   	; 0xc0e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c5       	rjmp	.+2884   	; 0xc0e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__vector_51>
      d0:	0c 94 b4 1b 	jmp	0x3768	; 0x3768 <__vector_52>
      d4:	9c c5       	rjmp	.+2872   	; 0xc0e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__vector_54>
      dc:	0c 94 14 1c 	jmp	0x3828	; 0x3828 <__vector_55>
      e0:	96 c5       	rjmp	.+2860   	; 0xc0e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3e 0d       	add	r19, r14
      e6:	9d 0e       	add	r9, r29
      e8:	9d 0e       	add	r9, r29
      ea:	ab 11       	cpse	r26, r11
      ec:	ea 0e       	add	r14, r26
      ee:	3b 0f       	add	r19, r27
      f0:	79 10       	cpse	r7, r9
      f2:	09 0c       	add	r0, r9
      f4:	57 16       	cp	r5, r23
      f6:	67 16       	cp	r6, r23
      f8:	79 16       	cp	r7, r25
      fa:	89 16       	cp	r8, r25
      fc:	9b 16       	cp	r9, r27
      fe:	aa 16       	cp	r10, r26
     100:	bb 16       	cp	r11, r27
     102:	cc 16       	cp	r12, r28
     104:	fb 16       	cp	r15, r27
     106:	0b 17       	cp	r16, r27
     108:	1d 17       	cp	r17, r29
     10a:	2d 17       	cp	r18, r29
     10c:	3f 17       	cp	r19, r31
     10e:	4e 17       	cp	r20, r30
     110:	5f 17       	cp	r21, r31
     112:	70 17       	cp	r23, r16
     114:	d2 18       	sub	r13, r2
     116:	d3 18       	sub	r13, r3
     118:	d3 18       	sub	r13, r3
     11a:	d3 18       	sub	r13, r3
     11c:	d3 18       	sub	r13, r3
     11e:	d3 18       	sub	r13, r3
     120:	d3 18       	sub	r13, r3
     122:	d3 18       	sub	r13, r3
     124:	d3 18       	sub	r13, r3
     126:	d3 18       	sub	r13, r3
     128:	d3 18       	sub	r13, r3
     12a:	d3 18       	sub	r13, r3
     12c:	d3 18       	sub	r13, r3
     12e:	d3 18       	sub	r13, r3
     130:	d3 18       	sub	r13, r3
     132:	d3 18       	sub	r13, r3
     134:	d3 18       	sub	r13, r3
     136:	d3 18       	sub	r13, r3
     138:	ca 18       	sub	r12, r10
     13a:	d3 18       	sub	r13, r3
     13c:	d3 18       	sub	r13, r3
     13e:	d3 18       	sub	r13, r3
     140:	d3 18       	sub	r13, r3
     142:	d3 18       	sub	r13, r3
     144:	cc 18       	sub	r12, r12
     146:	d3 18       	sub	r13, r3
     148:	d3 18       	sub	r13, r3
     14a:	c8 18       	sub	r12, r8
     14c:	d3 18       	sub	r13, r3
     14e:	d3 18       	sub	r13, r3
     150:	d3 18       	sub	r13, r3
     152:	d3 18       	sub	r13, r3
     154:	d2 18       	sub	r13, r2
     156:	d3 18       	sub	r13, r3
     158:	d3 18       	sub	r13, r3
     15a:	d3 18       	sub	r13, r3
     15c:	d3 18       	sub	r13, r3
     15e:	d3 18       	sub	r13, r3
     160:	d3 18       	sub	r13, r3
     162:	d3 18       	sub	r13, r3
     164:	d3 18       	sub	r13, r3
     166:	d3 18       	sub	r13, r3
     168:	d3 18       	sub	r13, r3
     16a:	d3 18       	sub	r13, r3
     16c:	ce 18       	sub	r12, r14
     16e:	d3 18       	sub	r13, r3
     170:	d3 18       	sub	r13, r3
     172:	d3 18       	sub	r13, r3
     174:	d3 18       	sub	r13, r3
     176:	d0 18       	sub	r13, r0
     178:	c4 18       	sub	r12, r4
     17a:	d3 18       	sub	r13, r3
     17c:	d3 18       	sub	r13, r3
     17e:	d3 18       	sub	r13, r3
     180:	d3 18       	sub	r13, r3
     182:	d3 18       	sub	r13, r3
     184:	c6 18       	sub	r12, r6

00000186 <__trampolines_end>:
     186:	6e 61       	ori	r22, 0x1E	; 30
     188:	6e 00       	.word	0x006e	; ????

0000018a <__c.2332>:
     18a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     19a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1aa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ba:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1ca:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1da:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1ea:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1fa:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     20a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     21a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     22a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     23a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     24a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     25a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     26a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     27a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000288 <__c.2922>:
     288:	72 66 41 64 61 70 74 65 72 5f 72 65 63 65 69 76     rfAdapter_receiv
     298:	65 53 65 6e 73 6f 72 44 61 74 61 28 29 20 69 67     eSensorData() ig
     2a8:	6e 6f 72 65 64 20 25 64 20 56 61 6c 75 65 20 6f     nored %d Value o
     2b8:	66 20 75 6e 6b 6e 6f 77 6e 20 53 65 6e 73 6f 72     f unknown Sensor
     2c8:	0a 0a 0a 0a 00                                      .....

000002cd <__c.2919>:
     2cd:	72 66 41 64 61 70 74 65 72 5f 72 65 63 65 69 76     rfAdapter_receiv
     2dd:	65 53 65 6e 73 6f 72 44 61 74 61 28 29 20 69 67     eSensorData() ig
     2ed:	6e 6f 72 65 64 20 25 64 20 56 61 6c 75 65 20 6f     nored %d Value o
     2fd:	66 20 4a 61 6e 6e 69 63 6b 20 53 65 6e 73 6f 72     f Jannick Sensor
     30d:	0a 0a 0a 0a 00                                      .....

00000312 <__c.2916>:
     312:	72 66 41 64 61 70 74 65 72 5f 72 65 63 65 69 76     rfAdapter_receiv
     322:	65 53 65 6e 73 6f 72 44 61 74 61 28 29 20 69 67     eSensorData() ig
     332:	6e 6f 72 65 64 20 25 64 20 56 61 6c 75 65 20 6f     nored %d Value o
     342:	66 20 4e 69 6b 6c 61 73 20 53 65 6e 73 6f 72 0a     f Niklas Sensor.
     352:	0a 0a 0a 00                                         ....

00000356 <__c.2913>:
     356:	72 66 41 64 61 70 74 65 72 5f 72 65 63 65 69 76     rfAdapter_receiv
     366:	65 53 65 6e 73 6f 72 44 61 74 61 28 29 20 69 67     eSensorData() ig
     376:	6e 6f 72 65 64 20 25 64 20 56 61 6c 75 65 20 6f     nored %d Value o
     386:	66 20 52 69 63 68 61 72 64 20 53 65 6e 73 6f 72     f Richard Sensor
     396:	0a 0a 0a 0a 00                                      .....

0000039b <__c.2910>:
     39b:	72 66 41 64 61 70 74 65 72 5f 72 65 63 65 69 76     rfAdapter_receiv
     3ab:	65 53 65 6e 73 6f 72 44 61 74 61 28 29 20 69 67     eSensorData() ig
     3bb:	6e 6f 72 65 64 20 25 64 20 56 61 6c 75 65 20 6f     nored %d Value o
     3cb:	66 20 41 64 69 6c 20 53 65 6e 73 6f 72 0a 0a 0a     f Adil Sensor...
     3db:	0a 00                                               ..

000003dd <__c.2906>:
     3dd:	72 66 41 64 61 70 74 65 72 5f 72 65 63 65 69 76     rfAdapter_receiv
     3ed:	65 53 65 6e 73 6f 72 44 61 74 61 28 29 20 69 67     eSensorData() ig
     3fd:	6e 6f 72 65 64 20 25 64 20 56 61 6c 75 65 20 6f     nored %d Value o
     40d:	66 20 42 4f 4c 20 53 65 6e 73 6f 72 0a 0a 0a 0a     f BOL Sensor....
     41d:	0a 0a 00                                            ...

00000420 <__c.2895>:
	...

00000421 <__c.2897>:
     421:	49 6e 76 61 6c 69 64 20 6c 65 6e 67 74 68 20 66     Invalid length f
     431:	6f 72 20 43 4d 44 5f 53 45 4e 53 4f 52 5f 44 41     or CMD_SENSOR_DA
     441:	54 41 2e 20 4c 65 6e 67 74 68 20 77 2f 6f 20 63     TA. Length w/o c
     451:	6f 6d 6d 61 6e 64 20 69 73 20 25 64 20 69 6e 73     ommand is %d ins
     461:	74 65 61 64 20 6f 66 20 25 64 0a 0a 0a 0a 0a 0a     tead of %d......
	...

00000472 <__c.2890>:
     472:	50 72 69 6e 74 69 6e 67 20 74 6f 20 4c 43 44 3a     Printing to LCD:
     482:	20 25 73 0a 00                                       %s..

00000487 <__c.2888>:
     487:	49 6e 76 61 6c 69 64 20 6c 65 6e 67 74 68 20 66     Invalid length f
     497:	6f 72 20 43 4d 44 5f 4c 43 44 5f 50 52 49 4e 54     or CMD_LCD_PRINT
     4a7:	2e 20 4c 65 6e 67 74 68 20 6f 66 20 65 78 70 65     . Length of expe
     4b7:	63 74 65 64 20 53 74 72 69 6e 67 20 69 73 20 6e     cted String is n
     4c7:	6f 74 20 65 71 75 61 6c 20 74 6f 20 6c 65 6e 67     ot equal to leng
     4d7:	74 68 20 64 65 73 63 72 69 62 65 64 20 69 6e 20     th described in 
     4e7:	63 6d 64 5f 6c 63 64 50 72 69 6e 74 5f 74 20 6f     cmd_lcdPrint_t o
     4f7:	62 6a 65 63 74 0a 00                                bject..

000004fe <__c.2886>:
     4fe:	49 6e 76 61 6c 69 64 20 6c 65 6e 67 74 68 20 66     Invalid length f
     50e:	6f 72 20 43 4d 44 5f 4c 43 44 5f 50 52 49 4e 54     or CMD_LCD_PRINT
     51e:	2e 20 4c 65 6e 67 74 68 20 77 2f 6f 20 63 6f 6d     . Length w/o com
     52e:	6d 61 6e 64 20 69 73 20 25 64 20 69 6e 73 74 65     mand is %d inste
     53e:	61 64 20 6f 66 20 25 64 0a 00                       ad of %d..

00000548 <__c.2883>:
     548:	47 6f 74 6f 20 4c 43 44 3a 20 25 64 2c 20 25 64     Goto LCD: %d, %d
     558:	0a 00                                               ..

0000055a <__c.2881>:
     55a:	49 6e 76 61 6c 69 64 20 6c 65 6e 67 74 68 20 66     Invalid length f
     56a:	6f 72 20 43 4d 44 5f 4c 43 44 5f 47 4f 54 4f 2e     or CMD_LCD_GOTO.
     57a:	20 4c 65 6e 67 74 68 20 77 2f 6f 20 63 6f 6d 6d      Length w/o comm
     58a:	61 6e 64 20 69 73 20 25 64 20 69 6e 73 74 65 61     and is %d instea
     59a:	64 20 6f 66 20 25 64 0a 00                          d of %d..

000005a3 <__c.2856>:
     5a3:	44 61 74 61 20 69 73 20 6e 6f 74 20 53 74 61 72     Data is not Star
     5b3:	74 46 6c 61 67 20 32 2e 0a 00                       tFlag 2...

000005bd <__c.2854>:
     5bd:	44 61 74 61 20 69 73 20 6e 6f 74 20 53 74 61 72     Data is not Star
     5cd:	74 46 6c 61 67 20 31 2e 0a 00                       tFlag 1...

000005d7 <__c.2949>:
	...

000005d8 <__c.2951>:
     5d8:	53 65 6e 73 6f 72 20 25 64 20 77 61 73 20 6e 6f     Sensor %d was no
     5e8:	74 20 79 65 74 20 61 64 64 65 64 20 74 6f 20 74     t yet added to t
     5f8:	68 65 20 47 55 49 0a 00                             he GUI..

00000600 <__c.2942>:
	...

00000601 <__c.2944>:
     601:	73 65 6e 73 6f 72 5f 67 75 69 5f 65 6c 65 6d 65     sensor_gui_eleme
     611:	6e 74 73 5b 25 64 5d 20 77 61 73 20 75 70 64 61     nts[%d] was upda
     621:	74 65 64 0a 0a 00                                   ted...

00000627 <__c.2929>:
	...

00000628 <__c.2931>:
     628:	73 65 6e 73 6f 72 5f 67 75 69 5f 65 6c 65 6d 65     sensor_gui_eleme
     638:	6e 74 73 5b 25 64 5d 20 77 61 73 20 74 69 6d 65     nts[%d] was time
     648:	64 6f 75 74 0a 0a 00                                dout...

0000064f <__c.2924>:
	...

00000650 <__c.2926>:
     650:	67 75 69 5f 77 6f 72 6b 65 72 28 29 20 73 74 61     gui_worker() sta
     660:	72 74 65 64 00                                      rted.

00000665 <__c.2916>:
	...

00000666 <__c.2918>:
     666:	41 72 72 61 79 20 72 65 71 75 69 72 65 73 20 25     Array requires %
     676:	64 20 62 79 74 65 73 00                             d bytes.

0000067e <__c.2912>:
	...

0000067f <__c.2914>:
     67f:	53 54 41 43 4b 5f 53 49 5a 45 5f 50 52 4f 43 3a     STACK_SIZE_PROC:
     68f:	20 25 64 00                                          %d.

00000693 <__c.2894>:
     693:	43 6c 65 61 72 69 6e 67 20 44 69 73 70 6c 61 79     Clearing Display
     6a3:	0a 00                                               ..

000006a5 <__c.2878>:
     6a5:	5b 57 41 52 4e 5d 20 20 00                          [WARN]  .

000006ae <__c.2880>:
     6ae:	75 70 64 61 74 65 5f 67 75 69 5f 65 6c 65 6d 65     update_gui_eleme
     6be:	6e 74 28 29 20 54 45 4d 50 20 53 74 72 69 6e 67     nt() TEMP String
     6ce:	20 6c 65 6e 67 74 68 20 6f 75 74 20 6f 66 20 62      length out of b
     6de:	6f 75 6e 64 73 00                                   ounds.

000006e4 <__c.2873>:
     6e4:	5b 57 41 52 4e 5d 20 20 00                          [WARN]  .

000006ed <__c.2875>:
     6ed:	75 70 64 61 74 65 5f 67 75 69 5f 65 6c 65 6d 65     update_gui_eleme
     6fd:	6e 74 28 29 20 75 6e 6b 6e 6f 77 6e 20 75 69 5f     nt() unknown ui_
     70d:	73 74 61 74 65 00                                   state.

00000713 <__c.2864>:
     713:	5b 57 41 52 4e 5d 20 20 00                          [WARN]  .

0000071c <__c.2866>:
     71c:	75 70 64 61 74 65 5f 67 75 69 5f 65 6c 65 6d 65     update_gui_eleme
     72c:	6e 74 28 29 20 75 6e 6b 6e 6f 77 6e 20 75 69 5f     nt() unknown ui_
     73c:	73 74 61 74 65 00                                   state.

00000742 <__c.2855>:
     742:	5b 57 41 52 4e 5d 20 20 00                          [WARN]  .

0000074b <__c.2857>:
     74b:	75 70 64 61 74 65 5f 67 75 69 5f 65 6c 65 6d 65     update_gui_eleme
     75b:	6e 74 28 29 20 75 6e 6b 6e 6f 77 6e 20 75 69 5f     nt() unknown ui_
     76b:	73 74 61 74 65 00                                   state.

00000771 <__c.2846>:
     771:	5b 57 41 52 4e 5d 20 20 00                          [WARN]  .

0000077a <__c.2848>:
     77a:	75 70 64 61 74 65 5f 67 75 69 5f 65 6c 65 6d 65     update_gui_eleme
     78a:	6e 74 28 29 20 75 6e 6b 6e 6f 77 6e 20 75 69 5f     nt() unknown ui_
     79a:	73 74 61 74 65 00                                   state.

000007a0 <__c.2836>:
     7a0:	5b 57 41 52 4e 5d 20 20 00                          [WARN]  .

000007a9 <__c.2838>:
     7a9:	75 70 64 61 74 65 5f 67 75 69 5f 65 6c 65 6d 65     update_gui_eleme
     7b9:	6e 74 28 29 20 75 6e 6b 6e 6f 77 6e 20 75 69 5f     nt() unknown ui_
     7c9:	73 74 61 74 65 00                                   state.

000007cf <__c.2826>:
     7cf:	5b 57 41 52 4e 5d 20 20 00                          [WARN]  .

000007d8 <__c.2828>:
     7d8:	75 70 64 61 74 65 5f 67 75 69 5f 65 6c 65 6d 65     update_gui_eleme
     7e8:	6e 74 28 29 20 75 6e 6b 6e 6f 77 6e 20 75 69 5f     nt() unknown ui_
     7f8:	73 74 61 74 65 00                                   state.

000007fe <__c.2814>:
     7fe:	5b 57 41 52 4e 5d 20 20 00                          [WARN]  .

00000807 <__c.2816>:
     807:	75 70 64 61 74 65 5f 67 75 69 5f 65 6c 65 6d 65     update_gui_eleme
     817:	6e 74 28 29 20 54 45 4d 50 20 53 74 72 69 6e 67     nt() TEMP String
     827:	20 6c 65 6e 67 74 68 20 6f 75 74 20 6f 66 20 62      length out of b
     837:	6f 75 6e 64 73 00                                   ounds.

0000083d <__c.2799>:
     83d:	5b 57 41 52 4e 5d 20 20 00                          [WARN]  .

00000846 <__c.2801>:
     846:	21 21 20 61 64 64 5f 67 75 69 5f 65 6c 65 6d 65     !! add_gui_eleme
     856:	6e 74 28 29 20 68 61 64 20 6e 6f 20 73 70 61 63     nt() had no spac
     866:	65 20 69 6e 20 74 68 65 20 67 72 69 64 20 21 21     e in the grid !!
	...

00000877 <__c.2787>:
     877:	5b 49 4e 46 4f 5d 20 20 00                          [INFO]  .

00000880 <__c.2789>:
     880:	61 64 64 5f 67 75 69 5f 65 6c 65 6d 65 6e 74 28     add_gui_element(
     890:	29 20 61 64 64 65 64 20 65 6c 65 6d 65 6e 74 20     ) added element 
     8a0:	61 74 20 72 6f 77 3a 20 25 64 2c 20 63 6f 6c 75     at row: %d, colu
     8b0:	6d 6e 3a 20 25 64 00                                mn: %d.

000008b7 <__c.2780>:
     8b7:	5b 57 41 52 4e 5d 20 20 00                          [WARN]  .

000008c0 <__c.2782>:
     8c0:	61 64 64 5f 67 75 69 5f 65 6c 65 6d 65 6e 74 28     add_gui_element(
     8d0:	29 20 72 65 63 65 69 76 65 64 20 73 65 6e 73 6f     ) received senso
     8e0:	72 5f 67 75 69 5f 65 6c 65 6d 65 6e 74 73 5f 63     r_gui_elements_c
     8f0:	6f 75 6e 74 20 3e 3d 20 23 47 55 49 5f 45 4c 45     ount >= #GUI_ELE
     900:	4d 45 4e 54 5f 43 4f 4e 54 41 49 4e 45 52 5f 53     MENT_CONTAINER_S
     910:	49 5a 45 00                                         IZE.

00000914 <__c.2769>:
     914:	65 6e 71 75 65 75 65 5f 73 65 6e 73 6f 72 5f 64     enqueue_sensor_d
     924:	61 74 61 5f 69 6e 74 6f 5f 62 75 66 66 65 72 28     ata_into_buffer(
     934:	29 20 77 6f 75 6c 64 20 6f 76 65 72 66 6c 6f 77     ) would overflow
     944:	20 62 75 66 66 65 72 0a 0a 00                        buffer...

0000094e <__c.2453>:
	...

0000094f <__c.2455>:
     94f:	71 75 65 75 65 5f 70 75 73 68 28 29 20 68 65 61     queue_push() hea
     95f:	64 3a 20 25 64 2c 20 74 61 69 6c 3a 20 25 64 2c     d: %d, tail: %d,
     96f:	20 63 6f 75 6e 74 3a 20 25 64 00                     count: %d.

0000097a <__c.2288>:
     97a:	43 61 6e 27 74 20 70 6f 70 20 66 72 6f 6d 20 65     Can't pop from e
     98a:	6d 70 74 79 20 72 65 61 64 79 20 71 75 65 75 65     mpty ready queue
	...

0000099b <__c.2283>:
     99b:	43 61 6e 27 74 20 70 75 73 68 20 6f 6e 20 66 75     Can't push on fu
     9ab:	6c 6c 20 72 65 61 64 79 20 71 75 65 75 65 00        ll ready queue.

000009ba <__c.2073>:
     9ba:	20 20 20 20 20 20 20 20 00                                  .

000009c3 <__c.2289>:
     9c3:	5b 45 52 52 4f 52 5d 20 00                          [ERROR] .

000009cc <__c.2283>:
     9cc:	20 53 74 61 63 6b 20 63 6f 6c 6c 69 64 65 73 20      Stack collides 
     9dc:	77 69 74 68 20 67 6c 6f 62 61 6c 20 76 61 72 73     with global vars
	...

000009ed <__c.2281>:
     9ed:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     9fd:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     a0d:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     a1d:	2d 2d 0a 00                                         --..

00000a21 <__c.2277>:
     a21:	5b 49 4e 46 4f 5d 20 20 00                          [INFO]  .

00000a2a <__c.2279>:
     a2a:	55 73 65 64 20 67 6c 6f 62 61 6c 20 76 61 72 73     Used global vars
     a3a:	3a 20 25 64 2f 25 64 20 62 79 74 65 73 00           : %d/%d bytes.

00000a48 <__c.2273>:
     a48:	5b 49 4e 46 4f 5d 20 20 00                          [INFO]  .

00000a51 <__c.2275>:
     a51:	42 6f 6f 74 69 6e 67 20 44 45 4f 53 20 2e 2e 2e     Booting DEOS ...
	...

00000a62 <__c.2271>:
     a62:	0a 0a 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ..##############
     a72:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
     a82:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
     a92:	23 23 23 23 0a 00                                   ####..

00000a98 <__c.2269>:
     a98:	42 6f 6f 74 69 6e 67 20 44 45 4f 53 20 2e 2e 2e     Booting DEOS ...
	...

00000aa9 <__c.2445>:
     aa9:	6f 73 5f 73 74 61 72 74 53 63 68 65 64 75 6c 65     os_startSchedule
     ab9:	72 28 29 20 74 65 72 6d 69 6e 61 74 65 64 20 61     r() terminated a
     ac9:	67 61 69 6e 73 74 20 61 6c 6c 20 6f 64 64 73 20     gainst all odds 
     ad9:	2d 20 73 63 61 72 79 20 73 74 75 66 66 2e 2e 2e     - scary stuff...
	...

00000aea <__c.2440>:
     aea:	54 68 65 72 65 20 69 73 20 6e 6f 20 69 64 6c 65     There is no idle
     afa:	20 70 72 6f 63 00                                    proc.

00000b00 <__c.2418>:
     b00:	6f 73 5f 65 78 65 63 28 29 20 2d 3e 20 00           os_exec() -> .

00000b0e <__c.2420>:
     b0e:	4e 6f 20 66 72 65 65 20 73 6c 6f 74 20 61 76 61     No free slot ava
     b1e:	69 6c 61 62 6c 65 0a 00                             ilable..

00000b26 <__c.2384>:
     b26:	43 68 65 63 6b 73 75 6d 20 6d 69 73 6d 61 74 63     Checksum mismatc
     b36:	68 20 69 6e 20 70 72 6f 63 65 73 73 20 25 64 00     h in process %d.

00000b46 <__c.2378>:
     b46:	53 74 61 63 6b 20 70 6f 69 6e 74 65 72 20 6f 75     Stack pointer ou
     b56:	74 20 6f 66 20 62 6f 75 6e 64 73 20 69 6e 20 70     t of bounds in p
     b66:	72 6f 63 65 73 73 20 25 64 00                       rocess %d.

00000b70 <__c.2371>:
     b70:	43 72 69 74 2e 20 53 65 63 74 69 6f 6e 20 20 20     Crit. Section   
     b80:	75 6e 64 65 72 66 6c 6f 77 00                       underflow.

00000b8a <__c.2365>:
     b8a:	43 72 69 74 2e 20 53 65 63 74 69 6f 6e 20 20 20     Crit. Section   
     b9a:	6f 76 65 72 66 6c 6f 77 00 00                       overflow..

00000ba4 <__ctors_start>:
     ba4:	1e 1e       	adc	r1, r30
     ba6:	83 22       	and	r8, r19
     ba8:	94 22       	and	r9, r20
     baa:	a5 22       	and	r10, r21

00000bac <__ctors_end>:
     bac:	11 24       	eor	r1, r1
     bae:	1f be       	out	0x3f, r1	; 63
     bb0:	cf ef       	ldi	r28, 0xFF	; 255
     bb2:	d1 e2       	ldi	r29, 0x21	; 33
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	00 e0       	ldi	r16, 0x00	; 0
     bba:	0c bf       	out	0x3c, r16	; 60

00000bbc <__do_copy_data>:
     bbc:	13 e0       	ldi	r17, 0x03	; 3
     bbe:	a0 e0       	ldi	r26, 0x00	; 0
     bc0:	b2 e0       	ldi	r27, 0x02	; 2
     bc2:	e2 e8       	ldi	r30, 0x82	; 130
     bc4:	f9 e5       	ldi	r31, 0x59	; 89
     bc6:	00 e0       	ldi	r16, 0x00	; 0
     bc8:	0b bf       	out	0x3b, r16	; 59
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <__do_copy_data+0x14>
     bcc:	07 90       	elpm	r0, Z+
     bce:	0d 92       	st	X+, r0
     bd0:	a2 33       	cpi	r26, 0x32	; 50
     bd2:	b1 07       	cpc	r27, r17
     bd4:	d9 f7       	brne	.-10     	; 0xbcc <__do_copy_data+0x10>

00000bd6 <__do_clear_bss>:
     bd6:	26 e0       	ldi	r18, 0x06	; 6
     bd8:	a2 e3       	ldi	r26, 0x32	; 50
     bda:	b3 e0       	ldi	r27, 0x03	; 3
     bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <.do_clear_bss_start>

00000bde <.do_clear_bss_loop>:
     bde:	1d 92       	st	X+, r1

00000be0 <.do_clear_bss_start>:
     be0:	a6 31       	cpi	r26, 0x16	; 22
     be2:	b2 07       	cpc	r27, r18
     be4:	e1 f7       	brne	.-8      	; 0xbde <.do_clear_bss_loop>

00000be6 <__do_global_ctors>:
     be6:	15 e0       	ldi	r17, 0x05	; 5
     be8:	c6 ed       	ldi	r28, 0xD6	; 214
     bea:	d5 e0       	ldi	r29, 0x05	; 5
     bec:	00 e0       	ldi	r16, 0x00	; 0
     bee:	06 c0       	rjmp	.+12     	; 0xbfc <__do_global_ctors+0x16>
     bf0:	21 97       	sbiw	r28, 0x01	; 1
     bf2:	01 09       	sbc	r16, r1
     bf4:	80 2f       	mov	r24, r16
     bf6:	fe 01       	movw	r30, r28
     bf8:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <__tablejump2__>
     bfc:	c2 3d       	cpi	r28, 0xD2	; 210
     bfe:	d1 07       	cpc	r29, r17
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	08 07       	cpc	r16, r24
     c04:	a9 f7       	brne	.-22     	; 0xbf0 <__do_global_ctors+0xa>
     c06:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <main>
     c0a:	0c 94 bf 2c 	jmp	0x597e	; 0x597e <_exit>

00000c0e <__bad_interrupt>:
     c0e:	f8 c9       	rjmp	.-3088   	; 0x0 <__vectors>

00000c10 <rfAdapter_init>:
 * \return True if the communication has been initialized
 */
uint8_t rfAdapter_isInitialized()
{
    return rfAdapter_initialized;
}
     c10:	e5 d1       	rcall	.+970    	; 0xfdc <serialAdapter_init>
     c12:	84 b1       	in	r24, 0x04	; 4
     c14:	80 68       	ori	r24, 0x80	; 128
     c16:	84 b9       	out	0x04, r24	; 4
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <__data_end>
     c1e:	08 95       	ret

00000c20 <rfAdapter_worker>:
/*!
 *  Main task of adapter
 */
void rfAdapter_worker()
{
    serialAdapter_worker();
     c20:	24 c2       	rjmp	.+1096   	; 0x106a <serialAdapter_worker>
     c22:	08 95       	ret

00000c24 <rfAdapter_receiveSensorData>:
            return;
    }
}

void rfAdapter_receiveSensorData(sensor_data_t* sensor_data)
{
     c24:	fc 01       	movw	r30, r24
    switch (sensor_data->sensor_type)
     c26:	91 81       	ldd	r25, Z+1	; 0x01
     c28:	9b 30       	cpi	r25, 0x0B	; 11
     c2a:	01 f1       	breq	.+64     	; 0xc6c <rfAdapter_receiveSensorData+0x48>
     c2c:	38 f4       	brcc	.+14     	; 0xc3c <rfAdapter_receiveSensorData+0x18>
     c2e:	99 30       	cpi	r25, 0x09	; 9
     c30:	09 f4       	brne	.+2      	; 0xc34 <rfAdapter_receiveSensorData+0x10>
     c32:	55 c0       	rjmp	.+170    	; 0xcde <rfAdapter_receiveSensorData+0xba>
     c34:	9a 30       	cpi	r25, 0x0A	; 10
     c36:	09 f4       	brne	.+2      	; 0xc3a <rfAdapter_receiveSensorData+0x16>
     c38:	3f c0       	rjmp	.+126    	; 0xcb8 <rfAdapter_receiveSensorData+0x94>
     c3a:	64 c0       	rjmp	.+200    	; 0xd04 <rfAdapter_receiveSensorData+0xe0>
     c3c:	9c 30       	cpi	r25, 0x0C	; 12
     c3e:	19 f0       	breq	.+6      	; 0xc46 <rfAdapter_receiveSensorData+0x22>
     c40:	9e 30       	cpi	r25, 0x0E	; 14
     c42:	39 f1       	breq	.+78     	; 0xc92 <rfAdapter_receiveSensorData+0x6e>
     c44:	5f c0       	rjmp	.+190    	; 0xd04 <rfAdapter_receiveSensorData+0xe0>
    {
        case SENSOR_LPS28DFW: // BOL Sensor (1,3) // 11
        {
            // printf("rfAdapter_receiveSensorData() for BOL Sensor\n");
            if (sensor_data->sensor_data_type == PARAM_PRESSURE_PASCAL) //float
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	85 30       	cpi	r24, 0x05	; 5
     c4a:	19 f4       	brne	.+6      	; 0xc52 <rfAdapter_receiveSensorData+0x2e>
            {
                enqueue_sensor_data_into_buffer(sensor_data);
     c4c:	cf 01       	movw	r24, r30
     c4e:	fc c2       	rjmp	.+1528   	; 0x1248 <enqueue_sensor_data_into_buffer>
     c50:	08 95       	ret
            }
            else
            {
                printf_P(PSTR("rfAdapter_receiveSensorData() ignored %d Value of BOL Sensor\n\n\n\n\n\n"), sensor_data->sensor_data_type);
     c52:	1f 92       	push	r1
     c54:	8f 93       	push	r24
     c56:	8d ed       	ldi	r24, 0xDD	; 221
     c58:	93 e0       	ldi	r25, 0x03	; 3
     c5a:	9f 93       	push	r25
     c5c:	8f 93       	push	r24
     c5e:	0e 94 ce 2b 	call	0x579c	; 0x579c <printf_P>
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	08 95       	ret
        }
        break;

        case SENSOR_SHTC3: // Adil Sensor adress (1,7) // 15
        {
            if (sensor_data->sensor_data_type == PARAM_HUMIDITY_PERCENT) //float
     c6c:	82 81       	ldd	r24, Z+2	; 0x02
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	19 f4       	brne	.+6      	; 0xc78 <rfAdapter_receiveSensorData+0x54>
            {
                enqueue_sensor_data_into_buffer(sensor_data);
     c72:	cf 01       	movw	r24, r30
     c74:	e9 c2       	rjmp	.+1490   	; 0x1248 <enqueue_sensor_data_into_buffer>
     c76:	08 95       	ret
            }
            else
            {
                printf_P(PSTR("rfAdapter_receiveSensorData() ignored %d Value of Adil Sensor\n\n\n\n"), sensor_data->sensor_data_type);
     c78:	1f 92       	push	r1
     c7a:	8f 93       	push	r24
     c7c:	8b e9       	ldi	r24, 0x9B	; 155
     c7e:	93 e0       	ldi	r25, 0x03	; 3
     c80:	9f 93       	push	r25
     c82:	8f 93       	push	r24
     c84:	0e 94 ce 2b 	call	0x579c	; 0x579c <printf_P>
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	08 95       	ret
        }
        break;

        case SENSOR_SCD41: // Richard Sensor Addresse(1, 6) // 14
        {
            if (sensor_data->sensor_data_type == PARAM_CO2_PPM) //uint
     c92:	82 81       	ldd	r24, Z+2	; 0x02
     c94:	88 30       	cpi	r24, 0x08	; 8
            {

                enqueue_sensor_data_into_buffer(sensor_data);
     c96:	19 f4       	brne	.+6      	; 0xc9e <rfAdapter_receiveSensorData+0x7a>
     c98:	cf 01       	movw	r24, r30
     c9a:	d6 c2       	rjmp	.+1452   	; 0x1248 <enqueue_sensor_data_into_buffer>
     c9c:	08 95       	ret
            }
            else
            {
                printf_P(PSTR("rfAdapter_receiveSensorData() ignored %d Value of Richard Sensor\n\n\n\n"), sensor_data->sensor_data_type);
     c9e:	1f 92       	push	r1
     ca0:	8f 93       	push	r24
     ca2:	86 e5       	ldi	r24, 0x56	; 86
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	9f 93       	push	r25
     ca8:	8f 93       	push	r24
     caa:	0e 94 ce 2b 	call	0x579c	; 0x579c <printf_P>
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	08 95       	ret
            }
        }
        break;
        case SENSOR_SGP40: // Niklas Sensor Addresse(1,8) //8
        {
            if (sensor_data->sensor_data_type == PARAM_TVOC_PPB) //uint
     cb8:	82 81       	ldd	r24, Z+2	; 0x02
     cba:	87 30       	cpi	r24, 0x07	; 7
            {
                enqueue_sensor_data_into_buffer(sensor_data);
     cbc:	19 f4       	brne	.+6      	; 0xcc4 <rfAdapter_receiveSensorData+0xa0>
     cbe:	cf 01       	movw	r24, r30
     cc0:	c3 c2       	rjmp	.+1414   	; 0x1248 <enqueue_sensor_data_into_buffer>
     cc2:	08 95       	ret
            }
            else
            {
                printf_P(PSTR("rfAdapter_receiveSensorData() ignored %d Value of Niklas Sensor\n\n\n\n"), sensor_data->sensor_data_type);
     cc4:	1f 92       	push	r1
     cc6:	8f 93       	push	r24
     cc8:	82 e1       	ldi	r24, 0x12	; 18
     cca:	93 e0       	ldi	r25, 0x03	; 3
     ccc:	9f 93       	push	r25
     cce:	8f 93       	push	r24
     cd0:	0e 94 ce 2b 	call	0x579c	; 0x579c <printf_P>
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	08 95       	ret
            }
        }
        break;
        case SENSOR_TMP117: // Jannick Sensor Adresse(1,5) //13
        {
            if (sensor_data->sensor_data_type == PARAM_TEMPERATURE_CELSIUS) //float
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	81 30       	cpi	r24, 0x01	; 1
            {
                enqueue_sensor_data_into_buffer(sensor_data);
     ce2:	19 f4       	brne	.+6      	; 0xcea <rfAdapter_receiveSensorData+0xc6>
     ce4:	cf 01       	movw	r24, r30
     ce6:	b0 c2       	rjmp	.+1376   	; 0x1248 <enqueue_sensor_data_into_buffer>
     ce8:	08 95       	ret
            }
            else
            {
                printf_P(PSTR("rfAdapter_receiveSensorData() ignored %d Value of Jannick Sensor\n\n\n\n"), sensor_data->sensor_data_type);
     cea:	1f 92       	push	r1
     cec:	8f 93       	push	r24
     cee:	8d ec       	ldi	r24, 0xCD	; 205
     cf0:	92 e0       	ldi	r25, 0x02	; 2
     cf2:	9f 93       	push	r25
     cf4:	8f 93       	push	r24
     cf6:	0e 94 ce 2b 	call	0x579c	; 0x579c <printf_P>
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	08 95       	ret
        }
        break;

        default:
        {
            printf_P(PSTR("rfAdapter_receiveSensorData() ignored %d Value of unknown Sensor\n\n\n\n"), sensor_data->sensor_data_type);
     d04:	82 81       	ldd	r24, Z+2	; 0x02
     d06:	1f 92       	push	r1
     d08:	8f 93       	push	r24
     d0a:	88 e8       	ldi	r24, 0x88	; 136
     d0c:	92 e0       	ldi	r25, 0x02	; 2
     d0e:	9f 93       	push	r25
     d10:	8f 93       	push	r24
     d12:	0e 94 ce 2b 	call	0x579c	; 0x579c <printf_P>
        }
        break;
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	08 95       	ret

00000d20 <rfAdapter_receiveSetLed>:
 *  \param data Payload of received frame
 */
void rfAdapter_receiveSetLed(cmd_setLed_t* data)
{
    // printf("rfAdapter_receiveSetLed()");
    if ((bool)data->enable)
     d20:	fc 01       	movw	r30, r24
     d22:	80 81       	ld	r24, Z
     d24:	88 23       	and	r24, r24
     d26:	21 f0       	breq	.+8      	; 0xd30 <rfAdapter_receiveSetLed+0x10>
    {
        PORTB |= (1 << PB7); // on
     d28:	85 b1       	in	r24, 0x05	; 5
     d2a:	80 68       	ori	r24, 0x80	; 128
     d2c:	85 b9       	out	0x05, r24	; 5
     d2e:	08 95       	ret
    }
    else
    {
        PORTB &= ~(1 << PB7); // off
     d30:	85 b1       	in	r24, 0x05	; 5
     d32:	8f 77       	andi	r24, 0x7F	; 127
     d34:	85 b9       	out	0x05, r24	; 5
     d36:	08 95       	ret

00000d38 <rfAdapter_receiveToggleLed>:
 *  Handler that's called when command CMD_TOGGLE_LED was received
 */
void rfAdapter_receiveToggleLed()
{
    // printf("rfAdapter_receiveToggleLed()");
    PORTB ^= (1 << PB7);
     d38:	85 b1       	in	r24, 0x05	; 5
     d3a:	80 58       	subi	r24, 0x80	; 128
     d3c:	85 b9       	out	0x05, r24	; 5
     d3e:	08 95       	ret

00000d40 <rfAdapter_receiveLcdClear>:
 *  Handler that's called when command CMD_LCD_CLEAR was received
 */
void rfAdapter_receiveLcdClear()
{
    // printf("rfAdapter_receiveLcdClear()");
    lcd_clear();
     d40:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <lcd_clear>
     d44:	08 95       	ret

00000d46 <rfAdapter_receiveLcdGoto>:
 *  \param data Payload of received frame
 */
void rfAdapter_receiveLcdGoto(cmd_lcdGoto_t* data)
{
    // printf("rfAdapter_receiveLcdGoto()");
    lcd_goto(data->x, data->y);
     d46:	fc 01       	movw	r30, r24
     d48:	61 81       	ldd	r22, Z+1	; 0x01
     d4a:	80 81       	ld	r24, Z
     d4c:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <lcd_goto>
     d50:	08 95       	ret

00000d52 <rfAdapter_receiveLcdPrint>:
 *  Handler that's called when command CMD_LCD_PRINT was received
 *
 *  \param data Payload of received frame
 */
void rfAdapter_receiveLcdPrint(cmd_lcdPrint_t* data)
{
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	a1 97       	sbiw	r28, 0x21	; 33
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
    // printf("rfAdapter_receiveLcdPrint()");
    if (data->length > 32)
     d6a:	fc 01       	movw	r30, r24
     d6c:	40 81       	ld	r20, Z
     d6e:	41 32       	cpi	r20, 0x21	; 33
     d70:	b0 f4       	brcc	.+44     	; 0xd9e <rfAdapter_receiveLcdPrint+0x4c>
     d72:	8c 01       	movw	r16, r24
        return;

    char buffer[33];
    memcpy(buffer, data->message, data->length);
     d74:	bc 01       	movw	r22, r24
     d76:	6f 5f       	subi	r22, 0xFF	; 255
     d78:	7f 4f       	sbci	r23, 0xFF	; 255
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	ce 01       	movw	r24, r28
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <memcpy>
    buffer[data->length] = '\0';
     d84:	f8 01       	movw	r30, r16
     d86:	80 81       	ld	r24, Z
     d88:	e1 e0       	ldi	r30, 0x01	; 1
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	ec 0f       	add	r30, r28
     d8e:	fd 1f       	adc	r31, r29
     d90:	e8 0f       	add	r30, r24
     d92:	f1 1d       	adc	r31, r1
     d94:	10 82       	st	Z, r1
    lcd_writeString(buffer);
     d96:	ce 01       	movw	r24, r28
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <lcd_writeString>
}
     d9e:	a1 96       	adiw	r28, 0x21	; 33
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	08 95       	ret

00000db4 <serialAdapter_processFrame>:
 *  Is called on command frame receive
 *
 *  \param frame Received frame
 */
void serialAdapter_processFrame(frame_t* frame)
{
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	61 97       	sbiw	r28, 0x11	; 17
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61

    if (frame->header.length > COMM_MAX_PAYLOAD_LENGTH + sizeof(uint8_t) || frame->header.length < sizeof(command_t))
     dd0:	fc 01       	movw	r30, r24
     dd2:	24 81       	ldd	r18, Z+4	; 0x04
     dd4:	3f ef       	ldi	r19, 0xFF	; 255
     dd6:	32 0f       	add	r19, r18
     dd8:	31 33       	cpi	r19, 0x31	; 49
     dda:	08 f0       	brcs	.+2      	; 0xdde <serialAdapter_processFrame+0x2a>
     ddc:	cd c0       	rjmp	.+410    	; 0xf78 <serialAdapter_processFrame+0x1c4>
     dde:	8c 01       	movw	r16, r24
        return;
    }

    //printFrame(frame, "serialAdapter_processFrame");

    switch (frame->innerFrame.command)
     de0:	95 81       	ldd	r25, Z+5	; 0x05
     de2:	90 31       	cpi	r25, 0x10	; 16
     de4:	d1 f0       	breq	.+52     	; 0xe1a <serialAdapter_processFrame+0x66>
     de6:	28 f4       	brcc	.+10     	; 0xdf2 <serialAdapter_processFrame+0x3e>
     de8:	91 30       	cpi	r25, 0x01	; 1
     dea:	59 f0       	breq	.+22     	; 0xe02 <serialAdapter_processFrame+0x4e>
     dec:	92 30       	cpi	r25, 0x02	; 2
     dee:	81 f0       	breq	.+32     	; 0xe10 <serialAdapter_processFrame+0x5c>
     df0:	c3 c0       	rjmp	.+390    	; 0xf78 <serialAdapter_processFrame+0x1c4>
     df2:	92 31       	cpi	r25, 0x12	; 18
     df4:	09 f4       	brne	.+2      	; 0xdf8 <serialAdapter_processFrame+0x44>
     df6:	43 c0       	rjmp	.+134    	; 0xe7e <serialAdapter_processFrame+0xca>
     df8:	a8 f0       	brcs	.+42     	; 0xe24 <serialAdapter_processFrame+0x70>
     dfa:	90 32       	cpi	r25, 0x20	; 32
     dfc:	09 f4       	brne	.+2      	; 0xe00 <serialAdapter_processFrame+0x4c>
     dfe:	85 c0       	rjmp	.+266    	; 0xf0a <serialAdapter_processFrame+0x156>
     e00:	bb c0       	rjmp	.+374    	; 0xf78 <serialAdapter_processFrame+0x1c4>
    {
        case CMD_SET_LED:
        {
            if (frame->header.length - sizeof(command_t) != sizeof(cmd_setLed_t))
     e02:	22 30       	cpi	r18, 0x02	; 2
     e04:	09 f0       	breq	.+2      	; 0xe08 <serialAdapter_processFrame+0x54>
     e06:	b8 c0       	rjmp	.+368    	; 0xf78 <serialAdapter_processFrame+0x1c4>
                return;
            }
            else
            {
                // printf_P(PSTR("Setting LED to %d\n"), ((cmd_setLed_t *)&(frame->innerFrame.payload))->enable);
                rfAdapter_receiveSetLed(((cmd_setLed_t*)&(frame->innerFrame.payload)));
     e08:	cf 01       	movw	r24, r30
     e0a:	06 96       	adiw	r24, 0x06	; 6
     e0c:	89 df       	rcall	.-238    	; 0xd20 <rfAdapter_receiveSetLed>
            }
        }
        break;
     e0e:	b4 c0       	rjmp	.+360    	; 0xf78 <serialAdapter_processFrame+0x1c4>
        case CMD_TOGGLE_LED:
        {
            if (frame->header.length - sizeof(command_t) != 0)
     e10:	21 30       	cpi	r18, 0x01	; 1
     e12:	09 f0       	breq	.+2      	; 0xe16 <serialAdapter_processFrame+0x62>
                return;
            }
            else
            {
                // printf_P(PSTR("Toggling LED\n"));
                rfAdapter_receiveToggleLed();
     e14:	b1 c0       	rjmp	.+354    	; 0xf78 <serialAdapter_processFrame+0x1c4>
     e16:	90 df       	rcall	.-224    	; 0xd38 <rfAdapter_receiveToggleLed>
            }
        }
        break;
     e18:	af c0       	rjmp	.+350    	; 0xf78 <serialAdapter_processFrame+0x1c4>

        case CMD_LCD_CLEAR:
        {
            if (frame->header.length - sizeof(command_t) != 0)
     e1a:	21 30       	cpi	r18, 0x01	; 1
     e1c:	09 f0       	breq	.+2      	; 0xe20 <serialAdapter_processFrame+0x6c>
                return;
            }
            else
            {
                // printf_P(PSTR("Clearing LCD\n"));
                rfAdapter_receiveLcdClear();
     e1e:	ac c0       	rjmp	.+344    	; 0xf78 <serialAdapter_processFrame+0x1c4>
     e20:	8f df       	rcall	.-226    	; 0xd40 <rfAdapter_receiveLcdClear>
            }
        }
        break;
     e22:	aa c0       	rjmp	.+340    	; 0xf78 <serialAdapter_processFrame+0x1c4>

        case CMD_LCD_GOTO:
        {
            if (frame->header.length - sizeof(command_t) != sizeof(cmd_lcdGoto_t))
     e24:	23 30       	cpi	r18, 0x03	; 3
     e26:	a9 f0       	breq	.+42     	; 0xe52 <serialAdapter_processFrame+0x9e>
            {
                printf_P(PSTR("Invalid length for CMD_LCD_GOTO. Length w/o command is %d instead of %d\n"), frame->header.length - sizeof(command_t), sizeof(cmd_lcdGoto_t));
     e28:	1f 92       	push	r1
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	8f 93       	push	r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	21 50       	subi	r18, 0x01	; 1
     e32:	31 09       	sbc	r19, r1
     e34:	3f 93       	push	r19
     e36:	2f 93       	push	r18
     e38:	8a e5       	ldi	r24, 0x5A	; 90
     e3a:	95 e0       	ldi	r25, 0x05	; 5
     e3c:	9f 93       	push	r25
     e3e:	8f 93       	push	r24
     e40:	0e 94 ce 2b 	call	0x579c	; 0x579c <printf_P>
                return;
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	93 c0       	rjmp	.+294    	; 0xf78 <serialAdapter_processFrame+0x1c4>
            }
            else
            {
                printf_P(PSTR("Goto LCD: %d, %d\n"), ((cmd_lcdGoto_t*)&(frame->innerFrame.payload))->x, ((cmd_lcdGoto_t*)&(frame->innerFrame.payload))->y);
     e52:	97 81       	ldd	r25, Z+7	; 0x07
     e54:	86 81       	ldd	r24, Z+6	; 0x06
     e56:	1f 92       	push	r1
     e58:	9f 93       	push	r25
     e5a:	1f 92       	push	r1
     e5c:	8f 93       	push	r24
     e5e:	88 e4       	ldi	r24, 0x48	; 72
     e60:	95 e0       	ldi	r25, 0x05	; 5
     e62:	9f 93       	push	r25
     e64:	8f 93       	push	r24
     e66:	0e 94 ce 2b 	call	0x579c	; 0x579c <printf_P>
                rfAdapter_receiveLcdGoto((cmd_lcdGoto_t*)&(frame->innerFrame.payload));
     e6a:	c8 01       	movw	r24, r16
     e6c:	06 96       	adiw	r24, 0x06	; 6
     e6e:	6b df       	rcall	.-298    	; 0xd46 <rfAdapter_receiveLcdGoto>
            }
        }
        break;
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	7d c0       	rjmp	.+250    	; 0xf78 <serialAdapter_processFrame+0x1c4>

        case CMD_LCD_PRINT:
        {
            // cmd_lcdPrint_t toprnt = *(cmd_lcdPrint_t*)&(frame->innerFrame.payload);

            if (frame->header.length - sizeof(command_t) > sizeof(cmd_lcdPrint_t))
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	c9 01       	movw	r24, r18
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	82 32       	cpi	r24, 0x22	; 34
     e86:	91 05       	cpc	r25, r1
     e88:	90 f0       	brcs	.+36     	; 0xeae <serialAdapter_processFrame+0xfa>
            {
                printf_P(PSTR("Invalid length for CMD_LCD_PRINT. Length w/o command is %d instead of %d\n"), frame->header.length - sizeof(command_t), sizeof(cmd_lcdPrint_t));
     e8a:	1f 92       	push	r1
     e8c:	21 e2       	ldi	r18, 0x21	; 33
     e8e:	2f 93       	push	r18
     e90:	9f 93       	push	r25
     e92:	8f 93       	push	r24
     e94:	8e ef       	ldi	r24, 0xFE	; 254
     e96:	94 e0       	ldi	r25, 0x04	; 4
     e98:	9f 93       	push	r25
     e9a:	8f 93       	push	r24
     e9c:	0e 94 ce 2b 	call	0x579c	; 0x579c <printf_P>
                return;
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	65 c0       	rjmp	.+202    	; 0xf78 <serialAdapter_processFrame+0x1c4>
            }
            else if ((*(cmd_lcdPrint_t*)&(frame->innerFrame.payload)).length != frame->header.length - sizeof(command_t) - sizeof((*(cmd_lcdPrint_t*)&(frame->innerFrame.payload)).length))
     eae:	46 81       	ldd	r20, Z+6	; 0x06
     eb0:	50 e0       	ldi	r21, 0x00	; 0
     eb2:	22 50       	subi	r18, 0x02	; 2
     eb4:	31 09       	sbc	r19, r1
     eb6:	42 17       	cp	r20, r18
     eb8:	53 07       	cpc	r21, r19
     eba:	91 f0       	breq	.+36     	; 0xee0 <serialAdapter_processFrame+0x12c>
            {
                printf_P(PSTR("Invalid length for CMD_LCD_PRINT. Length of expected String is not equal to length described in cmd_lcdPrint_t object\n"), frame->header.length - sizeof(command_t), sizeof(cmd_lcdPrint_t));
     ebc:	1f 92       	push	r1
     ebe:	21 e2       	ldi	r18, 0x21	; 33
     ec0:	2f 93       	push	r18
     ec2:	9f 93       	push	r25
     ec4:	8f 93       	push	r24
     ec6:	87 e8       	ldi	r24, 0x87	; 135
     ec8:	94 e0       	ldi	r25, 0x04	; 4
     eca:	9f 93       	push	r25
     ecc:	8f 93       	push	r24
     ece:	0e 94 ce 2b 	call	0x579c	; 0x579c <printf_P>
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	4c c0       	rjmp	.+152    	; 0xf78 <serialAdapter_processFrame+0x1c4>
            }
            else
            {
                printf_P(PSTR("Printing to LCD: %s\n"), ((cmd_lcdPrint_t*)&(frame->innerFrame.payload))->message);
     ee0:	7f 01       	movw	r14, r30
     ee2:	f6 e0       	ldi	r31, 0x06	; 6
     ee4:	ef 0e       	add	r14, r31
     ee6:	f1 1c       	adc	r15, r1
     ee8:	c8 01       	movw	r24, r16
     eea:	07 96       	adiw	r24, 0x07	; 7
     eec:	9f 93       	push	r25
     eee:	8f 93       	push	r24
     ef0:	82 e7       	ldi	r24, 0x72	; 114
     ef2:	94 e0       	ldi	r25, 0x04	; 4
     ef4:	9f 93       	push	r25
     ef6:	8f 93       	push	r24
     ef8:	0e 94 ce 2b 	call	0x579c	; 0x579c <printf_P>

                rfAdapter_receiveLcdPrint((cmd_lcdPrint_t*)&(frame->innerFrame.payload));
     efc:	c7 01       	movw	r24, r14
     efe:	29 df       	rcall	.-430    	; 0xd52 <rfAdapter_receiveLcdPrint>
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	37 c0       	rjmp	.+110    	; 0xf78 <serialAdapter_processFrame+0x1c4>
        case CMD_SENSOR_DATA:
        {
            uint8_t test1 = frame->header.length - sizeof(command_t);
            uint8_t test2 = sizeof(cmd_sensorData_t);

            if (test1 != test2)
     f0a:	36 30       	cpi	r19, 0x06	; 6
     f0c:	a9 f0       	breq	.+42     	; 0xf38 <serialAdapter_processFrame+0x184>
            {
                DEBUG("Invalid length for CMD_SENSOR_DATA. Length w/o command is %d instead of %d\n\n\n\n\n\n", test1, test2);
     f0e:	1f 92       	push	r1
     f10:	86 e0       	ldi	r24, 0x06	; 6
     f12:	8f 93       	push	r24
     f14:	1f 92       	push	r1
     f16:	3f 93       	push	r19
     f18:	81 e2       	ldi	r24, 0x21	; 33
     f1a:	94 e0       	ldi	r25, 0x04	; 4
     f1c:	9f 93       	push	r25
     f1e:	8f 93       	push	r24
     f20:	80 e2       	ldi	r24, 0x20	; 32
     f22:	94 e0       	ldi	r25, 0x04	; 4
     f24:	9f 93       	push	r25
     f26:	8f 93       	push	r24
     f28:	0e 94 4d 1a 	call	0x349a	; 0x349a <terminal_log_printf_p>
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	20 c0       	rjmp	.+64     	; 0xf78 <serialAdapter_processFrame+0x1c4>
            }
            else
            {
                cmd_sensorData_t payload = *(cmd_sensorData_t*)frame->innerFrame.payload;
     f38:	86 e0       	ldi	r24, 0x06	; 6
     f3a:	36 96       	adiw	r30, 0x06	; 6
     f3c:	de 01       	movw	r26, r28
     f3e:	1c 96       	adiw	r26, 0x0c	; 12
     f40:	01 90       	ld	r0, Z+
     f42:	0d 92       	st	X+, r0
     f44:	8a 95       	dec	r24
     f46:	e1 f7       	brne	.-8      	; 0xf40 <serialAdapter_processFrame+0x18c>

                sensor_data_t sensor_data;
                sensor_data.sensor_src_address = frame->header.srcAddr;
     f48:	f8 01       	movw	r30, r16
     f4a:	82 81       	ldd	r24, Z+2	; 0x02
     f4c:	89 83       	std	Y+1, r24	; 0x01
                sensor_data.sensor_type = payload.sensor;
     f4e:	8c 85       	ldd	r24, Y+12	; 0x0c
     f50:	8a 83       	std	Y+2, r24	; 0x02
                sensor_data.sensor_data_type = payload.paramType;
     f52:	8d 85       	ldd	r24, Y+13	; 0x0d
     f54:	8b 83       	std	Y+3, r24	; 0x03
                sensor_data.sensor_data_value = payload.param;
     f56:	8e 85       	ldd	r24, Y+14	; 0x0e
     f58:	9f 85       	ldd	r25, Y+15	; 0x0f
     f5a:	a8 89       	ldd	r26, Y+16	; 0x10
     f5c:	b9 89       	ldd	r27, Y+17	; 0x11
     f5e:	8c 83       	std	Y+4, r24	; 0x04
     f60:	9d 83       	std	Y+5, r25	; 0x05
     f62:	ae 83       	std	Y+6, r26	; 0x06
     f64:	bf 83       	std	Y+7, r27	; 0x07
                sensor_data.sensor_last_update = getSystemTime_ms();
     f66:	0e 94 82 1c 	call	0x3904	; 0x3904 <getSystemTime_ms>
     f6a:	68 87       	std	Y+8, r22	; 0x08
     f6c:	79 87       	std	Y+9, r23	; 0x09
     f6e:	8a 87       	std	Y+10, r24	; 0x0a

                rfAdapter_receiveSensorData(&sensor_data);
     f70:	9b 87       	std	Y+11, r25	; 0x0b
     f72:	ce 01       	movw	r24, r28
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	56 de       	rcall	.-852    	; 0xc24 <rfAdapter_receiveSensorData>
        break;

        default:
            return;
    }
}
     f78:	61 96       	adiw	r28, 0x11	; 17
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	de bf       	out	0x3e, r29	; 62
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	cd bf       	out	0x3d, r28	; 61
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	ff 90       	pop	r15
     f8e:	ef 90       	pop	r14
     f90:	08 95       	ret

00000f92 <serialAdapter_hasTimeout>:
{
    while (xbee_getNumberOfBytesReceived() == 0)
    {
        os_yield();
    }
}
     f92:	8f 92       	push	r8
     f94:	9f 92       	push	r9
     f96:	af 92       	push	r10
     f98:	bf 92       	push	r11
     f9a:	cf 92       	push	r12
     f9c:	df 92       	push	r13
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	4b 01       	movw	r8, r22
     fa4:	5c 01       	movw	r10, r24
     fa6:	69 01       	movw	r12, r18
     fa8:	7a 01       	movw	r14, r20
     faa:	0e 94 82 1c 	call	0x3904	; 0x3904 <getSystemTime_ms>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	88 19       	sub	r24, r8
     fb4:	99 09       	sbc	r25, r9
     fb6:	aa 09       	sbc	r26, r10
     fb8:	bb 09       	sbc	r27, r11
     fba:	21 e0       	ldi	r18, 0x01	; 1
     fbc:	8c 15       	cp	r24, r12
     fbe:	9d 05       	cpc	r25, r13
     fc0:	ae 05       	cpc	r26, r14
     fc2:	bf 05       	cpc	r27, r15
     fc4:	08 f4       	brcc	.+2      	; 0xfc8 <serialAdapter_hasTimeout+0x36>
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	82 2f       	mov	r24, r18
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	bf 90       	pop	r11
     fd4:	af 90       	pop	r10
     fd6:	9f 90       	pop	r9
     fd8:	8f 90       	pop	r8
     fda:	08 95       	ret

00000fdc <serialAdapter_init>:
/*!
 *  Initializes the serialAdapter and their dependencies
 */
void serialAdapter_init(void)
{
    xbee_init();
     fdc:	e3 c0       	rjmp	.+454    	; 0x11a4 <xbee_init>
     fde:	08 95       	ret

00000fe0 <serialAdapter_waitForData>:
 *  \param byteCount Count of bytes that need to arrive so that the function will unblock
 *  \param frameTimestamp Start time of the first byte arrived from which the timeout will be calculated on
 *  \return False when it times out.
 */
bool serialAdapter_waitForData(uint16_t byteCount, time_t frameTimestamp)
{
     fe0:	cf 92       	push	r12
     fe2:	df 92       	push	r13
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	ec 01       	movw	r28, r24
     fee:	6a 01       	movw	r12, r20
     ff0:	7b 01       	movw	r14, r22
    int i = xbee_getNumberOfBytesReceived();
     ff2:	08 d1       	rcall	.+528    	; 0x1204 <xbee_getNumberOfBytesReceived>

    while (i < byteCount)
     ff4:	0c c0       	rjmp	.+24     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
    {
        if (serialAdapter_hasTimeout(frameTimestamp, SERIAL_ADAPTER_READ_TIMEOUT_MS))
     ff6:	24 ef       	ldi	r18, 0xF4	; 244
     ff8:	31 e0       	ldi	r19, 0x01	; 1
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	c7 01       	movw	r24, r14
    1000:	b6 01       	movw	r22, r12
    1002:	c7 df       	rcall	.-114    	; 0xf92 <serialAdapter_hasTimeout>
    1004:	81 11       	cpse	r24, r1
    1006:	08 c0       	rjmp	.+16     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
            return false;
        else
            os_yield();
    1008:	0e 94 a2 20 	call	0x4144	; 0x4144 <os_yield>
        i = xbee_getNumberOfBytesReceived();
    100c:	fb d0       	rcall	.+502    	; 0x1204 <xbee_getNumberOfBytesReceived>
 */
bool serialAdapter_waitForData(uint16_t byteCount, time_t frameTimestamp)
{
    int i = xbee_getNumberOfBytesReceived();

    while (i < byteCount)
    100e:	8c 17       	cp	r24, r28
    1010:	9d 07       	cpc	r25, r29
    1012:	88 f3       	brcs	.-30     	; 0xff6 <serialAdapter_waitForData+0x16>
            return false;
        else
            os_yield();
        i = xbee_getNumberOfBytesReceived();
    }
    return true;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	01 c0       	rjmp	.+2      	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    int i = xbee_getNumberOfBytesReceived();

    while (i < byteCount)
    {
        if (serialAdapter_hasTimeout(frameTimestamp, SERIAL_ADAPTER_READ_TIMEOUT_MS))
            return false;
    1018:	80 e0       	ldi	r24, 0x00	; 0
        else
            os_yield();
        i = xbee_getNumberOfBytesReceived();
    }
    return true;
}
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	ff 90       	pop	r15
    1020:	ef 90       	pop	r14
    1022:	df 90       	pop	r13
    1024:	cf 90       	pop	r12
    1026:	08 95       	ret

00001028 <serialAdapter_calculateChecksum>:
 *  \param checksum pointer to a checksum that will be updated
 *  \param data buffer on which the checksum will be calculated
 *  \param length size of the given buffer
 */
void serialAdapter_calculateChecksum(checksum_t* checksum, void* data, uint8_t length)
{
    1028:	fc 01       	movw	r30, r24
    for (uint8_t i = 0; i < length; i++)
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	08 c0       	rjmp	.+16     	; 0x103e <serialAdapter_calculateChecksum+0x16>
    {
        *checksum ^= ((uint8_t*)data)[i];
    102e:	db 01       	movw	r26, r22
    1030:	a9 0f       	add	r26, r25
    1032:	b1 1d       	adc	r27, r1
    1034:	2c 91       	ld	r18, X
    1036:	80 81       	ld	r24, Z
    1038:	28 27       	eor	r18, r24
    103a:	20 83       	st	Z, r18
 *  \param data buffer on which the checksum will be calculated
 *  \param length size of the given buffer
 */
void serialAdapter_calculateChecksum(checksum_t* checksum, void* data, uint8_t length)
{
    for (uint8_t i = 0; i < length; i++)
    103c:	9f 5f       	subi	r25, 0xFF	; 255
    103e:	94 17       	cp	r25, r20
    1040:	b0 f3       	brcs	.-20     	; 0x102e <serialAdapter_calculateChecksum+0x6>
    {
        *checksum ^= ((uint8_t*)data)[i];
    }
}
    1042:	08 95       	ret

00001044 <serialAdapter_calculateFrameChecksum>:
 *
 *  \param checksum pointer to a checksum that will be updated
 *  \param frame data on which the checksum will be calculated
 */
void serialAdapter_calculateFrameChecksum(checksum_t* checksum, frame_t* frame)
{
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	8c 01       	movw	r16, r24
    104e:	eb 01       	movw	r28, r22
    serialAdapter_calculateChecksum(checksum, &frame->header, sizeof(frame->header));
    1050:	45 e0       	ldi	r20, 0x05	; 5
    1052:	ea df       	rcall	.-44     	; 0x1028 <serialAdapter_calculateChecksum>
    serialAdapter_calculateChecksum(checksum, &frame->innerFrame, frame->header.length);
    1054:	be 01       	movw	r22, r28
    1056:	6b 5f       	subi	r22, 0xFB	; 251
    1058:	7f 4f       	sbci	r23, 0xFF	; 255
    105a:	4c 81       	ldd	r20, Y+4	; 0x04
    105c:	c8 01       	movw	r24, r16
    105e:	e4 df       	rcall	.-56     	; 0x1028 <serialAdapter_calculateChecksum>
}
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	08 95       	ret

0000106a <serialAdapter_worker>:
/*!
 *  Reads incoming data and processes it. Needs to be called periodically.
 *  Don't read from UART in any other process while this is running.
 */
void serialAdapter_worker()
{
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	ea 97       	sbiw	r28, 0x3a	; 58
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    if (!serialAdapter_waitForData(sizeof(start_flag_t), getSystemTime_ms()))
    107e:	0e 94 82 1c 	call	0x3904	; 0x3904 <getSystemTime_ms>
    1082:	ab 01       	movw	r20, r22
    1084:	bc 01       	movw	r22, r24
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	aa df       	rcall	.-172    	; 0xfe0 <serialAdapter_waitForData>
    108c:	88 23       	and	r24, r24
    108e:	09 f4       	brne	.+2      	; 0x1092 <serialAdapter_worker+0x28>
    1090:	80 c0       	rjmp	.+256    	; 0x1192 <serialAdapter_worker+0x128>
    }

    // Parse header one by one, abort if first byte is not part of the start flag
    uint8_t flag_buffer[sizeof(start_flag_t)];

    if (xbee_readBuffer(&flag_buffer[0], 1) != XBEE_SUCCESS)
    1092:	61 e0       	ldi	r22, 0x01	; 1
    1094:	ce 01       	movw	r24, r28
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	b8 d0       	rcall	.+368    	; 0x120a <xbee_readBuffer>
    109a:	81 11       	cpse	r24, r1
    109c:	7a c0       	rjmp	.+244    	; 0x1192 <serialAdapter_worker+0x128>
    {
        return;
    }

    if (flag_buffer[0] != (serialAdapter_startFlag & 0xFF))
    109e:	29 81       	ldd	r18, Y+1	; 0x01
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <serialAdapter_startFlag>
    10a6:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <serialAdapter_startFlag+0x1>
    10aa:	99 27       	eor	r25, r25
    10ac:	28 17       	cp	r18, r24
    10ae:	39 07       	cpc	r19, r25
    10b0:	49 f0       	breq	.+18     	; 0x10c4 <serialAdapter_worker+0x5a>
    {
        printf_P(PSTR("Data is not StartFlag 1.\n"));
    10b2:	8d eb       	ldi	r24, 0xBD	; 189
    10b4:	95 e0       	ldi	r25, 0x05	; 5
    10b6:	9f 93       	push	r25
    10b8:	8f 93       	push	r24
    10ba:	0e 94 ce 2b 	call	0x579c	; 0x579c <printf_P>
        return;
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	67 c0       	rjmp	.+206    	; 0x1192 <serialAdapter_worker+0x128>

    }
    if (xbee_readBuffer(&flag_buffer[1], 1) != XBEE_SUCCESS)
    10c4:	61 e0       	ldi	r22, 0x01	; 1
    10c6:	ce 01       	movw	r24, r28
    10c8:	02 96       	adiw	r24, 0x02	; 2
    10ca:	9f d0       	rcall	.+318    	; 0x120a <xbee_readBuffer>
    10cc:	81 11       	cpse	r24, r1
    10ce:	61 c0       	rjmp	.+194    	; 0x1192 <serialAdapter_worker+0x128>
    {
        return;
    }


    if (flag_buffer[1] != ((serialAdapter_startFlag >> 8) & 0xFF)) {
    10d0:	2a 81       	ldd	r18, Y+2	; 0x02
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <serialAdapter_startFlag+0x1>
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	28 17       	cp	r18, r24
    10dc:	39 07       	cpc	r19, r25
    10de:	49 f0       	breq	.+18     	; 0x10f2 <serialAdapter_worker+0x88>
        printf_P(PSTR("Data is not StartFlag 2.\n"));
    10e0:	83 ea       	ldi	r24, 0xA3	; 163
    10e2:	95 e0       	ldi	r25, 0x05	; 5
    10e4:	9f 93       	push	r25
    10e6:	8f 93       	push	r24
    10e8:	0e 94 ce 2b 	call	0x579c	; 0x579c <printf_P>
        return;
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	50 c0       	rjmp	.+160    	; 0x1192 <serialAdapter_worker+0x128>
    }

    // Wait for arrival of complete header

    if (!serialAdapter_waitForData(sizeof(frame_header_t) - (sizeof(start_flag_t)), getSystemTime_ms()))
    10f2:	0e 94 82 1c 	call	0x3904	; 0x3904 <getSystemTime_ms>
    10f6:	ab 01       	movw	r20, r22
    10f8:	bc 01       	movw	r22, r24
    10fa:	83 e0       	ldi	r24, 0x03	; 3
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	70 df       	rcall	.-288    	; 0xfe0 <serialAdapter_waitForData>
    1100:	88 23       	and	r24, r24
    1102:	09 f4       	brne	.+2      	; 0x1106 <serialAdapter_worker+0x9c>
    1104:	46 c0       	rjmp	.+140    	; 0x1192 <serialAdapter_worker+0x128>
    }


    frame_t received_frame;

    received_frame.header.startFlag = serialAdapter_startFlag;
    1106:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <serialAdapter_startFlag>
    110a:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <serialAdapter_startFlag+0x1>
    110e:	9c 83       	std	Y+4, r25	; 0x04

    int err;
    err = xbee_readBuffer((uint8_t*)&received_frame.header.srcAddr, sizeof(received_frame.header.srcAddr));
    1110:	8b 83       	std	Y+3, r24	; 0x03
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	ce 01       	movw	r24, r28
    1116:	05 96       	adiw	r24, 0x05	; 5
    1118:	78 d0       	rcall	.+240    	; 0x120a <xbee_readBuffer>
    if (err != XBEE_SUCCESS)
    111a:	81 11       	cpse	r24, r1
    {
        return;
    }

    err = xbee_readBuffer((uint8_t*)&received_frame.header.destAddr, sizeof(received_frame.header.destAddr));
    111c:	3a c0       	rjmp	.+116    	; 0x1192 <serialAdapter_worker+0x128>
    111e:	61 e0       	ldi	r22, 0x01	; 1
    1120:	ce 01       	movw	r24, r28
    1122:	06 96       	adiw	r24, 0x06	; 6
    if (err != XBEE_SUCCESS)
    1124:	72 d0       	rcall	.+228    	; 0x120a <xbee_readBuffer>
    1126:	81 11       	cpse	r24, r1
    {
        return;
    }

    err = xbee_readBuffer((uint8_t*)&received_frame.header.length, sizeof(received_frame.header.length));
    1128:	34 c0       	rjmp	.+104    	; 0x1192 <serialAdapter_worker+0x128>
    112a:	61 e0       	ldi	r22, 0x01	; 1
    112c:	ce 01       	movw	r24, r28
    112e:	07 96       	adiw	r24, 0x07	; 7
    1130:	6c d0       	rcall	.+216    	; 0x120a <xbee_readBuffer>
    if (err != XBEE_SUCCESS)
    1132:	81 11       	cpse	r24, r1
    1134:	2e c0       	rjmp	.+92     	; 0x1192 <serialAdapter_worker+0x128>
    {
        return;
    }


    if (received_frame.header.length > COMM_MAX_INNER_FRAME_LENGTH)
    1136:	8f 81       	ldd	r24, Y+7	; 0x07
    1138:	82 33       	cpi	r24, 0x32	; 50
    113a:	58 f5       	brcc	.+86     	; 0x1192 <serialAdapter_worker+0x128>
        return;

    // Wait for complete inner frame and footer
    if (!serialAdapter_waitForData(received_frame.header.length + sizeof(frame_footer_t), getSystemTime_ms()))
    113c:	0e 94 82 1c 	call	0x3904	; 0x3904 <getSystemTime_ms>
    1140:	ab 01       	movw	r20, r22
    1142:	bc 01       	movw	r22, r24
    1144:	8f 81       	ldd	r24, Y+7	; 0x07
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	4a df       	rcall	.-364    	; 0xfe0 <serialAdapter_waitForData>
    114c:	88 23       	and	r24, r24
    {
        return;
    }

    // Read inner frame
    err = xbee_readBuffer((uint8_t*)&received_frame.innerFrame, received_frame.header.length);
    114e:	09 f1       	breq	.+66     	; 0x1192 <serialAdapter_worker+0x128>
    1150:	6f 81       	ldd	r22, Y+7	; 0x07
    1152:	ce 01       	movw	r24, r28
    1154:	08 96       	adiw	r24, 0x08	; 8
    if (err != XBEE_SUCCESS)
    1156:	59 d0       	rcall	.+178    	; 0x120a <xbee_readBuffer>
    1158:	81 11       	cpse	r24, r1
    {
        return;
    }

    // Read footer
    err = xbee_readBuffer((uint8_t*)&received_frame.footer, sizeof(frame_footer_t));
    115a:	1b c0       	rjmp	.+54     	; 0x1192 <serialAdapter_worker+0x128>
    115c:	61 e0       	ldi	r22, 0x01	; 1
    115e:	ce 01       	movw	r24, r28
    1160:	c9 96       	adiw	r24, 0x39	; 57
    if (err != XBEE_SUCCESS)
    1162:	53 d0       	rcall	.+166    	; 0x120a <xbee_readBuffer>
    1164:	81 11       	cpse	r24, r1
        return;
    }


    // Read checksum
    checksum_t frame_checksum = INITIAL_CHECKSUM_VALUE;
    1166:	15 c0       	rjmp	.+42     	; 0x1192 <serialAdapter_worker+0x128>
    serialAdapter_calculateFrameChecksum(&frame_checksum, &received_frame);
    1168:	1a ae       	std	Y+58, r1	; 0x3a
    116a:	be 01       	movw	r22, r28
    116c:	6d 5f       	subi	r22, 0xFD	; 253
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	ce 01       	movw	r24, r28
    1172:	ca 96       	adiw	r24, 0x3a	; 58
    1174:	67 df       	rcall	.-306    	; 0x1044 <serialAdapter_calculateFrameChecksum>



    // Verify checksum
    if (frame_checksum != received_frame.footer.checksum)
    1176:	99 ad       	ldd	r25, Y+57	; 0x39
    1178:	8a ad       	ldd	r24, Y+58	; 0x3a
    117a:	98 13       	cpse	r25, r24
        return;

    // Check if we are addressed by this frame
    if (received_frame.header.destAddr != ADDRESS_BROADCAST && received_frame.header.destAddr != serialAdapter_address)
    117c:	0a c0       	rjmp	.+20     	; 0x1192 <serialAdapter_worker+0x128>
    117e:	8e 81       	ldd	r24, Y+6	; 0x06
    1180:	8f 3f       	cpi	r24, 0xFF	; 255
    1182:	21 f0       	breq	.+8      	; 0x118c <serialAdapter_worker+0x122>
    1184:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1188:	89 13       	cpse	r24, r25
        return;

    // Forward to next layer
    serialAdapter_processFrame(&received_frame);
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <serialAdapter_worker+0x128>
    118c:	ce 01       	movw	r24, r28
    118e:	03 96       	adiw	r24, 0x03	; 3
    1190:	11 de       	rcall	.-990    	; 0xdb4 <serialAdapter_processFrame>
}
    1192:	ea 96       	adiw	r28, 0x3a	; 58
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	08 95       	ret

000011a4 <xbee_init>:
{
	for(int i = 0; i < length;i++)
	{
		xbee_write(*(((uint8_t*)data)+i));
	}
}
    11a4:	89 e1       	ldi	r24, 0x19	; 25
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <uart1_init>
    11ac:	08 95       	ret

000011ae <xbee_read>:
 *
 *  \param byte Reference parameter where the read byte will be written to
 *  \return Error code or XBEE_SUCCESS. When XBEE_BUFFER_INCONSISTENCY gets returned, `byte` still gets updated
 */
uint8_t xbee_read(uint8_t *byte)
{
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	ec 01       	movw	r28, r24
	//we are assuming that "int" from the uart library is implemented as uint16_t, kinda ugly ngl
	uint16_t temp = (uint16_t)uart1_getc();
    11b4:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <uart1_getc>
	
	switch((temp >> 8) & 0xFF)
    11b8:	29 2f       	mov	r18, r25
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	21 15       	cp	r18, r1
    11be:	92 e0       	ldi	r25, 0x02	; 2
    11c0:	39 07       	cpc	r19, r25
    11c2:	b9 f0       	breq	.+46     	; 0x11f2 <xbee_read+0x44>
    11c4:	38 f4       	brcc	.+14     	; 0x11d4 <xbee_read+0x26>
    11c6:	21 15       	cp	r18, r1
    11c8:	31 05       	cpc	r19, r1
    11ca:	69 f0       	breq	.+26     	; 0x11e6 <xbee_read+0x38>
    11cc:	21 15       	cp	r18, r1
    11ce:	31 40       	sbci	r19, 0x01	; 1
    11d0:	a9 f0       	breq	.+42     	; 0x11fc <xbee_read+0x4e>
    11d2:	12 c0       	rjmp	.+36     	; 0x11f8 <xbee_read+0x4a>
    11d4:	21 15       	cp	r18, r1
    11d6:	98 e0       	ldi	r25, 0x08	; 8
    11d8:	39 07       	cpc	r19, r25
    11da:	41 f0       	breq	.+16     	; 0x11ec <xbee_read+0x3e>
    11dc:	21 15       	cp	r18, r1
    11de:	30 41       	sbci	r19, 0x10	; 16
    11e0:	59 f4       	brne	.+22     	; 0x11f8 <xbee_read+0x4a>
		}
		break;
		
		case UART_FRAME_ERROR:
		{
			return XBEE_READ_ERROR;
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	0c c0       	rjmp	.+24     	; 0x11fe <xbee_read+0x50>
	
	switch((temp >> 8) & 0xFF)
	{
		case 0:
		{
			*byte = (uint8_t)temp;
    11e6:	88 83       	st	Y, r24
			return XBEE_SUCCESS;
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	09 c0       	rjmp	.+18     	; 0x11fe <xbee_read+0x50>
		}
		break;
		
		case UART_OVERRUN_ERROR:
		{
			*byte = (uint8_t)temp;
    11ec:	88 83       	st	Y, r24
			return XBEE_BUFFER_INCONSISTENCY;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	06 c0       	rjmp	.+12     	; 0x11fe <xbee_read+0x50>
		}
		break;
		
		case UART_BUFFER_OVERFLOW:
		{
			*byte = (uint8_t)temp;
    11f2:	88 83       	st	Y, r24
			return XBEE_BUFFER_INCONSISTENCY;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <xbee_read+0x50>
		}
		break;
		default:
			break;
	}
	return 255;
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <xbee_read+0x50>
		}
		break;
		
		case UART_NO_DATA:
		{
			return XBEE_DATA_MISSING;
    11fc:	84 e0       	ldi	r24, 0x04	; 4
		break;
		default:
			break;
	}
	return 255;
}
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <xbee_getNumberOfBytesReceived>:
 *
 *  \return count of bytes that can be received through `xbee_read`
 */
uint16_t xbee_getNumberOfBytesReceived()
{
	return uart1_getrxcount();
    1204:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <uart1_getrxcount>
}
    1208:	08 95       	ret

0000120a <xbee_readBuffer>:
 *	\param message_buffer Buffer where to store received bytes
 *  \param buffer_size Amount of bytes that need to be received
 *  \return error Code if there is any. If it's not XBEE_SUCCESS, you shouldn't use the result
 */
uint8_t xbee_readBuffer(uint8_t *buffer, uint8_t length)
{
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	8c 01       	movw	r16, r24
    1214:	d6 2f       	mov	r29, r22
	if (xbee_getNumberOfBytesReceived() < length)
    1216:	f6 df       	rcall	.-20     	; 0x1204 <xbee_getNumberOfBytesReceived>
    1218:	2d 2f       	mov	r18, r29
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	82 17       	cp	r24, r18
    121e:	93 07       	cpc	r25, r19
    1220:	68 f0       	brcs	.+26     	; 0x123c <xbee_readBuffer+0x32>
    1222:	c0 e0       	ldi	r28, 0x00	; 0
    1224:	07 c0       	rjmp	.+14     	; 0x1234 <xbee_readBuffer+0x2a>
		return XBEE_DATA_MISSING;
	
	for (uint8_t i = 0; i < length; i++)
	{
		// Copy received data into destination buffer
		uint8_t err = xbee_read(&buffer[i]);
    1226:	c8 01       	movw	r24, r16
    1228:	8c 0f       	add	r24, r28
    122a:	91 1d       	adc	r25, r1
    122c:	c0 df       	rcall	.-128    	; 0x11ae <xbee_read>
		if (err != XBEE_SUCCESS)
    122e:	81 11       	cpse	r24, r1
    1230:	06 c0       	rjmp	.+12     	; 0x123e <xbee_readBuffer+0x34>
uint8_t xbee_readBuffer(uint8_t *buffer, uint8_t length)
{
	if (xbee_getNumberOfBytesReceived() < length)
		return XBEE_DATA_MISSING;
	
	for (uint8_t i = 0; i < length; i++)
    1232:	cf 5f       	subi	r28, 0xFF	; 255
    1234:	cd 17       	cp	r28, r29
    1236:	b8 f3       	brcs	.-18     	; 0x1226 <xbee_readBuffer+0x1c>
		uint8_t err = xbee_read(&buffer[i]);
		if (err != XBEE_SUCCESS)
			return err; // Early return if an error occurs
	}

	return XBEE_SUCCESS;
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	01 c0       	rjmp	.+2      	; 0x123e <xbee_readBuffer+0x34>
 *  \return error Code if there is any. If it's not XBEE_SUCCESS, you shouldn't use the result
 */
uint8_t xbee_readBuffer(uint8_t *buffer, uint8_t length)
{
	if (xbee_getNumberOfBytesReceived() < length)
		return XBEE_DATA_MISSING;
    123c:	84 e0       	ldi	r24, 0x04	; 4
		if (err != XBEE_SUCCESS)
			return err; // Early return if an error occurs
	}

	return XBEE_SUCCESS;
}
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	08 95       	ret

00001248 <enqueue_sensor_data_into_buffer>:

int sensor_element_buffer_count = 0; // Amount of SensorData in the sensor_element_buffer
sensor_data_t sensor_element_buffer[SENSOR_ELEMENT_BUFFER_SIZE]; // Buffers incoming SensorData to be processed later by the gui_worker

void enqueue_sensor_data_into_buffer(sensor_data_t* data)
{
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	ec 01       	movw	r28, r24
    os_enterCriticalSection();
    124e:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <os_enterCriticalSection>

    for (int i = 0; i < sensor_element_buffer_count; i++) // override prior data of this sensor still cached
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	2f c0       	rjmp	.+94     	; 0x12b6 <enqueue_sensor_data_into_buffer+0x6e>
    {
        if (sensor_element_buffer[i].sensor_src_address == data->sensor_src_address && sensor_element_buffer[i].sensor_type == data->sensor_type && sensor_element_buffer[i].sensor_data_type == data->sensor_data_type)
    1258:	2b e0       	ldi	r18, 0x0B	; 11
    125a:	28 9f       	mul	r18, r24
    125c:	f0 01       	movw	r30, r0
    125e:	29 9f       	mul	r18, r25
    1260:	f0 0d       	add	r31, r0
    1262:	11 24       	eor	r1, r1
    1264:	e6 5d       	subi	r30, 0xD6	; 214
    1266:	fa 4f       	sbci	r31, 0xFA	; 250
    1268:	30 81       	ld	r19, Z
    126a:	28 81       	ld	r18, Y
    126c:	32 13       	cpse	r19, r18
    126e:	22 c0       	rjmp	.+68     	; 0x12b4 <enqueue_sensor_data_into_buffer+0x6c>
    1270:	2b e0       	ldi	r18, 0x0B	; 11
    1272:	28 9f       	mul	r18, r24
    1274:	f0 01       	movw	r30, r0
    1276:	29 9f       	mul	r18, r25
    1278:	f0 0d       	add	r31, r0
    127a:	11 24       	eor	r1, r1
    127c:	e6 5d       	subi	r30, 0xD6	; 214
    127e:	fa 4f       	sbci	r31, 0xFA	; 250
    1280:	31 81       	ldd	r19, Z+1	; 0x01
    1282:	29 81       	ldd	r18, Y+1	; 0x01
    1284:	32 13       	cpse	r19, r18
    1286:	16 c0       	rjmp	.+44     	; 0x12b4 <enqueue_sensor_data_into_buffer+0x6c>
    1288:	2b e0       	ldi	r18, 0x0B	; 11
    128a:	28 9f       	mul	r18, r24
    128c:	f0 01       	movw	r30, r0
    128e:	29 9f       	mul	r18, r25
    1290:	f0 0d       	add	r31, r0
    1292:	11 24       	eor	r1, r1
    1294:	e6 5d       	subi	r30, 0xD6	; 214
    1296:	fa 4f       	sbci	r31, 0xFA	; 250
    1298:	32 81       	ldd	r19, Z+2	; 0x02
    129a:	2a 81       	ldd	r18, Y+2	; 0x02
    129c:	32 13       	cpse	r19, r18
    129e:	0a c0       	rjmp	.+20     	; 0x12b4 <enqueue_sensor_data_into_buffer+0x6c>
        {
            sensor_element_buffer[i] = *data;
    12a0:	df 01       	movw	r26, r30
    12a2:	8b e0       	ldi	r24, 0x0B	; 11
    12a4:	fe 01       	movw	r30, r28
    12a6:	01 90       	ld	r0, Z+
    12a8:	0d 92       	st	X+, r0
    12aa:	8a 95       	dec	r24
    12ac:	e1 f7       	brne	.-8      	; 0x12a6 <enqueue_sensor_data_into_buffer+0x5e>
            // DEBUG("enqueue_sensor_data_into_buffer() overwrote previously buffered sensor data\n");
            // DEBUG("enqueue_sensor_data_into_buffer() at %d is now:\n", i);
            // print_sensor_data(&sensor_element_buffer[i]);
            os_leaveCriticalSection();
    12ae:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <os_leaveCriticalSection>
            return;
    12b2:	2b c0       	rjmp	.+86     	; 0x130a <enqueue_sensor_data_into_buffer+0xc2>

void enqueue_sensor_data_into_buffer(sensor_data_t* data)
{
    os_enterCriticalSection();

    for (int i = 0; i < sensor_element_buffer_count; i++) // override prior data of this sensor still cached
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	20 91 47 03 	lds	r18, 0x0347	; 0x800347 <sensor_element_buffer_count>
    12ba:	30 91 48 03 	lds	r19, 0x0348	; 0x800348 <sensor_element_buffer_count+0x1>
    12be:	82 17       	cp	r24, r18
    12c0:	93 07       	cpc	r25, r19
    12c2:	54 f2       	brlt	.-108    	; 0x1258 <enqueue_sensor_data_into_buffer+0x10>
            os_leaveCriticalSection();
            return;
        }
    }

    if (sensor_element_buffer_count == SENSOR_ELEMENT_BUFFER_SIZE)
    12c4:	2a 30       	cpi	r18, 0x0A	; 10
    12c6:	31 05       	cpc	r19, r1
    12c8:	59 f4       	brne	.+22     	; 0x12e0 <enqueue_sensor_data_into_buffer+0x98>
    {
        os_leaveCriticalSection();
    12ca:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <os_leaveCriticalSection>
        printf_P(PSTR("enqueue_sensor_data_into_buffer() would overflow buffer\n\n"));
    12ce:	84 e1       	ldi	r24, 0x14	; 20
    12d0:	99 e0       	ldi	r25, 0x09	; 9
    12d2:	9f 93       	push	r25
    12d4:	8f 93       	push	r24
    12d6:	0e 94 ce 2b 	call	0x579c	; 0x579c <printf_P>
        return;
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	15 c0       	rjmp	.+42     	; 0x130a <enqueue_sensor_data_into_buffer+0xc2>
    }


    sensor_element_buffer[sensor_element_buffer_count] = *data;
    12e0:	8b e0       	ldi	r24, 0x0B	; 11
    12e2:	82 9f       	mul	r24, r18
    12e4:	d0 01       	movw	r26, r0
    12e6:	83 9f       	mul	r24, r19
    12e8:	b0 0d       	add	r27, r0
    12ea:	11 24       	eor	r1, r1
    12ec:	a6 5d       	subi	r26, 0xD6	; 214
    12ee:	ba 4f       	sbci	r27, 0xFA	; 250
    12f0:	fe 01       	movw	r30, r28
    12f2:	01 90       	ld	r0, Z+
    12f4:	0d 92       	st	X+, r0
    12f6:	8a 95       	dec	r24
    12f8:	e1 f7       	brne	.-8      	; 0x12f2 <enqueue_sensor_data_into_buffer+0xaa>
    sensor_element_buffer_count++;
    12fa:	2f 5f       	subi	r18, 0xFF	; 255
    12fc:	3f 4f       	sbci	r19, 0xFF	; 255
    12fe:	30 93 48 03 	sts	0x0348, r19	; 0x800348 <sensor_element_buffer_count+0x1>
    1302:	20 93 47 03 	sts	0x0347, r18	; 0x800347 <sensor_element_buffer_count>

    // DEBUG("enqueue_sensor_data_into_buffer() sensor_element_buffer_count: %d\n", sensor_element_buffer_count);
    // DEBUG("enqueue_sensor_data_into_buffer() at %d is now:\n", 0);
    // print_sensor_data(&sensor_element_buffer[0]);
    os_leaveCriticalSection();
    1306:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <os_leaveCriticalSection>
}
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	08 95       	ret

00001310 <update_sensor_data>:
 *
 * @param gui_element Pointer to the GUI element container to be updated.
 * @param sensor_data Pointer to the sensor data containing the new value.
 */
void update_sensor_data(gui_element_container_t* gui_element, sensor_parameter_t* sensor_data)
{
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	ec 01       	movw	r28, r24
    131a:	8b 01       	movw	r16, r22
    if (sensor_value_is_smaller(sensor_data, &gui_element->min_value, gui_element->sensor_data_type))
    131c:	bc 01       	movw	r22, r24
    131e:	63 5c       	subi	r22, 0xC3	; 195
    1320:	7f 4f       	sbci	r23, 0xFF	; 255
    1322:	49 81       	ldd	r20, Y+1	; 0x01
    1324:	c8 01       	movw	r24, r16
    1326:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <sensor_value_is_smaller>
    132a:	88 23       	and	r24, r24
    132c:	61 f0       	breq	.+24     	; 0x1346 <update_sensor_data+0x36>
    {
        gui_element->min_value = *sensor_data;
    132e:	f8 01       	movw	r30, r16
    1330:	80 81       	ld	r24, Z
    1332:	91 81       	ldd	r25, Z+1	; 0x01
    1334:	a2 81       	ldd	r26, Z+2	; 0x02
    1336:	b3 81       	ldd	r27, Z+3	; 0x03
    1338:	fe 01       	movw	r30, r28
    133a:	fd 96       	adiw	r30, 0x3d	; 61
    133c:	80 83       	st	Z, r24
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	a2 83       	std	Z+2, r26	; 0x02
    1342:	b3 83       	std	Z+3, r27	; 0x03
    1344:	15 c0       	rjmp	.+42     	; 0x1370 <update_sensor_data+0x60>
    }
    else if (sensor_value_is_greater(sensor_data, &gui_element->max_value, gui_element->sensor_data_type))
    1346:	49 81       	ldd	r20, Y+1	; 0x01
    1348:	be 01       	movw	r22, r28
    134a:	6f 5b       	subi	r22, 0xBF	; 191
    134c:	7f 4f       	sbci	r23, 0xFF	; 255
    134e:	c8 01       	movw	r24, r16
    1350:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <sensor_value_is_greater>
    1354:	88 23       	and	r24, r24
    1356:	61 f0       	breq	.+24     	; 0x1370 <update_sensor_data+0x60>
    {
        gui_element->max_value = *sensor_data;
    1358:	f8 01       	movw	r30, r16
    135a:	80 81       	ld	r24, Z
    135c:	91 81       	ldd	r25, Z+1	; 0x01
    135e:	a2 81       	ldd	r26, Z+2	; 0x02
    1360:	b3 81       	ldd	r27, Z+3	; 0x03
    1362:	fe 01       	movw	r30, r28
    1364:	ef 5b       	subi	r30, 0xBF	; 191
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	80 83       	st	Z, r24
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	a2 83       	std	Z+2, r26	; 0x02
    136e:	b3 83       	std	Z+3, r27	; 0x03
    }

    queue_push(&gui_element->sensor_data_queue, *sensor_data);
    1370:	f8 01       	movw	r30, r16
    1372:	40 81       	ld	r20, Z
    1374:	51 81       	ldd	r21, Z+1	; 0x01
    1376:	62 81       	ldd	r22, Z+2	; 0x02
    1378:	73 81       	ldd	r23, Z+3	; 0x03
    137a:	ce 01       	movw	r24, r28
    137c:	03 96       	adiw	r24, 0x03	; 3
    137e:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <queue_push>
}
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	08 95       	ret

0000138c <add_gui_element>:
// Called when data from a new sensor was cached and will be added as a gui_element
// Returns true if the element was added successfully, false if there was no space in the grid
// Will add a new gui_element to the sensor_gui_elements array, so update_sensor_data() should not be called for this sensor_element
bool add_gui_element(gui_element_container_t sensor_gui_elements[16], uint8_t* sensor_gui_elements_count, sensor_data_t* sensor_element)
{
    138c:	7f 92       	push	r7
    138e:	8f 92       	push	r8
    1390:	9f 92       	push	r9
    1392:	af 92       	push	r10
    1394:	bf 92       	push	r11
    1396:	cf 92       	push	r12
    1398:	df 92       	push	r13
    139a:	ef 92       	push	r14
    139c:	ff 92       	push	r15
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	c1 58       	subi	r28, 0x81	; 129
    13ac:	d1 09       	sbc	r29, r1
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	4c 01       	movw	r8, r24
    13ba:	6b 01       	movw	r12, r22
    13bc:	5a 01       	movw	r10, r20
    os_enterCriticalSection();
    13be:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <os_enterCriticalSection>

    if (*sensor_gui_elements_count == GUI_ELEMENT_CONTAINER_SIZE)
    13c2:	f6 01       	movw	r30, r12
    13c4:	80 81       	ld	r24, Z
    13c6:	86 30       	cpi	r24, 0x06	; 6
    13c8:	09 f0       	breq	.+2      	; 0x13cc <add_gui_element+0x40>
    13ca:	cd c0       	rjmp	.+410    	; 0x1566 <add_gui_element+0x1da>
    {
        os_leaveCriticalSection();
    13cc:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <os_leaveCriticalSection>
        WARN("add_gui_element() received sensor_gui_elements_count >= #GUI_ELEMENT_CONTAINER_SIZE");
    13d0:	80 ec       	ldi	r24, 0xC0	; 192
    13d2:	98 e0       	ldi	r25, 0x08	; 8
    13d4:	9f 93       	push	r25
    13d6:	8f 93       	push	r24
    13d8:	87 eb       	ldi	r24, 0xB7	; 183
    13da:	98 e0       	ldi	r25, 0x08	; 8
    13dc:	9f 93       	push	r25
    13de:	8f 93       	push	r24
    13e0:	0e 94 4d 1a 	call	0x349a	; 0x349a <terminal_log_printf_p>
        return false;
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	d2 c0       	rjmp	.+420    	; 0x1594 <add_gui_element+0x208>

    for (int row = 0; row < GRID_ROW_COUNT; row++)
    {
        for (int column = 0; column < GRID_COLUMN_COUNT; column++)
        {
            if (!grid[row][column])
    13f0:	f7 01       	movw	r30, r14
    13f2:	ee 0f       	add	r30, r30
    13f4:	ff 1f       	adc	r31, r31
    13f6:	ee 0d       	add	r30, r14
    13f8:	ff 1d       	adc	r31, r15
    13fa:	e7 5b       	subi	r30, 0xB7	; 183
    13fc:	fc 4f       	sbci	r31, 0xFC	; 252
    13fe:	e0 0f       	add	r30, r16
    1400:	f1 1f       	adc	r31, r17
    1402:	80 81       	ld	r24, Z
    1404:	81 11       	cpse	r24, r1
    1406:	a2 c0       	rjmp	.+324    	; 0x154c <add_gui_element+0x1c0>
            {
                grid[row][column] = true;
    1408:	f7 01       	movw	r30, r14
    140a:	ee 0f       	add	r30, r30
    140c:	ff 1f       	adc	r31, r31
    140e:	ee 0d       	add	r30, r14
    1410:	ff 1d       	adc	r31, r15
    1412:	e7 5b       	subi	r30, 0xB7	; 183
    1414:	fc 4f       	sbci	r31, 0xFC	; 252
    1416:	e0 0f       	add	r30, r16
    1418:	f1 1f       	adc	r31, r17
    141a:	77 24       	eor	r7, r7
    141c:	73 94       	inc	r7
    141e:	70 82       	st	Z, r7

                gui_element_container_t new_sensor_gui_element;

                new_sensor_gui_element.sensor_src_address = sensor_element->sensor_src_address;
    1420:	f5 01       	movw	r30, r10
    1422:	80 81       	ld	r24, Z
    1424:	89 83       	std	Y+1, r24	; 0x01
                new_sensor_gui_element.sensor_data_type = sensor_element->sensor_data_type;
    1426:	82 81       	ldd	r24, Z+2	; 0x02
    1428:	8a 83       	std	Y+2, r24	; 0x02
                new_sensor_gui_element.sensor_type = sensor_element->sensor_type;
    142a:	81 81       	ldd	r24, Z+1	; 0x01
    142c:	8b 83       	std	Y+3, r24	; 0x03
                queue_init(&new_sensor_gui_element.sensor_data_queue);
    142e:	ce 01       	movw	r24, r28
    1430:	04 96       	adiw	r24, 0x04	; 4
    1432:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <queue_init>
                queue_push(&new_sensor_gui_element.sensor_data_queue, sensor_element->sensor_data_value);
    1436:	f5 01       	movw	r30, r10
    1438:	43 81       	ldd	r20, Z+3	; 0x03
    143a:	54 81       	ldd	r21, Z+4	; 0x04
    143c:	65 81       	ldd	r22, Z+5	; 0x05
    143e:	76 81       	ldd	r23, Z+6	; 0x06
    1440:	ce 01       	movw	r24, r28
    1442:	04 96       	adiw	r24, 0x04	; 4
    1444:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <queue_push>
                new_sensor_gui_element.sensor_last_update = getSystemTime_ms();
    1448:	0e 94 82 1c 	call	0x3904	; 0x3904 <getSystemTime_ms>
    144c:	6a af       	std	Y+58, r22	; 0x3a
    144e:	7b af       	std	Y+59, r23	; 0x3b
    1450:	8c af       	std	Y+60, r24	; 0x3c
    1452:	9d af       	std	Y+61, r25	; 0x3d

                new_sensor_gui_element.min_value.fValue = 0.0;
    1454:	22 96       	adiw	r28, 0x02	; 2
    1456:	1c ae       	std	Y+60, r1	; 0x3c
    1458:	1d ae       	std	Y+61, r1	; 0x3d
    145a:	1e ae       	std	Y+62, r1	; 0x3e
    145c:	1f ae       	std	Y+63, r1	; 0x3f
    145e:	22 97       	sbiw	r28, 0x02	; 2
                new_sensor_gui_element.max_value.fValue = 0.0;
    1460:	26 96       	adiw	r28, 0x06	; 6
    1462:	1c ae       	std	Y+60, r1	; 0x3c
    1464:	1d ae       	std	Y+61, r1	; 0x3d
    1466:	1e ae       	std	Y+62, r1	; 0x3e
    1468:	1f ae       	std	Y+63, r1	; 0x3f
    146a:	26 97       	sbiw	r28, 0x06	; 6

                new_sensor_gui_element.row1 = row;
    146c:	28 96       	adiw	r28, 0x08	; 8
    146e:	ff ae       	std	Y+63, r15	; 0x3f
    1470:	ee ae       	std	Y+62, r14	; 0x3e
    1472:	28 97       	sbiw	r28, 0x08	; 8
                new_sensor_gui_element.column1 = column;
    1474:	2a 96       	adiw	r28, 0x0a	; 10
    1476:	1f af       	std	Y+63, r17	; 0x3f
    1478:	0e af       	std	Y+62, r16	; 0x3e
    147a:	2a 97       	sbiw	r28, 0x0a	; 10
                new_sensor_gui_element.row2 = row;
    147c:	2c 96       	adiw	r28, 0x0c	; 12
    147e:	ff ae       	std	Y+63, r15	; 0x3f
    1480:	ee ae       	std	Y+62, r14	; 0x3e
    1482:	2c 97       	sbiw	r28, 0x0c	; 12
                new_sensor_gui_element.column2 = column;
    1484:	2e 96       	adiw	r28, 0x0e	; 14
    1486:	1f af       	std	Y+63, r17	; 0x3f
    1488:	0e af       	std	Y+62, r16	; 0x3e
    148a:	2e 97       	sbiw	r28, 0x0e	; 14

                new_sensor_gui_element.ui_state = 1;
    148c:	2f 96       	adiw	r28, 0x0f	; 15
    148e:	7f ae       	std	Y+63, r7	; 0x3f
    1490:	2f 97       	sbiw	r28, 0x0f	; 15
                new_sensor_gui_element.timeout_flag = false;
    1492:	60 96       	adiw	r28, 0x10	; 16
    1494:	1f ae       	std	Y+63, r1	; 0x3f
    1496:	60 97       	sbiw	r28, 0x10	; 16

                sensor_gui_elements[*sensor_gui_elements_count] = new_sensor_gui_element; // add new element to the container
    1498:	f6 01       	movw	r30, r12
    149a:	80 81       	ld	r24, Z
    149c:	d4 01       	movw	r26, r8
    149e:	ff e4       	ldi	r31, 0x4F	; 79
    14a0:	8f 9f       	mul	r24, r31
    14a2:	a0 0d       	add	r26, r0
    14a4:	b1 1d       	adc	r27, r1
    14a6:	11 24       	eor	r1, r1
    14a8:	8f e4       	ldi	r24, 0x4F	; 79
    14aa:	fe 01       	movw	r30, r28
    14ac:	31 96       	adiw	r30, 0x01	; 1
    14ae:	01 90       	ld	r0, Z+
    14b0:	0d 92       	st	X+, r0
    14b2:	8a 95       	dec	r24
    14b4:	e1 f7       	brne	.-8      	; 0x14ae <add_gui_element+0x122>
                (*sensor_gui_elements_count)++;
    14b6:	f6 01       	movw	r30, r12
    14b8:	80 81       	ld	r24, Z
    14ba:	8f 5f       	subi	r24, 0xFF	; 255
    14bc:	80 83       	st	Z, r24

                INFO("add_gui_element() added element at row: %d, column: %d", row, column);
    14be:	1f 93       	push	r17
    14c0:	0f 93       	push	r16
    14c2:	ff 92       	push	r15
    14c4:	ef 92       	push	r14
    14c6:	80 e8       	ldi	r24, 0x80	; 128
    14c8:	98 e0       	ldi	r25, 0x08	; 8
    14ca:	9f 93       	push	r25
    14cc:	8f 93       	push	r24
    14ce:	87 e7       	ldi	r24, 0x77	; 119
    14d0:	98 e0       	ldi	r25, 0x08	; 8
    14d2:	9f 93       	push	r25
    14d4:	8f 93       	push	r24
    14d6:	0e 94 4d 1a 	call	0x349a	; 0x349a <terminal_log_printf_p>
                // print_gui_element(&new_sensor_gui_element);
                os_leaveCriticalSection();
    14da:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <os_leaveCriticalSection>

                char buffer[50];  // Buffer to store the formatted string

                gui_element_container_t* gui_element = &new_sensor_gui_element;
                // Format the string with the hex value and float value
                sprintf(buffer, "Address: %d, Sensor: %d", new_sensor_gui_element.sensor_src_address, new_sensor_gui_element.sensor_type);
    14de:	9b 81       	ldd	r25, Y+3	; 0x03
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	1f 92       	push	r1
    14e4:	9f 93       	push	r25
    14e6:	1f 92       	push	r1
    14e8:	8f 93       	push	r24
    14ea:	80 e2       	ldi	r24, 0x20	; 32
    14ec:	92 e0       	ldi	r25, 0x02	; 2
    14ee:	9f 93       	push	r25
    14f0:	8f 93       	push	r24
    14f2:	8e 01       	movw	r16, r28
    14f4:	00 5b       	subi	r16, 0xB0	; 176
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
    14f8:	1f 93       	push	r17
    14fa:	0f 93       	push	r16
    14fc:	0e 94 25 2c 	call	0x584a	; 0x584a <sprintf>
                tlcd_drawString(GRID_CELL_START_X + TEXT_START_X_OFFSET, GRID_CELL_START_Y, buffer);
    1500:	28 96       	adiw	r28, 0x08	; 8
    1502:	8e ad       	ldd	r24, Y+62	; 0x3e
    1504:	9f ad       	ldd	r25, Y+63	; 0x3f
    1506:	28 97       	sbiw	r28, 0x08	; 8
    1508:	21 e7       	ldi	r18, 0x71	; 113
    150a:	28 9f       	mul	r18, r24
    150c:	b0 01       	movw	r22, r0
    150e:	29 9f       	mul	r18, r25
    1510:	70 0d       	add	r23, r0
    1512:	11 24       	eor	r1, r1
    1514:	2a 96       	adiw	r28, 0x0a	; 10
    1516:	2e ad       	ldd	r18, Y+62	; 0x3e
    1518:	3f ad       	ldd	r19, Y+63	; 0x3f
    151a:	2a 97       	sbiw	r28, 0x0a	; 10
    151c:	48 e9       	ldi	r20, 0x98	; 152
    151e:	42 9f       	mul	r20, r18
    1520:	c0 01       	movw	r24, r0
    1522:	43 9f       	mul	r20, r19
    1524:	90 0d       	add	r25, r0
    1526:	11 24       	eor	r1, r1
    1528:	6e 5d       	subi	r22, 0xDE	; 222
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	a8 01       	movw	r20, r16
    152e:	0f 96       	adiw	r24, 0x0f	; 15
    1530:	0e 94 ee 23 	call	0x47dc	; 0x47dc <tlcd_drawString>
                memset(buffer, 0, sizeof(buffer));
    1534:	82 e3       	ldi	r24, 0x32	; 50
    1536:	f8 01       	movw	r30, r16
    1538:	11 92       	st	Z+, r1
    153a:	8a 95       	dec	r24
    153c:	e9 f7       	brne	.-6      	; 0x1538 <add_gui_element+0x1ac>
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
                return true;
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	24 c0       	rjmp	.+72     	; 0x1594 <add_gui_element+0x208>
    // DEBUG("add_gui_element()\nSensor data received:");
    // print_sensor_data(sensor_element);

    for (int row = 0; row < GRID_ROW_COUNT; row++)
    {
        for (int column = 0; column < GRID_COLUMN_COUNT; column++)
    154c:	0f 5f       	subi	r16, 0xFF	; 255
    154e:	1f 4f       	sbci	r17, 0xFF	; 255
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <add_gui_element+0x1ca>
    1552:	00 e0       	ldi	r16, 0x00	; 0
    1554:	10 e0       	ldi	r17, 0x00	; 0
    1556:	03 30       	cpi	r16, 0x03	; 3
    1558:	11 05       	cpc	r17, r1
    155a:	0c f4       	brge	.+2      	; 0x155e <add_gui_element+0x1d2>
    155c:	49 cf       	rjmp	.-366    	; 0x13f0 <add_gui_element+0x64>
    }

    // DEBUG("add_gui_element()\nSensor data received:");
    // print_sensor_data(sensor_element);

    for (int row = 0; row < GRID_ROW_COUNT; row++)
    155e:	9f ef       	ldi	r25, 0xFF	; 255
    1560:	e9 1a       	sub	r14, r25
    1562:	f9 0a       	sbc	r15, r25
    1564:	02 c0       	rjmp	.+4      	; 0x156a <add_gui_element+0x1de>
    1566:	e1 2c       	mov	r14, r1
    1568:	f1 2c       	mov	r15, r1
    156a:	e2 e0       	ldi	r30, 0x02	; 2
    156c:	ee 16       	cp	r14, r30
    156e:	f1 04       	cpc	r15, r1
    1570:	84 f3       	brlt	.-32     	; 0x1552 <add_gui_element+0x1c6>
                memset(buffer, 0, sizeof(buffer));
                return true;
            }
        }
    }
    os_leaveCriticalSection();
    1572:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <os_leaveCriticalSection>
    WARN("!! add_gui_element() had no space in the grid !!");
    1576:	86 e4       	ldi	r24, 0x46	; 70
    1578:	98 e0       	ldi	r25, 0x08	; 8
    157a:	9f 93       	push	r25
    157c:	8f 93       	push	r24
    157e:	8d e3       	ldi	r24, 0x3D	; 61
    1580:	98 e0       	ldi	r25, 0x08	; 8
    1582:	9f 93       	push	r25
    1584:	8f 93       	push	r24
    1586:	0e 94 4d 1a 	call	0x349a	; 0x349a <terminal_log_printf_p>
    return false;
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	80 e0       	ldi	r24, 0x00	; 0
}
    1594:	cf 57       	subi	r28, 0x7F	; 127
    1596:	df 4f       	sbci	r29, 0xFF	; 255
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	ff 90       	pop	r15
    15ac:	ef 90       	pop	r14
    15ae:	df 90       	pop	r13
    15b0:	cf 90       	pop	r12
    15b2:	bf 90       	pop	r11
    15b4:	af 90       	pop	r10
    15b6:	9f 90       	pop	r9
    15b8:	8f 90       	pop	r8
    15ba:	7f 90       	pop	r7
    15bc:	08 95       	ret

000015be <drawHourglass>:

void drawHourglass(int startX, int startY, int endX, int endY) {
    15be:	cf 92       	push	r12
    15c0:	df 92       	push	r13
    15c2:	ef 92       	push	r14
    15c4:	ff 92       	push	r15
    15c6:	0f 93       	push	r16
    15c8:	1f 93       	push	r17
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	7c 01       	movw	r14, r24
    15d0:	8b 01       	movw	r16, r22
    15d2:	ea 01       	movw	r28, r20
    15d4:	69 01       	movw	r12, r18
    tlcd_drawLine(startX, startY, endX, endY);
    15d6:	0e 94 cc 24 	call	0x4998	; 0x4998 <tlcd_drawLine>
    tlcd_drawLine(startX, startY, endX, startY);
    15da:	98 01       	movw	r18, r16
    15dc:	ae 01       	movw	r20, r28
    15de:	b8 01       	movw	r22, r16
    15e0:	c7 01       	movw	r24, r14
    15e2:	0e 94 cc 24 	call	0x4998	; 0x4998 <tlcd_drawLine>
    tlcd_drawLine(startX, endY, endX, endY);
    15e6:	96 01       	movw	r18, r12
    15e8:	ae 01       	movw	r20, r28
    15ea:	b6 01       	movw	r22, r12
    15ec:	c7 01       	movw	r24, r14
    15ee:	0e 94 cc 24 	call	0x4998	; 0x4998 <tlcd_drawLine>
    tlcd_drawLine(endX, startY, startX, endY);
    15f2:	96 01       	movw	r18, r12
    15f4:	a7 01       	movw	r20, r14
    15f6:	b8 01       	movw	r22, r16
    15f8:	ce 01       	movw	r24, r28
    15fa:	0e 94 cc 24 	call	0x4998	; 0x4998 <tlcd_drawLine>
}
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	ef 90       	pop	r14
    160a:	df 90       	pop	r13
    160c:	cf 90       	pop	r12
    160e:	08 95       	ret

00001610 <update_gui_element>:

// called when sensor_data is already cached to update an existing gui_element with either real data or to mark it as outdated
void update_gui_element(gui_element_container_t* gui_element, bool real_update)
{
    1610:	4f 92       	push	r4
    1612:	5f 92       	push	r5
    1614:	6f 92       	push	r6
    1616:	7f 92       	push	r7
    1618:	8f 92       	push	r8
    161a:	9f 92       	push	r9
    161c:	af 92       	push	r10
    161e:	bf 92       	push	r11
    1620:	cf 92       	push	r12
    1622:	df 92       	push	r13
    1624:	ef 92       	push	r14
    1626:	ff 92       	push	r15
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	eb 97       	sbiw	r28, 0x3b	; 59
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	8c 01       	movw	r16, r24
    if (!real_update)
    1642:	61 11       	cpse	r22, r1
    1644:	25 c0       	rjmp	.+74     	; 0x1690 <update_gui_element+0x80>
    {
        //draw triangle by lines
        drawHourglass(GRID_CELL_CONTENT_END_X - 6, GRID_CELL_CONTENT_START_Y - GRID_CELL_INNER_VER_PADDING - GRID_CELL_TIMEOUT_SYMBOL_HEIGHT, GRID_CELL_CONTENT_END_X, GRID_CELL_CONTENT_START_Y - GRID_CELL_INNER_VER_PADDING + GRID_CELL_TIMEOUT_SYMBOL_HEIGHT);
    1646:	fc 01       	movw	r30, r24
    1648:	eb 5b       	subi	r30, 0xBB	; 187
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	80 81       	ld	r24, Z
    164e:	91 81       	ldd	r25, Z+1	; 0x01
    1650:	21 e7       	ldi	r18, 0x71	; 113
    1652:	28 9f       	mul	r18, r24
    1654:	b0 01       	movw	r22, r0
    1656:	29 9f       	mul	r18, r25
    1658:	70 0d       	add	r23, r0
    165a:	11 24       	eor	r1, r1
    165c:	9b 01       	movw	r18, r22
    165e:	2e 5b       	subi	r18, 0xBE	; 190
    1660:	3f 4f       	sbci	r19, 0xFF	; 255
    1662:	36 96       	adiw	r30, 0x06	; 6
    1664:	40 81       	ld	r20, Z
    1666:	51 81       	ldd	r21, Z+1	; 0x01
    1668:	4f 5f       	subi	r20, 0xFF	; 255
    166a:	5f 4f       	sbci	r21, 0xFF	; 255
    166c:	e8 e9       	ldi	r30, 0x98	; 152
    166e:	e4 9f       	mul	r30, r20
    1670:	c0 01       	movw	r24, r0
    1672:	e5 9f       	mul	r30, r21
    1674:	90 0d       	add	r25, r0
    1676:	11 24       	eor	r1, r1
    1678:	ac 01       	movw	r20, r24
    167a:	44 50       	subi	r20, 0x04	; 4
    167c:	51 09       	sbc	r21, r1
    167e:	6a 5c       	subi	r22, 0xCA	; 202
    1680:	7f 4f       	sbci	r23, 0xFF	; 255
    1682:	0a 97       	sbiw	r24, 0x0a	; 10
    1684:	9c df       	rcall	.-200    	; 0x15be <drawHourglass>

        printf("update_gui_element() WRITTEN TIMEOUT SYMBOL\n");
    1686:	88 e3       	ldi	r24, 0x38	; 56
    1688:	92 e0       	ldi	r25, 0x02	; 2
    168a:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <puts>
        return;
    168e:	2c c7       	rjmp	.+3672   	; 0x24e8 <__stack+0x2e9>
        //tlcd_changeLineColor(COLOR_GREY);
    }
    else // real update
    {
        gui_element->timeout_flag = false;
    1690:	fc 01       	movw	r30, r24
    1692:	e2 5b       	subi	r30, 0xB2	; 178
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	10 82       	st	Z, r1
        gui_element->sensor_last_update = getSystemTime_ms();
    1698:	0e 94 82 1c 	call	0x3904	; 0x3904 <getSystemTime_ms>
    169c:	d8 01       	movw	r26, r16
    169e:	d9 96       	adiw	r26, 0x39	; 57
    16a0:	6d 93       	st	X+, r22
    16a2:	7d 93       	st	X+, r23
    16a4:	8d 93       	st	X+, r24
    16a6:	9c 93       	st	X, r25
    16a8:	dc 97       	sbiw	r26, 0x3c	; 60
        //tlcd_changeLineColor(COLOR_RED);
        tlcd_clearArea(GRID_CELL_START_X, GRID_CELL_CONTENT_START_Y - GRID_CELL_INNER_VER_PADDING - GRID_CELL_TIMEOUT_SYMBOL_HEIGHT, GRID_CELL_END_X, GRID_CELL_CONTENT_END_Y);
    16aa:	f8 01       	movw	r30, r16
    16ac:	e7 5b       	subi	r30, 0xB7	; 183
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	80 81       	ld	r24, Z
    16b2:	91 81       	ldd	r25, Z+1	; 0x01
    16b4:	01 96       	adiw	r24, 0x01	; 1
    16b6:	f1 e7       	ldi	r31, 0x71	; 113
    16b8:	f8 9f       	mul	r31, r24
    16ba:	90 01       	movw	r18, r0
    16bc:	f9 9f       	mul	r31, r25
    16be:	30 0d       	add	r19, r0
    16c0:	11 24       	eor	r1, r1
    16c2:	a5 5b       	subi	r26, 0xB5	; 181
    16c4:	bf 4f       	sbci	r27, 0xFF	; 255
    16c6:	8d 91       	ld	r24, X+
    16c8:	9c 91       	ld	r25, X
    16ca:	11 97       	sbiw	r26, 0x01	; 1
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	e8 e9       	ldi	r30, 0x98	; 152
    16d0:	e8 9f       	mul	r30, r24
    16d2:	a0 01       	movw	r20, r0
    16d4:	e9 9f       	mul	r30, r25
    16d6:	50 0d       	add	r21, r0
    16d8:	11 24       	eor	r1, r1
    16da:	16 97       	sbiw	r26, 0x06	; 6
    16dc:	8d 91       	ld	r24, X+
    16de:	9c 91       	ld	r25, X
    16e0:	11 97       	sbiw	r26, 0x01	; 1
    16e2:	f8 9f       	mul	r31, r24
    16e4:	b0 01       	movw	r22, r0
    16e6:	f9 9f       	mul	r31, r25
    16e8:	70 0d       	add	r23, r0
    16ea:	11 24       	eor	r1, r1
    16ec:	12 96       	adiw	r26, 0x02	; 2
    16ee:	0d 90       	ld	r0, X+
    16f0:	bc 91       	ld	r27, X
    16f2:	a0 2d       	mov	r26, r0
    16f4:	ea 9f       	mul	r30, r26
    16f6:	c0 01       	movw	r24, r0
    16f8:	eb 9f       	mul	r30, r27
    16fa:	90 0d       	add	r25, r0
    16fc:	11 24       	eor	r1, r1
    16fe:	2a 5e       	subi	r18, 0xEA	; 234
    1700:	3f 4f       	sbci	r19, 0xFF	; 255
    1702:	45 5f       	subi	r20, 0xF5	; 245
    1704:	5f 4f       	sbci	r21, 0xFF	; 255
    1706:	6a 5c       	subi	r22, 0xCA	; 202
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	0c 96       	adiw	r24, 0x0c	; 12
    170c:	0e 94 7d 25 	call	0x4afa	; 0x4afa <tlcd_clearArea>
    }

    sensor_parameter_t data;

    if (!queue_peek_newest_data(&gui_element->sensor_data_queue, &data))
    1710:	be 01       	movw	r22, r28
    1712:	6f 5f       	subi	r22, 0xFF	; 255
    1714:	7f 4f       	sbci	r23, 0xFF	; 255
    1716:	c8 01       	movw	r24, r16
    1718:	03 96       	adiw	r24, 0x03	; 3
    171a:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <queue_peek_newest_data>
    171e:	81 11       	cpse	r24, r1
    1720:	67 c0       	rjmp	.+206    	; 0x17f0 <update_gui_element+0x1e0>
    {
        WARN("update_gui_element() TEMP String length out of bounds");
    1722:	87 e0       	ldi	r24, 0x07	; 7
    1724:	98 e0       	ldi	r25, 0x08	; 8
    1726:	9f 93       	push	r25
    1728:	8f 93       	push	r24
    172a:	8e ef       	ldi	r24, 0xFE	; 254
    172c:	97 e0       	ldi	r25, 0x07	; 7
    172e:	9f 93       	push	r25
    1730:	8f 93       	push	r24
    1732:	0e 94 4d 1a 	call	0x349a	; 0x349a <terminal_log_printf_p>
        tlcd_changeTextSize(2);
    1736:	82 e0       	ldi	r24, 0x02	; 2
    1738:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <tlcd_changeTextSize>
        char buffer[5];  // Buffer to store the formatted string
        memset(buffer, 0, sizeof(buffer));
    173c:	de 01       	movw	r26, r28
    173e:	d7 96       	adiw	r26, 0x37	; 55
    1740:	85 e0       	ldi	r24, 0x05	; 5
    1742:	fd 01       	movw	r30, r26
    1744:	11 92       	st	Z+, r1
    1746:	8a 95       	dec	r24
    1748:	e9 f7       	brne	.-6      	; 0x1744 <update_gui_element+0x134>
        strcat(buffer, "ERR");
    174a:	fd 01       	movw	r30, r26
    174c:	01 90       	ld	r0, Z+
    174e:	00 20       	and	r0, r0
    1750:	e9 f7       	brne	.-6      	; 0x174c <update_gui_element+0x13c>
    1752:	31 97       	sbiw	r30, 0x01	; 1
    1754:	85 e4       	ldi	r24, 0x45	; 69
    1756:	92 e5       	ldi	r25, 0x52	; 82
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	80 83       	st	Z, r24
    175c:	82 e5       	ldi	r24, 0x52	; 82
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	93 83       	std	Z+3, r25	; 0x03
    1762:	82 83       	std	Z+2, r24	; 0x02
        tlcd_drawStringInArea(GRID_CELL_CONTENT_START_X, GRID_CELL_CONTENT_START_Y, GRID_CELL_CONTENT_END_X, GRID_CELL_CONTENT_END_Y, buffer);
    1764:	f8 01       	movw	r30, r16
    1766:	e7 5b       	subi	r30, 0xB7	; 183
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	80 81       	ld	r24, Z
    176c:	91 81       	ldd	r25, Z+1	; 0x01
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	0f 2e       	mov	r0, r31
    1772:	f1 e7       	ldi	r31, 0x71	; 113
    1774:	ff 2e       	mov	r15, r31
    1776:	f0 2d       	mov	r31, r0
    1778:	f8 9e       	mul	r15, r24
    177a:	90 01       	movw	r18, r0
    177c:	f9 9e       	mul	r15, r25
    177e:	30 0d       	add	r19, r0
    1780:	11 24       	eor	r1, r1
    1782:	c8 01       	movw	r24, r16
    1784:	85 5b       	subi	r24, 0xB5	; 181
    1786:	9f 4f       	sbci	r25, 0xFF	; 255
    1788:	fc 01       	movw	r30, r24
    178a:	80 81       	ld	r24, Z
    178c:	91 81       	ldd	r25, Z+1	; 0x01
    178e:	01 96       	adiw	r24, 0x01	; 1
    1790:	0f 2e       	mov	r0, r31
    1792:	f8 e9       	ldi	r31, 0x98	; 152
    1794:	ef 2e       	mov	r14, r31
    1796:	f0 2d       	mov	r31, r0
    1798:	e8 9e       	mul	r14, r24
    179a:	a0 01       	movw	r20, r0
    179c:	e9 9e       	mul	r14, r25
    179e:	50 0d       	add	r21, r0
    17a0:	11 24       	eor	r1, r1
    17a2:	c8 01       	movw	r24, r16
    17a4:	8b 5b       	subi	r24, 0xBB	; 187
    17a6:	9f 4f       	sbci	r25, 0xFF	; 255
    17a8:	fc 01       	movw	r30, r24
    17aa:	80 81       	ld	r24, Z
    17ac:	91 81       	ldd	r25, Z+1	; 0x01
    17ae:	f8 9e       	mul	r15, r24
    17b0:	b0 01       	movw	r22, r0
    17b2:	f9 9e       	mul	r15, r25
    17b4:	70 0d       	add	r23, r0
    17b6:	11 24       	eor	r1, r1
    17b8:	09 5b       	subi	r16, 0xB9	; 185
    17ba:	1f 4f       	sbci	r17, 0xFF	; 255
    17bc:	f8 01       	movw	r30, r16
    17be:	00 81       	ld	r16, Z
    17c0:	11 81       	ldd	r17, Z+1	; 0x01
    17c2:	e0 9e       	mul	r14, r16
    17c4:	c0 01       	movw	r24, r0
    17c6:	e1 9e       	mul	r14, r17
    17c8:	90 0d       	add	r25, r0
    17ca:	11 24       	eor	r1, r1
    17cc:	2a 5e       	subi	r18, 0xEA	; 234
    17ce:	3f 4f       	sbci	r19, 0xFF	; 255
    17d0:	44 50       	subi	r20, 0x04	; 4
    17d2:	51 09       	sbc	r21, r1
    17d4:	69 5b       	subi	r22, 0xB9	; 185
    17d6:	7f 4f       	sbci	r23, 0xFF	; 255
    17d8:	8d 01       	movw	r16, r26
    17da:	4b 96       	adiw	r24, 0x1b	; 27
    17dc:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <tlcd_drawStringInArea>
        tlcd_changeTextSize(1);
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <tlcd_changeTextSize>
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	7c c6       	rjmp	.+3320   	; 0x24e8 <__stack+0x2e9>
    char buffer[50];  // Buffer to store the formatted string


    int length = 0;

    switch (gui_element->sensor_data_type)
    17f0:	d8 01       	movw	r26, r16
    17f2:	11 96       	adiw	r26, 0x01	; 1
    17f4:	ec 91       	ld	r30, X
    17f6:	8e 2f       	mov	r24, r30
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	fc 01       	movw	r30, r24
    17fc:	31 97       	sbiw	r30, 0x01	; 1
    17fe:	e8 30       	cpi	r30, 0x08	; 8
    1800:	f1 05       	cpc	r31, r1
    1802:	08 f0       	brcs	.+2      	; 0x1806 <update_gui_element+0x1f6>
    1804:	a8 c5       	rjmp	.+2896   	; 0x2356 <__stack+0x157>
    1806:	88 27       	eor	r24, r24
    1808:	ee 58       	subi	r30, 0x8E	; 142
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	8f 4f       	sbci	r24, 0xFF	; 255
    180e:	0c 94 5d 2a 	jmp	0x54ba	; 0x54ba <__tablejump2__>
    {
        case PARAM_CO2_PPM: //ALSO TEST CASE
        {
            switch (gui_element->ui_state)
    1812:	f8 01       	movw	r30, r16
    1814:	e3 5b       	subi	r30, 0xB3	; 179
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	80 81       	ld	r24, Z
    181a:	81 30       	cpi	r24, 0x01	; 1
    181c:	21 f0       	breq	.+8      	; 0x1826 <update_gui_element+0x216>
    181e:	82 30       	cpi	r24, 0x02	; 2
    1820:	09 f4       	brne	.+2      	; 0x1824 <update_gui_element+0x214>
    1822:	9c c5       	rjmp	.+2872   	; 0x235c <__stack+0x15d>
    1824:	1c c1       	rjmp	.+568    	; 0x1a5e <update_gui_element+0x44e>
            {
                case 1:
                {
                    sprintf(buffer, "%u", (unsigned int)data.uValue);
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	9a 81       	ldd	r25, Y+2	; 0x02
    182a:	9f 93       	push	r25
    182c:	8f 93       	push	r24
    182e:	84 e6       	ldi	r24, 0x64	; 100
    1830:	92 e0       	ldi	r25, 0x02	; 2
    1832:	9f 93       	push	r25
    1834:	8f 93       	push	r24
    1836:	ce 01       	movw	r24, r28
    1838:	05 96       	adiw	r24, 0x05	; 5
    183a:	9f 93       	push	r25
    183c:	8f 93       	push	r24
    183e:	0e 94 25 2c 	call	0x584a	; 0x584a <sprintf>
                    if (data.uValue > 1400)
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	9a 81       	ldd	r25, Y+2	; 0x02
    1846:	ab 81       	ldd	r26, Y+3	; 0x03
    1848:	bc 81       	ldd	r27, Y+4	; 0x04
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	89 37       	cpi	r24, 0x79	; 121
    1858:	e5 e0       	ldi	r30, 0x05	; 5
    185a:	9e 07       	cpc	r25, r30
    185c:	a1 05       	cpc	r26, r1
    185e:	b1 05       	cpc	r27, r1
    1860:	20 f0       	brcs	.+8      	; 0x186a <update_gui_element+0x25a>
                    {
                        tlcd_changeLineColor(COLOR_RED);
    1862:	84 e0       	ldi	r24, 0x04	; 4
    1864:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>
    1868:	0c c0       	rjmp	.+24     	; 0x1882 <update_gui_element+0x272>
                    }
                    else if (data.uValue > 1000)
    186a:	89 3e       	cpi	r24, 0xE9	; 233
    186c:	93 40       	sbci	r25, 0x03	; 3
    186e:	a1 05       	cpc	r26, r1
    1870:	b1 05       	cpc	r27, r1
    1872:	20 f0       	brcs	.+8      	; 0x187c <update_gui_element+0x26c>
                    {
                        tlcd_changeLineColor(COLOR_ORANGE);
    1874:	85 e0       	ldi	r24, 0x05	; 5
    1876:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <update_gui_element+0x272>
                    }
                    else
                    {
                        tlcd_changeLineColor(COLOR_GREEN);
    187c:	88 e0       	ldi	r24, 0x08	; 8
    187e:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>
                    }
                    tlcd_drawRectangle(GRID_CELL_START_X + 2 + 1, GRID_CELL_CONTENT_START_Y + 1, GRID_CELL_END_X - 2 - 1, GRID_CELL_CONTENT_END_Y + 1);
    1882:	38 01       	movw	r6, r16
    1884:	29 e4       	ldi	r18, 0x49	; 73
    1886:	62 0e       	add	r6, r18
    1888:	71 1c       	adc	r7, r1
    188a:	d3 01       	movw	r26, r6
    188c:	8d 91       	ld	r24, X+
    188e:	9c 91       	ld	r25, X
    1890:	01 96       	adiw	r24, 0x01	; 1
    1892:	0f 2e       	mov	r0, r31
    1894:	f1 e7       	ldi	r31, 0x71	; 113
    1896:	ef 2e       	mov	r14, r31
    1898:	f0 2d       	mov	r31, r0
    189a:	e8 9e       	mul	r14, r24
    189c:	90 01       	movw	r18, r0
    189e:	e9 9e       	mul	r14, r25
    18a0:	30 0d       	add	r19, r0
    18a2:	11 24       	eor	r1, r1
    18a4:	48 01       	movw	r8, r16
    18a6:	bb e4       	ldi	r27, 0x4B	; 75
    18a8:	8b 0e       	add	r8, r27
    18aa:	91 1c       	adc	r9, r1
    18ac:	f4 01       	movw	r30, r8
    18ae:	80 81       	ld	r24, Z
    18b0:	91 81       	ldd	r25, Z+1	; 0x01
    18b2:	01 96       	adiw	r24, 0x01	; 1
    18b4:	0f 2e       	mov	r0, r31
    18b6:	f8 e9       	ldi	r31, 0x98	; 152
    18b8:	ff 2e       	mov	r15, r31
    18ba:	f0 2d       	mov	r31, r0
    18bc:	f8 9e       	mul	r15, r24
    18be:	a0 01       	movw	r20, r0
    18c0:	f9 9e       	mul	r15, r25
    18c2:	50 0d       	add	r21, r0
    18c4:	11 24       	eor	r1, r1
    18c6:	58 01       	movw	r10, r16
    18c8:	f5 e4       	ldi	r31, 0x45	; 69
    18ca:	af 0e       	add	r10, r31
    18cc:	b1 1c       	adc	r11, r1
    18ce:	d5 01       	movw	r26, r10
    18d0:	8d 91       	ld	r24, X+
    18d2:	9c 91       	ld	r25, X
    18d4:	e8 9e       	mul	r14, r24
    18d6:	f0 01       	movw	r30, r0
    18d8:	e9 9e       	mul	r14, r25
    18da:	f0 0d       	add	r31, r0
    18dc:	11 24       	eor	r1, r1
    18de:	68 01       	movw	r12, r16
    18e0:	b7 e4       	ldi	r27, 0x47	; 71
    18e2:	cb 0e       	add	r12, r27
    18e4:	d1 1c       	adc	r13, r1
    18e6:	d6 01       	movw	r26, r12
    18e8:	6d 91       	ld	r22, X+
    18ea:	7c 91       	ld	r23, X
    18ec:	f6 9e       	mul	r15, r22
    18ee:	c0 01       	movw	r24, r0
    18f0:	f7 9e       	mul	r15, r23
    18f2:	90 0d       	add	r25, r0
    18f4:	11 24       	eor	r1, r1
    18f6:	29 5e       	subi	r18, 0xE9	; 233
    18f8:	3f 4f       	sbci	r19, 0xFF	; 255
    18fa:	48 5f       	subi	r20, 0xF8	; 248
    18fc:	5f 4f       	sbci	r21, 0xFF	; 255
    18fe:	bf 01       	movw	r22, r30
    1900:	68 5b       	subi	r22, 0xB8	; 184
    1902:	7f 4f       	sbci	r23, 0xFF	; 255
    1904:	0f 96       	adiw	r24, 0x0f	; 15
    1906:	0e 94 a7 24 	call	0x494e	; 0x494e <tlcd_drawRectangle>
                    tlcd_drawRectangle(GRID_CELL_START_X + 2 + 2, GRID_CELL_CONTENT_START_Y + 2, GRID_CELL_END_X - 2 - 2, GRID_CELL_CONTENT_END_Y + 2);
    190a:	f3 01       	movw	r30, r6
    190c:	80 81       	ld	r24, Z
    190e:	91 81       	ldd	r25, Z+1	; 0x01
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	e8 9e       	mul	r14, r24
    1914:	90 01       	movw	r18, r0
    1916:	e9 9e       	mul	r14, r25
    1918:	30 0d       	add	r19, r0
    191a:	11 24       	eor	r1, r1
    191c:	d4 01       	movw	r26, r8
    191e:	8d 91       	ld	r24, X+
    1920:	9c 91       	ld	r25, X
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	f8 9e       	mul	r15, r24
    1926:	a0 01       	movw	r20, r0
    1928:	f9 9e       	mul	r15, r25
    192a:	50 0d       	add	r21, r0
    192c:	11 24       	eor	r1, r1
    192e:	f5 01       	movw	r30, r10
    1930:	80 81       	ld	r24, Z
    1932:	91 81       	ldd	r25, Z+1	; 0x01
    1934:	e8 9e       	mul	r14, r24
    1936:	f0 01       	movw	r30, r0
    1938:	e9 9e       	mul	r14, r25
    193a:	f0 0d       	add	r31, r0
    193c:	11 24       	eor	r1, r1
    193e:	d6 01       	movw	r26, r12
    1940:	6d 91       	ld	r22, X+
    1942:	7c 91       	ld	r23, X
    1944:	f6 9e       	mul	r15, r22
    1946:	c0 01       	movw	r24, r0
    1948:	f7 9e       	mul	r15, r23
    194a:	90 0d       	add	r25, r0
    194c:	11 24       	eor	r1, r1
    194e:	28 5e       	subi	r18, 0xE8	; 232
    1950:	3f 4f       	sbci	r19, 0xFF	; 255
    1952:	49 5f       	subi	r20, 0xF9	; 249
    1954:	5f 4f       	sbci	r21, 0xFF	; 255
    1956:	bf 01       	movw	r22, r30
    1958:	67 5b       	subi	r22, 0xB7	; 183
    195a:	7f 4f       	sbci	r23, 0xFF	; 255
    195c:	40 96       	adiw	r24, 0x10	; 16
    195e:	0e 94 a7 24 	call	0x494e	; 0x494e <tlcd_drawRectangle>
                    tlcd_drawRectangle(GRID_CELL_START_X + 2 + 3, GRID_CELL_CONTENT_START_Y + 3, GRID_CELL_END_X - 2 - 3, GRID_CELL_CONTENT_END_Y + 3);
    1962:	f3 01       	movw	r30, r6
    1964:	80 81       	ld	r24, Z
    1966:	91 81       	ldd	r25, Z+1	; 0x01
    1968:	01 96       	adiw	r24, 0x01	; 1
    196a:	e8 9e       	mul	r14, r24
    196c:	90 01       	movw	r18, r0
    196e:	e9 9e       	mul	r14, r25
    1970:	30 0d       	add	r19, r0
    1972:	11 24       	eor	r1, r1
    1974:	d4 01       	movw	r26, r8
    1976:	8d 91       	ld	r24, X+
    1978:	9c 91       	ld	r25, X
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	f8 9e       	mul	r15, r24
    197e:	a0 01       	movw	r20, r0
    1980:	f9 9e       	mul	r15, r25
    1982:	50 0d       	add	r21, r0
    1984:	11 24       	eor	r1, r1
    1986:	f5 01       	movw	r30, r10
    1988:	80 81       	ld	r24, Z
    198a:	91 81       	ldd	r25, Z+1	; 0x01
    198c:	e8 9e       	mul	r14, r24
    198e:	f0 01       	movw	r30, r0
    1990:	e9 9e       	mul	r14, r25
    1992:	f0 0d       	add	r31, r0
    1994:	11 24       	eor	r1, r1
    1996:	d6 01       	movw	r26, r12
    1998:	6d 91       	ld	r22, X+
    199a:	7c 91       	ld	r23, X
    199c:	f6 9e       	mul	r15, r22
    199e:	c0 01       	movw	r24, r0
    19a0:	f7 9e       	mul	r15, r23
    19a2:	90 0d       	add	r25, r0
    19a4:	11 24       	eor	r1, r1
    19a6:	27 5e       	subi	r18, 0xE7	; 231
    19a8:	3f 4f       	sbci	r19, 0xFF	; 255
    19aa:	4a 5f       	subi	r20, 0xFA	; 250
    19ac:	5f 4f       	sbci	r21, 0xFF	; 255
    19ae:	bf 01       	movw	r22, r30
    19b0:	66 5b       	subi	r22, 0xB6	; 182
    19b2:	7f 4f       	sbci	r23, 0xFF	; 255
    19b4:	41 96       	adiw	r24, 0x11	; 17
    19b6:	0e 94 a7 24 	call	0x494e	; 0x494e <tlcd_drawRectangle>
                    tlcd_drawRectangle(GRID_CELL_START_X + 2 + 4, GRID_CELL_CONTENT_START_Y + 4, GRID_CELL_END_X - 2 - 4, GRID_CELL_CONTENT_END_Y + 4);
    19ba:	f3 01       	movw	r30, r6
    19bc:	80 81       	ld	r24, Z
    19be:	91 81       	ldd	r25, Z+1	; 0x01
    19c0:	01 96       	adiw	r24, 0x01	; 1
    19c2:	e8 9e       	mul	r14, r24
    19c4:	90 01       	movw	r18, r0
    19c6:	e9 9e       	mul	r14, r25
    19c8:	30 0d       	add	r19, r0
    19ca:	11 24       	eor	r1, r1
    19cc:	d4 01       	movw	r26, r8
    19ce:	8d 91       	ld	r24, X+
    19d0:	9c 91       	ld	r25, X
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	f8 9e       	mul	r15, r24
    19d6:	a0 01       	movw	r20, r0
    19d8:	f9 9e       	mul	r15, r25
    19da:	50 0d       	add	r21, r0
    19dc:	11 24       	eor	r1, r1
    19de:	f5 01       	movw	r30, r10
    19e0:	80 81       	ld	r24, Z
    19e2:	91 81       	ldd	r25, Z+1	; 0x01
    19e4:	e8 9e       	mul	r14, r24
    19e6:	b0 01       	movw	r22, r0
    19e8:	e9 9e       	mul	r14, r25
    19ea:	70 0d       	add	r23, r0
    19ec:	11 24       	eor	r1, r1
    19ee:	d6 01       	movw	r26, r12
    19f0:	ed 91       	ld	r30, X+
    19f2:	fc 91       	ld	r31, X
    19f4:	fe 9e       	mul	r15, r30
    19f6:	c0 01       	movw	r24, r0
    19f8:	ff 9e       	mul	r15, r31
    19fa:	90 0d       	add	r25, r0
    19fc:	11 24       	eor	r1, r1
    19fe:	26 5e       	subi	r18, 0xE6	; 230
    1a00:	3f 4f       	sbci	r19, 0xFF	; 255
    1a02:	4b 5f       	subi	r20, 0xFB	; 251
    1a04:	5f 4f       	sbci	r21, 0xFF	; 255
    1a06:	65 5b       	subi	r22, 0xB5	; 181
    1a08:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0a:	42 96       	adiw	r24, 0x12	; 18
    1a0c:	0e 94 a7 24 	call	0x494e	; 0x494e <tlcd_drawRectangle>
                    tlcd_changeLineColor(COLOR_BLACK);
    1a10:	82 e0       	ldi	r24, 0x02	; 2
    1a12:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>

                    strcat(buffer, " ");
    1a16:	fe 01       	movw	r30, r28
    1a18:	35 96       	adiw	r30, 0x05	; 5
    1a1a:	df 01       	movw	r26, r30
    1a1c:	0d 90       	ld	r0, X+
    1a1e:	00 20       	and	r0, r0
    1a20:	e9 f7       	brne	.-6      	; 0x1a1c <update_gui_element+0x40c>
    1a22:	11 97       	sbiw	r26, 0x01	; 1
    1a24:	80 e2       	ldi	r24, 0x20	; 32
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	8d 93       	st	X+, r24
    1a2a:	9c 93       	st	X, r25
                    strcat(buffer, "PPM");
    1a2c:	df 01       	movw	r26, r30
    1a2e:	0d 90       	ld	r0, X+
    1a30:	00 20       	and	r0, r0
    1a32:	e9 f7       	brne	.-6      	; 0x1a2e <update_gui_element+0x41e>
    1a34:	11 97       	sbiw	r26, 0x01	; 1
    1a36:	80 e5       	ldi	r24, 0x50	; 80
    1a38:	90 e5       	ldi	r25, 0x50	; 80
    1a3a:	11 96       	adiw	r26, 0x01	; 1
    1a3c:	9c 93       	st	X, r25
    1a3e:	8e 93       	st	-X, r24
    1a40:	8d e4       	ldi	r24, 0x4D	; 77
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	13 96       	adiw	r26, 0x03	; 3
    1a46:	9c 93       	st	X, r25
    1a48:	8e 93       	st	-X, r24
    1a4a:	12 97       	sbiw	r26, 0x02	; 2
                    length = strlen(buffer);
    1a4c:	df 01       	movw	r26, r30
    1a4e:	0d 90       	ld	r0, X+
    1a50:	00 20       	and	r0, r0
    1a52:	e9 f7       	brne	.-6      	; 0x1a4e <update_gui_element+0x43e>
    1a54:	11 97       	sbiw	r26, 0x01	; 1
    1a56:	7d 01       	movw	r14, r26
    1a58:	ee 1a       	sub	r14, r30
    1a5a:	ff 0a       	sbc	r15, r31
                }
                break;
    1a5c:	90 c4       	rjmp	.+2336   	; 0x237e <__stack+0x17f>
                {

                }
                break;
                default:
                    WARN("update_gui_element() unknown ui_state");
    1a5e:	88 ed       	ldi	r24, 0xD8	; 216
    1a60:	97 e0       	ldi	r25, 0x07	; 7
    1a62:	9f 93       	push	r25
    1a64:	8f 93       	push	r24
    1a66:	8f ec       	ldi	r24, 0xCF	; 207
    1a68:	97 e0       	ldi	r25, 0x07	; 7
    1a6a:	9f 93       	push	r25
    1a6c:	8f 93       	push	r24
    1a6e:	0e 94 4d 1a 	call	0x349a	; 0x349a <terminal_log_printf_p>
                    return;
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	36 c5       	rjmp	.+2668   	; 0x24e8 <__stack+0x2e9>
        }
        break;

        case PARAM_TEMPERATURE_CELSIUS:
        {
            switch (gui_element->ui_state)
    1a7c:	f8 01       	movw	r30, r16
    1a7e:	e3 5b       	subi	r30, 0xB3	; 179
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	80 81       	ld	r24, Z
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	21 f0       	breq	.+8      	; 0x1a90 <update_gui_element+0x480>
    1a88:	82 30       	cpi	r24, 0x02	; 2
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <update_gui_element+0x47e>
    1a8c:	6a c4       	rjmp	.+2260   	; 0x2362 <__stack+0x163>
    1a8e:	46 c1       	rjmp	.+652    	; 0x1d1c <update_gui_element+0x70c>
            {
                case 1:
                {
                    sprintf(buffer, "%.1f", data.fValue);
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	2b 81       	ldd	r18, Y+3	; 0x03
    1a96:	3c 81       	ldd	r19, Y+4	; 0x04
    1a98:	3f 93       	push	r19
    1a9a:	2f 93       	push	r18
    1a9c:	9f 93       	push	r25
    1a9e:	8f 93       	push	r24
    1aa0:	87 e6       	ldi	r24, 0x67	; 103
    1aa2:	92 e0       	ldi	r25, 0x02	; 2
    1aa4:	9f 93       	push	r25
    1aa6:	8f 93       	push	r24
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	05 96       	adiw	r24, 0x05	; 5
    1aac:	9f 93       	push	r25
    1aae:	8f 93       	push	r24
    1ab0:	0e 94 25 2c 	call	0x584a	; 0x584a <sprintf>

                    if (data.fValue >= 30.0)
    1ab4:	c9 80       	ldd	r12, Y+1	; 0x01
    1ab6:	da 80       	ldd	r13, Y+2	; 0x02
    1ab8:	eb 80       	ldd	r14, Y+3	; 0x03
    1aba:	fc 80       	ldd	r15, Y+4	; 0x04
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 ef       	ldi	r20, 0xF0	; 240
    1acc:	51 e4       	ldi	r21, 0x41	; 65
    1ace:	c7 01       	movw	r24, r14
    1ad0:	b6 01       	movw	r22, r12
    1ad2:	0e 94 e7 25 	call	0x4bce	; 0x4bce <__gesf2>
    1ad6:	88 23       	and	r24, r24
    1ad8:	24 f0       	brlt	.+8      	; 0x1ae2 <update_gui_element+0x4d2>
                    {
                        tlcd_changeLineColor(COLOR_RED);
    1ada:	84 e0       	ldi	r24, 0x04	; 4
    1adc:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>
    1ae0:	2d c0       	rjmp	.+90     	; 0x1b3c <update_gui_element+0x52c>
                        //make border
                    }
                    else if (data.fValue >= 25.0)
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	48 ec       	ldi	r20, 0xC8	; 200
    1ae8:	51 e4       	ldi	r21, 0x41	; 65
    1aea:	c7 01       	movw	r24, r14
    1aec:	b6 01       	movw	r22, r12
    1aee:	0e 94 e7 25 	call	0x4bce	; 0x4bce <__gesf2>
    1af2:	88 23       	and	r24, r24
    1af4:	24 f0       	brlt	.+8      	; 0x1afe <update_gui_element+0x4ee>
                    {
                        tlcd_changeLineColor(COLOR_ORANGE);
    1af6:	85 e0       	ldi	r24, 0x05	; 5
    1af8:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>
    1afc:	1f c0       	rjmp	.+62     	; 0x1b3c <update_gui_element+0x52c>
                    }
                    else if (data.fValue < 16.0)
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e8       	ldi	r20, 0x80	; 128
    1b04:	51 e4       	ldi	r21, 0x41	; 65
    1b06:	c7 01       	movw	r24, r14
    1b08:	b6 01       	movw	r22, r12
    1b0a:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__cmpsf2>
    1b0e:	88 23       	and	r24, r24
    1b10:	24 f4       	brge	.+8      	; 0x1b1a <update_gui_element+0x50a>
                    {
                        tlcd_changeLineColor(COLOR_LIGHT_BLUE);
    1b12:	86 e0       	ldi	r24, 0x06	; 6
    1b14:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>
    1b18:	11 c0       	rjmp	.+34     	; 0x1b3c <update_gui_element+0x52c>
                    }
                    else if (data.fValue < 12.0)
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e4       	ldi	r20, 0x40	; 64
    1b20:	51 e4       	ldi	r21, 0x41	; 65
    1b22:	c7 01       	movw	r24, r14
    1b24:	b6 01       	movw	r22, r12
    1b26:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__cmpsf2>
    1b2a:	88 23       	and	r24, r24
    1b2c:	24 f4       	brge	.+8      	; 0x1b36 <update_gui_element+0x526>
                    {
                        tlcd_changeLineColor(COLOR_BLUE);
    1b2e:	87 e0       	ldi	r24, 0x07	; 7
    1b30:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>
    1b34:	03 c0       	rjmp	.+6      	; 0x1b3c <update_gui_element+0x52c>
                    }
                    else
                    {
                        tlcd_changeLineColor(COLOR_GREEN);
    1b36:	88 e0       	ldi	r24, 0x08	; 8
    1b38:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>
                    }

                    tlcd_drawRectangle(GRID_CELL_START_X + 2 + 1, GRID_CELL_CONTENT_START_Y + 1, GRID_CELL_END_X - 2 - 1, GRID_CELL_CONTENT_END_Y + 1);
    1b3c:	38 01       	movw	r6, r16
    1b3e:	f9 e4       	ldi	r31, 0x49	; 73
    1b40:	6f 0e       	add	r6, r31
    1b42:	71 1c       	adc	r7, r1
    1b44:	d3 01       	movw	r26, r6
    1b46:	8d 91       	ld	r24, X+
    1b48:	9c 91       	ld	r25, X
    1b4a:	01 96       	adiw	r24, 0x01	; 1
    1b4c:	0f 2e       	mov	r0, r31
    1b4e:	f1 e7       	ldi	r31, 0x71	; 113
    1b50:	ef 2e       	mov	r14, r31
    1b52:	f0 2d       	mov	r31, r0
    1b54:	e8 9e       	mul	r14, r24
    1b56:	90 01       	movw	r18, r0
    1b58:	e9 9e       	mul	r14, r25
    1b5a:	30 0d       	add	r19, r0
    1b5c:	11 24       	eor	r1, r1
    1b5e:	48 01       	movw	r8, r16
    1b60:	bb e4       	ldi	r27, 0x4B	; 75
    1b62:	8b 0e       	add	r8, r27
    1b64:	91 1c       	adc	r9, r1
    1b66:	f4 01       	movw	r30, r8
    1b68:	80 81       	ld	r24, Z
    1b6a:	91 81       	ldd	r25, Z+1	; 0x01
    1b6c:	01 96       	adiw	r24, 0x01	; 1
    1b6e:	0f 2e       	mov	r0, r31
    1b70:	f8 e9       	ldi	r31, 0x98	; 152
    1b72:	ff 2e       	mov	r15, r31
    1b74:	f0 2d       	mov	r31, r0
    1b76:	f8 9e       	mul	r15, r24
    1b78:	a0 01       	movw	r20, r0
    1b7a:	f9 9e       	mul	r15, r25
    1b7c:	50 0d       	add	r21, r0
    1b7e:	11 24       	eor	r1, r1
    1b80:	58 01       	movw	r10, r16
    1b82:	f5 e4       	ldi	r31, 0x45	; 69
    1b84:	af 0e       	add	r10, r31
    1b86:	b1 1c       	adc	r11, r1
    1b88:	d5 01       	movw	r26, r10
    1b8a:	8d 91       	ld	r24, X+
    1b8c:	9c 91       	ld	r25, X
    1b8e:	e8 9e       	mul	r14, r24
    1b90:	f0 01       	movw	r30, r0
    1b92:	e9 9e       	mul	r14, r25
    1b94:	f0 0d       	add	r31, r0
    1b96:	11 24       	eor	r1, r1
    1b98:	68 01       	movw	r12, r16
    1b9a:	b7 e4       	ldi	r27, 0x47	; 71
    1b9c:	cb 0e       	add	r12, r27
    1b9e:	d1 1c       	adc	r13, r1
    1ba0:	d6 01       	movw	r26, r12
    1ba2:	6d 91       	ld	r22, X+
    1ba4:	7c 91       	ld	r23, X
    1ba6:	f6 9e       	mul	r15, r22
    1ba8:	c0 01       	movw	r24, r0
    1baa:	f7 9e       	mul	r15, r23
    1bac:	90 0d       	add	r25, r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	29 5e       	subi	r18, 0xE9	; 233
    1bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb4:	48 5f       	subi	r20, 0xF8	; 248
    1bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb8:	bf 01       	movw	r22, r30
    1bba:	68 5b       	subi	r22, 0xB8	; 184
    1bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbe:	0f 96       	adiw	r24, 0x0f	; 15
    1bc0:	0e 94 a7 24 	call	0x494e	; 0x494e <tlcd_drawRectangle>
                    tlcd_drawRectangle(GRID_CELL_START_X + 2 + 2, GRID_CELL_CONTENT_START_Y + 2, GRID_CELL_END_X - 2 - 2, GRID_CELL_CONTENT_END_Y + 2);
    1bc4:	f3 01       	movw	r30, r6
    1bc6:	80 81       	ld	r24, Z
    1bc8:	91 81       	ldd	r25, Z+1	; 0x01
    1bca:	01 96       	adiw	r24, 0x01	; 1
    1bcc:	e8 9e       	mul	r14, r24
    1bce:	90 01       	movw	r18, r0
    1bd0:	e9 9e       	mul	r14, r25
    1bd2:	30 0d       	add	r19, r0
    1bd4:	11 24       	eor	r1, r1
    1bd6:	d4 01       	movw	r26, r8
    1bd8:	8d 91       	ld	r24, X+
    1bda:	9c 91       	ld	r25, X
    1bdc:	01 96       	adiw	r24, 0x01	; 1
    1bde:	f8 9e       	mul	r15, r24
    1be0:	a0 01       	movw	r20, r0
    1be2:	f9 9e       	mul	r15, r25
    1be4:	50 0d       	add	r21, r0
    1be6:	11 24       	eor	r1, r1
    1be8:	f5 01       	movw	r30, r10
    1bea:	80 81       	ld	r24, Z
    1bec:	91 81       	ldd	r25, Z+1	; 0x01
    1bee:	e8 9e       	mul	r14, r24
    1bf0:	f0 01       	movw	r30, r0
    1bf2:	e9 9e       	mul	r14, r25
    1bf4:	f0 0d       	add	r31, r0
    1bf6:	11 24       	eor	r1, r1
    1bf8:	d6 01       	movw	r26, r12
    1bfa:	6d 91       	ld	r22, X+
    1bfc:	7c 91       	ld	r23, X
    1bfe:	f6 9e       	mul	r15, r22
    1c00:	c0 01       	movw	r24, r0
    1c02:	f7 9e       	mul	r15, r23
    1c04:	90 0d       	add	r25, r0
    1c06:	11 24       	eor	r1, r1
    1c08:	28 5e       	subi	r18, 0xE8	; 232
    1c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0c:	49 5f       	subi	r20, 0xF9	; 249
    1c0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c10:	bf 01       	movw	r22, r30
    1c12:	67 5b       	subi	r22, 0xB7	; 183
    1c14:	7f 4f       	sbci	r23, 0xFF	; 255
    1c16:	40 96       	adiw	r24, 0x10	; 16
    1c18:	0e 94 a7 24 	call	0x494e	; 0x494e <tlcd_drawRectangle>
                    tlcd_drawRectangle(GRID_CELL_START_X + 2 + 3, GRID_CELL_CONTENT_START_Y + 3, GRID_CELL_END_X - 2 - 3, GRID_CELL_CONTENT_END_Y + 3);
    1c1c:	f3 01       	movw	r30, r6
    1c1e:	80 81       	ld	r24, Z
    1c20:	91 81       	ldd	r25, Z+1	; 0x01
    1c22:	01 96       	adiw	r24, 0x01	; 1
    1c24:	e8 9e       	mul	r14, r24
    1c26:	90 01       	movw	r18, r0
    1c28:	e9 9e       	mul	r14, r25
    1c2a:	30 0d       	add	r19, r0
    1c2c:	11 24       	eor	r1, r1
    1c2e:	d4 01       	movw	r26, r8
    1c30:	8d 91       	ld	r24, X+
    1c32:	9c 91       	ld	r25, X
    1c34:	01 96       	adiw	r24, 0x01	; 1
    1c36:	f8 9e       	mul	r15, r24
    1c38:	a0 01       	movw	r20, r0
    1c3a:	f9 9e       	mul	r15, r25
    1c3c:	50 0d       	add	r21, r0
    1c3e:	11 24       	eor	r1, r1
    1c40:	f5 01       	movw	r30, r10
    1c42:	80 81       	ld	r24, Z
    1c44:	91 81       	ldd	r25, Z+1	; 0x01
    1c46:	e8 9e       	mul	r14, r24
    1c48:	f0 01       	movw	r30, r0
    1c4a:	e9 9e       	mul	r14, r25
    1c4c:	f0 0d       	add	r31, r0
    1c4e:	11 24       	eor	r1, r1
    1c50:	d6 01       	movw	r26, r12
    1c52:	6d 91       	ld	r22, X+
    1c54:	7c 91       	ld	r23, X
    1c56:	f6 9e       	mul	r15, r22
    1c58:	c0 01       	movw	r24, r0
    1c5a:	f7 9e       	mul	r15, r23
    1c5c:	90 0d       	add	r25, r0
    1c5e:	11 24       	eor	r1, r1
    1c60:	27 5e       	subi	r18, 0xE7	; 231
    1c62:	3f 4f       	sbci	r19, 0xFF	; 255
    1c64:	4a 5f       	subi	r20, 0xFA	; 250
    1c66:	5f 4f       	sbci	r21, 0xFF	; 255
    1c68:	bf 01       	movw	r22, r30
    1c6a:	66 5b       	subi	r22, 0xB6	; 182
    1c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6e:	41 96       	adiw	r24, 0x11	; 17
    1c70:	0e 94 a7 24 	call	0x494e	; 0x494e <tlcd_drawRectangle>
                    tlcd_drawRectangle(GRID_CELL_START_X + 2 + 4, GRID_CELL_CONTENT_START_Y + 4, GRID_CELL_END_X - 2 - 4, GRID_CELL_CONTENT_END_Y + 4);
    1c74:	f3 01       	movw	r30, r6
    1c76:	80 81       	ld	r24, Z
    1c78:	91 81       	ldd	r25, Z+1	; 0x01
    1c7a:	01 96       	adiw	r24, 0x01	; 1
    1c7c:	e8 9e       	mul	r14, r24
    1c7e:	90 01       	movw	r18, r0
    1c80:	e9 9e       	mul	r14, r25
    1c82:	30 0d       	add	r19, r0
    1c84:	11 24       	eor	r1, r1
    1c86:	d4 01       	movw	r26, r8
    1c88:	8d 91       	ld	r24, X+
    1c8a:	9c 91       	ld	r25, X
    1c8c:	01 96       	adiw	r24, 0x01	; 1
    1c8e:	f8 9e       	mul	r15, r24
    1c90:	a0 01       	movw	r20, r0
    1c92:	f9 9e       	mul	r15, r25
    1c94:	50 0d       	add	r21, r0
    1c96:	11 24       	eor	r1, r1
    1c98:	f5 01       	movw	r30, r10
    1c9a:	80 81       	ld	r24, Z
    1c9c:	91 81       	ldd	r25, Z+1	; 0x01
    1c9e:	e8 9e       	mul	r14, r24
    1ca0:	b0 01       	movw	r22, r0
    1ca2:	e9 9e       	mul	r14, r25
    1ca4:	70 0d       	add	r23, r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	d6 01       	movw	r26, r12
    1caa:	ed 91       	ld	r30, X+
    1cac:	fc 91       	ld	r31, X
    1cae:	fe 9e       	mul	r15, r30
    1cb0:	c0 01       	movw	r24, r0
    1cb2:	ff 9e       	mul	r15, r31
    1cb4:	90 0d       	add	r25, r0
    1cb6:	11 24       	eor	r1, r1
    1cb8:	26 5e       	subi	r18, 0xE6	; 230
    1cba:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbc:	4b 5f       	subi	r20, 0xFB	; 251
    1cbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc0:	65 5b       	subi	r22, 0xB5	; 181
    1cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc4:	42 96       	adiw	r24, 0x12	; 18
    1cc6:	0e 94 a7 24 	call	0x494e	; 0x494e <tlcd_drawRectangle>

                    tlcd_changeLineColor(COLOR_BLACK);
    1cca:	82 e0       	ldi	r24, 0x02	; 2
    1ccc:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>

                    strcat(buffer, " ");
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	35 96       	adiw	r30, 0x05	; 5
    1cd4:	df 01       	movw	r26, r30
    1cd6:	0d 90       	ld	r0, X+
    1cd8:	00 20       	and	r0, r0
    1cda:	e9 f7       	brne	.-6      	; 0x1cd6 <update_gui_element+0x6c6>
    1cdc:	11 97       	sbiw	r26, 0x01	; 1
    1cde:	80 e2       	ldi	r24, 0x20	; 32
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	8d 93       	st	X+, r24
    1ce4:	9c 93       	st	X, r25
                    strcat(buffer, "*");
    1ce6:	df 01       	movw	r26, r30
    1ce8:	0d 90       	ld	r0, X+
    1cea:	00 20       	and	r0, r0
    1cec:	e9 f7       	brne	.-6      	; 0x1ce8 <update_gui_element+0x6d8>
    1cee:	11 97       	sbiw	r26, 0x01	; 1
    1cf0:	8a e2       	ldi	r24, 0x2A	; 42
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	8d 93       	st	X+, r24
    1cf6:	9c 93       	st	X, r25
                    strcat(buffer, "C");
    1cf8:	df 01       	movw	r26, r30
    1cfa:	0d 90       	ld	r0, X+
    1cfc:	00 20       	and	r0, r0
    1cfe:	e9 f7       	brne	.-6      	; 0x1cfa <update_gui_element+0x6ea>
    1d00:	11 97       	sbiw	r26, 0x01	; 1
    1d02:	83 e4       	ldi	r24, 0x43	; 67
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	8d 93       	st	X+, r24
    1d08:	9c 93       	st	X, r25
                    length = strlen(buffer);
    1d0a:	df 01       	movw	r26, r30
    1d0c:	0d 90       	ld	r0, X+
    1d0e:	00 20       	and	r0, r0
    1d10:	e9 f7       	brne	.-6      	; 0x1d0c <update_gui_element+0x6fc>
    1d12:	11 97       	sbiw	r26, 0x01	; 1
    1d14:	7d 01       	movw	r14, r26
    1d16:	ee 1a       	sub	r14, r30
    1d18:	ff 0a       	sbc	r15, r31
                }
                break;
    1d1a:	31 c3       	rjmp	.+1634   	; 0x237e <__stack+0x17f>
                {

                }
                break;
                default:
                    WARN("update_gui_element() unknown ui_state");
    1d1c:	89 ea       	ldi	r24, 0xA9	; 169
    1d1e:	97 e0       	ldi	r25, 0x07	; 7
    1d20:	9f 93       	push	r25
    1d22:	8f 93       	push	r24
    1d24:	80 ea       	ldi	r24, 0xA0	; 160
    1d26:	97 e0       	ldi	r25, 0x07	; 7
    1d28:	9f 93       	push	r25
    1d2a:	8f 93       	push	r24
    1d2c:	0e 94 4d 1a 	call	0x349a	; 0x349a <terminal_log_printf_p>
                    return;
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	d7 c3       	rjmp	.+1966   	; 0x24e8 <__stack+0x2e9>
        break;

        case PARAM_LIGHT_INTENSITY_PERCENT:
        case PARAM_HUMIDITY_PERCENT:
        {
            switch (gui_element->ui_state)
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	e3 5b       	subi	r30, 0xB3	; 179
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	80 81       	ld	r24, Z
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	21 f0       	breq	.+8      	; 0x1d4e <update_gui_element+0x73e>
    1d46:	82 30       	cpi	r24, 0x02	; 2
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <update_gui_element+0x73c>
    1d4a:	0e c3       	rjmp	.+1564   	; 0x2368 <__stack+0x169>
    1d4c:	34 c0       	rjmp	.+104    	; 0x1db6 <update_gui_element+0x7a6>
            {
                case 1:
                {
                    sprintf(buffer, "%.1f", data.fValue);
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	9a 81       	ldd	r25, Y+2	; 0x02
    1d52:	2b 81       	ldd	r18, Y+3	; 0x03
    1d54:	3c 81       	ldd	r19, Y+4	; 0x04
    1d56:	3f 93       	push	r19
    1d58:	2f 93       	push	r18
    1d5a:	9f 93       	push	r25
    1d5c:	8f 93       	push	r24
    1d5e:	87 e6       	ldi	r24, 0x67	; 103
    1d60:	92 e0       	ldi	r25, 0x02	; 2
    1d62:	9f 93       	push	r25
    1d64:	8f 93       	push	r24
    1d66:	6e 01       	movw	r12, r28
    1d68:	b5 e0       	ldi	r27, 0x05	; 5
    1d6a:	cb 0e       	add	r12, r27
    1d6c:	d1 1c       	adc	r13, r1
    1d6e:	df 92       	push	r13
    1d70:	cf 92       	push	r12
    1d72:	0e 94 25 2c 	call	0x584a	; 0x584a <sprintf>

                    strcat(buffer, " ");
    1d76:	f6 01       	movw	r30, r12
    1d78:	01 90       	ld	r0, Z+
    1d7a:	00 20       	and	r0, r0
    1d7c:	e9 f7       	brne	.-6      	; 0x1d78 <update_gui_element+0x768>
    1d7e:	31 97       	sbiw	r30, 0x01	; 1
    1d80:	80 e2       	ldi	r24, 0x20	; 32
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	91 83       	std	Z+1, r25	; 0x01
    1d86:	80 83       	st	Z, r24
                    strcat(buffer, "\%");
    1d88:	f6 01       	movw	r30, r12
    1d8a:	01 90       	ld	r0, Z+
    1d8c:	00 20       	and	r0, r0
    1d8e:	e9 f7       	brne	.-6      	; 0x1d8a <update_gui_element+0x77a>
    1d90:	31 97       	sbiw	r30, 0x01	; 1
    1d92:	85 e2       	ldi	r24, 0x25	; 37
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	91 83       	std	Z+1, r25	; 0x01
    1d98:	80 83       	st	Z, r24
                    length = strlen(buffer);
    1d9a:	f6 01       	movw	r30, r12
    1d9c:	01 90       	ld	r0, Z+
    1d9e:	00 20       	and	r0, r0
    1da0:	e9 f7       	brne	.-6      	; 0x1d9c <update_gui_element+0x78c>
    1da2:	31 97       	sbiw	r30, 0x01	; 1
    1da4:	7f 01       	movw	r14, r30
    1da6:	ec 18       	sub	r14, r12
    1da8:	fd 08       	sbc	r15, r13
                }
                break;
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	e4 c2       	rjmp	.+1480   	; 0x237e <__stack+0x17f>
                {

                }
                break;
                default:
                    WARN("update_gui_element() unknown ui_state");
    1db6:	8a e7       	ldi	r24, 0x7A	; 122
    1db8:	97 e0       	ldi	r25, 0x07	; 7
    1dba:	9f 93       	push	r25
    1dbc:	8f 93       	push	r24
    1dbe:	81 e7       	ldi	r24, 0x71	; 113
    1dc0:	97 e0       	ldi	r25, 0x07	; 7
    1dc2:	9f 93       	push	r25
    1dc4:	8f 93       	push	r24
    1dc6:	0e 94 4d 1a 	call	0x349a	; 0x349a <terminal_log_printf_p>
                    return;
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	8a c3       	rjmp	.+1812   	; 0x24e8 <__stack+0x2e9>
        }
        break;

        case PARAM_PRESSURE_PASCAL:
        {
            switch (gui_element->ui_state)
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	e3 5b       	subi	r30, 0xB3	; 179
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 81       	ld	r24, Z
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	21 f0       	breq	.+8      	; 0x1de8 <update_gui_element+0x7d8>
    1de0:	82 30       	cpi	r24, 0x02	; 2
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <update_gui_element+0x7d6>
    1de4:	c4 c2       	rjmp	.+1416   	; 0x236e <__stack+0x16f>
    1de6:	38 c0       	rjmp	.+112    	; 0x1e58 <update_gui_element+0x848>
            {
                case 1:
                {
                    sprintf(buffer, "%.1f", data.fValue);
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	9a 81       	ldd	r25, Y+2	; 0x02
    1dec:	2b 81       	ldd	r18, Y+3	; 0x03
    1dee:	3c 81       	ldd	r19, Y+4	; 0x04
    1df0:	3f 93       	push	r19
    1df2:	2f 93       	push	r18
    1df4:	9f 93       	push	r25
    1df6:	8f 93       	push	r24
    1df8:	87 e6       	ldi	r24, 0x67	; 103
    1dfa:	92 e0       	ldi	r25, 0x02	; 2
    1dfc:	9f 93       	push	r25
    1dfe:	8f 93       	push	r24
    1e00:	6e 01       	movw	r12, r28
    1e02:	f5 e0       	ldi	r31, 0x05	; 5
    1e04:	cf 0e       	add	r12, r31
    1e06:	d1 1c       	adc	r13, r1
    1e08:	df 92       	push	r13
    1e0a:	cf 92       	push	r12
    1e0c:	0e 94 25 2c 	call	0x584a	; 0x584a <sprintf>
                    strcat(buffer, " ");
    1e10:	f6 01       	movw	r30, r12
    1e12:	01 90       	ld	r0, Z+
    1e14:	00 20       	and	r0, r0
    1e16:	e9 f7       	brne	.-6      	; 0x1e12 <update_gui_element+0x802>
    1e18:	31 97       	sbiw	r30, 0x01	; 1
    1e1a:	80 e2       	ldi	r24, 0x20	; 32
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	91 83       	std	Z+1, r25	; 0x01
    1e20:	80 83       	st	Z, r24
                    strcat(buffer, "hPa");
    1e22:	f6 01       	movw	r30, r12
    1e24:	01 90       	ld	r0, Z+
    1e26:	00 20       	and	r0, r0
    1e28:	e9 f7       	brne	.-6      	; 0x1e24 <update_gui_element+0x814>
    1e2a:	31 97       	sbiw	r30, 0x01	; 1
    1e2c:	88 e6       	ldi	r24, 0x68	; 104
    1e2e:	90 e5       	ldi	r25, 0x50	; 80
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	80 83       	st	Z, r24
    1e34:	81 e6       	ldi	r24, 0x61	; 97
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	93 83       	std	Z+3, r25	; 0x03
    1e3a:	82 83       	std	Z+2, r24	; 0x02
                    length = strlen(buffer);
    1e3c:	f6 01       	movw	r30, r12
    1e3e:	01 90       	ld	r0, Z+
    1e40:	00 20       	and	r0, r0
    1e42:	e9 f7       	brne	.-6      	; 0x1e3e <update_gui_element+0x82e>
    1e44:	31 97       	sbiw	r30, 0x01	; 1
    1e46:	7f 01       	movw	r14, r30
    1e48:	ec 18       	sub	r14, r12
    1e4a:	fd 08       	sbc	r15, r13
                }
                break;
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	de bf       	out	0x3e, r29	; 62
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	93 c2       	rjmp	.+1318   	; 0x237e <__stack+0x17f>
                {

                }
                break;
                default:
                    WARN("update_gui_element() unknown ui_state");
    1e58:	8b e4       	ldi	r24, 0x4B	; 75
    1e5a:	97 e0       	ldi	r25, 0x07	; 7
    1e5c:	9f 93       	push	r25
    1e5e:	8f 93       	push	r24
    1e60:	82 e4       	ldi	r24, 0x42	; 66
    1e62:	97 e0       	ldi	r25, 0x07	; 7
    1e64:	9f 93       	push	r25
    1e66:	8f 93       	push	r24
    1e68:	0e 94 4d 1a 	call	0x349a	; 0x349a <terminal_log_printf_p>
                    return;
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	39 c3       	rjmp	.+1650   	; 0x24e8 <__stack+0x2e9>
        }
        break;

        case PARAM_E_CO2_PPM:
        {
            switch (gui_element->ui_state)
    1e76:	f8 01       	movw	r30, r16
    1e78:	e3 5b       	subi	r30, 0xB3	; 179
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	80 81       	ld	r24, Z
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	21 f0       	breq	.+8      	; 0x1e8a <update_gui_element+0x87a>
    1e82:	82 30       	cpi	r24, 0x02	; 2
    1e84:	09 f4       	brne	.+2      	; 0x1e88 <update_gui_element+0x878>
    1e86:	76 c2       	rjmp	.+1260   	; 0x2374 <__stack+0x175>
    1e88:	25 c1       	rjmp	.+586    	; 0x20d4 <__DATA_REGION_LENGTH__+0xd4>
            {
                case 1:
                {
                    sprintf(buffer, "%.1f", data.fValue);
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e90:	3c 81       	ldd	r19, Y+4	; 0x04
    1e92:	3f 93       	push	r19
    1e94:	2f 93       	push	r18
    1e96:	9f 93       	push	r25
    1e98:	8f 93       	push	r24
    1e9a:	87 e6       	ldi	r24, 0x67	; 103
    1e9c:	92 e0       	ldi	r25, 0x02	; 2
    1e9e:	9f 93       	push	r25
    1ea0:	8f 93       	push	r24
    1ea2:	6e 01       	movw	r12, r28
    1ea4:	95 e0       	ldi	r25, 0x05	; 5
    1ea6:	c9 0e       	add	r12, r25
    1ea8:	d1 1c       	adc	r13, r1
    1eaa:	df 92       	push	r13
    1eac:	cf 92       	push	r12
    1eae:	0e 94 25 2c 	call	0x584a	; 0x584a <sprintf>

                    strcat(buffer, " ");
    1eb2:	f6 01       	movw	r30, r12
    1eb4:	01 90       	ld	r0, Z+
    1eb6:	00 20       	and	r0, r0
    1eb8:	e9 f7       	brne	.-6      	; 0x1eb4 <update_gui_element+0x8a4>
    1eba:	31 97       	sbiw	r30, 0x01	; 1
    1ebc:	80 e2       	ldi	r24, 0x20	; 32
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	91 83       	std	Z+1, r25	; 0x01
    1ec2:	80 83       	st	Z, r24
                    strcat(buffer, "PPM");
    1ec4:	f6 01       	movw	r30, r12
    1ec6:	01 90       	ld	r0, Z+
    1ec8:	00 20       	and	r0, r0
    1eca:	e9 f7       	brne	.-6      	; 0x1ec6 <update_gui_element+0x8b6>
    1ecc:	31 97       	sbiw	r30, 0x01	; 1
    1ece:	80 e5       	ldi	r24, 0x50	; 80
    1ed0:	90 e5       	ldi	r25, 0x50	; 80
    1ed2:	91 83       	std	Z+1, r25	; 0x01
    1ed4:	80 83       	st	Z, r24
    1ed6:	8d e4       	ldi	r24, 0x4D	; 77
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	93 83       	std	Z+3, r25	; 0x03
    1edc:	82 83       	std	Z+2, r24	; 0x02
                    length = strlen(buffer);
    1ede:	f6 01       	movw	r30, r12
    1ee0:	01 90       	ld	r0, Z+
    1ee2:	00 20       	and	r0, r0
    1ee4:	e9 f7       	brne	.-6      	; 0x1ee0 <update_gui_element+0x8d0>
    1ee6:	31 97       	sbiw	r30, 0x01	; 1
    1ee8:	7f 01       	movw	r14, r30
    1eea:	ec 18       	sub	r14, r12
    1eec:	fd 08       	sbc	r15, r13

                    if (data.fValue > 2000)
    1eee:	89 80       	ldd	r8, Y+1	; 0x01
    1ef0:	9a 80       	ldd	r9, Y+2	; 0x02
    1ef2:	ab 80       	ldd	r10, Y+3	; 0x03
    1ef4:	bc 80       	ldd	r11, Y+4	; 0x04
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	4a ef       	ldi	r20, 0xFA	; 250
    1f06:	54 e4       	ldi	r21, 0x44	; 68
    1f08:	c5 01       	movw	r24, r10
    1f0a:	b4 01       	movw	r22, r8
    1f0c:	0e 94 e7 25 	call	0x4bce	; 0x4bce <__gesf2>
    1f10:	18 16       	cp	r1, r24
    1f12:	24 f4       	brge	.+8      	; 0x1f1c <update_gui_element+0x90c>
                    {
                        tlcd_changeLineColor(COLOR_RED);
    1f14:	84 e0       	ldi	r24, 0x04	; 4
    1f16:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>
    1f1a:	11 c0       	rjmp	.+34     	; 0x1f3e <update_gui_element+0x92e>
                    }
                    else if (data.fValue > 1500)
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e8       	ldi	r19, 0x80	; 128
    1f20:	4b eb       	ldi	r20, 0xBB	; 187
    1f22:	54 e4       	ldi	r21, 0x44	; 68
    1f24:	c5 01       	movw	r24, r10
    1f26:	b4 01       	movw	r22, r8
    1f28:	0e 94 e7 25 	call	0x4bce	; 0x4bce <__gesf2>
    1f2c:	18 16       	cp	r1, r24
    1f2e:	24 f4       	brge	.+8      	; 0x1f38 <update_gui_element+0x928>
                    {
                        tlcd_changeLineColor(COLOR_ORANGE);
    1f30:	85 e0       	ldi	r24, 0x05	; 5
    1f32:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>
    1f36:	03 c0       	rjmp	.+6      	; 0x1f3e <update_gui_element+0x92e>
                    }
                    else
                    {
                        tlcd_changeLineColor(COLOR_GREEN);
    1f38:	88 e0       	ldi	r24, 0x08	; 8
    1f3a:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>
                    }

                    tlcd_drawRectangle(GRID_CELL_START_X + 2 + 1, GRID_CELL_CONTENT_START_Y + 1, GRID_CELL_END_X - 2 - 1, GRID_CELL_CONTENT_END_Y + 1);
    1f3e:	48 01       	movw	r8, r16
    1f40:	b9 e4       	ldi	r27, 0x49	; 73
    1f42:	8b 0e       	add	r8, r27
    1f44:	91 1c       	adc	r9, r1
    1f46:	f4 01       	movw	r30, r8
    1f48:	80 81       	ld	r24, Z
    1f4a:	91 81       	ldd	r25, Z+1	; 0x01
    1f4c:	01 96       	adiw	r24, 0x01	; 1
    1f4e:	0f 2e       	mov	r0, r31
    1f50:	f1 e7       	ldi	r31, 0x71	; 113
    1f52:	4f 2e       	mov	r4, r31
    1f54:	f0 2d       	mov	r31, r0
    1f56:	48 9e       	mul	r4, r24
    1f58:	90 01       	movw	r18, r0
    1f5a:	49 9e       	mul	r4, r25
    1f5c:	30 0d       	add	r19, r0
    1f5e:	11 24       	eor	r1, r1
    1f60:	58 01       	movw	r10, r16
    1f62:	fb e4       	ldi	r31, 0x4B	; 75
    1f64:	af 0e       	add	r10, r31
    1f66:	b1 1c       	adc	r11, r1
    1f68:	d5 01       	movw	r26, r10
    1f6a:	8d 91       	ld	r24, X+
    1f6c:	9c 91       	ld	r25, X
    1f6e:	01 96       	adiw	r24, 0x01	; 1
    1f70:	0f 2e       	mov	r0, r31
    1f72:	f8 e9       	ldi	r31, 0x98	; 152
    1f74:	5f 2e       	mov	r5, r31
    1f76:	f0 2d       	mov	r31, r0
    1f78:	58 9e       	mul	r5, r24
    1f7a:	a0 01       	movw	r20, r0
    1f7c:	59 9e       	mul	r5, r25
    1f7e:	50 0d       	add	r21, r0
    1f80:	11 24       	eor	r1, r1
    1f82:	68 01       	movw	r12, r16
    1f84:	b5 e4       	ldi	r27, 0x45	; 69
    1f86:	cb 0e       	add	r12, r27
    1f88:	d1 1c       	adc	r13, r1
    1f8a:	f6 01       	movw	r30, r12
    1f8c:	80 81       	ld	r24, Z
    1f8e:	91 81       	ldd	r25, Z+1	; 0x01
    1f90:	48 9e       	mul	r4, r24
    1f92:	f0 01       	movw	r30, r0
    1f94:	49 9e       	mul	r4, r25
    1f96:	f0 0d       	add	r31, r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	38 01       	movw	r6, r16
    1f9c:	87 e4       	ldi	r24, 0x47	; 71
    1f9e:	68 0e       	add	r6, r24
    1fa0:	71 1c       	adc	r7, r1
    1fa2:	d3 01       	movw	r26, r6
    1fa4:	6d 91       	ld	r22, X+
    1fa6:	7c 91       	ld	r23, X
    1fa8:	56 9e       	mul	r5, r22
    1faa:	c0 01       	movw	r24, r0
    1fac:	57 9e       	mul	r5, r23
    1fae:	90 0d       	add	r25, r0
    1fb0:	11 24       	eor	r1, r1
    1fb2:	29 5e       	subi	r18, 0xE9	; 233
    1fb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb6:	48 5f       	subi	r20, 0xF8	; 248
    1fb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fba:	bf 01       	movw	r22, r30
    1fbc:	68 5b       	subi	r22, 0xB8	; 184
    1fbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc0:	0f 96       	adiw	r24, 0x0f	; 15
    1fc2:	0e 94 a7 24 	call	0x494e	; 0x494e <tlcd_drawRectangle>
                    tlcd_drawRectangle(GRID_CELL_START_X + 2 + 2, GRID_CELL_CONTENT_START_Y + 2, GRID_CELL_END_X - 2 - 2, GRID_CELL_CONTENT_END_Y + 2);
    1fc6:	f4 01       	movw	r30, r8
    1fc8:	80 81       	ld	r24, Z
    1fca:	91 81       	ldd	r25, Z+1	; 0x01
    1fcc:	01 96       	adiw	r24, 0x01	; 1
    1fce:	48 9e       	mul	r4, r24
    1fd0:	90 01       	movw	r18, r0
    1fd2:	49 9e       	mul	r4, r25
    1fd4:	30 0d       	add	r19, r0
    1fd6:	11 24       	eor	r1, r1
    1fd8:	d5 01       	movw	r26, r10
    1fda:	8d 91       	ld	r24, X+
    1fdc:	9c 91       	ld	r25, X
    1fde:	01 96       	adiw	r24, 0x01	; 1
    1fe0:	58 9e       	mul	r5, r24
    1fe2:	a0 01       	movw	r20, r0
    1fe4:	59 9e       	mul	r5, r25
    1fe6:	50 0d       	add	r21, r0
    1fe8:	11 24       	eor	r1, r1
    1fea:	f6 01       	movw	r30, r12
    1fec:	80 81       	ld	r24, Z
    1fee:	91 81       	ldd	r25, Z+1	; 0x01
    1ff0:	48 9e       	mul	r4, r24
    1ff2:	f0 01       	movw	r30, r0
    1ff4:	49 9e       	mul	r4, r25
    1ff6:	f0 0d       	add	r31, r0
    1ff8:	11 24       	eor	r1, r1
    1ffa:	d3 01       	movw	r26, r6
    1ffc:	6d 91       	ld	r22, X+
    1ffe:	7c 91       	ld	r23, X
    2000:	56 9e       	mul	r5, r22
    2002:	c0 01       	movw	r24, r0
    2004:	57 9e       	mul	r5, r23
    2006:	90 0d       	add	r25, r0
    2008:	11 24       	eor	r1, r1
    200a:	28 5e       	subi	r18, 0xE8	; 232
    200c:	3f 4f       	sbci	r19, 0xFF	; 255
    200e:	49 5f       	subi	r20, 0xF9	; 249
    2010:	5f 4f       	sbci	r21, 0xFF	; 255
    2012:	bf 01       	movw	r22, r30
    2014:	67 5b       	subi	r22, 0xB7	; 183
    2016:	7f 4f       	sbci	r23, 0xFF	; 255
    2018:	40 96       	adiw	r24, 0x10	; 16
    201a:	0e 94 a7 24 	call	0x494e	; 0x494e <tlcd_drawRectangle>
                    tlcd_drawRectangle(GRID_CELL_START_X + 2 + 3, GRID_CELL_CONTENT_START_Y + 3, GRID_CELL_END_X - 2 - 3, GRID_CELL_CONTENT_END_Y + 3);
    201e:	f4 01       	movw	r30, r8
    2020:	80 81       	ld	r24, Z
    2022:	91 81       	ldd	r25, Z+1	; 0x01
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	48 9e       	mul	r4, r24
    2028:	90 01       	movw	r18, r0
    202a:	49 9e       	mul	r4, r25
    202c:	30 0d       	add	r19, r0
    202e:	11 24       	eor	r1, r1
    2030:	d5 01       	movw	r26, r10
    2032:	8d 91       	ld	r24, X+
    2034:	9c 91       	ld	r25, X
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	58 9e       	mul	r5, r24
    203a:	a0 01       	movw	r20, r0
    203c:	59 9e       	mul	r5, r25
    203e:	50 0d       	add	r21, r0
    2040:	11 24       	eor	r1, r1
    2042:	f6 01       	movw	r30, r12
    2044:	80 81       	ld	r24, Z
    2046:	91 81       	ldd	r25, Z+1	; 0x01
    2048:	48 9e       	mul	r4, r24
    204a:	f0 01       	movw	r30, r0
    204c:	49 9e       	mul	r4, r25
    204e:	f0 0d       	add	r31, r0
    2050:	11 24       	eor	r1, r1
    2052:	d3 01       	movw	r26, r6
    2054:	6d 91       	ld	r22, X+
    2056:	7c 91       	ld	r23, X
    2058:	56 9e       	mul	r5, r22
    205a:	c0 01       	movw	r24, r0
    205c:	57 9e       	mul	r5, r23
    205e:	90 0d       	add	r25, r0
    2060:	11 24       	eor	r1, r1
    2062:	27 5e       	subi	r18, 0xE7	; 231
    2064:	3f 4f       	sbci	r19, 0xFF	; 255
    2066:	4a 5f       	subi	r20, 0xFA	; 250
    2068:	5f 4f       	sbci	r21, 0xFF	; 255
    206a:	bf 01       	movw	r22, r30
    206c:	66 5b       	subi	r22, 0xB6	; 182
    206e:	7f 4f       	sbci	r23, 0xFF	; 255
    2070:	41 96       	adiw	r24, 0x11	; 17
    2072:	0e 94 a7 24 	call	0x494e	; 0x494e <tlcd_drawRectangle>
                    tlcd_drawRectangle(GRID_CELL_START_X + 2 + 4, GRID_CELL_CONTENT_START_Y + 4, GRID_CELL_END_X - 2 - 4, GRID_CELL_CONTENT_END_Y + 4);
    2076:	f4 01       	movw	r30, r8
    2078:	80 81       	ld	r24, Z
    207a:	91 81       	ldd	r25, Z+1	; 0x01
    207c:	01 96       	adiw	r24, 0x01	; 1
    207e:	48 9e       	mul	r4, r24
    2080:	90 01       	movw	r18, r0
    2082:	49 9e       	mul	r4, r25
    2084:	30 0d       	add	r19, r0
    2086:	11 24       	eor	r1, r1
    2088:	d5 01       	movw	r26, r10
    208a:	8d 91       	ld	r24, X+
    208c:	9c 91       	ld	r25, X
    208e:	01 96       	adiw	r24, 0x01	; 1
    2090:	58 9e       	mul	r5, r24
    2092:	a0 01       	movw	r20, r0
    2094:	59 9e       	mul	r5, r25
    2096:	50 0d       	add	r21, r0
    2098:	11 24       	eor	r1, r1
    209a:	f6 01       	movw	r30, r12
    209c:	80 81       	ld	r24, Z
    209e:	91 81       	ldd	r25, Z+1	; 0x01
    20a0:	48 9e       	mul	r4, r24
    20a2:	b0 01       	movw	r22, r0
    20a4:	49 9e       	mul	r4, r25
    20a6:	70 0d       	add	r23, r0
    20a8:	11 24       	eor	r1, r1
    20aa:	d3 01       	movw	r26, r6
    20ac:	ed 91       	ld	r30, X+
    20ae:	fc 91       	ld	r31, X
    20b0:	5e 9e       	mul	r5, r30
    20b2:	c0 01       	movw	r24, r0
    20b4:	5f 9e       	mul	r5, r31
    20b6:	90 0d       	add	r25, r0
    20b8:	11 24       	eor	r1, r1
    20ba:	26 5e       	subi	r18, 0xE6	; 230
    20bc:	3f 4f       	sbci	r19, 0xFF	; 255
    20be:	4b 5f       	subi	r20, 0xFB	; 251
    20c0:	5f 4f       	sbci	r21, 0xFF	; 255
    20c2:	65 5b       	subi	r22, 0xB5	; 181
    20c4:	7f 4f       	sbci	r23, 0xFF	; 255
    20c6:	42 96       	adiw	r24, 0x12	; 18
    20c8:	0e 94 a7 24 	call	0x494e	; 0x494e <tlcd_drawRectangle>
                    tlcd_changeLineColor(COLOR_BLACK);
    20cc:	82 e0       	ldi	r24, 0x02	; 2
    20ce:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>
                }
                break;
    20d2:	55 c1       	rjmp	.+682    	; 0x237e <__stack+0x17f>
                {

                }
                break;
                default:
                    WARN("update_gui_element() unknown ui_state");
    20d4:	8c e1       	ldi	r24, 0x1C	; 28
    20d6:	97 e0       	ldi	r25, 0x07	; 7
    20d8:	9f 93       	push	r25
    20da:	8f 93       	push	r24
    20dc:	83 e1       	ldi	r24, 0x13	; 19
    20de:	97 e0       	ldi	r25, 0x07	; 7
    20e0:	9f 93       	push	r25
    20e2:	8f 93       	push	r24
    20e4:	0e 94 4d 1a 	call	0x349a	; 0x349a <terminal_log_printf_p>
                    return;
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	fb c1       	rjmp	.+1014   	; 0x24e8 <__stack+0x2e9>
        }
        break;

        case PARAM_TVOC_PPB:
        {
            switch (gui_element->ui_state)
    20f2:	f8 01       	movw	r30, r16
    20f4:	e3 5b       	subi	r30, 0xB3	; 179
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	80 81       	ld	r24, Z
    20fa:	81 30       	cpi	r24, 0x01	; 1
    20fc:	21 f0       	breq	.+8      	; 0x2106 <__DATA_REGION_LENGTH__+0x106>
    20fe:	82 30       	cpi	r24, 0x02	; 2
    2100:	09 f4       	brne	.+2      	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
    2102:	3b c1       	rjmp	.+630    	; 0x237a <__stack+0x17b>
    2104:	19 c1       	rjmp	.+562    	; 0x2338 <__stack+0x139>
            {
                case 1:
                {
                    sprintf(buffer, "%u", (unsigned int)data.uValue);
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	9f 93       	push	r25
    210c:	8f 93       	push	r24
    210e:	84 e6       	ldi	r24, 0x64	; 100
    2110:	92 e0       	ldi	r25, 0x02	; 2
    2112:	9f 93       	push	r25
    2114:	8f 93       	push	r24
    2116:	6e 01       	movw	r12, r28
    2118:	b5 e0       	ldi	r27, 0x05	; 5
    211a:	cb 0e       	add	r12, r27
    211c:	d1 1c       	adc	r13, r1
    211e:	df 92       	push	r13
    2120:	cf 92       	push	r12
    2122:	0e 94 25 2c 	call	0x584a	; 0x584a <sprintf>

                    strcat(buffer, " ");
    2126:	f6 01       	movw	r30, r12
    2128:	01 90       	ld	r0, Z+
    212a:	00 20       	and	r0, r0
    212c:	e9 f7       	brne	.-6      	; 0x2128 <__DATA_REGION_LENGTH__+0x128>
    212e:	31 97       	sbiw	r30, 0x01	; 1
    2130:	80 e2       	ldi	r24, 0x20	; 32
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	91 83       	std	Z+1, r25	; 0x01
    2136:	80 83       	st	Z, r24
                    strcat(buffer, "PPB");
    2138:	f6 01       	movw	r30, r12
    213a:	01 90       	ld	r0, Z+
    213c:	00 20       	and	r0, r0
    213e:	e9 f7       	brne	.-6      	; 0x213a <__DATA_REGION_LENGTH__+0x13a>
    2140:	31 97       	sbiw	r30, 0x01	; 1
    2142:	80 e5       	ldi	r24, 0x50	; 80
    2144:	90 e5       	ldi	r25, 0x50	; 80
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	80 83       	st	Z, r24
    214a:	82 e4       	ldi	r24, 0x42	; 66
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	93 83       	std	Z+3, r25	; 0x03
    2150:	82 83       	std	Z+2, r24	; 0x02
                    length = strlen(buffer);
    2152:	f6 01       	movw	r30, r12
    2154:	01 90       	ld	r0, Z+
    2156:	00 20       	and	r0, r0
    2158:	e9 f7       	brne	.-6      	; 0x2154 <__DATA_REGION_LENGTH__+0x154>
    215a:	31 97       	sbiw	r30, 0x01	; 1
    215c:	7f 01       	movw	r14, r30
    215e:	ec 18       	sub	r14, r12
    2160:	fd 08       	sbc	r15, r13

                    if (data.uValue > 1200)
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	ab 81       	ldd	r26, Y+3	; 0x03
    2168:	bc 81       	ldd	r27, Y+4	; 0x04
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	81 3b       	cpi	r24, 0xB1	; 177
    2178:	e4 e0       	ldi	r30, 0x04	; 4
    217a:	9e 07       	cpc	r25, r30
    217c:	a1 05       	cpc	r26, r1
    217e:	b1 05       	cpc	r27, r1
    2180:	20 f0       	brcs	.+8      	; 0x218a <__DATA_REGION_LENGTH__+0x18a>
                    {
                        tlcd_changeLineColor(COLOR_RED);
    2182:	84 e0       	ldi	r24, 0x04	; 4
    2184:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>
    2188:	0c c0       	rjmp	.+24     	; 0x21a2 <__DATA_REGION_LENGTH__+0x1a2>
                    }
                    else if (data.uValue > 550)
    218a:	87 32       	cpi	r24, 0x27	; 39
    218c:	92 40       	sbci	r25, 0x02	; 2
    218e:	a1 05       	cpc	r26, r1
    2190:	b1 05       	cpc	r27, r1
    2192:	20 f0       	brcs	.+8      	; 0x219c <__DATA_REGION_LENGTH__+0x19c>
                    {
                        tlcd_changeLineColor(COLOR_ORANGE);
    2194:	85 e0       	ldi	r24, 0x05	; 5
    2196:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>
    219a:	03 c0       	rjmp	.+6      	; 0x21a2 <__DATA_REGION_LENGTH__+0x1a2>
                    }
                    else
                    {
                        tlcd_changeLineColor(COLOR_GREEN);
    219c:	88 e0       	ldi	r24, 0x08	; 8
    219e:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>
                    }

                    tlcd_drawRectangle(GRID_CELL_START_X + 2 + 1, GRID_CELL_CONTENT_START_Y + 1, GRID_CELL_END_X - 2 - 1, GRID_CELL_CONTENT_END_Y + 1);
    21a2:	48 01       	movw	r8, r16
    21a4:	29 e4       	ldi	r18, 0x49	; 73
    21a6:	82 0e       	add	r8, r18
    21a8:	91 1c       	adc	r9, r1
    21aa:	d4 01       	movw	r26, r8
    21ac:	8d 91       	ld	r24, X+
    21ae:	9c 91       	ld	r25, X
    21b0:	01 96       	adiw	r24, 0x01	; 1
    21b2:	0f 2e       	mov	r0, r31
    21b4:	f1 e7       	ldi	r31, 0x71	; 113
    21b6:	4f 2e       	mov	r4, r31
    21b8:	f0 2d       	mov	r31, r0
    21ba:	48 9e       	mul	r4, r24
    21bc:	90 01       	movw	r18, r0
    21be:	49 9e       	mul	r4, r25
    21c0:	30 0d       	add	r19, r0
    21c2:	11 24       	eor	r1, r1
    21c4:	58 01       	movw	r10, r16
    21c6:	bb e4       	ldi	r27, 0x4B	; 75
    21c8:	ab 0e       	add	r10, r27
    21ca:	b1 1c       	adc	r11, r1
    21cc:	f5 01       	movw	r30, r10
    21ce:	80 81       	ld	r24, Z
    21d0:	91 81       	ldd	r25, Z+1	; 0x01
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	0f 2e       	mov	r0, r31
    21d6:	f8 e9       	ldi	r31, 0x98	; 152
    21d8:	5f 2e       	mov	r5, r31
    21da:	f0 2d       	mov	r31, r0
    21dc:	58 9e       	mul	r5, r24
    21de:	a0 01       	movw	r20, r0
    21e0:	59 9e       	mul	r5, r25
    21e2:	50 0d       	add	r21, r0
    21e4:	11 24       	eor	r1, r1
    21e6:	68 01       	movw	r12, r16
    21e8:	f5 e4       	ldi	r31, 0x45	; 69
    21ea:	cf 0e       	add	r12, r31
    21ec:	d1 1c       	adc	r13, r1
    21ee:	d6 01       	movw	r26, r12
    21f0:	8d 91       	ld	r24, X+
    21f2:	9c 91       	ld	r25, X
    21f4:	48 9e       	mul	r4, r24
    21f6:	f0 01       	movw	r30, r0
    21f8:	49 9e       	mul	r4, r25
    21fa:	f0 0d       	add	r31, r0
    21fc:	11 24       	eor	r1, r1
    21fe:	38 01       	movw	r6, r16
    2200:	b7 e4       	ldi	r27, 0x47	; 71
    2202:	6b 0e       	add	r6, r27
    2204:	71 1c       	adc	r7, r1
    2206:	d3 01       	movw	r26, r6
    2208:	6d 91       	ld	r22, X+
    220a:	7c 91       	ld	r23, X
    220c:	56 9e       	mul	r5, r22
    220e:	c0 01       	movw	r24, r0
    2210:	57 9e       	mul	r5, r23
    2212:	90 0d       	add	r25, r0
    2214:	11 24       	eor	r1, r1
    2216:	29 5e       	subi	r18, 0xE9	; 233
    2218:	3f 4f       	sbci	r19, 0xFF	; 255
    221a:	48 5f       	subi	r20, 0xF8	; 248
    221c:	5f 4f       	sbci	r21, 0xFF	; 255
    221e:	bf 01       	movw	r22, r30
    2220:	68 5b       	subi	r22, 0xB8	; 184
    2222:	7f 4f       	sbci	r23, 0xFF	; 255
    2224:	0f 96       	adiw	r24, 0x0f	; 15
    2226:	0e 94 a7 24 	call	0x494e	; 0x494e <tlcd_drawRectangle>
                    tlcd_drawRectangle(GRID_CELL_START_X + 2 + 2, GRID_CELL_CONTENT_START_Y + 2, GRID_CELL_END_X - 2 - 2, GRID_CELL_CONTENT_END_Y + 2);
    222a:	f4 01       	movw	r30, r8
    222c:	80 81       	ld	r24, Z
    222e:	91 81       	ldd	r25, Z+1	; 0x01
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	48 9e       	mul	r4, r24
    2234:	90 01       	movw	r18, r0
    2236:	49 9e       	mul	r4, r25
    2238:	30 0d       	add	r19, r0
    223a:	11 24       	eor	r1, r1
    223c:	d5 01       	movw	r26, r10
    223e:	8d 91       	ld	r24, X+
    2240:	9c 91       	ld	r25, X
    2242:	01 96       	adiw	r24, 0x01	; 1
    2244:	58 9e       	mul	r5, r24
    2246:	a0 01       	movw	r20, r0
    2248:	59 9e       	mul	r5, r25
    224a:	50 0d       	add	r21, r0
    224c:	11 24       	eor	r1, r1
    224e:	f6 01       	movw	r30, r12
    2250:	80 81       	ld	r24, Z
    2252:	91 81       	ldd	r25, Z+1	; 0x01
    2254:	48 9e       	mul	r4, r24
    2256:	f0 01       	movw	r30, r0
    2258:	49 9e       	mul	r4, r25
    225a:	f0 0d       	add	r31, r0
    225c:	11 24       	eor	r1, r1
    225e:	d3 01       	movw	r26, r6
    2260:	6d 91       	ld	r22, X+
    2262:	7c 91       	ld	r23, X
    2264:	56 9e       	mul	r5, r22
    2266:	c0 01       	movw	r24, r0
    2268:	57 9e       	mul	r5, r23
    226a:	90 0d       	add	r25, r0
    226c:	11 24       	eor	r1, r1
    226e:	28 5e       	subi	r18, 0xE8	; 232
    2270:	3f 4f       	sbci	r19, 0xFF	; 255
    2272:	49 5f       	subi	r20, 0xF9	; 249
    2274:	5f 4f       	sbci	r21, 0xFF	; 255
    2276:	bf 01       	movw	r22, r30
    2278:	67 5b       	subi	r22, 0xB7	; 183
    227a:	7f 4f       	sbci	r23, 0xFF	; 255
    227c:	40 96       	adiw	r24, 0x10	; 16
    227e:	0e 94 a7 24 	call	0x494e	; 0x494e <tlcd_drawRectangle>
                    tlcd_drawRectangle(GRID_CELL_START_X + 2 + 3, GRID_CELL_CONTENT_START_Y + 3, GRID_CELL_END_X - 2 - 3, GRID_CELL_CONTENT_END_Y + 3);
    2282:	f4 01       	movw	r30, r8
    2284:	80 81       	ld	r24, Z
    2286:	91 81       	ldd	r25, Z+1	; 0x01
    2288:	01 96       	adiw	r24, 0x01	; 1
    228a:	48 9e       	mul	r4, r24
    228c:	90 01       	movw	r18, r0
    228e:	49 9e       	mul	r4, r25
    2290:	30 0d       	add	r19, r0
    2292:	11 24       	eor	r1, r1
    2294:	d5 01       	movw	r26, r10
    2296:	8d 91       	ld	r24, X+
    2298:	9c 91       	ld	r25, X
    229a:	01 96       	adiw	r24, 0x01	; 1
    229c:	58 9e       	mul	r5, r24
    229e:	a0 01       	movw	r20, r0
    22a0:	59 9e       	mul	r5, r25
    22a2:	50 0d       	add	r21, r0
    22a4:	11 24       	eor	r1, r1
    22a6:	f6 01       	movw	r30, r12
    22a8:	80 81       	ld	r24, Z
    22aa:	91 81       	ldd	r25, Z+1	; 0x01
    22ac:	48 9e       	mul	r4, r24
    22ae:	f0 01       	movw	r30, r0
    22b0:	49 9e       	mul	r4, r25
    22b2:	f0 0d       	add	r31, r0
    22b4:	11 24       	eor	r1, r1
    22b6:	d3 01       	movw	r26, r6
    22b8:	6d 91       	ld	r22, X+
    22ba:	7c 91       	ld	r23, X
    22bc:	56 9e       	mul	r5, r22
    22be:	c0 01       	movw	r24, r0
    22c0:	57 9e       	mul	r5, r23
    22c2:	90 0d       	add	r25, r0
    22c4:	11 24       	eor	r1, r1
    22c6:	27 5e       	subi	r18, 0xE7	; 231
    22c8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ca:	4a 5f       	subi	r20, 0xFA	; 250
    22cc:	5f 4f       	sbci	r21, 0xFF	; 255
    22ce:	bf 01       	movw	r22, r30
    22d0:	66 5b       	subi	r22, 0xB6	; 182
    22d2:	7f 4f       	sbci	r23, 0xFF	; 255
    22d4:	41 96       	adiw	r24, 0x11	; 17
    22d6:	0e 94 a7 24 	call	0x494e	; 0x494e <tlcd_drawRectangle>
                    tlcd_drawRectangle(GRID_CELL_START_X + 2 + 4, GRID_CELL_CONTENT_START_Y + 4, GRID_CELL_END_X - 2 - 4, GRID_CELL_CONTENT_END_Y + 4);
    22da:	f4 01       	movw	r30, r8
    22dc:	80 81       	ld	r24, Z
    22de:	91 81       	ldd	r25, Z+1	; 0x01
    22e0:	01 96       	adiw	r24, 0x01	; 1
    22e2:	48 9e       	mul	r4, r24
    22e4:	90 01       	movw	r18, r0
    22e6:	49 9e       	mul	r4, r25
    22e8:	30 0d       	add	r19, r0
    22ea:	11 24       	eor	r1, r1
    22ec:	d5 01       	movw	r26, r10
    22ee:	8d 91       	ld	r24, X+
    22f0:	9c 91       	ld	r25, X
    22f2:	01 96       	adiw	r24, 0x01	; 1
    22f4:	58 9e       	mul	r5, r24
    22f6:	a0 01       	movw	r20, r0
    22f8:	59 9e       	mul	r5, r25
    22fa:	50 0d       	add	r21, r0
    22fc:	11 24       	eor	r1, r1
    22fe:	f6 01       	movw	r30, r12
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	48 9e       	mul	r4, r24
    2306:	b0 01       	movw	r22, r0
    2308:	49 9e       	mul	r4, r25
    230a:	70 0d       	add	r23, r0
    230c:	11 24       	eor	r1, r1
    230e:	d3 01       	movw	r26, r6
    2310:	ed 91       	ld	r30, X+
    2312:	fc 91       	ld	r31, X
    2314:	5e 9e       	mul	r5, r30
    2316:	c0 01       	movw	r24, r0
    2318:	5f 9e       	mul	r5, r31
    231a:	90 0d       	add	r25, r0
    231c:	11 24       	eor	r1, r1
    231e:	26 5e       	subi	r18, 0xE6	; 230
    2320:	3f 4f       	sbci	r19, 0xFF	; 255
    2322:	4b 5f       	subi	r20, 0xFB	; 251
    2324:	5f 4f       	sbci	r21, 0xFF	; 255
    2326:	65 5b       	subi	r22, 0xB5	; 181
    2328:	7f 4f       	sbci	r23, 0xFF	; 255
    232a:	42 96       	adiw	r24, 0x12	; 18
    232c:	0e 94 a7 24 	call	0x494e	; 0x494e <tlcd_drawRectangle>
                    tlcd_changeLineColor(COLOR_BLACK);
    2330:	82 e0       	ldi	r24, 0x02	; 2
    2332:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>
                }
                break;
    2336:	23 c0       	rjmp	.+70     	; 0x237e <__stack+0x17f>
                {

                }
                break;
                default:
                    WARN("update_gui_element() unknown ui_state");
    2338:	8d ee       	ldi	r24, 0xED	; 237
    233a:	96 e0       	ldi	r25, 0x06	; 6
    233c:	9f 93       	push	r25
    233e:	8f 93       	push	r24
    2340:	84 ee       	ldi	r24, 0xE4	; 228
    2342:	96 e0       	ldi	r25, 0x06	; 6
    2344:	9f 93       	push	r25
    2346:	8f 93       	push	r24
    2348:	0e 94 4d 1a 	call	0x349a	; 0x349a <terminal_log_printf_p>
                    return;
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	c9 c0       	rjmp	.+402    	; 0x24e8 <__stack+0x2e9>
    }

    char buffer[50];  // Buffer to store the formatted string


    int length = 0;
    2356:	e1 2c       	mov	r14, r1
    2358:	f1 2c       	mov	r15, r1
    235a:	11 c0       	rjmp	.+34     	; 0x237e <__stack+0x17f>
    235c:	e1 2c       	mov	r14, r1
    235e:	f1 2c       	mov	r15, r1
    2360:	0e c0       	rjmp	.+28     	; 0x237e <__stack+0x17f>
    2362:	e1 2c       	mov	r14, r1
    2364:	f1 2c       	mov	r15, r1
    2366:	0b c0       	rjmp	.+22     	; 0x237e <__stack+0x17f>
    2368:	e1 2c       	mov	r14, r1
    236a:	f1 2c       	mov	r15, r1
    236c:	08 c0       	rjmp	.+16     	; 0x237e <__stack+0x17f>
    236e:	e1 2c       	mov	r14, r1
    2370:	f1 2c       	mov	r15, r1
    2372:	05 c0       	rjmp	.+10     	; 0x237e <__stack+0x17f>
    2374:	e1 2c       	mov	r14, r1
    2376:	f1 2c       	mov	r15, r1
    2378:	02 c0       	rjmp	.+4      	; 0x237e <__stack+0x17f>
    237a:	e1 2c       	mov	r14, r1
    237c:	f1 2c       	mov	r15, r1
        break;
        default:
            break;
    }

    if (length <= 8)
    237e:	b9 e0       	ldi	r27, 0x09	; 9
    2380:	eb 16       	cp	r14, r27
    2382:	f1 04       	cpc	r15, r1
    2384:	24 f4       	brge	.+8      	; 0x238e <__stack+0x18f>
    {
        tlcd_changeTextSize(2);
    2386:	82 e0       	ldi	r24, 0x02	; 2
    2388:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <tlcd_changeTextSize>
    238c:	6f c0       	rjmp	.+222    	; 0x246c <__stack+0x26d>
    }
    else if (length <= 12)
    238e:	ed e0       	ldi	r30, 0x0D	; 13
    2390:	ee 16       	cp	r14, r30
    2392:	f1 04       	cpc	r15, r1
    2394:	24 f4       	brge	.+8      	; 0x239e <__stack+0x19f>
    {
        tlcd_changeTextSize(1);
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <tlcd_changeTextSize>
    239c:	67 c0       	rjmp	.+206    	; 0x246c <__stack+0x26d>
    }
    else
    {
        WARN("update_gui_element() TEMP String length out of bounds");
    239e:	8e ea       	ldi	r24, 0xAE	; 174
    23a0:	96 e0       	ldi	r25, 0x06	; 6
    23a2:	9f 93       	push	r25
    23a4:	8f 93       	push	r24
    23a6:	85 ea       	ldi	r24, 0xA5	; 165
    23a8:	96 e0       	ldi	r25, 0x06	; 6
    23aa:	9f 93       	push	r25
    23ac:	8f 93       	push	r24
    23ae:	0e 94 4d 1a 	call	0x349a	; 0x349a <terminal_log_printf_p>
        tlcd_changeTextSize(2);
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <tlcd_changeTextSize>
        memset(buffer, 0, sizeof(buffer));
    23b8:	de 01       	movw	r26, r28
    23ba:	15 96       	adiw	r26, 0x05	; 5
    23bc:	82 e3       	ldi	r24, 0x32	; 50
    23be:	fd 01       	movw	r30, r26
    23c0:	11 92       	st	Z+, r1
    23c2:	8a 95       	dec	r24
    23c4:	e9 f7       	brne	.-6      	; 0x23c0 <__stack+0x1c1>
        strcat(buffer, "ERR");
    23c6:	fd 01       	movw	r30, r26
    23c8:	01 90       	ld	r0, Z+
    23ca:	00 20       	and	r0, r0
    23cc:	e9 f7       	brne	.-6      	; 0x23c8 <__stack+0x1c9>
    23ce:	31 97       	sbiw	r30, 0x01	; 1
    23d0:	85 e4       	ldi	r24, 0x45	; 69
    23d2:	92 e5       	ldi	r25, 0x52	; 82
    23d4:	91 83       	std	Z+1, r25	; 0x01
    23d6:	80 83       	st	Z, r24
    23d8:	82 e5       	ldi	r24, 0x52	; 82
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	93 83       	std	Z+3, r25	; 0x03
    23de:	82 83       	std	Z+2, r24	; 0x02
        tlcd_drawStringInArea(GRID_CELL_CONTENT_START_X, GRID_CELL_CONTENT_START_Y, GRID_CELL_CONTENT_END_X, GRID_CELL_CONTENT_END_Y, buffer);
    23e0:	f8 01       	movw	r30, r16
    23e2:	e7 5b       	subi	r30, 0xB7	; 183
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	80 81       	ld	r24, Z
    23e8:	91 81       	ldd	r25, Z+1	; 0x01
    23ea:	01 96       	adiw	r24, 0x01	; 1
    23ec:	0f 2e       	mov	r0, r31
    23ee:	f1 e7       	ldi	r31, 0x71	; 113
    23f0:	ff 2e       	mov	r15, r31
    23f2:	f0 2d       	mov	r31, r0
    23f4:	f8 9e       	mul	r15, r24
    23f6:	90 01       	movw	r18, r0
    23f8:	f9 9e       	mul	r15, r25
    23fa:	30 0d       	add	r19, r0
    23fc:	11 24       	eor	r1, r1
    23fe:	c8 01       	movw	r24, r16
    2400:	85 5b       	subi	r24, 0xB5	; 181
    2402:	9f 4f       	sbci	r25, 0xFF	; 255
    2404:	fc 01       	movw	r30, r24
    2406:	80 81       	ld	r24, Z
    2408:	91 81       	ldd	r25, Z+1	; 0x01
    240a:	01 96       	adiw	r24, 0x01	; 1
    240c:	0f 2e       	mov	r0, r31
    240e:	f8 e9       	ldi	r31, 0x98	; 152
    2410:	ef 2e       	mov	r14, r31
    2412:	f0 2d       	mov	r31, r0
    2414:	e8 9e       	mul	r14, r24
    2416:	a0 01       	movw	r20, r0
    2418:	e9 9e       	mul	r14, r25
    241a:	50 0d       	add	r21, r0
    241c:	11 24       	eor	r1, r1
    241e:	c8 01       	movw	r24, r16
    2420:	8b 5b       	subi	r24, 0xBB	; 187
    2422:	9f 4f       	sbci	r25, 0xFF	; 255
    2424:	fc 01       	movw	r30, r24
    2426:	80 81       	ld	r24, Z
    2428:	91 81       	ldd	r25, Z+1	; 0x01
    242a:	f8 9e       	mul	r15, r24
    242c:	b0 01       	movw	r22, r0
    242e:	f9 9e       	mul	r15, r25
    2430:	70 0d       	add	r23, r0
    2432:	11 24       	eor	r1, r1
    2434:	09 5b       	subi	r16, 0xB9	; 185
    2436:	1f 4f       	sbci	r17, 0xFF	; 255
    2438:	f8 01       	movw	r30, r16
    243a:	00 81       	ld	r16, Z
    243c:	11 81       	ldd	r17, Z+1	; 0x01
    243e:	e0 9e       	mul	r14, r16
    2440:	c0 01       	movw	r24, r0
    2442:	e1 9e       	mul	r14, r17
    2444:	90 0d       	add	r25, r0
    2446:	11 24       	eor	r1, r1
    2448:	2a 5e       	subi	r18, 0xEA	; 234
    244a:	3f 4f       	sbci	r19, 0xFF	; 255
    244c:	44 50       	subi	r20, 0x04	; 4
    244e:	51 09       	sbc	r21, r1
    2450:	69 5b       	subi	r22, 0xB9	; 185
    2452:	7f 4f       	sbci	r23, 0xFF	; 255
    2454:	8d 01       	movw	r16, r26
    2456:	4b 96       	adiw	r24, 0x1b	; 27
    2458:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <tlcd_drawStringInArea>
        tlcd_changeTextSize(1);
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <tlcd_changeTextSize>
        return;
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	3e c0       	rjmp	.+124    	; 0x24e8 <__stack+0x2e9>
    }

    tlcd_drawStringInArea(GRID_CELL_CONTENT_START_X, GRID_CELL_CONTENT_START_Y, GRID_CELL_CONTENT_END_X, GRID_CELL_CONTENT_END_Y, buffer);
    246c:	f8 01       	movw	r30, r16
    246e:	e7 5b       	subi	r30, 0xB7	; 183
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	80 81       	ld	r24, Z
    2474:	91 81       	ldd	r25, Z+1	; 0x01
    2476:	01 96       	adiw	r24, 0x01	; 1
    2478:	0f 2e       	mov	r0, r31
    247a:	f1 e7       	ldi	r31, 0x71	; 113
    247c:	ff 2e       	mov	r15, r31
    247e:	f0 2d       	mov	r31, r0
    2480:	f8 9e       	mul	r15, r24
    2482:	90 01       	movw	r18, r0
    2484:	f9 9e       	mul	r15, r25
    2486:	30 0d       	add	r19, r0
    2488:	11 24       	eor	r1, r1
    248a:	d8 01       	movw	r26, r16
    248c:	a5 5b       	subi	r26, 0xB5	; 181
    248e:	bf 4f       	sbci	r27, 0xFF	; 255
    2490:	8d 91       	ld	r24, X+
    2492:	9c 91       	ld	r25, X
    2494:	01 96       	adiw	r24, 0x01	; 1
    2496:	a8 e9       	ldi	r26, 0x98	; 152
    2498:	a8 9f       	mul	r26, r24
    249a:	a0 01       	movw	r20, r0
    249c:	a9 9f       	mul	r26, r25
    249e:	50 0d       	add	r21, r0
    24a0:	11 24       	eor	r1, r1
    24a2:	c8 01       	movw	r24, r16
    24a4:	8b 5b       	subi	r24, 0xBB	; 187
    24a6:	9f 4f       	sbci	r25, 0xFF	; 255
    24a8:	fc 01       	movw	r30, r24
    24aa:	80 81       	ld	r24, Z
    24ac:	91 81       	ldd	r25, Z+1	; 0x01
    24ae:	f8 9e       	mul	r15, r24
    24b0:	b0 01       	movw	r22, r0
    24b2:	f9 9e       	mul	r15, r25
    24b4:	70 0d       	add	r23, r0
    24b6:	11 24       	eor	r1, r1
    24b8:	32 96       	adiw	r30, 0x02	; 2
    24ba:	01 90       	ld	r0, Z+
    24bc:	f0 81       	ld	r31, Z
    24be:	e0 2d       	mov	r30, r0
    24c0:	ae 9f       	mul	r26, r30
    24c2:	c0 01       	movw	r24, r0
    24c4:	af 9f       	mul	r26, r31
    24c6:	90 0d       	add	r25, r0
    24c8:	11 24       	eor	r1, r1
    24ca:	2a 5e       	subi	r18, 0xEA	; 234
    24cc:	3f 4f       	sbci	r19, 0xFF	; 255
    24ce:	44 50       	subi	r20, 0x04	; 4
    24d0:	51 09       	sbc	r21, r1
    24d2:	69 5b       	subi	r22, 0xB9	; 185
    24d4:	7f 4f       	sbci	r23, 0xFF	; 255
    24d6:	8e 01       	movw	r16, r28
    24d8:	0b 5f       	subi	r16, 0xFB	; 251
    24da:	1f 4f       	sbci	r17, 0xFF	; 255
    24dc:	4b 96       	adiw	r24, 0x1b	; 27
    24de:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <tlcd_drawStringInArea>
    tlcd_changeTextSize(1);
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <tlcd_changeTextSize>
}
    24e8:	eb 96       	adiw	r28, 0x3b	; 59
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	df 91       	pop	r29
    24f6:	cf 91       	pop	r28
    24f8:	1f 91       	pop	r17
    24fa:	0f 91       	pop	r16
    24fc:	ff 90       	pop	r15
    24fe:	ef 90       	pop	r14
    2500:	df 90       	pop	r13
    2502:	cf 90       	pop	r12
    2504:	bf 90       	pop	r11
    2506:	af 90       	pop	r10
    2508:	9f 90       	pop	r9
    250a:	8f 90       	pop	r8
    250c:	7f 90       	pop	r7
    250e:	6f 90       	pop	r6
    2510:	5f 90       	pop	r5
    2512:	4f 90       	pop	r4
    2514:	08 95       	ret

00002516 <init_gui>:

void init_gui(gui_element_container_t sensor_gui_elements[GUI_ELEMENT_CONTAINER_SIZE])
{
    // 1 is the BG color from the Device

    tlcd_defineColor(0, (tlcd_color_t) { 0, 255, 0 });
    2516:	40 e0       	ldi	r20, 0x00	; 0
    2518:	5f ef       	ldi	r21, 0xFF	; 255
    251a:	60 e0       	ldi	r22, 0x00	; 0
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <tlcd_defineColor>
    tlcd_defineColor(1, (tlcd_color_t) { 255, 255, 255 }); // white as background
    2522:	4f ef       	ldi	r20, 0xFF	; 255
    2524:	5f ef       	ldi	r21, 0xFF	; 255
    2526:	6f ef       	ldi	r22, 0xFF	; 255
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <tlcd_defineColor>
    tlcd_defineColor(2, (tlcd_color_t) { 0, 0, 0 }); // black
    252e:	40 e0       	ldi	r20, 0x00	; 0
    2530:	50 e0       	ldi	r21, 0x00	; 0
    2532:	60 e0       	ldi	r22, 0x00	; 0
    2534:	82 e0       	ldi	r24, 0x02	; 2
    2536:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <tlcd_defineColor>

    tlcd_defineColor(3, (tlcd_color_t) { 200, 200, 200 }); // grey
    253a:	48 ec       	ldi	r20, 0xC8	; 200
    253c:	58 ec       	ldi	r21, 0xC8	; 200
    253e:	68 ec       	ldi	r22, 0xC8	; 200
    2540:	83 e0       	ldi	r24, 0x03	; 3
    2542:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <tlcd_defineColor>
    tlcd_defineColor(4, (tlcd_color_t) { 255, 0, 0 }); // red
    2546:	4f ef       	ldi	r20, 0xFF	; 255
    2548:	50 e0       	ldi	r21, 0x00	; 0
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	84 e0       	ldi	r24, 0x04	; 4
    254e:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <tlcd_defineColor>
    tlcd_defineColor(5, (tlcd_color_t) { 255, 165, 0 }); // orange
    2552:	4f ef       	ldi	r20, 0xFF	; 255
    2554:	55 ea       	ldi	r21, 0xA5	; 165
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	85 e0       	ldi	r24, 0x05	; 5
    255a:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <tlcd_defineColor>
    tlcd_defineColor(6, (tlcd_color_t) { 173, 216, 230 }); // light blue
    255e:	4d ea       	ldi	r20, 0xAD	; 173
    2560:	58 ed       	ldi	r21, 0xD8	; 216
    2562:	66 ee       	ldi	r22, 0xE6	; 230
    2564:	86 e0       	ldi	r24, 0x06	; 6
    2566:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <tlcd_defineColor>
    tlcd_defineColor(7, (tlcd_color_t) { 0, 0, 255 }); // blue
    256a:	40 e0       	ldi	r20, 0x00	; 0
    256c:	50 e0       	ldi	r21, 0x00	; 0
    256e:	6f ef       	ldi	r22, 0xFF	; 255
    2570:	87 e0       	ldi	r24, 0x07	; 7
    2572:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <tlcd_defineColor>
    tlcd_defineColor(8, (tlcd_color_t) { 0, 255, 0 }); // green
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	5f ef       	ldi	r21, 0xFF	; 255
    257a:	60 e0       	ldi	r22, 0x00	; 0
    257c:	88 e0       	ldi	r24, 0x08	; 8
    257e:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <tlcd_defineColor>

    tlcd_changeLineColor(COLOR_BLACK);
    2582:	82 e0       	ldi	r24, 0x02	; 2
    2584:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <tlcd_changeLineColor>
    tlcd_changeTextColor(COLOR_BLACK);
    2588:	82 e0       	ldi	r24, 0x02	; 2
    258a:	0e 94 41 25 	call	0x4a82	; 0x4a82 <tlcd_changeTextColor>
    //tlcd_changeDisplayColor(BACKGROUND_COLOR);

    tlcd_clearDisplay();
    258e:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <tlcd_clearDisplay>

    printf_P(PSTR("Clearing Display\n"));
    2592:	83 e9       	ldi	r24, 0x93	; 147
    2594:	96 e0       	ldi	r25, 0x06	; 6
    2596:	9f 93       	push	r25
    2598:	8f 93       	push	r24
    259a:	0e 94 ce 2b 	call	0x579c	; 0x579c <printf_P>
    delayMs(2000);
    259e:	80 ed       	ldi	r24, 0xD0	; 208
    25a0:	97 e0       	ldi	r25, 0x07	; 7
    25a2:	0e 94 af 1c 	call	0x395e	; 0x395e <delayMs>

   // tlcd_setFontZoom(1, 1);
    tlcd_changePenSize(1);
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <tlcd_changePenSize>

    // create TLCD_WIDTH x 22 StatusBar
    tlcd_drawLine(0, GRID_STATUSBAR_HEIGHT, TLCD_WIDTH, GRID_STATUSBAR_HEIGHT);
    25ac:	26 e1       	ldi	r18, 0x16	; 22
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 ee       	ldi	r20, 0xE0	; 224
    25b2:	51 e0       	ldi	r21, 0x01	; 1
    25b4:	66 e1       	ldi	r22, 0x16	; 22
    25b6:	70 e0       	ldi	r23, 0x00	; 0
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	0e 94 cc 24 	call	0x4998	; 0x4998 <tlcd_drawLine>

    tlcd_drawString(TLCD_WIDTH - 380, 0, "Running for:");
    25c0:	4c e6       	ldi	r20, 0x6C	; 108
    25c2:	52 e0       	ldi	r21, 0x02	; 2
    25c4:	60 e0       	ldi	r22, 0x00	; 0
    25c6:	70 e0       	ldi	r23, 0x00	; 0
    25c8:	84 e6       	ldi	r24, 0x64	; 100
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	0e 94 ee 23 	call	0x47dc	; 0x47dc <tlcd_drawString>

    // create grid 400x200 adding outer padding
    // tlcd_drawBox(GRID_OUTER_HOR_PADDING, GRID_OUTER_VER_PADDING + GRID_STATUSBAR_HEIGHT - 1, TLCD_WIDTH - GRID_OUTER_HOR_PADDING, TLCD_HEIGHT - GRID_OUTER_VER_PADDING, COLOR_GREY);
}
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	08 95       	ret

000025d6 <update_clock>:

void update_clock()
{
    25d6:	2f 92       	push	r2
    25d8:	3f 92       	push	r3
    25da:	4f 92       	push	r4
    25dc:	5f 92       	push	r5
    25de:	6f 92       	push	r6
    25e0:	7f 92       	push	r7
    25e2:	8f 92       	push	r8
    25e4:	9f 92       	push	r9
    25e6:	af 92       	push	r10
    25e8:	bf 92       	push	r11
    25ea:	cf 92       	push	r12
    25ec:	df 92       	push	r13
    25ee:	ef 92       	push	r14
    25f0:	ff 92       	push	r15
    25f2:	0f 93       	push	r16
    25f4:	1f 93       	push	r17
    25f6:	cf 93       	push	r28
    25f8:	df 93       	push	r29
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	ee 97       	sbiw	r28, 0x3e	; 62
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	de bf       	out	0x3e, r29	; 62
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	cd bf       	out	0x3d, r28	; 61
    char buffer[50];  // Buffer to store the formatted string
    time_t local_system_time = getSystemTime_ms();
    260a:	0e 94 82 1c 	call	0x3904	; 0x3904 <getSystemTime_ms>
    260e:	6b 01       	movw	r12, r22
    2610:	7c 01       	movw	r14, r24
    time_t seconds = local_system_time / 1000;
    2612:	28 ee       	ldi	r18, 0xE8	; 232
    2614:	33 e0       	ldi	r19, 0x03	; 3
    2616:	40 e0       	ldi	r20, 0x00	; 0
    2618:	50 e0       	ldi	r21, 0x00	; 0
    261a:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__udivmodsi4>
    261e:	29 01       	movw	r4, r18
    2620:	3a 01       	movw	r6, r20
    time_t minutes = seconds / 60;
    2622:	c7 01       	movw	r24, r14
    2624:	b6 01       	movw	r22, r12
    2626:	20 e6       	ldi	r18, 0x60	; 96
    2628:	3a ee       	ldi	r19, 0xEA	; 234
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	50 e0       	ldi	r21, 0x00	; 0
    262e:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__udivmodsi4>
    2632:	2b ab       	std	Y+51, r18	; 0x33
    2634:	3c ab       	std	Y+52, r19	; 0x34
    2636:	4d ab       	std	Y+53, r20	; 0x35
    2638:	5e ab       	std	Y+54, r21	; 0x36
    time_t hours = minutes / 60;
    263a:	c7 01       	movw	r24, r14
    263c:	b6 01       	movw	r22, r12
    263e:	20 e8       	ldi	r18, 0x80	; 128
    2640:	3e ee       	ldi	r19, 0xEE	; 238
    2642:	46 e3       	ldi	r20, 0x36	; 54
    2644:	50 e0       	ldi	r21, 0x00	; 0
    2646:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__udivmodsi4>
    264a:	49 01       	movw	r8, r18
    264c:	5a 01       	movw	r10, r20
    time_t days = hours / 24;
    264e:	c7 01       	movw	r24, r14
    2650:	b6 01       	movw	r22, r12
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	3c e5       	ldi	r19, 0x5C	; 92
    2656:	46 e2       	ldi	r20, 0x26	; 38
    2658:	55 e0       	ldi	r21, 0x05	; 5
    265a:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__udivmodsi4>
    265e:	2f ab       	std	Y+55, r18	; 0x37
    2660:	38 af       	std	Y+56, r19	; 0x38
    2662:	49 af       	std	Y+57, r20	; 0x39
    2664:	5a af       	std	Y+58, r21	; 0x3a
    time_t years = days / 365;

    seconds %= 60;
    2666:	0f 2e       	mov	r0, r31
    2668:	fc e3       	ldi	r31, 0x3C	; 60
    266a:	cf 2e       	mov	r12, r31
    266c:	d1 2c       	mov	r13, r1
    266e:	e1 2c       	mov	r14, r1
    2670:	f1 2c       	mov	r15, r1
    2672:	f0 2d       	mov	r31, r0
    2674:	c3 01       	movw	r24, r6
    2676:	b2 01       	movw	r22, r4
    2678:	a7 01       	movw	r20, r14
    267a:	96 01       	movw	r18, r12
    267c:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__udivmodsi4>
    2680:	1b 01       	movw	r2, r22
    2682:	2c 01       	movw	r4, r24
    minutes %= 60;
    2684:	6b a9       	ldd	r22, Y+51	; 0x33
    2686:	7c a9       	ldd	r23, Y+52	; 0x34
    2688:	8d a9       	ldd	r24, Y+53	; 0x35
    268a:	9e a9       	ldd	r25, Y+54	; 0x36
    268c:	a7 01       	movw	r20, r14
    268e:	96 01       	movw	r18, r12
    2690:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__udivmodsi4>
    2694:	f6 2e       	mov	r15, r22
    2696:	e7 2e       	mov	r14, r23
    2698:	c8 2e       	mov	r12, r24
    269a:	d9 2e       	mov	r13, r25
    269c:	6b ab       	std	Y+51, r22	; 0x33
    269e:	7c ab       	std	Y+52, r23	; 0x34
    26a0:	8d ab       	std	Y+53, r24	; 0x35
    26a2:	9e ab       	std	Y+54, r25	; 0x36
    hours %= 24;
    26a4:	c5 01       	movw	r24, r10
    26a6:	b4 01       	movw	r22, r8
    26a8:	28 e1       	ldi	r18, 0x18	; 24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e0       	ldi	r20, 0x00	; 0
    26ae:	50 e0       	ldi	r21, 0x00	; 0
    26b0:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__udivmodsi4>
    26b4:	b6 2e       	mov	r11, r22
    26b6:	a7 2e       	mov	r10, r23
    26b8:	88 2e       	mov	r8, r24
    26ba:	99 2e       	mov	r9, r25
    26bc:	6b af       	std	Y+59, r22	; 0x3b
    26be:	7c af       	std	Y+60, r23	; 0x3c
    26c0:	8d af       	std	Y+61, r24	; 0x3d
    26c2:	9e af       	std	Y+62, r25	; 0x3e
    days %= 365;
    26c4:	6f a9       	ldd	r22, Y+55	; 0x37
    26c6:	78 ad       	ldd	r23, Y+56	; 0x38
    26c8:	89 ad       	ldd	r24, Y+57	; 0x39
    26ca:	9a ad       	ldd	r25, Y+58	; 0x3a
    26cc:	2d e6       	ldi	r18, 0x6D	; 109
    26ce:	31 e0       	ldi	r19, 0x01	; 1
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__udivmodsi4>
    26d8:	76 2e       	mov	r7, r22
    26da:	67 2e       	mov	r6, r23
    26dc:	08 2f       	mov	r16, r24
    26de:	19 2f       	mov	r17, r25
    26e0:	6f ab       	std	Y+55, r22	; 0x37
    26e2:	78 af       	std	Y+56, r23	; 0x38
    26e4:	89 af       	std	Y+57, r24	; 0x39
    26e6:	9a af       	std	Y+58, r25	; 0x3a
    static time_t last_minute = 0;
    static time_t last_hour = 0;
    static time_t last_day = 0;
    static time_t last_year = 0;

    if (seconds != last_second)
    26e8:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <last_second.2905>
    26ec:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <last_second.2905+0x1>
    26f0:	a0 91 45 03 	lds	r26, 0x0345	; 0x800345 <last_second.2905+0x2>
    26f4:	b0 91 46 03 	lds	r27, 0x0346	; 0x800346 <last_second.2905+0x3>
    26f8:	28 16       	cp	r2, r24
    26fa:	39 06       	cpc	r3, r25
    26fc:	4a 06       	cpc	r4, r26
    26fe:	5b 06       	cpc	r5, r27
    2700:	91 f0       	breq	.+36     	; 0x2726 <update_clock+0x150>
    {
        last_second = seconds;
    2702:	20 92 43 03 	sts	0x0343, r2	; 0x800343 <last_second.2905>
    2706:	30 92 44 03 	sts	0x0344, r3	; 0x800344 <last_second.2905+0x1>
    270a:	40 92 45 03 	sts	0x0345, r4	; 0x800345 <last_second.2905+0x2>
    270e:	50 92 46 03 	sts	0x0346, r5	; 0x800346 <last_second.2905+0x3>
        tlcd_clearArea(TLCD_WIDTH - 18, 0, TLCD_WIDTH, GRID_STATUSBAR_HEIGHT - 2);
    2712:	24 e1       	ldi	r18, 0x14	; 20
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 ee       	ldi	r20, 0xE0	; 224
    2718:	51 e0       	ldi	r21, 0x01	; 1
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	70 e0       	ldi	r23, 0x00	; 0
    271e:	8e ec       	ldi	r24, 0xCE	; 206
    2720:	91 e0       	ldi	r25, 0x01	; 1
    2722:	0e 94 7d 25 	call	0x4afa	; 0x4afa <tlcd_clearArea>
    }
    if (minutes != last_minute)
    2726:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <last_minute.2906>
    272a:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <last_minute.2906+0x1>
    272e:	a0 91 41 03 	lds	r26, 0x0341	; 0x800341 <last_minute.2906+0x2>
    2732:	b0 91 42 03 	lds	r27, 0x0342	; 0x800342 <last_minute.2906+0x3>
    2736:	2b a9       	ldd	r18, Y+51	; 0x33
    2738:	3c a9       	ldd	r19, Y+52	; 0x34
    273a:	4d a9       	ldd	r20, Y+53	; 0x35
    273c:	5e a9       	ldd	r21, Y+54	; 0x36
    273e:	28 17       	cp	r18, r24
    2740:	39 07       	cpc	r19, r25
    2742:	4a 07       	cpc	r20, r26
    2744:	5b 07       	cpc	r21, r27
    2746:	91 f0       	breq	.+36     	; 0x276c <update_clock+0x196>
    {
        last_minute = minutes;
    2748:	f0 92 3f 03 	sts	0x033F, r15	; 0x80033f <last_minute.2906>
    274c:	e0 92 40 03 	sts	0x0340, r14	; 0x800340 <last_minute.2906+0x1>
    2750:	c0 92 41 03 	sts	0x0341, r12	; 0x800341 <last_minute.2906+0x2>
    2754:	d0 92 42 03 	sts	0x0342, r13	; 0x800342 <last_minute.2906+0x3>
        tlcd_clearArea(TLCD_WIDTH - 90, 0, TLCD_WIDTH - 72, GRID_STATUSBAR_HEIGHT - 2);
    2758:	24 e1       	ldi	r18, 0x14	; 20
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	48 e9       	ldi	r20, 0x98	; 152
    275e:	51 e0       	ldi	r21, 0x01	; 1
    2760:	60 e0       	ldi	r22, 0x00	; 0
    2762:	70 e0       	ldi	r23, 0x00	; 0
    2764:	86 e8       	ldi	r24, 0x86	; 134
    2766:	91 e0       	ldi	r25, 0x01	; 1
    2768:	0e 94 7d 25 	call	0x4afa	; 0x4afa <tlcd_clearArea>
    }
    if (hours != last_hour)
    276c:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <last_hour.2907>
    2770:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <last_hour.2907+0x1>
    2774:	a0 91 3d 03 	lds	r26, 0x033D	; 0x80033d <last_hour.2907+0x2>
    2778:	b0 91 3e 03 	lds	r27, 0x033E	; 0x80033e <last_hour.2907+0x3>
    277c:	2b ad       	ldd	r18, Y+59	; 0x3b
    277e:	3c ad       	ldd	r19, Y+60	; 0x3c
    2780:	4d ad       	ldd	r20, Y+61	; 0x3d
    2782:	5e ad       	ldd	r21, Y+62	; 0x3e
    2784:	28 17       	cp	r18, r24
    2786:	39 07       	cpc	r19, r25
    2788:	4a 07       	cpc	r20, r26
    278a:	5b 07       	cpc	r21, r27
    278c:	91 f0       	breq	.+36     	; 0x27b2 <update_clock+0x1dc>
    {
        last_hour = hours;
    278e:	b0 92 3b 03 	sts	0x033B, r11	; 0x80033b <last_hour.2907>
    2792:	a0 92 3c 03 	sts	0x033C, r10	; 0x80033c <last_hour.2907+0x1>
    2796:	80 92 3d 03 	sts	0x033D, r8	; 0x80033d <last_hour.2907+0x2>
    279a:	90 92 3e 03 	sts	0x033E, r9	; 0x80033e <last_hour.2907+0x3>
        tlcd_clearArea(TLCD_WIDTH - 156, 0, TLCD_WIDTH - 142, GRID_STATUSBAR_HEIGHT - 2);
    279e:	24 e1       	ldi	r18, 0x14	; 20
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	42 e5       	ldi	r20, 0x52	; 82
    27a4:	51 e0       	ldi	r21, 0x01	; 1
    27a6:	60 e0       	ldi	r22, 0x00	; 0
    27a8:	70 e0       	ldi	r23, 0x00	; 0
    27aa:	84 e4       	ldi	r24, 0x44	; 68
    27ac:	91 e0       	ldi	r25, 0x01	; 1
    27ae:	0e 94 7d 25 	call	0x4afa	; 0x4afa <tlcd_clearArea>
    }
    if (days != last_day)
    27b2:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <last_day.2908>
    27b6:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <last_day.2908+0x1>
    27ba:	a0 91 39 03 	lds	r26, 0x0339	; 0x800339 <last_day.2908+0x2>
    27be:	b0 91 3a 03 	lds	r27, 0x033A	; 0x80033a <last_day.2908+0x3>
    27c2:	2f a9       	ldd	r18, Y+55	; 0x37
    27c4:	38 ad       	ldd	r19, Y+56	; 0x38
    27c6:	49 ad       	ldd	r20, Y+57	; 0x39
    27c8:	5a ad       	ldd	r21, Y+58	; 0x3a
    27ca:	28 17       	cp	r18, r24
    27cc:	39 07       	cpc	r19, r25
    27ce:	4a 07       	cpc	r20, r26
    27d0:	5b 07       	cpc	r21, r27
    27d2:	91 f0       	breq	.+36     	; 0x27f8 <update_clock+0x222>
    {
        last_day = days;
    27d4:	70 92 37 03 	sts	0x0337, r7	; 0x800337 <last_day.2908>
    27d8:	60 92 38 03 	sts	0x0338, r6	; 0x800338 <last_day.2908+0x1>
    27dc:	00 93 39 03 	sts	0x0339, r16	; 0x800339 <last_day.2908+0x2>
    27e0:	10 93 3a 03 	sts	0x033A, r17	; 0x80033a <last_day.2908+0x3>
        tlcd_clearArea(TLCD_WIDTH - 220, 0, TLCD_WIDTH - 198, GRID_STATUSBAR_HEIGHT - 2);
    27e4:	24 e1       	ldi	r18, 0x14	; 20
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	4a e1       	ldi	r20, 0x1A	; 26
    27ea:	51 e0       	ldi	r21, 0x01	; 1
    27ec:	60 e0       	ldi	r22, 0x00	; 0
    27ee:	70 e0       	ldi	r23, 0x00	; 0
    27f0:	84 e0       	ldi	r24, 0x04	; 4
    27f2:	91 e0       	ldi	r25, 0x01	; 1
    27f4:	0e 94 7d 25 	call	0x4afa	; 0x4afa <tlcd_clearArea>
    }
    if (years != last_year)
    27f8:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <last_year.2909>
    27fc:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <last_year.2909+0x1>
    2800:	a0 91 35 03 	lds	r26, 0x0335	; 0x800335 <last_year.2909+0x2>
    2804:	b0 91 36 03 	lds	r27, 0x0336	; 0x800336 <last_year.2909+0x3>
    2808:	89 2b       	or	r24, r25
    280a:	8a 2b       	or	r24, r26
    280c:	8b 2b       	or	r24, r27
    280e:	91 f0       	breq	.+36     	; 0x2834 <update_clock+0x25e>
    {
        last_year = years;
    2810:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <last_year.2909>
    2814:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <last_year.2909+0x1>
    2818:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <last_year.2909+0x2>
    281c:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <last_year.2909+0x3>
        tlcd_clearArea(TLCD_WIDTH - 274, 0, TLCD_WIDTH - 258, GRID_STATUSBAR_HEIGHT - 2);
    2820:	24 e1       	ldi	r18, 0x14	; 20
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	4e ed       	ldi	r20, 0xDE	; 222
    2826:	50 e0       	ldi	r21, 0x00	; 0
    2828:	60 e0       	ldi	r22, 0x00	; 0
    282a:	70 e0       	ldi	r23, 0x00	; 0
    282c:	8e ec       	ldi	r24, 0xCE	; 206
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	0e 94 7d 25 	call	0x4afa	; 0x4afa <tlcd_clearArea>
    }

    sprintf(buffer, "Years:%02d Days:%03d Hours:%02d Minutes:%02d Seconds:%02d", (int)years, (int)days, (int)hours, (int)minutes, (int)seconds);
    2834:	3f 92       	push	r3
    2836:	2f 92       	push	r2
    2838:	ef 92       	push	r14
    283a:	ff 92       	push	r15
    283c:	af 92       	push	r10
    283e:	bf 92       	push	r11
    2840:	6f 92       	push	r6
    2842:	7f 92       	push	r7
    2844:	1f 92       	push	r1
    2846:	1f 92       	push	r1
    2848:	89 e7       	ldi	r24, 0x79	; 121
    284a:	92 e0       	ldi	r25, 0x02	; 2
    284c:	9f 93       	push	r25
    284e:	8f 93       	push	r24
    2850:	8e 01       	movw	r16, r28
    2852:	0f 5f       	subi	r16, 0xFF	; 255
    2854:	1f 4f       	sbci	r17, 0xFF	; 255
    2856:	1f 93       	push	r17
    2858:	0f 93       	push	r16
    285a:	0e 94 25 2c 	call	0x584a	; 0x584a <sprintf>
    tlcd_drawString(TLCD_WIDTH - 310, 0, buffer);
    285e:	a8 01       	movw	r20, r16
    2860:	60 e0       	ldi	r22, 0x00	; 0
    2862:	70 e0       	ldi	r23, 0x00	; 0
    2864:	8a ea       	ldi	r24, 0xAA	; 170
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	0e 94 ee 23 	call	0x47dc	; 0x47dc <tlcd_drawString>
}
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	ee 96       	adiw	r28, 0x3e	; 62
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	f8 94       	cli
    287c:	de bf       	out	0x3e, r29	; 62
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	cd bf       	out	0x3d, r28	; 61
    2882:	df 91       	pop	r29
    2884:	cf 91       	pop	r28
    2886:	1f 91       	pop	r17
    2888:	0f 91       	pop	r16
    288a:	ff 90       	pop	r15
    288c:	ef 90       	pop	r14
    288e:	df 90       	pop	r13
    2890:	cf 90       	pop	r12
    2892:	bf 90       	pop	r11
    2894:	af 90       	pop	r10
    2896:	9f 90       	pop	r9
    2898:	8f 90       	pop	r8
    289a:	7f 90       	pop	r7
    289c:	6f 90       	pop	r6
    289e:	5f 90       	pop	r5
    28a0:	4f 90       	pop	r4
    28a2:	3f 90       	pop	r3
    28a4:	2f 90       	pop	r2
    28a6:	08 95       	ret

000028a8 <gui_worker>:
!! this function is blocking but yields if no new sensor data is available

- function does not return
*/
void gui_worker()
{
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
    28b0:	c9 54       	subi	r28, 0x49	; 73
    28b2:	d2 40       	sbci	r29, 0x02	; 2
    28b4:	0f b6       	in	r0, 0x3f	; 63
    28b6:	f8 94       	cli
    28b8:	de bf       	out	0x3e, r29	; 62
    28ba:	0f be       	out	0x3f, r0	; 63
    28bc:	cd bf       	out	0x3d, r28	; 61
    DEBUG("STACK_SIZE_PROC: %d", STACK_SIZE_PROC);
    28be:	1f 92       	push	r1
    28c0:	1f 92       	push	r1
    28c2:	83 e0       	ldi	r24, 0x03	; 3
    28c4:	8f 93       	push	r24
    28c6:	85 e3       	ldi	r24, 0x35	; 53
    28c8:	8f 93       	push	r24
    28ca:	8f e7       	ldi	r24, 0x7F	; 127
    28cc:	96 e0       	ldi	r25, 0x06	; 6
    28ce:	9f 93       	push	r25
    28d0:	8f 93       	push	r24
    28d2:	8e e7       	ldi	r24, 0x7E	; 126
    28d4:	96 e0       	ldi	r25, 0x06	; 6
    28d6:	9f 93       	push	r25
    28d8:	8f 93       	push	r24
    28da:	df d5       	rcall	.+3006   	; 0x349a <terminal_log_printf_p>
    DEBUG("Array requires %d bytes", sizeof(gui_element_container_t) * GUI_ELEMENT_CONTAINER_SIZE);
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	8f 93       	push	r24
    28e0:	8a ed       	ldi	r24, 0xDA	; 218
    28e2:	8f 93       	push	r24
    28e4:	86 e6       	ldi	r24, 0x66	; 102
    28e6:	96 e0       	ldi	r25, 0x06	; 6
    28e8:	9f 93       	push	r25
    28ea:	8f 93       	push	r24
    28ec:	85 e6       	ldi	r24, 0x65	; 101
    28ee:	96 e0       	ldi	r25, 0x06	; 6
    28f0:	9f 93       	push	r25
    28f2:	8f 93       	push	r24
    28f4:	d2 d5       	rcall	.+2980   	; 0x349a <terminal_log_printf_p>


    uint8_t sensor_gui_elements_count = 0; // Amount of GUI Elements currently displayed
    28f6:	19 82       	std	Y+1, r1	; 0x01
    gui_element_container_t sensor_gui_elements[GUI_ELEMENT_CONTAINER_SIZE]; // Array of GUI Elements currently displayed
    time_t local_system_time = getSystemTime_ms();
    28f8:	0e 94 82 1c 	call	0x3904	; 0x3904 <getSystemTime_ms>
    28fc:	2b 01       	movw	r4, r22
    28fe:	3c 01       	movw	r6, r24
    time_t last_update = local_system_time;

    init_gui(sensor_gui_elements);
    2900:	ce 01       	movw	r24, r28
    2902:	02 96       	adiw	r24, 0x02	; 2
    2904:	08 de       	rcall	.-1008   	; 0x2516 <init_gui>

    DEBUG("gui_worker() started");
    2906:	80 e5       	ldi	r24, 0x50	; 80
    2908:	96 e0       	ldi	r25, 0x06	; 6
    290a:	9f 93       	push	r25
    290c:	8f 93       	push	r24
    290e:	8f e4       	ldi	r24, 0x4F	; 79
    2910:	96 e0       	ldi	r25, 0x06	; 6
    2912:	9f 93       	push	r25
    2914:	8f 93       	push	r24
    2916:	c1 d5       	rcall	.+2946   	; 0x349a <terminal_log_printf_p>
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63


    while (1)
    {
        local_system_time = getSystemTime_ms();
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	f0 d7       	rcall	.+4064   	; 0x3904 <getSystemTime_ms>
    2924:	6b 01       	movw	r12, r22
    2926:	7c 01       	movw	r14, r24

        os_enterCriticalSection();
    2928:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <os_enterCriticalSection>

        if ((local_system_time - last_update) > 1000)
    292c:	d7 01       	movw	r26, r14
    292e:	c6 01       	movw	r24, r12
    2930:	84 19       	sub	r24, r4
    2932:	95 09       	sbc	r25, r5
    2934:	a6 09       	sbc	r26, r6
    2936:	b7 09       	sbc	r27, r7
    2938:	89 3e       	cpi	r24, 0xE9	; 233
    293a:	93 40       	sbci	r25, 0x03	; 3
    293c:	a1 05       	cpc	r26, r1
    293e:	b1 05       	cpc	r27, r1
    2940:	08 f4       	brcc	.+2      	; 0x2944 <gui_worker+0x9c>
        {
            update_clock();
    2942:	62 c0       	rjmp	.+196    	; 0x2a08 <gui_worker+0x160>
    2944:	48 de       	rcall	.-880    	; 0x25d6 <update_clock>
            // Update the Rest of the GUI Elements if enough time has passed
            for (int i = 0; i < sensor_gui_elements_count; i++)
    2946:	00 e0       	ldi	r16, 0x00	; 0
    2948:	10 e0       	ldi	r17, 0x00	; 0
    294a:	56 c0       	rjmp	.+172    	; 0x29f8 <gui_worker+0x150>
            {
                // DEBUG("Checking if sensor_gui_elements[%d] needs to be timedout", i);
                if (!sensor_gui_elements[i].timeout_flag && (local_system_time - sensor_gui_elements[i].sensor_last_update) > SENSOR_DATA_UPDATE_TIMEOUT_MS)
    294c:	8f e4       	ldi	r24, 0x4F	; 79
    294e:	80 9f       	mul	r24, r16
    2950:	f0 01       	movw	r30, r0
    2952:	81 9f       	mul	r24, r17
    2954:	f0 0d       	add	r31, r0
    2956:	11 24       	eor	r1, r1
    2958:	41 e0       	ldi	r20, 0x01	; 1
    295a:	50 e0       	ldi	r21, 0x00	; 0
    295c:	4c 0f       	add	r20, r28
    295e:	5d 1f       	adc	r21, r29
    2960:	e4 0f       	add	r30, r20
    2962:	f5 1f       	adc	r31, r21
    2964:	e1 5b       	subi	r30, 0xB1	; 177
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	80 81       	ld	r24, Z
    296a:	81 11       	cpse	r24, r1
    296c:	43 c0       	rjmp	.+134    	; 0x29f4 <gui_worker+0x14c>
    296e:	8f e4       	ldi	r24, 0x4F	; 79
    2970:	80 9f       	mul	r24, r16
    2972:	f0 01       	movw	r30, r0
    2974:	81 9f       	mul	r24, r17
    2976:	f0 0d       	add	r31, r0
    2978:	11 24       	eor	r1, r1
    297a:	e4 0f       	add	r30, r20
    297c:	f5 1f       	adc	r31, r21
    297e:	82 ad       	ldd	r24, Z+58	; 0x3a
    2980:	93 ad       	ldd	r25, Z+59	; 0x3b
    2982:	a4 ad       	ldd	r26, Z+60	; 0x3c
    2984:	b5 ad       	ldd	r27, Z+61	; 0x3d
    2986:	a7 01       	movw	r20, r14
    2988:	96 01       	movw	r18, r12
    298a:	28 1b       	sub	r18, r24
    298c:	39 0b       	sbc	r19, r25
    298e:	4a 0b       	sbc	r20, r26
    2990:	5b 0b       	sbc	r21, r27
    2992:	da 01       	movw	r26, r20
    2994:	c9 01       	movw	r24, r18
    2996:	81 34       	cpi	r24, 0x41	; 65
    2998:	9f 41       	sbci	r25, 0x1F	; 31
    299a:	a1 05       	cpc	r26, r1
    299c:	b1 05       	cpc	r27, r1
    299e:	50 f1       	brcs	.+84     	; 0x29f4 <gui_worker+0x14c>
                {
                    sensor_gui_elements[i].timeout_flag = true;
    29a0:	2f e4       	ldi	r18, 0x4F	; 79
    29a2:	20 9f       	mul	r18, r16
    29a4:	c0 01       	movw	r24, r0
    29a6:	21 9f       	mul	r18, r17
    29a8:	90 0d       	add	r25, r0
    29aa:	11 24       	eor	r1, r1
    29ac:	e1 e0       	ldi	r30, 0x01	; 1
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	ec 0f       	add	r30, r28
    29b2:	fd 1f       	adc	r31, r29
    29b4:	e8 0f       	add	r30, r24
    29b6:	f9 1f       	adc	r31, r25
    29b8:	e1 5b       	subi	r30, 0xB1	; 177
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	21 e0       	ldi	r18, 0x01	; 1
    29be:	20 83       	st	Z, r18
                    update_gui_element(&sensor_gui_elements[i], false);
    29c0:	60 e0       	ldi	r22, 0x00	; 0
    29c2:	42 e0       	ldi	r20, 0x02	; 2
    29c4:	50 e0       	ldi	r21, 0x00	; 0
    29c6:	4c 0f       	add	r20, r28
    29c8:	5d 1f       	adc	r21, r29
    29ca:	84 0f       	add	r24, r20
    29cc:	95 1f       	adc	r25, r21
    29ce:	0e 94 08 0b 	call	0x1610	; 0x1610 <update_gui_element>
                    DEBUG("sensor_gui_elements[%d] was timedout\n\n", i);
    29d2:	1f 93       	push	r17
    29d4:	0f 93       	push	r16
    29d6:	88 e2       	ldi	r24, 0x28	; 40
    29d8:	96 e0       	ldi	r25, 0x06	; 6
    29da:	9f 93       	push	r25
    29dc:	8f 93       	push	r24
    29de:	87 e2       	ldi	r24, 0x27	; 39
    29e0:	96 e0       	ldi	r25, 0x06	; 6
    29e2:	9f 93       	push	r25
    29e4:	8f 93       	push	r24
    29e6:	59 d5       	rcall	.+2738   	; 0x349a <terminal_log_printf_p>
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	0f 90       	pop	r0

        if ((local_system_time - last_update) > 1000)
        {
            update_clock();
            // Update the Rest of the GUI Elements if enough time has passed
            for (int i = 0; i < sensor_gui_elements_count; i++)
    29f4:	0f 5f       	subi	r16, 0xFF	; 255
    29f6:	1f 4f       	sbci	r17, 0xFF	; 255
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	08 17       	cp	r16, r24
    29fe:	19 07       	cpc	r17, r25
    2a00:	0c f4       	brge	.+2      	; 0x2a04 <gui_worker+0x15c>
    2a02:	a4 cf       	rjmp	.-184    	; 0x294c <gui_worker+0xa4>
                    sensor_gui_elements[i].timeout_flag = true;
                    update_gui_element(&sensor_gui_elements[i], false);
                    DEBUG("sensor_gui_elements[%d] was timedout\n\n", i);
                }
            }
            last_update = local_system_time;
    2a04:	26 01       	movw	r4, r12
    2a06:	37 01       	movw	r6, r14
        }

        if (sensor_element_buffer_count == 0)
    2a08:	a0 90 47 03 	lds	r10, 0x0347	; 0x800347 <sensor_element_buffer_count>
    2a0c:	b0 90 48 03 	lds	r11, 0x0348	; 0x800348 <sensor_element_buffer_count+0x1>
    2a10:	a1 14       	cp	r10, r1
    2a12:	b1 04       	cpc	r11, r1
    2a14:	29 f4       	brne	.+10     	; 0x2a20 <gui_worker+0x178>
        {
            os_leaveCriticalSection();
    2a16:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <os_leaveCriticalSection>
            os_yield();
    2a1a:	0e 94 a2 20 	call	0x4144	; 0x4144 <os_yield>
    2a1e:	81 cf       	rjmp	.-254    	; 0x2922 <gui_worker+0x7a>
        }

        // save local copy of sensor_element_buffer
        int local_sensor_element_buffer_count = sensor_element_buffer_count; //copy of global sensor_element_buffer_count
        sensor_data_t local_sensor_element_buffer[SENSOR_ELEMENT_BUFFER_SIZE]; // copy of global sensor_element_buffer
        memcpy(local_sensor_element_buffer, sensor_element_buffer, sizeof sensor_element_buffer);
    2a20:	8e e6       	ldi	r24, 0x6E	; 110
    2a22:	ea e2       	ldi	r30, 0x2A	; 42
    2a24:	f5 e0       	ldi	r31, 0x05	; 5
    2a26:	de 01       	movw	r26, r28
    2a28:	a4 52       	subi	r26, 0x24	; 36
    2a2a:	be 4f       	sbci	r27, 0xFE	; 254
    2a2c:	01 90       	ld	r0, Z+
    2a2e:	0d 92       	st	X+, r0
    2a30:	8a 95       	dec	r24
    2a32:	e1 f7       	brne	.-8      	; 0x2a2c <gui_worker+0x184>

        // Clear sensor_element_buffer
        memset(sensor_element_buffer, 0, sizeof sensor_element_buffer);
    2a34:	8e e6       	ldi	r24, 0x6E	; 110
    2a36:	ea e2       	ldi	r30, 0x2A	; 42
    2a38:	f5 e0       	ldi	r31, 0x05	; 5
    2a3a:	df 01       	movw	r26, r30
    2a3c:	1d 92       	st	X+, r1
    2a3e:	8a 95       	dec	r24
    2a40:	e9 f7       	brne	.-6      	; 0x2a3c <gui_worker+0x194>
        sensor_element_buffer_count = 0;
    2a42:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <sensor_element_buffer_count+0x1>
    2a46:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <sensor_element_buffer_count>

        os_leaveCriticalSection();
    2a4a:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <os_leaveCriticalSection>

        for (int i = 0; i < local_sensor_element_buffer_count; i++) // iterate all updating data elements
    2a4e:	e1 2c       	mov	r14, r1
    2a50:	f1 2c       	mov	r15, r1
    2a52:	99 c0       	rjmp	.+306    	; 0x2b86 <gui_worker+0x2de>
        {
            bool found = false;
            for (int j = 0; j < sensor_gui_elements_count; j++) // possibly find the updating data in the present elements
            {
                if (local_sensor_element_buffer[i].sensor_src_address == sensor_gui_elements[j].sensor_src_address) // comparing sensor_address and sensor_data_type
    2a54:	8b e0       	ldi	r24, 0x0B	; 11
    2a56:	8e 9d       	mul	r24, r14
    2a58:	f0 01       	movw	r30, r0
    2a5a:	8f 9d       	mul	r24, r15
    2a5c:	f0 0d       	add	r31, r0
    2a5e:	11 24       	eor	r1, r1
    2a60:	2c ed       	ldi	r18, 0xDC	; 220
    2a62:	31 e0       	ldi	r19, 0x01	; 1
    2a64:	2c 0f       	add	r18, r28
    2a66:	3d 1f       	adc	r19, r29
    2a68:	e2 0f       	add	r30, r18
    2a6a:	f3 1f       	adc	r31, r19
    2a6c:	90 81       	ld	r25, Z
    2a6e:	8f e4       	ldi	r24, 0x4F	; 79
    2a70:	80 9f       	mul	r24, r16
    2a72:	f0 01       	movw	r30, r0
    2a74:	81 9f       	mul	r24, r17
    2a76:	f0 0d       	add	r31, r0
    2a78:	11 24       	eor	r1, r1
    2a7a:	41 e0       	ldi	r20, 0x01	; 1
    2a7c:	50 e0       	ldi	r21, 0x00	; 0
    2a7e:	4c 0f       	add	r20, r28
    2a80:	5d 1f       	adc	r21, r29
    2a82:	e4 0f       	add	r30, r20
    2a84:	f5 1f       	adc	r31, r21
    2a86:	81 81       	ldd	r24, Z+1	; 0x01
    2a88:	98 13       	cpse	r25, r24
    2a8a:	30 c0       	rjmp	.+96     	; 0x2aec <gui_worker+0x244>
                {
                    update_sensor_data(&sensor_gui_elements[j], &local_sensor_element_buffer[i].sensor_data_value);             // update min max values
    2a8c:	8f e4       	ldi	r24, 0x4F	; 79
    2a8e:	80 9f       	mul	r24, r16
    2a90:	60 01       	movw	r12, r0
    2a92:	81 9f       	mul	r24, r17
    2a94:	d0 0c       	add	r13, r0
    2a96:	11 24       	eor	r1, r1
    2a98:	82 e0       	ldi	r24, 0x02	; 2
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	8c 0f       	add	r24, r28
    2a9e:	9d 1f       	adc	r25, r29
    2aa0:	c8 0e       	add	r12, r24
    2aa2:	d9 1e       	adc	r13, r25
    2aa4:	8b e0       	ldi	r24, 0x0B	; 11
    2aa6:	8e 9d       	mul	r24, r14
    2aa8:	b0 01       	movw	r22, r0
    2aaa:	8f 9d       	mul	r24, r15
    2aac:	70 0d       	add	r23, r0
    2aae:	11 24       	eor	r1, r1
    2ab0:	6d 5f       	subi	r22, 0xFD	; 253
    2ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab4:	62 0f       	add	r22, r18
    2ab6:	73 1f       	adc	r23, r19
    2ab8:	c6 01       	movw	r24, r12
    2aba:	0e 94 88 09 	call	0x1310	; 0x1310 <update_sensor_data>
                    update_gui_element(&sensor_gui_elements[j], true);                                                       // update GUI element
    2abe:	61 e0       	ldi	r22, 0x01	; 1
    2ac0:	c6 01       	movw	r24, r12
    2ac2:	0e 94 08 0b 	call	0x1610	; 0x1610 <update_gui_element>
                    found = true;
                    DEBUG("sensor_gui_elements[%d] was updated\n\n", j);
    2ac6:	1f 93       	push	r17
    2ac8:	0f 93       	push	r16
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	96 e0       	ldi	r25, 0x06	; 6
    2ace:	9f 93       	push	r25
    2ad0:	8f 93       	push	r24
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	96 e0       	ldi	r25, 0x06	; 6
    2ad6:	9f 93       	push	r25
    2ad8:	8f 93       	push	r24
    2ada:	df d4       	rcall	.+2494   	; 0x349a <terminal_log_printf_p>
                    break;
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
            {
                if (local_sensor_element_buffer[i].sensor_src_address == sensor_gui_elements[j].sensor_src_address) // comparing sensor_address and sensor_data_type
                {
                    update_sensor_data(&sensor_gui_elements[j], &local_sensor_element_buffer[i].sensor_data_value);             // update min max values
                    update_gui_element(&sensor_gui_elements[j], true);                                                       // update GUI element
                    found = true;
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
                    DEBUG("sensor_gui_elements[%d] was updated\n\n", j);
                    break;
    2aea:	0c c0       	rjmp	.+24     	; 0x2b04 <gui_worker+0x25c>
        os_leaveCriticalSection();

        for (int i = 0; i < local_sensor_element_buffer_count; i++) // iterate all updating data elements
        {
            bool found = false;
            for (int j = 0; j < sensor_gui_elements_count; j++) // possibly find the updating data in the present elements
    2aec:	0f 5f       	subi	r16, 0xFF	; 255
    2aee:	1f 4f       	sbci	r17, 0xFF	; 255
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <gui_worker+0x24e>
    2af2:	00 e0       	ldi	r16, 0x00	; 0
    2af4:	10 e0       	ldi	r17, 0x00	; 0
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	08 17       	cp	r16, r24
    2afc:	19 07       	cpc	r17, r25
    2afe:	0c f4       	brge	.+2      	; 0x2b02 <gui_worker+0x25a>
    2b00:	a9 cf       	rjmp	.-174    	; 0x2a54 <gui_worker+0x1ac>

        os_leaveCriticalSection();

        for (int i = 0; i < local_sensor_element_buffer_count; i++) // iterate all updating data elements
        {
            bool found = false;
    2b02:	80 e0       	ldi	r24, 0x00	; 0
                    found = true;
                    DEBUG("sensor_gui_elements[%d] was updated\n\n", j);
                    break;
                }
            }
            if (!found) // sensor was not yet added to the GUI, we gotta do that now
    2b04:	81 11       	cpse	r24, r1
    2b06:	3c c0       	rjmp	.+120    	; 0x2b80 <gui_worker+0x2d8>
            {
                DEBUG("Sensor %d was not yet added to the GUI\n", local_sensor_element_buffer[i].sensor_src_address);
    2b08:	8b e0       	ldi	r24, 0x0B	; 11
    2b0a:	8e 9d       	mul	r24, r14
    2b0c:	80 01       	movw	r16, r0
    2b0e:	8f 9d       	mul	r24, r15
    2b10:	10 0d       	add	r17, r0
    2b12:	11 24       	eor	r1, r1
    2b14:	ac ed       	ldi	r26, 0xDC	; 220
    2b16:	b1 e0       	ldi	r27, 0x01	; 1
    2b18:	ac 0f       	add	r26, r28
    2b1a:	bd 1f       	adc	r27, r29
    2b1c:	0a 0f       	add	r16, r26
    2b1e:	1b 1f       	adc	r17, r27
    2b20:	f8 01       	movw	r30, r16
    2b22:	80 81       	ld	r24, Z
    2b24:	1f 92       	push	r1
    2b26:	8f 93       	push	r24
    2b28:	88 ed       	ldi	r24, 0xD8	; 216
    2b2a:	95 e0       	ldi	r25, 0x05	; 5
    2b2c:	9f 93       	push	r25
    2b2e:	8f 93       	push	r24
    2b30:	87 ed       	ldi	r24, 0xD7	; 215
    2b32:	95 e0       	ldi	r25, 0x05	; 5
    2b34:	9f 93       	push	r25
    2b36:	8f 93       	push	r24
    2b38:	b0 d4       	rcall	.+2400   	; 0x349a <terminal_log_printf_p>
                if (!add_gui_element(sensor_gui_elements, &sensor_gui_elements_count, &local_sensor_element_buffer[i]))
    2b3a:	a8 01       	movw	r20, r16
    2b3c:	be 01       	movw	r22, r28
    2b3e:	6f 5f       	subi	r22, 0xFF	; 255
    2b40:	7f 4f       	sbci	r23, 0xFF	; 255
    2b42:	ce 01       	movw	r24, r28
    2b44:	02 96       	adiw	r24, 0x02	; 2
    2b46:	0e 94 c6 09 	call	0x138c	; 0x138c <add_gui_element>
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	88 23       	and	r24, r24
    2b58:	99 f0       	breq	.+38     	; 0x2b80 <gui_worker+0x2d8>
                    continue;                                                                  // we couldn't add it and add_gui_element() printed an Error for us
                update_gui_element(&sensor_gui_elements[sensor_gui_elements_count - 1], true); // -1 as we successfully added it before to the last position in the array
    2b5a:	29 81       	ldd	r18, Y+1	; 0x01
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	21 50       	subi	r18, 0x01	; 1
    2b60:	31 09       	sbc	r19, r1
    2b62:	4f e4       	ldi	r20, 0x4F	; 79
    2b64:	42 9f       	mul	r20, r18
    2b66:	c0 01       	movw	r24, r0
    2b68:	43 9f       	mul	r20, r19
    2b6a:	90 0d       	add	r25, r0
    2b6c:	11 24       	eor	r1, r1
    2b6e:	61 e0       	ldi	r22, 0x01	; 1
    2b70:	22 e0       	ldi	r18, 0x02	; 2
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	2c 0f       	add	r18, r28
    2b76:	3d 1f       	adc	r19, r29
    2b78:	82 0f       	add	r24, r18
    2b7a:	93 1f       	adc	r25, r19
    2b7c:	0e 94 08 0b 	call	0x1610	; 0x1610 <update_gui_element>
        memset(sensor_element_buffer, 0, sizeof sensor_element_buffer);
        sensor_element_buffer_count = 0;

        os_leaveCriticalSection();

        for (int i = 0; i < local_sensor_element_buffer_count; i++) // iterate all updating data elements
    2b80:	3f ef       	ldi	r19, 0xFF	; 255
    2b82:	e3 1a       	sub	r14, r19
    2b84:	f3 0a       	sbc	r15, r19
    2b86:	ea 14       	cp	r14, r10
    2b88:	fb 04       	cpc	r15, r11
    2b8a:	0c f4       	brge	.+2      	; 0x2b8e <gui_worker+0x2e6>
    2b8c:	b2 cf       	rjmp	.-156    	; 0x2af2 <gui_worker+0x24a>
    2b8e:	c9 ce       	rjmp	.-622    	; 0x2922 <gui_worker+0x7a>

00002b90 <queue_is_empty>:
    {
        return false;
    }
    *value = queue->data[queue->tail];
    return true;
}
    2b90:	fc 01       	movw	r30, r24
    2b92:	24 a9       	ldd	r18, Z+52	; 0x34
    2b94:	35 a9       	ldd	r19, Z+53	; 0x35
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	23 2b       	or	r18, r19
    2b9a:	09 f0       	breq	.+2      	; 0x2b9e <queue_is_empty+0xe>
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	08 95       	ret

00002ba0 <queue_push>:
    2ba0:	fc 01       	movw	r30, r24
    2ba2:	80 a9       	ldd	r24, Z+48	; 0x30
    2ba4:	91 a9       	ldd	r25, Z+49	; 0x31
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	aa 0f       	add	r26, r26
    2baa:	bb 1f       	adc	r27, r27
    2bac:	aa 0f       	add	r26, r26
    2bae:	bb 1f       	adc	r27, r27
    2bb0:	ae 0f       	add	r26, r30
    2bb2:	bf 1f       	adc	r27, r31
    2bb4:	4d 93       	st	X+, r20
    2bb6:	5d 93       	st	X+, r21
    2bb8:	6d 93       	st	X+, r22
    2bba:	7c 93       	st	X, r23
    2bbc:	13 97       	sbiw	r26, 0x03	; 3
    2bbe:	01 96       	adiw	r24, 0x01	; 1
    2bc0:	6c e0       	ldi	r22, 0x0C	; 12
    2bc2:	70 e0       	ldi	r23, 0x00	; 0
    2bc4:	0e 94 28 2a 	call	0x5450	; 0x5450 <__divmodhi4>
    2bc8:	28 2f       	mov	r18, r24
    2bca:	39 2f       	mov	r19, r25
    2bcc:	80 ab       	std	Z+48, r24	; 0x30
    2bce:	91 ab       	std	Z+49, r25	; 0x31
    2bd0:	84 a9       	ldd	r24, Z+52	; 0x34
    2bd2:	95 a9       	ldd	r25, Z+53	; 0x35
    2bd4:	8c 30       	cpi	r24, 0x0C	; 12
    2bd6:	91 05       	cpc	r25, r1
    2bd8:	51 f4       	brne	.+20     	; 0x2bee <queue_push+0x4e>
    2bda:	82 a9       	ldd	r24, Z+50	; 0x32
    2bdc:	93 a9       	ldd	r25, Z+51	; 0x33
    2bde:	01 96       	adiw	r24, 0x01	; 1
    2be0:	6c e0       	ldi	r22, 0x0C	; 12
    2be2:	70 e0       	ldi	r23, 0x00	; 0
    2be4:	0e 94 28 2a 	call	0x5450	; 0x5450 <__divmodhi4>
    2be8:	93 ab       	std	Z+51, r25	; 0x33
    2bea:	82 ab       	std	Z+50, r24	; 0x32
    2bec:	03 c0       	rjmp	.+6      	; 0x2bf4 <queue_push+0x54>
    2bee:	01 96       	adiw	r24, 0x01	; 1
    2bf0:	95 ab       	std	Z+53, r25	; 0x35
    2bf2:	84 ab       	std	Z+52, r24	; 0x34
    2bf4:	85 a9       	ldd	r24, Z+53	; 0x35
    2bf6:	8f 93       	push	r24
    2bf8:	84 a9       	ldd	r24, Z+52	; 0x34
    2bfa:	8f 93       	push	r24
    2bfc:	83 a9       	ldd	r24, Z+51	; 0x33
    2bfe:	8f 93       	push	r24
    2c00:	82 a9       	ldd	r24, Z+50	; 0x32
    2c02:	8f 93       	push	r24
    2c04:	3f 93       	push	r19
    2c06:	2f 93       	push	r18
    2c08:	8f e4       	ldi	r24, 0x4F	; 79
    2c0a:	99 e0       	ldi	r25, 0x09	; 9
    2c0c:	9f 93       	push	r25
    2c0e:	8f 93       	push	r24
    2c10:	8e e4       	ldi	r24, 0x4E	; 78
    2c12:	99 e0       	ldi	r25, 0x09	; 9
    2c14:	9f 93       	push	r25
    2c16:	8f 93       	push	r24
    2c18:	40 d4       	rcall	.+2176   	; 0x349a <terminal_log_printf_p>
    2c1a:	8d b7       	in	r24, 0x3d	; 61
    2c1c:	9e b7       	in	r25, 0x3e	; 62
    2c1e:	0a 96       	adiw	r24, 0x0a	; 10
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	9e bf       	out	0x3e, r25	; 62
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	8d bf       	out	0x3d, r24	; 61
    2c2a:	08 95       	ret

00002c2c <queue_init>:
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	11 aa       	std	Z+49, r1	; 0x31
    2c30:	10 aa       	std	Z+48, r1	; 0x30
    2c32:	13 aa       	std	Z+51, r1	; 0x33
    2c34:	12 aa       	std	Z+50, r1	; 0x32
    2c36:	15 aa       	std	Z+53, r1	; 0x35
    2c38:	14 aa       	std	Z+52, r1	; 0x34
    2c3a:	08 95       	ret

00002c3c <queue_peek_newest_data>:


bool queue_peek_newest_data(data_queue_t* queue, sensor_parameter_t* value)
{
    2c3c:	0f 93       	push	r16
    2c3e:	1f 93       	push	r17
    2c40:	cf 93       	push	r28
    2c42:	df 93       	push	r29
    2c44:	ec 01       	movw	r28, r24
    2c46:	8b 01       	movw	r16, r22
    if (queue_is_empty(queue))
    2c48:	a3 df       	rcall	.-186    	; 0x2b90 <queue_is_empty>
    2c4a:	81 11       	cpse	r24, r1
    2c4c:	19 c0       	rjmp	.+50     	; 0x2c80 <queue_peek_newest_data+0x44>
    {
        return false;
    }
    *value = queue->data[(queue->head + QUEUE_SIZE - 1) % QUEUE_SIZE];
    2c4e:	88 a9       	ldd	r24, Y+48	; 0x30
    2c50:	99 a9       	ldd	r25, Y+49	; 0x31
    2c52:	0b 96       	adiw	r24, 0x0b	; 11
    2c54:	6c e0       	ldi	r22, 0x0C	; 12
    2c56:	70 e0       	ldi	r23, 0x00	; 0
    2c58:	0e 94 28 2a 	call	0x5450	; 0x5450 <__divmodhi4>
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	ee 0f       	add	r30, r30
    2c60:	ff 1f       	adc	r31, r31
    2c62:	ee 0f       	add	r30, r30
    2c64:	ff 1f       	adc	r31, r31
    2c66:	ec 0f       	add	r30, r28
    2c68:	fd 1f       	adc	r31, r29
    2c6a:	80 81       	ld	r24, Z
    2c6c:	91 81       	ldd	r25, Z+1	; 0x01
    2c6e:	a2 81       	ldd	r26, Z+2	; 0x02
    2c70:	b3 81       	ldd	r27, Z+3	; 0x03
    2c72:	f8 01       	movw	r30, r16
    2c74:	80 83       	st	Z, r24
    2c76:	91 83       	std	Z+1, r25	; 0x01
    2c78:	a2 83       	std	Z+2, r26	; 0x02
    2c7a:	b3 83       	std	Z+3, r27	; 0x03
    return true;
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	01 c0       	rjmp	.+2      	; 0x2c82 <queue_peek_newest_data+0x46>

bool queue_peek_newest_data(data_queue_t* queue, sensor_parameter_t* value)
{
    if (queue_is_empty(queue))
    {
        return false;
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    }
    *value = queue->data[(queue->head + QUEUE_SIZE - 1) % QUEUE_SIZE];
    return true;
}
    2c82:	df 91       	pop	r29
    2c84:	cf 91       	pop	r28
    2c86:	1f 91       	pop	r17
    2c88:	0f 91       	pop	r16
    2c8a:	08 95       	ret

00002c8c <sensor_value_is_smaller>:

bool sensor_value_is_smaller(sensor_parameter_t* value1, sensor_parameter_t* value2, sensor_parameter_type_t sensor_data_type)
{
    2c8c:	cf 93       	push	r28
    2c8e:	df 93       	push	r29
    2c90:	ec 01       	movw	r28, r24
    2c92:	db 01       	movw	r26, r22
    switch (sensor_data_type)
    2c94:	50 e0       	ldi	r21, 0x00	; 0
    2c96:	fa 01       	movw	r30, r20
    2c98:	31 97       	sbiw	r30, 0x01	; 1
    2c9a:	e8 30       	cpi	r30, 0x08	; 8
    2c9c:	f1 05       	cpc	r31, r1
    2c9e:	08 f0       	brcs	.+2      	; 0x2ca2 <sensor_value_is_smaller+0x16>
    2ca0:	8c c0       	rjmp	.+280    	; 0x2dba <sensor_value_is_smaller+0x12e>
    2ca2:	88 27       	eor	r24, r24
    2ca4:	e6 58       	subi	r30, 0x86	; 134
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	8f 4f       	sbci	r24, 0xFF	; 255
    2caa:	0c 94 5d 2a 	jmp	0x54ba	; 0x54ba <__tablejump2__>
    {

        case PARAM_TEMPERATURE_CELSIUS:
        {
            return value1->fValue < value2->fValue;
    2cae:	68 81       	ld	r22, Y
    2cb0:	79 81       	ldd	r23, Y+1	; 0x01
    2cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb6:	2d 91       	ld	r18, X+
    2cb8:	3d 91       	ld	r19, X+
    2cba:	4d 91       	ld	r20, X+
    2cbc:	5c 91       	ld	r21, X
    2cbe:	c1 e0       	ldi	r28, 0x01	; 1
    2cc0:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__cmpsf2>
    2cc4:	88 23       	and	r24, r24
    2cc6:	0c f4       	brge	.+2      	; 0x2cca <sensor_value_is_smaller+0x3e>
    2cc8:	81 c0       	rjmp	.+258    	; 0x2dcc <sensor_value_is_smaller+0x140>
    2cca:	c0 e0       	ldi	r28, 0x00	; 0
    2ccc:	7f c0       	rjmp	.+254    	; 0x2dcc <sensor_value_is_smaller+0x140>
        }
        break;
        case PARAM_HUMIDITY_PERCENT:
        {
            return value1->uValue < value2->uValue;
    2cce:	48 81       	ld	r20, Y
    2cd0:	59 81       	ldd	r21, Y+1	; 0x01
    2cd2:	6a 81       	ldd	r22, Y+2	; 0x02
    2cd4:	7b 81       	ldd	r23, Y+3	; 0x03
    2cd6:	8d 91       	ld	r24, X+
    2cd8:	9d 91       	ld	r25, X+
    2cda:	0d 90       	ld	r0, X+
    2cdc:	bc 91       	ld	r27, X
    2cde:	a0 2d       	mov	r26, r0
    2ce0:	c1 e0       	ldi	r28, 0x01	; 1
    2ce2:	48 17       	cp	r20, r24
    2ce4:	59 07       	cpc	r21, r25
    2ce6:	6a 07       	cpc	r22, r26
    2ce8:	7b 07       	cpc	r23, r27
    2cea:	08 f4       	brcc	.+2      	; 0x2cee <sensor_value_is_smaller+0x62>
    2cec:	6f c0       	rjmp	.+222    	; 0x2dcc <sensor_value_is_smaller+0x140>
    2cee:	c0 e0       	ldi	r28, 0x00	; 0
    2cf0:	6d c0       	rjmp	.+218    	; 0x2dcc <sensor_value_is_smaller+0x140>
        }
        break;
        case PARAM_LIGHT_INTENSITY_PERCENT:
        {
            return value1->fValue < value2->fValue;
    2cf2:	68 81       	ld	r22, Y
    2cf4:	79 81       	ldd	r23, Y+1	; 0x01
    2cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cfa:	2d 91       	ld	r18, X+
    2cfc:	3d 91       	ld	r19, X+
    2cfe:	4d 91       	ld	r20, X+
    2d00:	5c 91       	ld	r21, X
    2d02:	c1 e0       	ldi	r28, 0x01	; 1
    2d04:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__cmpsf2>
    2d08:	88 23       	and	r24, r24
    2d0a:	0c f4       	brge	.+2      	; 0x2d0e <sensor_value_is_smaller+0x82>
    2d0c:	5f c0       	rjmp	.+190    	; 0x2dcc <sensor_value_is_smaller+0x140>
    2d0e:	c0 e0       	ldi	r28, 0x00	; 0
    2d10:	5d c0       	rjmp	.+186    	; 0x2dcc <sensor_value_is_smaller+0x140>
        }
        break;
        case PARAM_ALTITUDE_M:
        {
            return value1->uValue < value2->uValue;
    2d12:	48 81       	ld	r20, Y
    2d14:	59 81       	ldd	r21, Y+1	; 0x01
    2d16:	6a 81       	ldd	r22, Y+2	; 0x02
    2d18:	7b 81       	ldd	r23, Y+3	; 0x03
    2d1a:	8d 91       	ld	r24, X+
    2d1c:	9d 91       	ld	r25, X+
    2d1e:	0d 90       	ld	r0, X+
    2d20:	bc 91       	ld	r27, X
    2d22:	a0 2d       	mov	r26, r0
    2d24:	c1 e0       	ldi	r28, 0x01	; 1
    2d26:	48 17       	cp	r20, r24
    2d28:	59 07       	cpc	r21, r25
    2d2a:	6a 07       	cpc	r22, r26
    2d2c:	7b 07       	cpc	r23, r27
    2d2e:	08 f4       	brcc	.+2      	; 0x2d32 <sensor_value_is_smaller+0xa6>
    2d30:	4d c0       	rjmp	.+154    	; 0x2dcc <sensor_value_is_smaller+0x140>
    2d32:	c0 e0       	ldi	r28, 0x00	; 0
    2d34:	4b c0       	rjmp	.+150    	; 0x2dcc <sensor_value_is_smaller+0x140>
        }
        break;
        case PARAM_PRESSURE_PASCAL:
        {
            return value1->fValue < value2->fValue;
    2d36:	68 81       	ld	r22, Y
    2d38:	79 81       	ldd	r23, Y+1	; 0x01
    2d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3e:	2d 91       	ld	r18, X+
    2d40:	3d 91       	ld	r19, X+
    2d42:	4d 91       	ld	r20, X+
    2d44:	5c 91       	ld	r21, X
    2d46:	c1 e0       	ldi	r28, 0x01	; 1
    2d48:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__cmpsf2>
    2d4c:	88 23       	and	r24, r24
    2d4e:	f4 f1       	brlt	.+124    	; 0x2dcc <sensor_value_is_smaller+0x140>
    2d50:	c0 e0       	ldi	r28, 0x00	; 0
    2d52:	3c c0       	rjmp	.+120    	; 0x2dcc <sensor_value_is_smaller+0x140>
        }
        break;
        case PARAM_E_CO2_PPM:
        {
            return value1->uValue < value2->uValue;
    2d54:	48 81       	ld	r20, Y
    2d56:	59 81       	ldd	r21, Y+1	; 0x01
    2d58:	6a 81       	ldd	r22, Y+2	; 0x02
    2d5a:	7b 81       	ldd	r23, Y+3	; 0x03
    2d5c:	8d 91       	ld	r24, X+
    2d5e:	9d 91       	ld	r25, X+
    2d60:	0d 90       	ld	r0, X+
    2d62:	bc 91       	ld	r27, X
    2d64:	a0 2d       	mov	r26, r0
    2d66:	c1 e0       	ldi	r28, 0x01	; 1
    2d68:	48 17       	cp	r20, r24
    2d6a:	59 07       	cpc	r21, r25
    2d6c:	6a 07       	cpc	r22, r26
    2d6e:	7b 07       	cpc	r23, r27
    2d70:	68 f1       	brcs	.+90     	; 0x2dcc <sensor_value_is_smaller+0x140>
    2d72:	c0 e0       	ldi	r28, 0x00	; 0
    2d74:	2b c0       	rjmp	.+86     	; 0x2dcc <sensor_value_is_smaller+0x140>
        }
        break;
        case PARAM_TVOC_PPB:
        {
            return value1->uValue < value2->uValue;
    2d76:	48 81       	ld	r20, Y
    2d78:	59 81       	ldd	r21, Y+1	; 0x01
    2d7a:	6a 81       	ldd	r22, Y+2	; 0x02
    2d7c:	7b 81       	ldd	r23, Y+3	; 0x03
    2d7e:	8d 91       	ld	r24, X+
    2d80:	9d 91       	ld	r25, X+
    2d82:	0d 90       	ld	r0, X+
    2d84:	bc 91       	ld	r27, X
    2d86:	a0 2d       	mov	r26, r0
    2d88:	c1 e0       	ldi	r28, 0x01	; 1
    2d8a:	48 17       	cp	r20, r24
    2d8c:	59 07       	cpc	r21, r25
    2d8e:	6a 07       	cpc	r22, r26
    2d90:	7b 07       	cpc	r23, r27
    2d92:	e0 f0       	brcs	.+56     	; 0x2dcc <sensor_value_is_smaller+0x140>
    2d94:	c0 e0       	ldi	r28, 0x00	; 0
    2d96:	1a c0       	rjmp	.+52     	; 0x2dcc <sensor_value_is_smaller+0x140>
        }
        break;
        case PARAM_CO2_PPM:
        {
            return value1->uValue < value2->uValue;
    2d98:	48 81       	ld	r20, Y
    2d9a:	59 81       	ldd	r21, Y+1	; 0x01
    2d9c:	6a 81       	ldd	r22, Y+2	; 0x02
    2d9e:	7b 81       	ldd	r23, Y+3	; 0x03
    2da0:	8d 91       	ld	r24, X+
    2da2:	9d 91       	ld	r25, X+
    2da4:	0d 90       	ld	r0, X+
    2da6:	bc 91       	ld	r27, X
    2da8:	a0 2d       	mov	r26, r0
    2daa:	c1 e0       	ldi	r28, 0x01	; 1
    2dac:	48 17       	cp	r20, r24
    2dae:	59 07       	cpc	r21, r25
    2db0:	6a 07       	cpc	r22, r26
    2db2:	7b 07       	cpc	r23, r27
    2db4:	58 f0       	brcs	.+22     	; 0x2dcc <sensor_value_is_smaller+0x140>
    2db6:	c0 e0       	ldi	r28, 0x00	; 0
    2db8:	09 c0       	rjmp	.+18     	; 0x2dcc <sensor_value_is_smaller+0x140>
        break;

        default:
            break;
    }
    printf_P("ERROR: sensor_value_is_smaller: Unknown sensor data type\n");
    2dba:	83 eb       	ldi	r24, 0xB3	; 179
    2dbc:	92 e0       	ldi	r25, 0x02	; 2
    2dbe:	9f 93       	push	r25
    2dc0:	8f 93       	push	r24
    2dc2:	0e 94 ce 2b 	call	0x579c	; 0x579c <printf_P>
    return false;
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	c0 e0       	ldi	r28, 0x00	; 0
}
    2dcc:	8c 2f       	mov	r24, r28
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	08 95       	ret

00002dd4 <sensor_value_is_greater>:


bool sensor_value_is_greater(sensor_parameter_t* value1, sensor_parameter_t* value2, sensor_parameter_type_t sensor_data_type)
{
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    2dd8:	ec 01       	movw	r28, r24
    2dda:	db 01       	movw	r26, r22
    switch (sensor_data_type)
    2ddc:	50 e0       	ldi	r21, 0x00	; 0
    2dde:	fa 01       	movw	r30, r20
    2de0:	31 97       	sbiw	r30, 0x01	; 1
    2de2:	e8 30       	cpi	r30, 0x08	; 8
    2de4:	f1 05       	cpc	r31, r1
    2de6:	08 f0       	brcs	.+2      	; 0x2dea <sensor_value_is_greater+0x16>
    2de8:	8c c0       	rjmp	.+280    	; 0x2f02 <sensor_value_is_greater+0x12e>
    2dea:	88 27       	eor	r24, r24
    2dec:	ee 57       	subi	r30, 0x7E	; 126
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	8f 4f       	sbci	r24, 0xFF	; 255
    2df2:	0c 94 5d 2a 	jmp	0x54ba	; 0x54ba <__tablejump2__>
    {

        case PARAM_TEMPERATURE_CELSIUS:
        {
            return value1->fValue > value2->fValue;
    2df6:	68 81       	ld	r22, Y
    2df8:	79 81       	ldd	r23, Y+1	; 0x01
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfe:	2d 91       	ld	r18, X+
    2e00:	3d 91       	ld	r19, X+
    2e02:	4d 91       	ld	r20, X+
    2e04:	5c 91       	ld	r21, X
    2e06:	c1 e0       	ldi	r28, 0x01	; 1
    2e08:	0e 94 e7 25 	call	0x4bce	; 0x4bce <__gesf2>
    2e0c:	18 16       	cp	r1, r24
    2e0e:	0c f4       	brge	.+2      	; 0x2e12 <sensor_value_is_greater+0x3e>
    2e10:	81 c0       	rjmp	.+258    	; 0x2f14 <sensor_value_is_greater+0x140>
    2e12:	c0 e0       	ldi	r28, 0x00	; 0
    2e14:	7f c0       	rjmp	.+254    	; 0x2f14 <sensor_value_is_greater+0x140>
        }
        break;
        case PARAM_HUMIDITY_PERCENT:
        {
            return value1->uValue > value2->uValue;
    2e16:	48 81       	ld	r20, Y
    2e18:	59 81       	ldd	r21, Y+1	; 0x01
    2e1a:	6a 81       	ldd	r22, Y+2	; 0x02
    2e1c:	7b 81       	ldd	r23, Y+3	; 0x03
    2e1e:	8d 91       	ld	r24, X+
    2e20:	9d 91       	ld	r25, X+
    2e22:	0d 90       	ld	r0, X+
    2e24:	bc 91       	ld	r27, X
    2e26:	a0 2d       	mov	r26, r0
    2e28:	c1 e0       	ldi	r28, 0x01	; 1
    2e2a:	84 17       	cp	r24, r20
    2e2c:	95 07       	cpc	r25, r21
    2e2e:	a6 07       	cpc	r26, r22
    2e30:	b7 07       	cpc	r27, r23
    2e32:	08 f4       	brcc	.+2      	; 0x2e36 <sensor_value_is_greater+0x62>
    2e34:	6f c0       	rjmp	.+222    	; 0x2f14 <sensor_value_is_greater+0x140>
    2e36:	c0 e0       	ldi	r28, 0x00	; 0
    2e38:	6d c0       	rjmp	.+218    	; 0x2f14 <sensor_value_is_greater+0x140>
        }
        break;
        case PARAM_LIGHT_INTENSITY_PERCENT:
        {
            return value1->fValue > value2->fValue;
    2e3a:	68 81       	ld	r22, Y
    2e3c:	79 81       	ldd	r23, Y+1	; 0x01
    2e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e40:	9b 81       	ldd	r25, Y+3	; 0x03
    2e42:	2d 91       	ld	r18, X+
    2e44:	3d 91       	ld	r19, X+
    2e46:	4d 91       	ld	r20, X+
    2e48:	5c 91       	ld	r21, X
    2e4a:	c1 e0       	ldi	r28, 0x01	; 1
    2e4c:	0e 94 e7 25 	call	0x4bce	; 0x4bce <__gesf2>
    2e50:	18 16       	cp	r1, r24
    2e52:	0c f4       	brge	.+2      	; 0x2e56 <sensor_value_is_greater+0x82>
    2e54:	5f c0       	rjmp	.+190    	; 0x2f14 <sensor_value_is_greater+0x140>
    2e56:	c0 e0       	ldi	r28, 0x00	; 0
    2e58:	5d c0       	rjmp	.+186    	; 0x2f14 <sensor_value_is_greater+0x140>
        }
        break;
        case PARAM_ALTITUDE_M:
        {
            return value1->uValue > value2->uValue;
    2e5a:	48 81       	ld	r20, Y
    2e5c:	59 81       	ldd	r21, Y+1	; 0x01
    2e5e:	6a 81       	ldd	r22, Y+2	; 0x02
    2e60:	7b 81       	ldd	r23, Y+3	; 0x03
    2e62:	8d 91       	ld	r24, X+
    2e64:	9d 91       	ld	r25, X+
    2e66:	0d 90       	ld	r0, X+
    2e68:	bc 91       	ld	r27, X
    2e6a:	a0 2d       	mov	r26, r0
    2e6c:	c1 e0       	ldi	r28, 0x01	; 1
    2e6e:	84 17       	cp	r24, r20
    2e70:	95 07       	cpc	r25, r21
    2e72:	a6 07       	cpc	r26, r22
    2e74:	b7 07       	cpc	r27, r23
    2e76:	08 f4       	brcc	.+2      	; 0x2e7a <sensor_value_is_greater+0xa6>
    2e78:	4d c0       	rjmp	.+154    	; 0x2f14 <sensor_value_is_greater+0x140>
    2e7a:	c0 e0       	ldi	r28, 0x00	; 0
    2e7c:	4b c0       	rjmp	.+150    	; 0x2f14 <sensor_value_is_greater+0x140>
        }
        break;
        case PARAM_PRESSURE_PASCAL:
        {
            return value1->fValue > value2->fValue;
    2e7e:	68 81       	ld	r22, Y
    2e80:	79 81       	ldd	r23, Y+1	; 0x01
    2e82:	8a 81       	ldd	r24, Y+2	; 0x02
    2e84:	9b 81       	ldd	r25, Y+3	; 0x03
    2e86:	2d 91       	ld	r18, X+
    2e88:	3d 91       	ld	r19, X+
    2e8a:	4d 91       	ld	r20, X+
    2e8c:	5c 91       	ld	r21, X
    2e8e:	c1 e0       	ldi	r28, 0x01	; 1
    2e90:	0e 94 e7 25 	call	0x4bce	; 0x4bce <__gesf2>
    2e94:	18 16       	cp	r1, r24
    2e96:	f4 f1       	brlt	.+124    	; 0x2f14 <sensor_value_is_greater+0x140>
    2e98:	c0 e0       	ldi	r28, 0x00	; 0
    2e9a:	3c c0       	rjmp	.+120    	; 0x2f14 <sensor_value_is_greater+0x140>
        }
        break;
        case PARAM_E_CO2_PPM:
        {
            return value1->uValue > value2->uValue;
    2e9c:	48 81       	ld	r20, Y
    2e9e:	59 81       	ldd	r21, Y+1	; 0x01
    2ea0:	6a 81       	ldd	r22, Y+2	; 0x02
    2ea2:	7b 81       	ldd	r23, Y+3	; 0x03
    2ea4:	8d 91       	ld	r24, X+
    2ea6:	9d 91       	ld	r25, X+
    2ea8:	0d 90       	ld	r0, X+
    2eaa:	bc 91       	ld	r27, X
    2eac:	a0 2d       	mov	r26, r0
    2eae:	c1 e0       	ldi	r28, 0x01	; 1
    2eb0:	84 17       	cp	r24, r20
    2eb2:	95 07       	cpc	r25, r21
    2eb4:	a6 07       	cpc	r26, r22
    2eb6:	b7 07       	cpc	r27, r23
    2eb8:	68 f1       	brcs	.+90     	; 0x2f14 <sensor_value_is_greater+0x140>
    2eba:	c0 e0       	ldi	r28, 0x00	; 0
    2ebc:	2b c0       	rjmp	.+86     	; 0x2f14 <sensor_value_is_greater+0x140>
        }
        break;
        case PARAM_TVOC_PPB:
        {
            return value1->uValue > value2->uValue;
    2ebe:	48 81       	ld	r20, Y
    2ec0:	59 81       	ldd	r21, Y+1	; 0x01
    2ec2:	6a 81       	ldd	r22, Y+2	; 0x02
    2ec4:	7b 81       	ldd	r23, Y+3	; 0x03
    2ec6:	8d 91       	ld	r24, X+
    2ec8:	9d 91       	ld	r25, X+
    2eca:	0d 90       	ld	r0, X+
    2ecc:	bc 91       	ld	r27, X
    2ece:	a0 2d       	mov	r26, r0
    2ed0:	c1 e0       	ldi	r28, 0x01	; 1
    2ed2:	84 17       	cp	r24, r20
    2ed4:	95 07       	cpc	r25, r21
    2ed6:	a6 07       	cpc	r26, r22
    2ed8:	b7 07       	cpc	r27, r23
    2eda:	e0 f0       	brcs	.+56     	; 0x2f14 <sensor_value_is_greater+0x140>
    2edc:	c0 e0       	ldi	r28, 0x00	; 0
    2ede:	1a c0       	rjmp	.+52     	; 0x2f14 <sensor_value_is_greater+0x140>
        }
        break;
        case PARAM_CO2_PPM:
        {
            return value1->uValue > value2->uValue;
    2ee0:	48 81       	ld	r20, Y
    2ee2:	59 81       	ldd	r21, Y+1	; 0x01
    2ee4:	6a 81       	ldd	r22, Y+2	; 0x02
    2ee6:	7b 81       	ldd	r23, Y+3	; 0x03
    2ee8:	8d 91       	ld	r24, X+
    2eea:	9d 91       	ld	r25, X+
    2eec:	0d 90       	ld	r0, X+
    2eee:	bc 91       	ld	r27, X
    2ef0:	a0 2d       	mov	r26, r0
    2ef2:	c1 e0       	ldi	r28, 0x01	; 1
    2ef4:	84 17       	cp	r24, r20
    2ef6:	95 07       	cpc	r25, r21
    2ef8:	a6 07       	cpc	r26, r22
    2efa:	b7 07       	cpc	r27, r23
    2efc:	58 f0       	brcs	.+22     	; 0x2f14 <sensor_value_is_greater+0x140>
    2efe:	c0 e0       	ldi	r28, 0x00	; 0
    2f00:	09 c0       	rjmp	.+18     	; 0x2f14 <sensor_value_is_greater+0x140>
        break;

        default:
            break;
    }
    printf_P("sensor_value_is_greater: Unknown sensor data type\n");
    2f02:	8d ee       	ldi	r24, 0xED	; 237
    2f04:	92 e0       	ldi	r25, 0x02	; 2
    2f06:	9f 93       	push	r25
    2f08:	8f 93       	push	r24
    2f0a:	0e 94 ce 2b 	call	0x579c	; 0x579c <printf_P>
    return false;
    2f0e:	0f 90       	pop	r0
    2f10:	0f 90       	pop	r0
    2f12:	c0 e0       	ldi	r28, 0x00	; 0
    2f14:	8c 2f       	mov	r24, r28
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	08 95       	ret

00002f1c <lcd_enablePulse>:
/*!
 *  Disable the cursor blink feature.
 */
void lcd_blinkOff(void)
{
	lcd_sendCommand((LCD_CMD_DISPLAY_CONTROL | LCD_DISPLAY_ON | LCD_CURSOR_ON) & ~LCD_BLINK_ON);
    2f1c:	4d d6       	rcall	.+3226   	; 0x3bb8 <os_enterCriticalSection>
    2f1e:	e2 e0       	ldi	r30, 0x02	; 2
    2f20:	f1 e0       	ldi	r31, 0x01	; 1
    2f22:	80 81       	ld	r24, Z
    2f24:	80 64       	ori	r24, 0x40	; 64
    2f26:	80 83       	st	Z, r24
    2f28:	85 e0       	ldi	r24, 0x05	; 5
    2f2a:	8a 95       	dec	r24
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <lcd_enablePulse+0xe>
    2f2e:	00 00       	nop
    2f30:	80 81       	ld	r24, Z
    2f32:	8f 7b       	andi	r24, 0xBF	; 191
    2f34:	80 83       	st	Z, r24
    2f36:	8f e8       	ldi	r24, 0x8F	; 143
    2f38:	91 e0       	ldi	r25, 0x01	; 1
    2f3a:	01 97       	sbiw	r24, 0x01	; 1
    2f3c:	f1 f7       	brne	.-4      	; 0x2f3a <lcd_enablePulse+0x1e>
    2f3e:	00 c0       	rjmp	.+0      	; 0x2f40 <lcd_enablePulse+0x24>
    2f40:	00 00       	nop
    2f42:	59 c6       	rjmp	.+3250   	; 0x3bf6 <os_leaveCriticalSection>
    2f44:	08 95       	ret

00002f46 <lcd_sendNibble>:
    2f46:	cf 93       	push	r28
    2f48:	c8 2f       	mov	r28, r24
    2f4a:	36 d6       	rcall	.+3180   	; 0x3bb8 <os_enterCriticalSection>
    2f4c:	c0 ff       	sbrs	r28, 0
    2f4e:	04 c0       	rjmp	.+8      	; 0x2f58 <lcd_sendNibble+0x12>
    2f50:	84 b3       	in	r24, 0x14	; 20
    2f52:	80 62       	ori	r24, 0x20	; 32
    2f54:	84 bb       	out	0x14, r24	; 20
    2f56:	03 c0       	rjmp	.+6      	; 0x2f5e <lcd_sendNibble+0x18>
    2f58:	84 b3       	in	r24, 0x14	; 20
    2f5a:	8f 7d       	andi	r24, 0xDF	; 223
    2f5c:	84 bb       	out	0x14, r24	; 20
    2f5e:	c1 ff       	sbrs	r28, 1
    2f60:	04 c0       	rjmp	.+8      	; 0x2f6a <lcd_sendNibble+0x24>
    2f62:	8e b1       	in	r24, 0x0e	; 14
    2f64:	88 60       	ori	r24, 0x08	; 8
    2f66:	8e b9       	out	0x0e, r24	; 14
    2f68:	03 c0       	rjmp	.+6      	; 0x2f70 <lcd_sendNibble+0x2a>
    2f6a:	8e b1       	in	r24, 0x0e	; 14
    2f6c:	87 7f       	andi	r24, 0xF7	; 247
    2f6e:	8e b9       	out	0x0e, r24	; 14
    2f70:	c2 ff       	sbrs	r28, 2
    2f72:	06 c0       	rjmp	.+12     	; 0x2f80 <lcd_sendNibble+0x3a>
    2f74:	e2 e0       	ldi	r30, 0x02	; 2
    2f76:	f1 e0       	ldi	r31, 0x01	; 1
    2f78:	80 81       	ld	r24, Z
    2f7a:	88 60       	ori	r24, 0x08	; 8
    2f7c:	80 83       	st	Z, r24
    2f7e:	05 c0       	rjmp	.+10     	; 0x2f8a <lcd_sendNibble+0x44>
    2f80:	e2 e0       	ldi	r30, 0x02	; 2
    2f82:	f1 e0       	ldi	r31, 0x01	; 1
    2f84:	80 81       	ld	r24, Z
    2f86:	87 7f       	andi	r24, 0xF7	; 247
    2f88:	80 83       	st	Z, r24
    2f8a:	c3 ff       	sbrs	r28, 3
    2f8c:	06 c0       	rjmp	.+12     	; 0x2f9a <lcd_sendNibble+0x54>
    2f8e:	e2 e0       	ldi	r30, 0x02	; 2
    2f90:	f1 e0       	ldi	r31, 0x01	; 1
    2f92:	80 81       	ld	r24, Z
    2f94:	80 61       	ori	r24, 0x10	; 16
    2f96:	80 83       	st	Z, r24
    2f98:	05 c0       	rjmp	.+10     	; 0x2fa4 <lcd_sendNibble+0x5e>
    2f9a:	e2 e0       	ldi	r30, 0x02	; 2
    2f9c:	f1 e0       	ldi	r31, 0x01	; 1
    2f9e:	80 81       	ld	r24, Z
    2fa0:	8f 7e       	andi	r24, 0xEF	; 239
    2fa2:	80 83       	st	Z, r24
    2fa4:	bb df       	rcall	.-138    	; 0x2f1c <lcd_enablePulse>
    2fa6:	27 d6       	rcall	.+3150   	; 0x3bf6 <os_leaveCriticalSection>
    2fa8:	cf 91       	pop	r28
    2faa:	08 95       	ret

00002fac <lcd_printf_p>:
    2fac:	0f 93       	push	r16
    2fae:	1f 93       	push	r17
    2fb0:	cf 93       	push	r28
    2fb2:	df 93       	push	r29
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
    2fb8:	ae 01       	movw	r20, r28
    2fba:	48 5f       	subi	r20, 0xF8	; 248
    2fbc:	5f 4f       	sbci	r21, 0xFF	; 255
    2fbe:	da 01       	movw	r26, r20
    2fc0:	6d 91       	ld	r22, X+
    2fc2:	7d 91       	ld	r23, X+
    2fc4:	ad 01       	movw	r20, r26
    2fc6:	00 e1       	ldi	r16, 0x10	; 16
    2fc8:	16 e0       	ldi	r17, 0x06	; 6
    2fca:	d8 01       	movw	r26, r16
    2fcc:	12 96       	adiw	r26, 0x02	; 2
    2fce:	ed 91       	ld	r30, X+
    2fd0:	fc 91       	ld	r31, X
    2fd2:	13 97       	sbiw	r26, 0x03	; 3
    2fd4:	83 81       	ldd	r24, Z+3	; 0x03
    2fd6:	88 60       	ori	r24, 0x08	; 8
    2fd8:	83 83       	std	Z+3, r24	; 0x03
    2fda:	83 e0       	ldi	r24, 0x03	; 3
    2fdc:	92 e0       	ldi	r25, 0x02	; 2
    2fde:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <vfprintf_P>
    2fe2:	d8 01       	movw	r26, r16
    2fe4:	12 96       	adiw	r26, 0x02	; 2
    2fe6:	ed 91       	ld	r30, X+
    2fe8:	fc 91       	ld	r31, X
    2fea:	13 97       	sbiw	r26, 0x03	; 3
    2fec:	83 81       	ldd	r24, Z+3	; 0x03
    2fee:	87 7f       	andi	r24, 0xF7	; 247
    2ff0:	83 83       	std	Z+3, r24	; 0x03
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	1f 91       	pop	r17
    2ff8:	0f 91       	pop	r16
    2ffa:	08 95       	ret

00002ffc <lcd_sendCommand>:
    2ffc:	cf 93       	push	r28
    2ffe:	c8 2f       	mov	r28, r24
    3000:	db d5       	rcall	.+2998   	; 0x3bb8 <os_enterCriticalSection>
    3002:	e2 e0       	ldi	r30, 0x02	; 2
    3004:	f1 e0       	ldi	r31, 0x01	; 1
    3006:	80 81       	ld	r24, Z
    3008:	8f 7d       	andi	r24, 0xDF	; 223
    300a:	80 83       	st	Z, r24
    300c:	8c 2f       	mov	r24, r28
    300e:	82 95       	swap	r24
    3010:	8f 70       	andi	r24, 0x0F	; 15
    3012:	99 df       	rcall	.-206    	; 0x2f46 <lcd_sendNibble>
    3014:	8c 2f       	mov	r24, r28
    3016:	97 df       	rcall	.-210    	; 0x2f46 <lcd_sendNibble>
    3018:	85 ed       	ldi	r24, 0xD5	; 213
    301a:	8a 95       	dec	r24
    301c:	f1 f7       	brne	.-4      	; 0x301a <lcd_sendCommand+0x1e>
    301e:	00 00       	nop
    3020:	ea d5       	rcall	.+3028   	; 0x3bf6 <os_leaveCriticalSection>
    3022:	cf 91       	pop	r28
    3024:	08 95       	ret

00003026 <lcd_init>:
    3026:	c8 d5       	rcall	.+2960   	; 0x3bb8 <os_enterCriticalSection>
    3028:	e1 e0       	ldi	r30, 0x01	; 1
    302a:	f1 e0       	ldi	r31, 0x01	; 1
    302c:	80 81       	ld	r24, Z
    302e:	88 67       	ori	r24, 0x78	; 120
    3030:	80 83       	st	Z, r24
    3032:	8d b1       	in	r24, 0x0d	; 13
    3034:	88 60       	ori	r24, 0x08	; 8
    3036:	8d b9       	out	0x0d, r24	; 13
    3038:	83 b3       	in	r24, 0x13	; 19
    303a:	80 62       	ori	r24, 0x20	; 32
    303c:	83 bb       	out	0x13, r24	; 19
    303e:	80 b3       	in	r24, 0x10	; 16
    3040:	81 60       	ori	r24, 0x01	; 1
    3042:	80 bb       	out	0x10, r24	; 16
    3044:	81 b3       	in	r24, 0x11	; 17
    3046:	8e 7f       	andi	r24, 0xFE	; 254
    3048:	81 bb       	out	0x11, r24	; 17
    304a:	2f ef       	ldi	r18, 0xFF	; 255
    304c:	80 e7       	ldi	r24, 0x70	; 112
    304e:	92 e0       	ldi	r25, 0x02	; 2
    3050:	21 50       	subi	r18, 0x01	; 1
    3052:	80 40       	sbci	r24, 0x00	; 0
    3054:	90 40       	sbci	r25, 0x00	; 0
    3056:	e1 f7       	brne	.-8      	; 0x3050 <lcd_init+0x2a>
    3058:	00 c0       	rjmp	.+0      	; 0x305a <lcd_init+0x34>
    305a:	00 00       	nop
    305c:	83 e0       	ldi	r24, 0x03	; 3
    305e:	73 df       	rcall	.-282    	; 0x2f46 <lcd_sendNibble>
    3060:	8f e1       	ldi	r24, 0x1F	; 31
    3062:	9e e4       	ldi	r25, 0x4E	; 78
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	f1 f7       	brne	.-4      	; 0x3064 <lcd_init+0x3e>
    3068:	00 c0       	rjmp	.+0      	; 0x306a <lcd_init+0x44>
    306a:	00 00       	nop
    306c:	83 e0       	ldi	r24, 0x03	; 3
    306e:	6b df       	rcall	.-298    	; 0x2f46 <lcd_sendNibble>
    3070:	8f e1       	ldi	r24, 0x1F	; 31
    3072:	93 e0       	ldi	r25, 0x03	; 3
    3074:	01 97       	sbiw	r24, 0x01	; 1
    3076:	f1 f7       	brne	.-4      	; 0x3074 <lcd_init+0x4e>
    3078:	00 c0       	rjmp	.+0      	; 0x307a <lcd_init+0x54>
    307a:	00 00       	nop
    307c:	83 e0       	ldi	r24, 0x03	; 3
    307e:	63 df       	rcall	.-314    	; 0x2f46 <lcd_sendNibble>
    3080:	8f e1       	ldi	r24, 0x1F	; 31
    3082:	93 e0       	ldi	r25, 0x03	; 3
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	f1 f7       	brne	.-4      	; 0x3084 <lcd_init+0x5e>
    3088:	00 c0       	rjmp	.+0      	; 0x308a <lcd_init+0x64>
    308a:	00 00       	nop
    308c:	82 e0       	ldi	r24, 0x02	; 2
    308e:	5b df       	rcall	.-330    	; 0x2f46 <lcd_sendNibble>
    3090:	88 e2       	ldi	r24, 0x28	; 40
    3092:	b4 df       	rcall	.-152    	; 0x2ffc <lcd_sendCommand>
    3094:	8c e0       	ldi	r24, 0x0C	; 12
    3096:	b2 df       	rcall	.-156    	; 0x2ffc <lcd_sendCommand>
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	b0 df       	rcall	.-160    	; 0x2ffc <lcd_sendCommand>
    309c:	86 e0       	ldi	r24, 0x06	; 6
    309e:	ae df       	rcall	.-164    	; 0x2ffc <lcd_sendCommand>
    30a0:	8f e1       	ldi	r24, 0x1F	; 31
    30a2:	9e e4       	ldi	r25, 0x4E	; 78
    30a4:	01 97       	sbiw	r24, 0x01	; 1
    30a6:	f1 f7       	brne	.-4      	; 0x30a4 <lcd_init+0x7e>
    30a8:	00 c0       	rjmp	.+0      	; 0x30aa <lcd_init+0x84>
    30aa:	00 00       	nop
    30ac:	a4 c5       	rjmp	.+2888   	; 0x3bf6 <os_leaveCriticalSection>
    30ae:	08 95       	ret

000030b0 <lcd_clear>:
    30b0:	83 d5       	rcall	.+2822   	; 0x3bb8 <os_enterCriticalSection>
    30b2:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <charCtr>
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	a1 df       	rcall	.-190    	; 0x2ffc <lcd_sendCommand>
    30ba:	8f e3       	ldi	r24, 0x3F	; 63
    30bc:	9f e1       	ldi	r25, 0x1F	; 31
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	f1 f7       	brne	.-4      	; 0x30be <lcd_clear+0xe>
    30c2:	00 c0       	rjmp	.+0      	; 0x30c4 <lcd_clear+0x14>
    30c4:	00 00       	nop
    30c6:	97 c5       	rjmp	.+2862   	; 0x3bf6 <os_leaveCriticalSection>
    30c8:	08 95       	ret

000030ca <lcd_displayOn>:
    30ca:	8c e0       	ldi	r24, 0x0C	; 12
    30cc:	97 cf       	rjmp	.-210    	; 0x2ffc <lcd_sendCommand>
    30ce:	08 95       	ret

000030d0 <lcd_displayOff>:
    30d0:	88 e0       	ldi	r24, 0x08	; 8
    30d2:	94 cf       	rjmp	.-216    	; 0x2ffc <lcd_sendCommand>
    30d4:	08 95       	ret

000030d6 <lcd_goto>:
 *
 *  \param row  The row position (0 or 1 for a 2-line display)
 *  \param col  The column position (0-indexed)
 */
void lcd_goto(uint8_t row, uint8_t col)
{
    30d6:	cf 93       	push	r28
    30d8:	df 93       	push	r29
    30da:	d8 2f       	mov	r29, r24
    30dc:	c6 2f       	mov	r28, r22

	if (row > 1)
    30de:	82 30       	cpi	r24, 0x02	; 2
    30e0:	08 f0       	brcs	.+2      	; 0x30e4 <lcd_goto+0xe>
		row = 1; // We only support two lines
    30e2:	d1 e0       	ldi	r29, 0x01	; 1

	os_enterCriticalSection();
    30e4:	69 d5       	rcall	.+2770   	; 0x3bb8 <os_enterCriticalSection>
	lcd_sendCommand(LCD_CMD_SET_DDRAM_ADDR | (col + 0x40 * row));
    30e6:	8c 2f       	mov	r24, r28
    30e8:	90 e4       	ldi	r25, 0x40	; 64
    30ea:	d9 9f       	mul	r29, r25
    30ec:	80 0d       	add	r24, r0
    30ee:	11 24       	eor	r1, r1
    30f0:	80 68       	ori	r24, 0x80	; 128
    30f2:	84 df       	rcall	.-248    	; 0x2ffc <lcd_sendCommand>
	charCtr = row * 16 + col;
    30f4:	80 e1       	ldi	r24, 0x10	; 16
    30f6:	d8 9f       	mul	r29, r24
    30f8:	c0 0d       	add	r28, r0
    30fa:	11 24       	eor	r1, r1
    30fc:	c0 93 98 05 	sts	0x0598, r28	; 0x800598 <charCtr>
	os_leaveCriticalSection();
    3100:	7a d5       	rcall	.+2804   	; 0x3bf6 <os_leaveCriticalSection>
}
    3102:	df 91       	pop	r29
    3104:	cf 91       	pop	r28
    3106:	08 95       	ret

00003108 <lcd_sendData>:
 *  Send data (a character) to the LCD.
 *
 *  \param data  The data byte to send
 */
void lcd_sendData(uint8_t data)
{
    3108:	cf 93       	push	r28
    310a:	c8 2f       	mov	r28, r24
	os_enterCriticalSection();
    310c:	55 d5       	rcall	.+2730   	; 0x3bb8 <os_enterCriticalSection>

	LCD_RS_HIGH(); // Data mode
    310e:	e2 e0       	ldi	r30, 0x02	; 2
    3110:	f1 e0       	ldi	r31, 0x01	; 1
    3112:	80 81       	ld	r24, Z
    3114:	80 62       	ori	r24, 0x20	; 32
    3116:	80 83       	st	Z, r24
	lcd_sendNibble(data >> 4);
    3118:	8c 2f       	mov	r24, r28
    311a:	82 95       	swap	r24
    311c:	8f 70       	andi	r24, 0x0F	; 15
    311e:	13 df       	rcall	.-474    	; 0x2f46 <lcd_sendNibble>
	lcd_sendNibble(data);
    3120:	8c 2f       	mov	r24, r28
    3122:	11 df       	rcall	.-478    	; 0x2f46 <lcd_sendNibble>
    3124:	85 ed       	ldi	r24, 0xD5	; 213
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3126:	8a 95       	dec	r24
    3128:	f1 f7       	brne	.-4      	; 0x3126 <lcd_sendData+0x1e>
    312a:	00 00       	nop
	_delay_us(40); // Most characters take < 37µs

	os_leaveCriticalSection();
    312c:	64 d5       	rcall	.+2760   	; 0x3bf6 <os_leaveCriticalSection>
    312e:	cf 91       	pop	r28
}
    3130:	08 95       	ret

00003132 <lcd_line1>:
    3132:	60 e0       	ldi	r22, 0x00	; 0
/*!
 *   Jump into first line with cursor
 */
void lcd_line1()
{
	lcd_goto(0, 0);
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	cf cf       	rjmp	.-98     	; 0x30d6 <lcd_goto>
    3138:	08 95       	ret

0000313a <lcd_line2>:
/*!
 *   Jump into second line with cursor
 */
void lcd_line2()
{
	lcd_goto(1, 0);
    313a:	60 e0       	ldi	r22, 0x00	; 0
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	cb cf       	rjmp	.-106    	; 0x30d6 <lcd_goto>
    3140:	08 95       	ret

00003142 <lcd_writeChar>:

/*!
 *  LCD draw char
 */
void lcd_writeChar(char character)
{
    3142:	cf 93       	push	r28
    3144:	c8 2f       	mov	r28, r24
	os_enterCriticalSection();
    3146:	38 d5       	rcall	.+2672   	; 0x3bb8 <os_enterCriticalSection>

	if (character == '\n')
    3148:	ca 30       	cpi	r28, 0x0A	; 10
    314a:	31 f4       	brne	.+12     	; 0x3158 <lcd_writeChar+0x16>
	{
		charCtr = (charCtr & LCD_COLS) + LCD_COLS; // <16 -> 16, <32 -> 32
    314c:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <charCtr>
    3150:	80 71       	andi	r24, 0x10	; 16
    3152:	80 5f       	subi	r24, 0xF0	; 240
    3154:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <charCtr>
	}

	// Perform line-break if necessary
	if (charCtr == LCD_COLS)
    3158:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <charCtr>
    315c:	80 31       	cpi	r24, 0x10	; 16
	{
		lcd_line2();
    315e:	11 f4       	brne	.+4      	; 0x3164 <lcd_writeChar+0x22>
    3160:	ec df       	rcall	.-40     	; 0x313a <lcd_line2>
    3162:	04 c0       	rjmp	.+8      	; 0x316c <lcd_writeChar+0x2a>
	}
	else if (charCtr == 2 * LCD_COLS)
    3164:	80 32       	cpi	r24, 0x20	; 32
	{
		lcd_clear();
    3166:	11 f4       	brne	.+4      	; 0x316c <lcd_writeChar+0x2a>
    3168:	a3 df       	rcall	.-186    	; 0x30b0 <lcd_clear>
		lcd_line1();
    316a:	e3 df       	rcall	.-58     	; 0x3132 <lcd_line1>
    316c:	8c 2f       	mov	r24, r28
	}

	// Check for non-ASCII characters the LCD knows
    switch (character)
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	fc 01       	movw	r30, r24
    3172:	e4 58       	subi	r30, 0x84	; 132
    3174:	f1 09       	sbc	r31, r1
    3176:	e9 33       	cpi	r30, 0x39	; 57
    3178:	f1 05       	cpc	r31, r1
    317a:	a8 f4       	brcc	.+42     	; 0x31a6 <lcd_writeChar+0x64>
    317c:	88 27       	eor	r24, r24
    317e:	e6 57       	subi	r30, 0x76	; 118
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	8f 4f       	sbci	r24, 0xFF	; 255
    3184:	0c 94 5d 2a 	jmp	0x54ba	; 0x54ba <__tablejump2__>
    3188:	cf ee       	ldi	r28, 0xEF	; 239
    {
        case (char)0xC3A4:
            character = 0xE1; // Character code for 'ä'
            break;
        case (char)0xC3B6:
            character = 0xEF; // Character code for 'ö'
    318a:	0d c0       	rjmp	.+26     	; 0x31a6 <lcd_writeChar+0x64>
            break;
    318c:	c5 ef       	ldi	r28, 0xF5	; 245
        case (char)0xC3BC:
            character = 0xF5; // Character code for 'ü'
    318e:	0b c0       	rjmp	.+22     	; 0x31a6 <lcd_writeChar+0x64>
            break;
    3190:	c2 ee       	ldi	r28, 0xE2	; 226
        case (char)0xC39F:
            character = 0xE2; // Character code for 'ß'
    3192:	09 c0       	rjmp	.+18     	; 0x31a6 <lcd_writeChar+0x64>
            break;
    3194:	cf ee       	ldi	r28, 0xEF	; 239
        case (char)0xC384:
            character = 0xE1; // Character code for 'Ä'
            break;
        case (char)0xC396:
            character = 0xEF; // Character code for 'Ö'
    3196:	07 c0       	rjmp	.+14     	; 0x31a6 <lcd_writeChar+0x64>
            break;
    3198:	c5 ef       	ldi	r28, 0xF5	; 245
        case (char)0xC39C:
            character = 0xF5; // Character code for 'Ü'
    319a:	05 c0       	rjmp	.+10     	; 0x31a6 <lcd_writeChar+0x64>
            break;
    319c:	cf ed       	ldi	r28, 0xDF	; 223
        case (char)0xC2B0:
            character = 0xDF; // Character code for '°' (degree symbol)
    319e:	03 c0       	rjmp	.+6      	; 0x31a6 <lcd_writeChar+0x64>
            break;
    31a0:	c4 ee       	ldi	r28, 0xE4	; 228
        case (char)0xC2B5 :
            character = 0xE4; // Character code for 'µ' (backslash)
            break;
    31a2:	01 c0       	rjmp	.+2      	; 0x31a6 <lcd_writeChar+0x64>

	// Check for non-ASCII characters the LCD knows
    switch (character)
    {
        case (char)0xC3A4:
            character = 0xE1; // Character code for 'ä'
    31a4:	c1 ee       	ldi	r28, 0xE1	; 225
            character = 0xE4; // Character code for 'µ' (backslash)
            break;
    }

	// Draw character
	lcd_sendData(character);
    31a6:	8c 2f       	mov	r24, r28
    31a8:	af df       	rcall	.-162    	; 0x3108 <lcd_sendData>
    31aa:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <charCtr>
	charCtr++;
    31ae:	8f 5f       	subi	r24, 0xFF	; 255
    31b0:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <charCtr>

	os_leaveCriticalSection();
    31b4:	20 d5       	rcall	.+2624   	; 0x3bf6 <os_leaveCriticalSection>
    31b6:	cf 91       	pop	r28
}
    31b8:	08 95       	ret

000031ba <lcd_stdioPutChar>:
    31ba:	c3 df       	rcall	.-122    	; 0x3142 <lcd_writeChar>
//----------------------------------------------------------------------------
int lcd_stdioPutChar(char c, FILE *stream)
{
	lcd_writeChar(c);
	return 0;
}
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	08 95       	ret

000031c2 <lcd_writeString>:
 *  Print a string to the LCD.
 *
 *  \param str  The null-terminated string to print
 */
void lcd_writeString(char *string)
{
    31c2:	0f 93       	push	r16
    31c4:	1f 93       	push	r17
    31c6:	cf 93       	push	r28
    31c8:	df 93       	push	r29
    31ca:	ec 01       	movw	r28, r24
	char c;
	os_enterCriticalSection();
    31cc:	f5 d4       	rcall	.+2538   	; 0x3bb8 <os_enterCriticalSection>

	while ((c = *(string++)) != '\0')
	{
		lcd_writeChar(c);
    31ce:	02 c0       	rjmp	.+4      	; 0x31d4 <lcd_writeString+0x12>
    31d0:	b8 df       	rcall	.-144    	; 0x3142 <lcd_writeChar>
void lcd_writeString(char *string)
{
	char c;
	os_enterCriticalSection();

	while ((c = *(string++)) != '\0')
    31d2:	e8 01       	movw	r28, r16
    31d4:	8e 01       	movw	r16, r28
    31d6:	0f 5f       	subi	r16, 0xFF	; 255
    31d8:	1f 4f       	sbci	r17, 0xFF	; 255
    31da:	88 81       	ld	r24, Y
    31dc:	81 11       	cpse	r24, r1
	{
		lcd_writeChar(c);
	}

	os_leaveCriticalSection();
    31de:	f8 cf       	rjmp	.-16     	; 0x31d0 <lcd_writeString+0xe>
    31e0:	0a d5       	rcall	.+2580   	; 0x3bf6 <os_leaveCriticalSection>
}
    31e2:	df 91       	pop	r29
    31e4:	cf 91       	pop	r28
    31e6:	1f 91       	pop	r17
    31e8:	0f 91       	pop	r16
    31ea:	08 95       	ret

000031ec <lcd_writeProgString>:
 *  This is a mighty tool for saving SRAM memory.
 *
 *  \param string  The string to be written (a pointer to the first character).
 */
void lcd_writeProgString(char const *string)
{
    31ec:	0f 93       	push	r16
    31ee:	1f 93       	push	r17
    31f0:	cf 93       	push	r28
    31f2:	df 93       	push	r29
    31f4:	ec 01       	movw	r28, r24
	char c;
	os_enterCriticalSection();
    31f6:	e0 d4       	rcall	.+2496   	; 0x3bb8 <os_enterCriticalSection>

	while ((c = (char)pgm_read_byte(string++)) != '\0')
	{
		lcd_writeChar(c);
    31f8:	02 c0       	rjmp	.+4      	; 0x31fe <lcd_writeProgString+0x12>
    31fa:	a3 df       	rcall	.-186    	; 0x3142 <lcd_writeChar>
void lcd_writeProgString(char const *string)
{
	char c;
	os_enterCriticalSection();

	while ((c = (char)pgm_read_byte(string++)) != '\0')
    31fc:	e8 01       	movw	r28, r16
    31fe:	8e 01       	movw	r16, r28
    3200:	0f 5f       	subi	r16, 0xFF	; 255
    3202:	1f 4f       	sbci	r17, 0xFF	; 255
    3204:	fe 01       	movw	r30, r28
    3206:	84 91       	lpm	r24, Z
    3208:	81 11       	cpse	r24, r1
	{
		lcd_writeChar(c);
	}

	os_leaveCriticalSection();
    320a:	f7 cf       	rjmp	.-18     	; 0x31fa <lcd_writeProgString+0xe>
    320c:	f4 d4       	rcall	.+2536   	; 0x3bf6 <os_leaveCriticalSection>
}
    320e:	df 91       	pop	r29
    3210:	cf 91       	pop	r28
    3212:	1f 91       	pop	r17
    3214:	0f 91       	pop	r16
    3216:	08 95       	ret

00003218 <rq_isEmpty>:
 *  \param queue The queue it will check
 *  \return True if queue is empty, false if it's not empty
 */
bool rq_isEmpty(ready_queue_t *queue)
{
	return queue->head == queue->tail;
    3218:	fc 01       	movw	r30, r24
    321a:	21 85       	ldd	r18, Z+9	; 0x09
    321c:	92 85       	ldd	r25, Z+10	; 0x0a
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	29 13       	cpse	r18, r25
    3222:	80 e0       	ldi	r24, 0x00	; 0
}
    3224:	08 95       	ret

00003226 <rq_pop>:
 *  \param queue The queue it will push to
 *  \param process The process that will be pushed
 *  \return Popped process id
 */
process_id_t rq_pop(ready_queue_t *queue)
{
    3226:	cf 93       	push	r28
    3228:	df 93       	push	r29
    322a:	ec 01       	movw	r28, r24
	if (rq_isEmpty(queue))
    322c:	f5 df       	rcall	.-22     	; 0x3218 <rq_isEmpty>
    322e:	88 23       	and	r24, r24
    3230:	39 f0       	breq	.+14     	; 0x3240 <rq_pop+0x1a>
	{
		os_error("Can't pop from empty ready queue");
    3232:	8a e7       	ldi	r24, 0x7A	; 122
    3234:	99 e0       	ldi	r25, 0x09	; 9
    3236:	9f 93       	push	r25
    3238:	8f 93       	push	r24
    323a:	39 d4       	rcall	.+2162   	; 0x3aae <os_errorPstr>
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
	}
	process_id_t process = queue->processes[queue->head];
    3240:	99 85       	ldd	r25, Y+9	; 0x09
    3242:	29 2f       	mov	r18, r25
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	fe 01       	movw	r30, r28
    3248:	e2 0f       	add	r30, r18
    324a:	f3 1f       	adc	r31, r19
    324c:	80 81       	ld	r24, Z
	queue->head = next(queue->head);
    324e:	2f 5f       	subi	r18, 0xFF	; 255
    3250:	3f 4f       	sbci	r19, 0xFF	; 255
    3252:	29 30       	cpi	r18, 0x09	; 9
    3254:	31 05       	cpc	r19, r1
    3256:	14 f4       	brge	.+4      	; 0x325c <rq_pop+0x36>
    3258:	9f 5f       	subi	r25, 0xFF	; 255
    325a:	01 c0       	rjmp	.+2      	; 0x325e <rq_pop+0x38>
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	99 87       	std	Y+9, r25	; 0x09
	return process;
}
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	08 95       	ret

00003266 <rq_isFull>:
 *  \param queue The queue it will check
 *  \return True if queue is full, false if it's not completely filled
 */
bool rq_isFull(ready_queue_t *queue)
{
	return next(queue->tail) == queue->head;
    3266:	fc 01       	movw	r30, r24
    3268:	22 85       	ldd	r18, Z+10	; 0x0a
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	2f 5f       	subi	r18, 0xFF	; 255
    326e:	3f 4f       	sbci	r19, 0xFF	; 255
    3270:	29 30       	cpi	r18, 0x09	; 9
    3272:	31 05       	cpc	r19, r1
    3274:	14 f0       	brlt	.+4      	; 0x327a <rq_isFull+0x14>
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	fc 01       	movw	r30, r24
    327c:	41 85       	ldd	r20, Z+9	; 0x09
    327e:	50 e0       	ldi	r21, 0x00	; 0
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	24 17       	cp	r18, r20
    3284:	35 07       	cpc	r19, r21
    3286:	09 f0       	breq	.+2      	; 0x328a <rq_isFull+0x24>
    3288:	80 e0       	ldi	r24, 0x00	; 0
}
    328a:	08 95       	ret

0000328c <rq_push>:
 *
 *  \param queue The queue it will push to
 *  \param process The process that will be pushed
 */
void rq_push(ready_queue_t *queue, process_id_t process)
{
    328c:	1f 93       	push	r17
    328e:	cf 93       	push	r28
    3290:	df 93       	push	r29
    3292:	ec 01       	movw	r28, r24
    3294:	16 2f       	mov	r17, r22
	if (rq_isFull(queue))
    3296:	e7 df       	rcall	.-50     	; 0x3266 <rq_isFull>
    3298:	88 23       	and	r24, r24
    329a:	39 f0       	breq	.+14     	; 0x32aa <rq_push+0x1e>
	{
		os_error("Can't push on full ready queue");
    329c:	8b e9       	ldi	r24, 0x9B	; 155
    329e:	99 e0       	ldi	r25, 0x09	; 9
    32a0:	9f 93       	push	r25
    32a2:	8f 93       	push	r24
    32a4:	04 d4       	rcall	.+2056   	; 0x3aae <os_errorPstr>
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
	}
	queue->processes[queue->tail] = process;
    32aa:	2a 85       	ldd	r18, Y+10	; 0x0a
    32ac:	82 2f       	mov	r24, r18
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	fe 01       	movw	r30, r28
    32b2:	e8 0f       	add	r30, r24
    32b4:	f9 1f       	adc	r31, r25
    32b6:	10 83       	st	Z, r17
	queue->tail = next(queue->tail);
    32b8:	01 96       	adiw	r24, 0x01	; 1
    32ba:	09 97       	sbiw	r24, 0x09	; 9
    32bc:	14 f4       	brge	.+4      	; 0x32c2 <rq_push+0x36>
    32be:	2f 5f       	subi	r18, 0xFF	; 255
    32c0:	01 c0       	rjmp	.+2      	; 0x32c4 <rq_push+0x38>
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	2a 87       	std	Y+10, r18	; 0x0a
}
    32c6:	df 91       	pop	r29
    32c8:	cf 91       	pop	r28
    32ca:	1f 91       	pop	r17
    32cc:	08 95       	ret

000032ce <rq_clear>:
 *
 *  \param queue The queue that should be emptied
 */
void rq_clear(ready_queue_t *queue)
{
	queue->head = 0;
    32ce:	fc 01       	movw	r30, r24
    32d0:	11 86       	std	Z+9, r1	; 0x09
	queue->tail = 0;
    32d2:	12 86       	std	Z+10, r1	; 0x0a
    32d4:	08 95       	ret

000032d6 <rq_remove>:
 *  \param queue The queue that should be removed from
 *  \param process The process that should be removed
 *  \return True if the process was removed, false if it wasn't found
 */
bool rq_remove(ready_queue_t *queue, process_id_t process)
{
    32d6:	fc 01       	movw	r30, r24
	for (int i = queue->head; i != queue->tail; i = next(i))
    32d8:	21 85       	ldd	r18, Z+9	; 0x09
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	32 c0       	rjmp	.+100    	; 0x3342 <rq_remove+0x6c>
	{
		if (queue->processes[i] == process)
    32de:	df 01       	movw	r26, r30
    32e0:	a2 0f       	add	r26, r18
    32e2:	b3 1f       	adc	r27, r19
    32e4:	5c 91       	ld	r21, X
    32e6:	56 13       	cpse	r21, r22
    32e8:	24 c0       	rjmp	.+72     	; 0x3332 <rq_remove+0x5c>
    32ea:	18 c0       	rjmp	.+48     	; 0x331c <rq_remove+0x46>
		{
			for (int j = i; j != queue->tail; j = next(j))
			{
				queue->processes[j] = queue->processes[next(j)];
    32ec:	b9 01       	movw	r22, r18
    32ee:	6f 5f       	subi	r22, 0xFF	; 255
    32f0:	7f 4f       	sbci	r23, 0xFF	; 255
    32f2:	69 30       	cpi	r22, 0x09	; 9
    32f4:	71 05       	cpc	r23, r1
    32f6:	1c f0       	brlt	.+6      	; 0x32fe <rq_remove+0x28>
    32f8:	a0 e0       	ldi	r26, 0x00	; 0
    32fa:	b0 e0       	ldi	r27, 0x00	; 0
    32fc:	01 c0       	rjmp	.+2      	; 0x3300 <rq_remove+0x2a>
    32fe:	db 01       	movw	r26, r22
    3300:	ae 0f       	add	r26, r30
    3302:	bf 1f       	adc	r27, r31
    3304:	5c 91       	ld	r21, X
    3306:	df 01       	movw	r26, r30
    3308:	a2 0f       	add	r26, r18
    330a:	b3 1f       	adc	r27, r19
    330c:	5c 93       	st	X, r21
{
	for (int i = queue->head; i != queue->tail; i = next(i))
	{
		if (queue->processes[i] == process)
		{
			for (int j = i; j != queue->tail; j = next(j))
    330e:	69 30       	cpi	r22, 0x09	; 9
    3310:	71 05       	cpc	r23, r1
    3312:	1c f0       	brlt	.+6      	; 0x331a <rq_remove+0x44>
    3314:	20 e0       	ldi	r18, 0x00	; 0
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	01 c0       	rjmp	.+2      	; 0x331c <rq_remove+0x46>
    331a:	9b 01       	movw	r18, r22
    331c:	28 17       	cp	r18, r24
    331e:	39 07       	cpc	r19, r25
    3320:	29 f7       	brne	.-54     	; 0x32ec <rq_remove+0x16>
			{
				queue->processes[j] = queue->processes[next(j)];
			}
			queue->tail = prev(queue->tail);
    3322:	44 23       	and	r20, r20
    3324:	11 f0       	breq	.+4      	; 0x332a <rq_remove+0x54>
    3326:	41 50       	subi	r20, 0x01	; 1
    3328:	01 c0       	rjmp	.+2      	; 0x332c <rq_remove+0x56>
    332a:	48 e0       	ldi	r20, 0x08	; 8
    332c:	42 87       	std	Z+10, r20	; 0x0a
			return true;
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	08 95       	ret
 *  \param process The process that should be removed
 *  \return True if the process was removed, false if it wasn't found
 */
bool rq_remove(ready_queue_t *queue, process_id_t process)
{
	for (int i = queue->head; i != queue->tail; i = next(i))
    3332:	c9 01       	movw	r24, r18
    3334:	01 96       	adiw	r24, 0x01	; 1
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	89 30       	cpi	r24, 0x09	; 9
    333c:	91 05       	cpc	r25, r1
    333e:	0c f4       	brge	.+2      	; 0x3342 <rq_remove+0x6c>
    3340:	9c 01       	movw	r18, r24
    3342:	42 85       	ldd	r20, Z+10	; 0x0a
    3344:	84 2f       	mov	r24, r20
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	28 17       	cp	r18, r24
    334a:	39 07       	cpc	r19, r25
    334c:	41 f6       	brne	.-112    	; 0x32de <rq_remove+0x8>
			}
			queue->tail = prev(queue->tail);
			return true;
		}
	}
	return false;
    334e:	80 e0       	ldi	r24, 0x00	; 0
}
    3350:	08 95       	ret

00003352 <__vector_17>:
 */
void stopWatch_activateInterrupt(void)
{
    cbi(TCCR1B, CS10); // /8 prescaler	0
    sbi(TCCR1B, CS11); // /8 prescaler	1
    cbi(TCCR1B, CS12); // /8 prescaler	0
    3352:	1f 92       	push	r1
    3354:	0f 92       	push	r0
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	0f 92       	push	r0
    335a:	11 24       	eor	r1, r1
    335c:	8f 93       	push	r24
    335e:	9f 93       	push	r25
    3360:	af 93       	push	r26
    3362:	bf 93       	push	r27
    3364:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <stopWatch_time>
    3368:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <stopWatch_time+0x1>
    336c:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <stopWatch_time+0x2>
    3370:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <stopWatch_time+0x3>
    3374:	90 58       	subi	r25, 0x80	; 128
    3376:	af 4f       	sbci	r26, 0xFF	; 255
    3378:	bf 4f       	sbci	r27, 0xFF	; 255
    337a:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <stopWatch_time>
    337e:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <stopWatch_time+0x1>
    3382:	a0 93 51 03 	sts	0x0351, r26	; 0x800351 <stopWatch_time+0x2>
    3386:	b0 93 52 03 	sts	0x0352, r27	; 0x800352 <stopWatch_time+0x3>
    338a:	bf 91       	pop	r27
    338c:	af 91       	pop	r26
    338e:	9f 91       	pop	r25
    3390:	8f 91       	pop	r24
    3392:	0f 90       	pop	r0
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	0f 90       	pop	r0
    3398:	1f 90       	pop	r1
    339a:	18 95       	reti

0000339c <stopWatch_deactivateInterrupt>:
    339c:	e1 e8       	ldi	r30, 0x81	; 129
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	80 81       	ld	r24, Z
    33a2:	8e 7f       	andi	r24, 0xFE	; 254
    33a4:	80 83       	st	Z, r24
    33a6:	80 81       	ld	r24, Z
    33a8:	8d 7f       	andi	r24, 0xFD	; 253
    33aa:	80 83       	st	Z, r24
    33ac:	80 81       	ld	r24, Z
    33ae:	8b 7f       	andi	r24, 0xFB	; 251
    33b0:	80 83       	st	Z, r24
    33b2:	08 95       	ret

000033b4 <stopWatch_init>:
 *  Initializes the stop watch
 */
void stopWatch_init(void)
{
    // Set Timer/Counter Control Registers to 0
    TCCR1A = 0x00; // Normal mode
    33b4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>

    // Set the Timer/Counter Register to 0
    TCNT1 = 0;
    33b8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
    33bc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

    // Set the compare match value to 1 (1 microsecond)
    OCR1A = 1;
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    33c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>

    // Enable the Output Compare Match A interrupt
    TIMSK1 |= (1 << TOIE1);
    33cc:	ef e6       	ldi	r30, 0x6F	; 111
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	80 81       	ld	r24, Z
    33d2:	81 60       	ori	r24, 0x01	; 1
    33d4:	80 83       	st	Z, r24

    stopWatch_deactivateInterrupt();
    33d6:	e2 cf       	rjmp	.-60     	; 0x339c <stopWatch_deactivateInterrupt>
    33d8:	08 95       	ret

000033da <usb2_init>:
 *
 *  \param str  The string to be written (a pointer to the first character).
 */
void terminal_writeString(char *str)
{
    usb2_writeString(str);
    33da:	ee d3       	rcall	.+2012   	; 0x3bb8 <os_enterCriticalSection>
    33dc:	83 e0       	ldi	r24, 0x03	; 3
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
    33e4:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
    33e8:	e0 ed       	ldi	r30, 0xD0	; 208
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	80 81       	ld	r24, Z
    33ee:	8d 7f       	andi	r24, 0xFD	; 253
    33f0:	80 83       	st	Z, r24
    33f2:	e1 ed       	ldi	r30, 0xD1	; 209
    33f4:	f0 e0       	ldi	r31, 0x00	; 0
    33f6:	80 81       	ld	r24, Z
    33f8:	80 61       	ori	r24, 0x10	; 16
    33fa:	80 83       	st	Z, r24
    33fc:	80 81       	ld	r24, Z
    33fe:	88 60       	ori	r24, 0x08	; 8
    3400:	80 83       	st	Z, r24
    3402:	f9 c3       	rjmp	.+2034   	; 0x3bf6 <os_leaveCriticalSection>
    3404:	08 95       	ret

00003406 <usb2_write>:
    3406:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
    340a:	95 ff       	sbrs	r25, 5
    340c:	fc cf       	rjmp	.-8      	; 0x3406 <usb2_write>
    340e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    3412:	08 95       	ret

00003414 <usb2_writeProgString>:
    3414:	0f 93       	push	r16
    3416:	1f 93       	push	r17
    3418:	cf 93       	push	r28
    341a:	df 93       	push	r29
    341c:	8c 01       	movw	r16, r24
    341e:	cc d3       	rcall	.+1944   	; 0x3bb8 <os_enterCriticalSection>
    3420:	d0 e0       	ldi	r29, 0x00	; 0
    3422:	0d c0       	rjmp	.+26     	; 0x343e <usb2_writeProgString+0x2a>
    3424:	f8 01       	movw	r30, r16
    3426:	ed 0f       	add	r30, r29
    3428:	f1 1d       	adc	r31, r1
    342a:	c4 91       	lpm	r28, Z
    342c:	ca 30       	cpi	r28, 0x0A	; 10
    342e:	11 f4       	brne	.+4      	; 0x3434 <usb2_writeProgString+0x20>
    3430:	8d e0       	ldi	r24, 0x0D	; 13
    3432:	e9 df       	rcall	.-46     	; 0x3406 <usb2_write>
    3434:	cc 23       	and	r28, r28
    3436:	29 f0       	breq	.+10     	; 0x3442 <usb2_writeProgString+0x2e>
    3438:	8c 2f       	mov	r24, r28
    343a:	e5 df       	rcall	.-54     	; 0x3406 <usb2_write>
    343c:	df 5f       	subi	r29, 0xFF	; 255
    343e:	df 3f       	cpi	r29, 0xFF	; 255
    3440:	89 f7       	brne	.-30     	; 0x3424 <usb2_writeProgString+0x10>
    3442:	d9 d3       	rcall	.+1970   	; 0x3bf6 <os_leaveCriticalSection>
    3444:	df 91       	pop	r29
    3446:	cf 91       	pop	r28
    3448:	1f 91       	pop	r17
    344a:	0f 91       	pop	r16
    344c:	08 95       	ret

0000344e <terminal_init>:
    344e:	c5 df       	rcall	.-118    	; 0x33da <usb2_init>
    3450:	81 e1       	ldi	r24, 0x11	; 17
    3452:	92 e0       	ldi	r25, 0x02	; 2
    3454:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <__iob+0x3>
    3458:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <__iob+0x2>
    345c:	08 95       	ret

0000345e <terminal_writeChar>:
    345e:	cf 93       	push	r28
    3460:	c8 2f       	mov	r28, r24
    3462:	8a 30       	cpi	r24, 0x0A	; 10
    3464:	11 f4       	brne	.+4      	; 0x346a <terminal_writeChar+0xc>
    3466:	8d e0       	ldi	r24, 0x0D	; 13
    3468:	ce df       	rcall	.-100    	; 0x3406 <usb2_write>
    346a:	8c 2f       	mov	r24, r28
    346c:	cc df       	rcall	.-104    	; 0x3406 <usb2_write>
    346e:	cf 91       	pop	r28
    3470:	08 95       	ret

00003472 <terminal_writeProgString>:
 *
 *  \param pstr  The string to be written (a pointer to the first character).
 */
void terminal_writeProgString(const char *pstr)
{
	usb2_writeProgString(pstr);
    3472:	d0 cf       	rjmp	.-96     	; 0x3414 <usb2_writeProgString>
    3474:	08 95       	ret

00003476 <stdio_put_char>:

//----------------------------------------------------------------------------
// Configuration of stdio.h
//----------------------------------------------------------------------------
int stdio_put_char(char c, FILE *stream)
{
    3476:	cf 93       	push	r28
    3478:	c8 2f       	mov	r28, r24
    os_enterCriticalSection();
    347a:	9e d3       	rcall	.+1852   	; 0x3bb8 <os_enterCriticalSection>

    terminal_writeChar(c);
    347c:	8c 2f       	mov	r24, r28
    347e:	ef df       	rcall	.-34     	; 0x345e <terminal_writeChar>
    if (c == '\n') { terminal_writeProgString(PSTR("        ")); }
    3480:	ca 30       	cpi	r28, 0x0A	; 10
    3482:	19 f4       	brne	.+6      	; 0x348a <stdio_put_char+0x14>
    3484:	8a eb       	ldi	r24, 0xBA	; 186
    3486:	99 e0       	ldi	r25, 0x09	; 9

    os_leaveCriticalSection();
    3488:	f4 df       	rcall	.-24     	; 0x3472 <terminal_writeProgString>
    348a:	b5 d3       	rcall	.+1898   	; 0x3bf6 <os_leaveCriticalSection>
    return 0;
}
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	cf 91       	pop	r28
    3492:	08 95       	ret

00003494 <terminal_newLine>:
/*!
 *  Write a new line
 */
void terminal_newLine()
{
    terminal_writeChar('\n');
    3494:	8a e0       	ldi	r24, 0x0A	; 10
    3496:	e3 cf       	rjmp	.-58     	; 0x345e <terminal_writeChar>
    3498:	08 95       	ret

0000349a <terminal_log_printf_p>:
    os_leaveCriticalSection();
    return 0;
}

void terminal_log_printf_p(const char *prefix, const char *fmt, ...)
{
    349a:	0f 93       	push	r16
    349c:	1f 93       	push	r17
    349e:	cf 93       	push	r28
    34a0:	df 93       	push	r29
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
    os_enterCriticalSection();
    34a6:	88 d3       	rcall	.+1808   	; 0x3bb8 <os_enterCriticalSection>

    terminal_writeProgString(prefix);
    34a8:	88 85       	ldd	r24, Y+8	; 0x08
    34aa:	99 85       	ldd	r25, Y+9	; 0x09
    34ac:	e2 df       	rcall	.-60     	; 0x3472 <terminal_writeProgString>

    va_list args;
    va_start(args, fmt);
    stdout->flags |= __SPGM;
    34ae:	00 e1       	ldi	r16, 0x10	; 16
    34b0:	16 e0       	ldi	r17, 0x06	; 6
    34b2:	d8 01       	movw	r26, r16
    34b4:	12 96       	adiw	r26, 0x02	; 2
    34b6:	ed 91       	ld	r30, X+
    34b8:	fc 91       	ld	r31, X
    34ba:	13 97       	sbiw	r26, 0x03	; 3
    34bc:	83 81       	ldd	r24, Z+3	; 0x03
    34be:	88 60       	ori	r24, 0x08	; 8
    34c0:	83 83       	std	Z+3, r24	; 0x03
    vfprintf_P(stdout, fmt, args);
    34c2:	ae 01       	movw	r20, r28
    34c4:	44 5f       	subi	r20, 0xF4	; 244
    34c6:	5f 4f       	sbci	r21, 0xFF	; 255
    34c8:	6a 85       	ldd	r22, Y+10	; 0x0a
    34ca:	7b 85       	ldd	r23, Y+11	; 0x0b
    34cc:	12 96       	adiw	r26, 0x02	; 2
    34ce:	8d 91       	ld	r24, X+
    34d0:	9c 91       	ld	r25, X
    34d2:	13 97       	sbiw	r26, 0x03	; 3
    34d4:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <vfprintf_P>
    stdout->flags &= ~__SPGM;
    34d8:	d8 01       	movw	r26, r16
    34da:	12 96       	adiw	r26, 0x02	; 2
    34dc:	ed 91       	ld	r30, X+
    34de:	fc 91       	ld	r31, X
    34e0:	13 97       	sbiw	r26, 0x03	; 3
    34e2:	83 81       	ldd	r24, Z+3	; 0x03
    34e4:	87 7f       	andi	r24, 0xF7	; 247
    va_end(args);

    terminal_newLine();
    34e6:	83 83       	std	Z+3, r24	; 0x03
    34e8:	d5 df       	rcall	.-86     	; 0x3494 <terminal_newLine>

    os_leaveCriticalSection();
    34ea:	85 d3       	rcall	.+1802   	; 0x3bf6 <os_leaveCriticalSection>
    34ec:	df 91       	pop	r29
}
    34ee:	cf 91       	pop	r28
    34f0:	1f 91       	pop	r17
    34f2:	0f 91       	pop	r16
    34f4:	08 95       	ret

000034f6 <__vector_25>:
    34f6:	1f 92       	push	r1
 * Disables the RX/TX ports to not provide the connected device with energy
 */
void uart2_disable()
{
	cbi(UART2_CONTROL, UART2_BIT_RXEN);
	cbi(UART2_CONTROL, UART2_BIT_TXEN);
    34f8:	0f 92       	push	r0
    34fa:	0f b6       	in	r0, 0x3f	; 63
    34fc:	0f 92       	push	r0
    34fe:	11 24       	eor	r1, r1
    3500:	0b b6       	in	r0, 0x3b	; 59
    3502:	0f 92       	push	r0
    3504:	2f 93       	push	r18
    3506:	8f 93       	push	r24
    3508:	9f 93       	push	r25
    350a:	ef 93       	push	r30
    350c:	ff 93       	push	r31
    350e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    3512:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3516:	8c 71       	andi	r24, 0x1C	; 28
    3518:	e0 91 24 05 	lds	r30, 0x0524	; 0x800524 <UART0_RxHead>
    351c:	ef 5f       	subi	r30, 0xFF	; 255
    351e:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <UART0_RxTail>
    3522:	e9 17       	cp	r30, r25
    3524:	39 f0       	breq	.+14     	; 0x3534 <__vector_25+0x3e>
    3526:	e0 93 24 05 	sts	0x0524, r30	; 0x800524 <UART0_RxHead>
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	e9 5d       	subi	r30, 0xD9	; 217
    352e:	fa 4f       	sbci	r31, 0xFA	; 250
    3530:	20 83       	st	Z, r18
    3532:	01 c0       	rjmp	.+2      	; 0x3536 <__vector_25+0x40>
    3534:	82 e0       	ldi	r24, 0x02	; 2
    3536:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <UART0_LastRxError>
    353a:	89 2b       	or	r24, r25
    353c:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <UART0_LastRxError>
    3540:	ff 91       	pop	r31
    3542:	ef 91       	pop	r30
    3544:	9f 91       	pop	r25
    3546:	8f 91       	pop	r24
    3548:	2f 91       	pop	r18
    354a:	0f 90       	pop	r0
    354c:	0b be       	out	0x3b, r0	; 59
    354e:	0f 90       	pop	r0
    3550:	0f be       	out	0x3f, r0	; 63
    3552:	0f 90       	pop	r0
    3554:	1f 90       	pop	r1
    3556:	18 95       	reti

00003558 <__vector_26>:
    3558:	1f 92       	push	r1
    355a:	0f 92       	push	r0
    355c:	0f b6       	in	r0, 0x3f	; 63
    355e:	0f 92       	push	r0
    3560:	11 24       	eor	r1, r1
    3562:	0b b6       	in	r0, 0x3b	; 59
    3564:	0f 92       	push	r0
    3566:	8f 93       	push	r24
    3568:	9f 93       	push	r25
    356a:	ef 93       	push	r30
    356c:	ff 93       	push	r31
    356e:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <UART0_TxHead>
    3572:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <UART0_TxTail>
    3576:	98 17       	cp	r25, r24
    3578:	61 f0       	breq	.+24     	; 0x3592 <__vector_26+0x3a>
    357a:	e0 91 25 05 	lds	r30, 0x0525	; 0x800525 <UART0_TxTail>
    357e:	ef 5f       	subi	r30, 0xFF	; 255
    3580:	e0 93 25 05 	sts	0x0525, r30	; 0x800525 <UART0_TxTail>
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	e9 5d       	subi	r30, 0xD9	; 217
    3588:	fa 4f       	sbci	r31, 0xFA	; 250
    358a:	80 81       	ld	r24, Z
    358c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3590:	05 c0       	rjmp	.+10     	; 0x359c <__vector_26+0x44>
    3592:	e1 ec       	ldi	r30, 0xC1	; 193
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	80 81       	ld	r24, Z
    3598:	8f 7d       	andi	r24, 0xDF	; 223
    359a:	80 83       	st	Z, r24
    359c:	ff 91       	pop	r31
    359e:	ef 91       	pop	r30
    35a0:	9f 91       	pop	r25
    35a2:	8f 91       	pop	r24
    35a4:	0f 90       	pop	r0
    35a6:	0b be       	out	0x3b, r0	; 59
    35a8:	0f 90       	pop	r0
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	0f 90       	pop	r0
    35ae:	1f 90       	pop	r1
    35b0:	18 95       	reti

000035b2 <__vector_36>:
    35b2:	1f 92       	push	r1
    35b4:	0f 92       	push	r0
    35b6:	0f b6       	in	r0, 0x3f	; 63
    35b8:	0f 92       	push	r0
    35ba:	11 24       	eor	r1, r1
    35bc:	0b b6       	in	r0, 0x3b	; 59
    35be:	0f 92       	push	r0
    35c0:	2f 93       	push	r18
    35c2:	8f 93       	push	r24
    35c4:	9f 93       	push	r25
    35c6:	ef 93       	push	r30
    35c8:	ff 93       	push	r31
    35ca:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    35ce:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    35d2:	8c 71       	andi	r24, 0x1C	; 28
    35d4:	e0 91 df 03 	lds	r30, 0x03DF	; 0x8003df <UART1_RxHead>
    35d8:	ef 5f       	subi	r30, 0xFF	; 255
    35da:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <UART1_RxTail>
    35de:	e9 17       	cp	r30, r25
    35e0:	39 f0       	breq	.+14     	; 0x35f0 <__vector_36+0x3e>
    35e2:	e0 93 df 03 	sts	0x03DF, r30	; 0x8003df <UART1_RxHead>
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	ee 51       	subi	r30, 0x1E	; 30
    35ea:	fc 4f       	sbci	r31, 0xFC	; 252
    35ec:	20 83       	st	Z, r18
    35ee:	01 c0       	rjmp	.+2      	; 0x35f2 <__vector_36+0x40>
    35f0:	82 e0       	ldi	r24, 0x02	; 2
    35f2:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <UART1_LastRxError>
    35f6:	89 2b       	or	r24, r25
    35f8:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <UART1_LastRxError>
    35fc:	ff 91       	pop	r31
    35fe:	ef 91       	pop	r30
    3600:	9f 91       	pop	r25
    3602:	8f 91       	pop	r24
    3604:	2f 91       	pop	r18
    3606:	0f 90       	pop	r0
    3608:	0b be       	out	0x3b, r0	; 59
    360a:	0f 90       	pop	r0
    360c:	0f be       	out	0x3f, r0	; 63
    360e:	0f 90       	pop	r0
    3610:	1f 90       	pop	r1
    3612:	18 95       	reti

00003614 <__vector_37>:
    3614:	1f 92       	push	r1
    3616:	0f 92       	push	r0
    3618:	0f b6       	in	r0, 0x3f	; 63
    361a:	0f 92       	push	r0
    361c:	11 24       	eor	r1, r1
    361e:	0b b6       	in	r0, 0x3b	; 59
    3620:	0f 92       	push	r0
    3622:	8f 93       	push	r24
    3624:	9f 93       	push	r25
    3626:	ef 93       	push	r30
    3628:	ff 93       	push	r31
    362a:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <UART1_TxHead>
    362e:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <UART1_TxTail>
    3632:	98 17       	cp	r25, r24
    3634:	69 f0       	breq	.+26     	; 0x3650 <__vector_37+0x3c>
    3636:	e0 91 e0 03 	lds	r30, 0x03E0	; 0x8003e0 <UART1_TxTail>
    363a:	ef 5f       	subi	r30, 0xFF	; 255
    363c:	ef 73       	andi	r30, 0x3F	; 63
    363e:	e0 93 e0 03 	sts	0x03E0, r30	; 0x8003e0 <UART1_TxTail>
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	ee 51       	subi	r30, 0x1E	; 30
    3646:	fb 4f       	sbci	r31, 0xFB	; 251
    3648:	80 81       	ld	r24, Z
    364a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    364e:	05 c0       	rjmp	.+10     	; 0x365a <__vector_37+0x46>
    3650:	e9 ec       	ldi	r30, 0xC9	; 201
    3652:	f0 e0       	ldi	r31, 0x00	; 0
    3654:	80 81       	ld	r24, Z
    3656:	8f 7d       	andi	r24, 0xDF	; 223
    3658:	80 83       	st	Z, r24
    365a:	ff 91       	pop	r31
    365c:	ef 91       	pop	r30
    365e:	9f 91       	pop	r25
    3660:	8f 91       	pop	r24
    3662:	0f 90       	pop	r0
    3664:	0b be       	out	0x3b, r0	; 59
    3666:	0f 90       	pop	r0
    3668:	0f be       	out	0x3f, r0	; 63
    366a:	0f 90       	pop	r0
    366c:	1f 90       	pop	r1
    366e:	18 95       	reti

00003670 <uart1_init>:
    3670:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <UART1_TxHead>
    3674:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <UART1_TxTail>
    3678:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <UART1_RxHead>
    367c:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <UART1_RxTail>
    3680:	28 2f       	mov	r18, r24
    3682:	39 2f       	mov	r19, r25
    3684:	33 23       	and	r19, r19
    3686:	1c f4       	brge	.+6      	; 0x368e <uart1_init+0x1e>
    3688:	22 e0       	ldi	r18, 0x02	; 2
    368a:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    368e:	90 78       	andi	r25, 0x80	; 128
    3690:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
    3694:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
    3698:	88 e9       	ldi	r24, 0x98	; 152
    369a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
    369e:	86 e0       	ldi	r24, 0x06	; 6
    36a0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
    36a4:	08 95       	ret

000036a6 <uart1_getc>:
    36a6:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <UART1_RxHead>
    36aa:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <UART1_RxTail>
    36ae:	98 17       	cp	r25, r24
    36b0:	99 f0       	breq	.+38     	; 0x36d8 <uart1_getc+0x32>
    36b2:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <UART1_RxTail>
    36b6:	8f 5f       	subi	r24, 0xFF	; 255
    36b8:	e8 2f       	mov	r30, r24
    36ba:	f0 e0       	ldi	r31, 0x00	; 0
    36bc:	ee 51       	subi	r30, 0x1E	; 30
    36be:	fc 4f       	sbci	r31, 0xFC	; 252
    36c0:	20 81       	ld	r18, Z
    36c2:	30 91 dd 03 	lds	r19, 0x03DD	; 0x8003dd <UART1_LastRxError>
    36c6:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <UART1_RxTail>
    36ca:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <UART1_LastRxError>
    36ce:	80 e0       	ldi	r24, 0x00	; 0
    36d0:	93 2f       	mov	r25, r19
    36d2:	82 0f       	add	r24, r18
    36d4:	91 1d       	adc	r25, r1
    36d6:	08 95       	ret
    36d8:	80 e0       	ldi	r24, 0x00	; 0
    36da:	91 e0       	ldi	r25, 0x01	; 1
    36dc:	08 95       	ret

000036de <uart1_getrxcount>:
    36de:	20 91 de 03 	lds	r18, 0x03DE	; 0x8003de <UART1_RxTail>
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <UART1_RxHead>
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	82 17       	cp	r24, r18
    36ec:	93 07       	cpc	r25, r19
    36ee:	18 f0       	brcs	.+6      	; 0x36f6 <uart1_getrxcount+0x18>
    36f0:	82 1b       	sub	r24, r18
    36f2:	93 0b       	sbc	r25, r19
    36f4:	08 95       	ret
    36f6:	40 e0       	ldi	r20, 0x00	; 0
    36f8:	51 e0       	ldi	r21, 0x01	; 1
    36fa:	ba 01       	movw	r22, r20
    36fc:	62 1b       	sub	r22, r18
    36fe:	73 0b       	sbc	r23, r19
    3700:	86 0f       	add	r24, r22
    3702:	97 1f       	adc	r25, r23
    3704:	08 95       	ret

00003706 <__vector_51>:
    3706:	1f 92       	push	r1
    3708:	0f 92       	push	r0
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	0f 92       	push	r0
    370e:	11 24       	eor	r1, r1
    3710:	0b b6       	in	r0, 0x3b	; 59
    3712:	0f 92       	push	r0
    3714:	2f 93       	push	r18
    3716:	8f 93       	push	r24
    3718:	9f 93       	push	r25
    371a:	ef 93       	push	r30
    371c:	ff 93       	push	r31
    371e:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
    3722:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    3726:	8c 71       	andi	r24, 0x1C	; 28
    3728:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <UART2_RxHead>
    372c:	ef 5f       	subi	r30, 0xFF	; 255
    372e:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <UART2_RxTail>
    3732:	e9 17       	cp	r30, r25
    3734:	39 f0       	breq	.+14     	; 0x3744 <__vector_51+0x3e>
    3736:	e0 93 9a 03 	sts	0x039A, r30	; 0x80039a <UART2_RxHead>
    373a:	f0 e0       	ldi	r31, 0x00	; 0
    373c:	e3 56       	subi	r30, 0x63	; 99
    373e:	fc 4f       	sbci	r31, 0xFC	; 252
    3740:	20 83       	st	Z, r18
    3742:	01 c0       	rjmp	.+2      	; 0x3746 <__vector_51+0x40>
    3744:	82 e0       	ldi	r24, 0x02	; 2
    3746:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <UART2_LastRxError>
    374a:	89 2b       	or	r24, r25
    374c:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <UART2_LastRxError>
    3750:	ff 91       	pop	r31
    3752:	ef 91       	pop	r30
    3754:	9f 91       	pop	r25
    3756:	8f 91       	pop	r24
    3758:	2f 91       	pop	r18
    375a:	0f 90       	pop	r0
    375c:	0b be       	out	0x3b, r0	; 59
    375e:	0f 90       	pop	r0
    3760:	0f be       	out	0x3f, r0	; 63
    3762:	0f 90       	pop	r0
    3764:	1f 90       	pop	r1
    3766:	18 95       	reti

00003768 <__vector_52>:
    3768:	1f 92       	push	r1
    376a:	0f 92       	push	r0
    376c:	0f b6       	in	r0, 0x3f	; 63
    376e:	0f 92       	push	r0
    3770:	11 24       	eor	r1, r1
    3772:	0b b6       	in	r0, 0x3b	; 59
    3774:	0f 92       	push	r0
    3776:	8f 93       	push	r24
    3778:	9f 93       	push	r25
    377a:	ef 93       	push	r30
    377c:	ff 93       	push	r31
    377e:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <UART2_TxHead>
    3782:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <UART2_TxTail>
    3786:	98 17       	cp	r25, r24
    3788:	69 f0       	breq	.+26     	; 0x37a4 <__vector_52+0x3c>
    378a:	e0 91 9b 03 	lds	r30, 0x039B	; 0x80039b <UART2_TxTail>
    378e:	ef 5f       	subi	r30, 0xFF	; 255
    3790:	ef 73       	andi	r30, 0x3F	; 63
    3792:	e0 93 9b 03 	sts	0x039B, r30	; 0x80039b <UART2_TxTail>
    3796:	f0 e0       	ldi	r31, 0x00	; 0
    3798:	e3 56       	subi	r30, 0x63	; 99
    379a:	fc 4f       	sbci	r31, 0xFC	; 252
    379c:	80 81       	ld	r24, Z
    379e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    37a2:	05 c0       	rjmp	.+10     	; 0x37ae <__vector_52+0x46>
    37a4:	e1 ed       	ldi	r30, 0xD1	; 209
    37a6:	f0 e0       	ldi	r31, 0x00	; 0
    37a8:	80 81       	ld	r24, Z
    37aa:	8f 7d       	andi	r24, 0xDF	; 223
    37ac:	80 83       	st	Z, r24
    37ae:	ff 91       	pop	r31
    37b0:	ef 91       	pop	r30
    37b2:	9f 91       	pop	r25
    37b4:	8f 91       	pop	r24
    37b6:	0f 90       	pop	r0
    37b8:	0b be       	out	0x3b, r0	; 59
    37ba:	0f 90       	pop	r0
    37bc:	0f be       	out	0x3f, r0	; 63
    37be:	0f 90       	pop	r0
    37c0:	1f 90       	pop	r1
    37c2:	18 95       	reti

000037c4 <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
    37c4:	1f 92       	push	r1
    37c6:	0f 92       	push	r0
    37c8:	0f b6       	in	r0, 0x3f	; 63
    37ca:	0f 92       	push	r0
    37cc:	11 24       	eor	r1, r1
    37ce:	0b b6       	in	r0, 0x3b	; 59
    37d0:	0f 92       	push	r0
    37d2:	2f 93       	push	r18
    37d4:	8f 93       	push	r24
    37d6:	9f 93       	push	r25
    37d8:	ef 93       	push	r30
    37da:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART3_STATUS;
    37dc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
    data = UART3_DATA;
    37e0:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
    37e4:	8c 71       	andi	r24, 0x1C	; 28
            
    /* calculate buffer index */ 
    tmphead = ( UART3_RxHead + 1) & UART3_RX_BUFFER_MASK;
    37e6:	e0 91 55 03 	lds	r30, 0x0355	; 0x800355 <UART3_RxHead>
    37ea:	ef 5f       	subi	r30, 0xFF	; 255
    37ec:	ef 73       	andi	r30, 0x3F	; 63
    
    if ( tmphead == UART3_RxTail ) {
    37ee:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <UART3_RxTail>
    37f2:	e9 17       	cp	r30, r25
    37f4:	39 f0       	breq	.+14     	; 0x3804 <__vector_54+0x40>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART3_RxHead = tmphead;
    37f6:	e0 93 55 03 	sts	0x0355, r30	; 0x800355 <UART3_RxHead>
        /* store received data in buffer */
        UART3_RxBuf[tmphead] = data;
    37fa:	f0 e0       	ldi	r31, 0x00	; 0
    37fc:	e8 5a       	subi	r30, 0xA8	; 168
    37fe:	fc 4f       	sbci	r31, 0xFC	; 252
    3800:	20 83       	st	Z, r18
    3802:	01 c0       	rjmp	.+2      	; 0x3806 <__vector_54+0x42>
    /* calculate buffer index */ 
    tmphead = ( UART3_RxHead + 1) & UART3_RX_BUFFER_MASK;
    
    if ( tmphead == UART3_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    3804:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART3_RxHead = tmphead;
        /* store received data in buffer */
        UART3_RxBuf[tmphead] = data;
    }
    UART3_LastRxError |= lastRxError;   
    3806:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <UART3_LastRxError>
    380a:	89 2b       	or	r24, r25
    380c:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <UART3_LastRxError>
}
    3810:	ff 91       	pop	r31
    3812:	ef 91       	pop	r30
    3814:	9f 91       	pop	r25
    3816:	8f 91       	pop	r24
    3818:	2f 91       	pop	r18
    381a:	0f 90       	pop	r0
    381c:	0b be       	out	0x3b, r0	; 59
    381e:	0f 90       	pop	r0
    3820:	0f be       	out	0x3f, r0	; 63
    3822:	0f 90       	pop	r0
    3824:	1f 90       	pop	r1
    3826:	18 95       	reti

00003828 <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
    3828:	1f 92       	push	r1
    382a:	0f 92       	push	r0
    382c:	0f b6       	in	r0, 0x3f	; 63
    382e:	0f 92       	push	r0
    3830:	11 24       	eor	r1, r1
    3832:	0b b6       	in	r0, 0x3b	; 59
    3834:	0f 92       	push	r0
    3836:	8f 93       	push	r24
    3838:	9f 93       	push	r25
    383a:	ef 93       	push	r30
    383c:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART3_TxHead != UART3_TxTail) {
    383e:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <UART3_TxHead>
    3842:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <UART3_TxTail>
    3846:	98 17       	cp	r25, r24
    3848:	61 f0       	breq	.+24     	; 0x3862 <__vector_55+0x3a>
        /* calculate and store new buffer index */
        tmptail = (UART3_TxTail + 1) & UART3_TX_BUFFER_MASK;
    384a:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <UART3_TxTail>
    384e:	ef 5f       	subi	r30, 0xFF	; 255
        UART3_TxTail = tmptail;
    3850:	e0 93 56 03 	sts	0x0356, r30	; 0x800356 <UART3_TxTail>
        /* get one byte from buffer and write it to UART */
        UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
    3854:	f0 e0       	ldi	r31, 0x00	; 0
    3856:	e8 56       	subi	r30, 0x68	; 104
    3858:	fc 4f       	sbci	r31, 0xFC	; 252
    385a:	80 81       	ld	r24, Z
    385c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3860:	05 c0       	rjmp	.+10     	; 0x386c <__vector_55+0x44>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART3_CONTROL &= ~_BV(UART3_UDRIE);
    3862:	e1 e3       	ldi	r30, 0x31	; 49
    3864:	f1 e0       	ldi	r31, 0x01	; 1
    3866:	80 81       	ld	r24, Z
    3868:	8f 7d       	andi	r24, 0xDF	; 223
    386a:	80 83       	st	Z, r24
    }
}
    386c:	ff 91       	pop	r31
    386e:	ef 91       	pop	r30
    3870:	9f 91       	pop	r25
    3872:	8f 91       	pop	r24
    3874:	0f 90       	pop	r0
    3876:	0b be       	out	0x3b, r0	; 59
    3878:	0f 90       	pop	r0
    387a:	0f be       	out	0x3f, r0	; 63
    387c:	0f 90       	pop	r0
    387e:	1f 90       	pop	r1
    3880:	18 95       	reti

00003882 <__vector_21>:

/*!
 *  ISR that counts the number of occurred Timer 0 compare matches for the getSystemTime function mainly used in delayMs.
 */
ISR(TIMER0_COMPA_vect)
{
    3882:	1f 92       	push	r1
    3884:	0f 92       	push	r0
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	0f 92       	push	r0
    388a:	11 24       	eor	r1, r1
    388c:	8f 93       	push	r24
    388e:	9f 93       	push	r25
    3890:	af 93       	push	r26
    3892:	bf 93       	push	r27
	++os_coarseSystemTime;
    3894:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <os_coarseSystemTime>
    3898:	90 91 9a 05 	lds	r25, 0x059A	; 0x80059a <os_coarseSystemTime+0x1>
    389c:	a0 91 9b 05 	lds	r26, 0x059B	; 0x80059b <os_coarseSystemTime+0x2>
    38a0:	b0 91 9c 05 	lds	r27, 0x059C	; 0x80059c <os_coarseSystemTime+0x3>
    38a4:	01 96       	adiw	r24, 0x01	; 1
    38a6:	a1 1d       	adc	r26, r1
    38a8:	b1 1d       	adc	r27, r1
    38aa:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <os_coarseSystemTime>
    38ae:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <os_coarseSystemTime+0x1>
    38b2:	a0 93 9b 05 	sts	0x059B, r26	; 0x80059b <os_coarseSystemTime+0x2>
    38b6:	b0 93 9c 05 	sts	0x059C, r27	; 0x80059c <os_coarseSystemTime+0x3>
}
    38ba:	bf 91       	pop	r27
    38bc:	af 91       	pop	r26
    38be:	9f 91       	pop	r25
    38c0:	8f 91       	pop	r24
    38c2:	0f 90       	pop	r0
    38c4:	0f be       	out	0x3f, r0	; 63
    38c6:	0f 90       	pop	r0
    38c8:	1f 90       	pop	r1
    38ca:	18 95       	reti

000038cc <initSystemTime>:
/*!
 *  Initializes Timer 0 as system clock
 */
void initSystemTime(void)
{
	os_coarseSystemTime = 0;
    38cc:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <os_coarseSystemTime>
    38d0:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <os_coarseSystemTime+0x1>
    38d4:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <os_coarseSystemTime+0x2>
    38d8:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <os_coarseSystemTime+0x3>

	// Init timer 0 with prescaler 64
	sbi(TCCR0B, CS00);
    38dc:	85 b5       	in	r24, 0x25	; 37
    38de:	81 60       	ori	r24, 0x01	; 1
    38e0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS01);
    38e2:	85 b5       	in	r24, 0x25	; 37
    38e4:	82 60       	ori	r24, 0x02	; 2
    38e6:	85 bd       	out	0x25, r24	; 37
	cbi(TCCR0B, CS02);
    38e8:	85 b5       	in	r24, 0x25	; 37
    38ea:	8b 7f       	andi	r24, 0xFB	; 251
    38ec:	85 bd       	out	0x25, r24	; 37

	// CTC mode
	sbi(TCCR0A, WGM01);
    38ee:	84 b5       	in	r24, 0x24	; 36
    38f0:	82 60       	ori	r24, 0x02	; 2
    38f2:	84 bd       	out	0x24, r24	; 36

	// Compare Match after 61 timer ticks = 1ms
	OCR0A = TIMER_OCR;
    38f4:	89 ef       	ldi	r24, 0xF9	; 249
    38f6:	87 bd       	out	0x27, r24	; 39
	sbi(TIMSK0, OCIE0A);
    38f8:	ee e6       	ldi	r30, 0x6E	; 110
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	80 81       	ld	r24, Z
    38fe:	82 60       	ori	r24, 0x02	; 2
    3900:	80 83       	st	Z, r24
    3902:	08 95       	ret

00003904 <getSystemTime_ms>:
 */
time_t getSystemTime_ms(void)
{
	// In case interrupts are off we check the OCF manually, clear it and
	// increment os_coarseSystemTime to avoid freezing the system time
	if (!gbi(SREG, 7) && gbi(TIFR0, OCF0A))
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	07 fc       	sbrc	r0, 7
    3908:	18 c0       	rjmp	.+48     	; 0x393a <getSystemTime_ms+0x36>
    390a:	a9 9b       	sbis	0x15, 1	; 21
    390c:	16 c0       	rjmp	.+44     	; 0x393a <getSystemTime_ms+0x36>
	{
		sbi(TIFR0, OCF0A);
    390e:	85 b3       	in	r24, 0x15	; 21
    3910:	82 60       	ori	r24, 0x02	; 2
    3912:	85 bb       	out	0x15, r24	; 21
		++os_coarseSystemTime;
    3914:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <os_coarseSystemTime>
    3918:	90 91 9a 05 	lds	r25, 0x059A	; 0x80059a <os_coarseSystemTime+0x1>
    391c:	a0 91 9b 05 	lds	r26, 0x059B	; 0x80059b <os_coarseSystemTime+0x2>
    3920:	b0 91 9c 05 	lds	r27, 0x059C	; 0x80059c <os_coarseSystemTime+0x3>
    3924:	01 96       	adiw	r24, 0x01	; 1
    3926:	a1 1d       	adc	r26, r1
    3928:	b1 1d       	adc	r27, r1
    392a:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <os_coarseSystemTime>
    392e:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <os_coarseSystemTime+0x1>
    3932:	a0 93 9b 05 	sts	0x059B, r26	; 0x80059b <os_coarseSystemTime+0x2>
    3936:	b0 93 9c 05 	sts	0x059C, r27	; 0x80059c <os_coarseSystemTime+0x3>
	}

	// Synchronize access to os_coarseSystemTime
	uint8_t ie = gbi(SREG, 7);
    393a:	8f b7       	in	r24, 0x3f	; 63
    393c:	28 2f       	mov	r18, r24
    393e:	22 1f       	adc	r18, r18
    3940:	22 27       	eor	r18, r18
    3942:	22 1f       	adc	r18, r18
	cli();
    3944:	f8 94       	cli
	time_t t = os_coarseSystemTime;
    3946:	60 91 99 05 	lds	r22, 0x0599	; 0x800599 <os_coarseSystemTime>
    394a:	70 91 9a 05 	lds	r23, 0x059A	; 0x80059a <os_coarseSystemTime+0x1>
    394e:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <os_coarseSystemTime+0x2>
    3952:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <os_coarseSystemTime+0x3>
	if (ie)
    3956:	22 23       	and	r18, r18
    3958:	09 f0       	breq	.+2      	; 0x395c <getSystemTime_ms+0x58>
	{
		sei();
    395a:	78 94       	sei
	}

	return t;
}
    395c:	08 95       	ret

0000395e <delayMs>:
 *  in order to get the destination time. Then, we wait until a temporary variable reaches this value.
 *
 *  \param ms  The time to be waited in milliseconds (max. 65535)
 */
void delayMs(uint16_t ms)
{
    395e:	cf 92       	push	r12
    3960:	df 92       	push	r13
    3962:	ef 92       	push	r14
    3964:	ff 92       	push	r15
    3966:	0f 93       	push	r16
    3968:	1f 93       	push	r17
    396a:	cf 93       	push	r28
    396c:	df 93       	push	r29
#ifdef RUNNING_WITH_SIMULATOR
	return;
#endif

	if (ms == 0)
    396e:	00 97       	sbiw	r24, 0x00	; 0
    3970:	d1 f0       	breq	.+52     	; 0x39a6 <delayMs+0x48>
    3972:	ec 01       	movw	r28, r24
	{
		return;
	}
	time_t startTime = getSystemTime_ms();
    3974:	c7 df       	rcall	.-114    	; 0x3904 <getSystemTime_ms>
    3976:	6b 01       	movw	r12, r22
    3978:	7c 01       	movw	r14, r24

	while (getSystemTime_ms() - startTime < ms)
    397a:	06 c0       	rjmp	.+12     	; 0x3988 <delayMs+0x2a>
    397c:	8f e8       	ldi	r24, 0x8F	; 143
    397e:	91 e0       	ldi	r25, 0x01	; 1
    3980:	01 97       	sbiw	r24, 0x01	; 1
    3982:	f1 f7       	brne	.-4      	; 0x3980 <delayMs+0x22>
    3984:	00 c0       	rjmp	.+0      	; 0x3986 <delayMs+0x28>
    3986:	00 00       	nop
    3988:	bd df       	rcall	.-134    	; 0x3904 <getSystemTime_ms>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	8c 19       	sub	r24, r12
    3990:	9d 09       	sbc	r25, r13
    3992:	ae 09       	sbc	r26, r14
    3994:	bf 09       	sbc	r27, r15
    3996:	8e 01       	movw	r16, r28
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	80 17       	cp	r24, r16
    399e:	91 07       	cpc	r25, r17
    39a0:	a2 07       	cpc	r26, r18
    39a2:	b3 07       	cpc	r27, r19
    39a4:	58 f3       	brcs	.-42     	; 0x397c <delayMs+0x1e>
	{
		_delay_us(100);
	}
}
    39a6:	df 91       	pop	r29
    39a8:	cf 91       	pop	r28
    39aa:	1f 91       	pop	r17
    39ac:	0f 91       	pop	r16
    39ae:	ff 90       	pop	r15
    39b0:	ef 90       	pop	r14
    39b2:	df 90       	pop	r13
    39b4:	cf 90       	pop	r12
    39b6:	08 95       	ret

000039b8 <assertPstr>:
 *
 *  \param exp The boolean expression that is expected to be true.
 *  \param errormsg The string that shall be shown as an error message if the given expression is false as progmem string.
 */
void assertPstr(bool exp, const char *errormsg, ...)
{
    39b8:	cf 93       	push	r28
    39ba:	df 93       	push	r29
    39bc:	cd b7       	in	r28, 0x3d	; 61
    39be:	de b7       	in	r29, 0x3e	; 62
    39c0:	9f 81       	ldd	r25, Y+7	; 0x07
    39c2:	28 85       	ldd	r18, Y+8	; 0x08
	if (!exp)
    39c4:	8e 81       	ldd	r24, Y+6	; 0x06
    39c6:	81 11       	cpse	r24, r1
    39c8:	0c c0       	rjmp	.+24     	; 0x39e2 <assertPstr+0x2a>
	{
		va_list args;
		va_start(args, errormsg);
    39ca:	ae 01       	movw	r20, r28
    39cc:	47 5f       	subi	r20, 0xF7	; 247
    39ce:	5f 4f       	sbci	r21, 0xFF	; 255
		os_errorPstr(errormsg, args);
    39d0:	5f 93       	push	r21
    39d2:	4f 93       	push	r20
    39d4:	2f 93       	push	r18
    39d6:	9f 93       	push	r25
    39d8:	6a d0       	rcall	.+212    	; 0x3aae <os_errorPstr>
    39da:	0f 90       	pop	r0
    39dc:	0f 90       	pop	r0
    39de:	0f 90       	pop	r0
    39e0:	0f 90       	pop	r0
		va_end(args);
	}
    39e2:	df 91       	pop	r29
    39e4:	cf 91       	pop	r28
    39e6:	08 95       	ret

000039e8 <main>:
//! Program's entry point
int main(void)
{
	// Give the operating system a chance to initialize its private data.
	// This also registers and starts the idle program.
	os_init();
    39e8:	21 d0       	rcall	.+66     	; 0x3a2c <os_init>

	// os_init shows a boot message
	// Wait and clear the LCD
	delayMs(600);
    39ea:	88 e5       	ldi	r24, 0x58	; 88
    39ec:	92 e0       	ldi	r25, 0x02	; 2
	lcd_clear();
    39ee:	b7 df       	rcall	.-146    	; 0x395e <delayMs>
    39f0:	5f db       	rcall	.-2370   	; 0x30b0 <lcd_clear>

	// Start the operating system
	os_startScheduler();
    39f2:	35 d1       	rcall	.+618    	; 0x3c5e <os_startScheduler>
    39f4:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	08 95       	ret

000039fa <os_initTimer>:
    39fa:	e0 eb       	ldi	r30, 0xB0	; 176
 *  Initializes the used timers.
 */
void os_initTimer(void)
{
	// Init timer 2 (Scheduler)
	sbi(TCCR2A, WGM21); // Clear on timer compare match
    39fc:	f0 e0       	ldi	r31, 0x00	; 0
    39fe:	80 81       	ld	r24, Z
    3a00:	82 60       	ori	r24, 0x02	; 2
    3a02:	80 83       	st	Z, r24

	sbi(TCCR2B, CS22);	 // Prescaler 1024  1
    3a04:	e1 eb       	ldi	r30, 0xB1	; 177
    3a06:	f0 e0       	ldi	r31, 0x00	; 0
    3a08:	80 81       	ld	r24, Z
    3a0a:	84 60       	ori	r24, 0x04	; 4
    3a0c:	80 83       	st	Z, r24
	sbi(TCCR2B, CS21);	 // Prescaler 1024  1
    3a0e:	80 81       	ld	r24, Z
    3a10:	82 60       	ori	r24, 0x02	; 2
    3a12:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20);	 // Prescaler 1024  1
    3a14:	80 81       	ld	r24, Z
    3a16:	81 60       	ori	r24, 0x01	; 1
    3a18:	80 83       	st	Z, r24
	sbi(TIMSK2, OCIE2A); // Enable interrupt
    3a1a:	e0 e7       	ldi	r30, 0x70	; 112
    3a1c:	f0 e0       	ldi	r31, 0x00	; 0
    3a1e:	80 81       	ld	r24, Z
    3a20:	82 60       	ori	r24, 0x02	; 2
    3a22:	80 83       	st	Z, r24
	OCR2A = 60;
    3a24:	8c e3       	ldi	r24, 0x3C	; 60
    3a26:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
    3a2a:	08 95       	ret

00003a2c <os_init>:
 *  Readies stack, scheduler and heap for first use. Additionally, the LCD is initialized. In order to do those tasks,
 *  it calls the subfunction os_initScheduler().
 */
void os_init()
{
	initSystemTime();
    3a2c:	4f df       	rcall	.-354    	; 0x38cc <initSystemTime>
	os_initTimer();
    3a2e:	e5 df       	rcall	.-54     	; 0x39fa <os_initTimer>
	stopWatch_init();
    3a30:	c1 dc       	rcall	.-1662   	; 0x33b4 <stopWatch_init>

	// Init LCD display
	lcd_init();
    3a32:	f9 da       	rcall	.-2574   	; 0x3026 <lcd_init>
	terminal_init();
    3a34:	0c dd       	rcall	.-1512   	; 0x344e <terminal_init>

	// display on
	lcd_displayOn();
    3a36:	49 db       	rcall	.-2414   	; 0x30ca <lcd_displayOn>
    3a38:	3b db       	rcall	.-2442   	; 0x30b0 <lcd_clear>
	lcd_clear();
    3a3a:	88 e9       	ldi	r24, 0x98	; 152

	lcd_writeProgString(PSTR("Booting DEOS ..."));
    3a3c:	9a e0       	ldi	r25, 0x0A	; 10
    3a3e:	d6 db       	rcall	.-2132   	; 0x31ec <lcd_writeProgString>
    3a40:	82 e6       	ldi	r24, 0x62	; 98
    3a42:	9a e0       	ldi	r25, 0x0A	; 10

	terminal_writeProgString(PSTR("\n\n##################################################\n"));
    3a44:	16 dd       	rcall	.-1492   	; 0x3472 <terminal_writeProgString>
    3a46:	81 e5       	ldi	r24, 0x51	; 81
    3a48:	9a e0       	ldi	r25, 0x0A	; 10
	INFO("Booting DEOS ...");
    3a4a:	9f 93       	push	r25
    3a4c:	8f 93       	push	r24
    3a4e:	88 e4       	ldi	r24, 0x48	; 72
    3a50:	9a e0       	ldi	r25, 0x0A	; 10
    3a52:	9f 93       	push	r25
    3a54:	8f 93       	push	r24
    3a56:	21 dd       	rcall	.-1470   	; 0x349a <terminal_log_printf_p>
    3a58:	85 e0       	ldi	r24, 0x05	; 5
    3a5a:	8f 93       	push	r24
    3a5c:	88 e7       	ldi	r24, 0x78	; 120
	INFO("Used global vars: %d/%d bytes", (uint16_t)&__heap_start - AVR_SRAM_START, STACK_OFFSET);
    3a5e:	8f 93       	push	r24
    3a60:	86 e1       	ldi	r24, 0x16	; 22
    3a62:	94 e0       	ldi	r25, 0x04	; 4
    3a64:	9f 93       	push	r25
    3a66:	8f 93       	push	r24
    3a68:	8a e2       	ldi	r24, 0x2A	; 42
    3a6a:	9a e0       	ldi	r25, 0x0A	; 10
    3a6c:	9f 93       	push	r25
    3a6e:	8f 93       	push	r24
    3a70:	81 e2       	ldi	r24, 0x21	; 33
    3a72:	9a e0       	ldi	r25, 0x0A	; 10
    3a74:	9f 93       	push	r25
    3a76:	8f 93       	push	r24
    3a78:	10 dd       	rcall	.-1504   	; 0x349a <terminal_log_printf_p>
    3a7a:	8d ee       	ldi	r24, 0xED	; 237
    3a7c:	99 e0       	ldi	r25, 0x09	; 9
	terminal_writeProgString(PSTR("--------------------------------------------------\n"));
    3a7e:	f9 dc       	rcall	.-1550   	; 0x3472 <terminal_writeProgString>
    3a80:	8c ec       	ldi	r24, 0xCC	; 204
    3a82:	99 e0       	ldi	r25, 0x09	; 9
    3a84:	9f 93       	push	r25

	// Security check if the stack crushes global variables
	assert((uint16_t)&__heap_start < AVR_SRAM_START + STACK_OFFSET, " Stack collides with global vars");
    3a86:	8f 93       	push	r24
    3a88:	81 e0       	ldi	r24, 0x01	; 1
    3a8a:	26 e1       	ldi	r18, 0x16	; 22
    3a8c:	36 e0       	ldi	r19, 0x06	; 6
    3a8e:	28 37       	cpi	r18, 0x78	; 120
    3a90:	37 40       	sbci	r19, 0x07	; 7
    3a92:	08 f0       	brcs	.+2      	; 0x3a96 <os_init+0x6a>
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	8f 93       	push	r24
    3a98:	8f df       	rcall	.-226    	; 0x39b8 <assertPstr>
    3a9a:	f4 d1       	rcall	.+1000   	; 0x3e84 <os_initScheduler>
    3a9c:	8d b7       	in	r24, 0x3d	; 61

	os_initScheduler();
    3a9e:	9e b7       	in	r25, 0x3e	; 62
    3aa0:	0f 96       	adiw	r24, 0x0f	; 15
}
    3aa2:	0f b6       	in	r0, 0x3f	; 63
    3aa4:	f8 94       	cli
    3aa6:	9e bf       	out	0x3e, r25	; 62
    3aa8:	0f be       	out	0x3f, r0	; 63
    3aaa:	8d bf       	out	0x3d, r24	; 61
    3aac:	08 95       	ret

00003aae <os_errorPstr>:
    3aae:	cf 93       	push	r28
    3ab0:	df 93       	push	r29
    3ab2:	cd b7       	in	r28, 0x3d	; 61
 *
 *  \param msg The error to be displayed as progmem string
 *  \param ... Formatting arguments for the error message
 */
void os_errorPstr(const char *msg, ...)
{
    3ab4:	de b7       	in	r29, 0x3e	; 62
    3ab6:	1e 81       	ldd	r17, Y+6	; 0x06
    3ab8:	0f 81       	ldd	r16, Y+7	; 0x07
	cli();
    3aba:	f8 94       	cli

	// Make sure we have enough stack left for sure (we can mess with it because we won't go out of this function)
	SP = BOTTOM_OF_MAIN_STACK;
    3abc:	8f ef       	ldi	r24, 0xFF	; 255
    3abe:	91 e2       	ldi	r25, 0x21	; 33
    3ac0:	9e bf       	out	0x3e, r25	; 62
    3ac2:	8d bf       	out	0x3d, r24	; 61

	// Clear display and write error message
	lcd_clear();
    3ac4:	f5 da       	rcall	.-2582   	; 0x30b0 <lcd_clear>

	// Print error message to lcd (variadic arguments)
	va_list args;
	va_start(args, msg);
    3ac6:	ce 01       	movw	r24, r28
    3ac8:	08 96       	adiw	r24, 0x08	; 8
	lcd_printf_p(msg, args);
    3aca:	9f 93       	push	r25
    3acc:	8f 93       	push	r24
    3ace:	0f 93       	push	r16
    3ad0:	1f 93       	push	r17
    3ad2:	6c da       	rcall	.-2856   	; 0x2fac <lcd_printf_p>
	va_end(args);

	// Print error message to terminal (variadic arguments)
	va_start(args, msg);
    3ad4:	ce 01       	movw	r24, r28
    3ad6:	08 96       	adiw	r24, 0x08	; 8
	terminal_log_printf_p(PSTR("[ERROR] "), msg, args);
    3ad8:	9f 93       	push	r25
    3ada:	8f 93       	push	r24
    3adc:	0f 93       	push	r16
    3ade:	1f 93       	push	r17
    3ae0:	83 ec       	ldi	r24, 0xC3	; 195
    3ae2:	99 e0       	ldi	r25, 0x09	; 9
    3ae4:	9f 93       	push	r25
    3ae6:	8f 93       	push	r24
    3ae8:	d8 dc       	rcall	.-1616   	; 0x349a <terminal_log_printf_p>
    3aea:	0f b6       	in	r0, 0x3f	; 63
    3aec:	f8 94       	cli
    3aee:	de bf       	out	0x3e, r29	; 62
    3af0:	0f be       	out	0x3f, r0	; 63
	va_end(args);

	// Catch system in this infinite loop and play a small animation to indicate an error
	while (1)
	{
		lcd_displayOn();
    3af2:	cd bf       	out	0x3d, r28	; 61
    3af4:	ea da       	rcall	.-2604   	; 0x30ca <lcd_displayOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3af6:	9f ef       	ldi	r25, 0xFF	; 255
    3af8:	2d e3       	ldi	r18, 0x3D	; 61
    3afa:	89 e4       	ldi	r24, 0x49	; 73
    3afc:	91 50       	subi	r25, 0x01	; 1
    3afe:	20 40       	sbci	r18, 0x00	; 0
    3b00:	80 40       	sbci	r24, 0x00	; 0
    3b02:	e1 f7       	brne	.-8      	; 0x3afc <os_errorPstr+0x4e>
    3b04:	00 c0       	rjmp	.+0      	; 0x3b06 <os_errorPstr+0x58>
		_delay_ms(1500);
		lcd_displayOff();
    3b06:	00 00       	nop
    3b08:	e3 da       	rcall	.-2618   	; 0x30d0 <lcd_displayOff>
    3b0a:	9f ef       	ldi	r25, 0xFF	; 255
    3b0c:	21 ee       	ldi	r18, 0xE1	; 225
    3b0e:	84 e0       	ldi	r24, 0x04	; 4
    3b10:	91 50       	subi	r25, 0x01	; 1
    3b12:	20 40       	sbci	r18, 0x00	; 0
    3b14:	80 40       	sbci	r24, 0x00	; 0
    3b16:	e1 f7       	brne	.-8      	; 0x3b10 <os_errorPstr+0x62>
    3b18:	00 c0       	rjmp	.+0      	; 0x3b1a <os_errorPstr+0x6c>
    3b1a:	00 00       	nop
    3b1c:	eb cf       	rjmp	.-42     	; 0x3af4 <os_errorPstr+0x46>

00003b1e <prog0>:

/*!
 *  This is the idle program. The idle process owns all the memory
 *  and processor time no other process wants to have.
 */
PROGRAM(0, AUTOSTART)
    3b1e:	c0 e0       	ldi	r28, 0x00	; 0
    3b20:	d0 e0       	ldi	r29, 0x00	; 0
    3b22:	06 c0       	rjmp	.+12     	; 0x3b30 <prog0+0x12>
    3b24:	8e e2       	ldi	r24, 0x2E	; 46
    3b26:	0d db       	rcall	.-2534   	; 0x3142 <lcd_writeChar>
    3b28:	84 e6       	ldi	r24, 0x64	; 100
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	18 df       	rcall	.-464    	; 0x395e <delayMs>
    3b2e:	21 96       	adiw	r28, 0x01	; 1
    3b30:	c3 30       	cpi	r28, 0x03	; 3
    3b32:	d1 05       	cpc	r29, r1
    3b34:	bc f3       	brlt	.-18     	; 0x3b24 <prog0+0x6>
    3b36:	bc da       	rcall	.-2696   	; 0x30b0 <lcd_clear>
    3b38:	84 e6       	ldi	r24, 0x64	; 100
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	10 df       	rcall	.-480    	; 0x395e <delayMs>
    3b3e:	ef cf       	rjmp	.-34     	; 0x3b1e <prog0>

00003b40 <addressOfProgram>:
    3b40:	bc 01       	movw	r22, r24
    3b42:	99 0f       	add	r25, r25
    3b44:	88 0b       	sbc	r24, r24
    3b46:	99 0b       	sbc	r25, r25
    3b48:	08 95       	ret

00003b4a <os_checkAutostartProgram>:
    3b4a:	21 e0       	ldi	r18, 0x01	; 1
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	02 c0       	rjmp	.+4      	; 0x3b54 <os_checkAutostartProgram+0xa>
    3b50:	22 0f       	add	r18, r18
    3b52:	33 1f       	adc	r19, r19
    3b54:	8a 95       	dec	r24
    3b56:	e2 f7       	brpl	.-8      	; 0x3b50 <os_checkAutostartProgram+0x6>
    3b58:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <os_autostart>
    3b5c:	90 91 ee 05 	lds	r25, 0x05EE	; 0x8005ee <os_autostart+0x1>
    3b60:	28 23       	and	r18, r24
    3b62:	39 23       	and	r19, r25
    3b64:	81 e0       	ldi	r24, 0x01	; 1
    3b66:	23 2b       	or	r18, r19
    3b68:	09 f4       	brne	.+2      	; 0x3b6c <os_checkAutostartProgram+0x22>
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	08 95       	ret

00003b6e <os_lookupProgramFunction>:
    3b6e:	80 31       	cpi	r24, 0x10	; 16
    3b70:	48 f4       	brcc	.+18     	; 0x3b84 <os_lookupProgramFunction+0x16>
    3b72:	e8 2f       	mov	r30, r24
    3b74:	f0 e0       	ldi	r31, 0x00	; 0
    3b76:	ee 0f       	add	r30, r30
    3b78:	ff 1f       	adc	r31, r31
    3b7a:	e3 53       	subi	r30, 0x33	; 51
    3b7c:	fa 4f       	sbci	r31, 0xFA	; 250
    3b7e:	80 81       	ld	r24, Z
    3b80:	91 81       	ldd	r25, Z+1	; 0x01
    3b82:	08 95       	ret
    3b84:	80 e0       	ldi	r24, 0x00	; 0
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	08 95       	ret

00003b8a <os_getProcessSlot>:
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	9c 01       	movw	r18, r24
    3b8e:	22 0f       	add	r18, r18
    3b90:	33 1f       	adc	r19, r19
    3b92:	82 0f       	add	r24, r18
    3b94:	93 1f       	adc	r25, r19
    3b96:	88 0f       	add	r24, r24
    3b98:	99 1f       	adc	r25, r25
    3b9a:	83 56       	subi	r24, 0x63	; 99
    3b9c:	9a 4f       	sbci	r25, 0xFA	; 250
    3b9e:	08 95       	ret

00003ba0 <os_getProgramSlot>:
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	88 0f       	add	r24, r24
    3ba4:	99 1f       	adc	r25, r25
    3ba6:	83 53       	subi	r24, 0x33	; 51
    3ba8:	9a 4f       	sbci	r25, 0xFA	; 250
    3baa:	08 95       	ret

00003bac <os_getCurrentProc>:
    3bac:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <currentProc>
    3bb0:	08 95       	ret

00003bb2 <os_getSchedulingStrategy>:
    3bb2:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <currSchedStrat>
    3bb6:	08 95       	ret

00003bb8 <os_enterCriticalSection>:
    3bb8:	cf 93       	push	r28
    3bba:	cf b7       	in	r28, 0x3f	; 63
    3bbc:	cc 1f       	adc	r28, r28
    3bbe:	cc 27       	eor	r28, r28
    3bc0:	cc 1f       	adc	r28, r28
    3bc2:	f8 94       	cli
    3bc4:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <criticalSectionCount>
    3bc8:	8f 3f       	cpi	r24, 0xFF	; 255
    3bca:	41 f4       	brne	.+16     	; 0x3bdc <os_enterCriticalSection+0x24>
    3bcc:	8a e8       	ldi	r24, 0x8A	; 138
    3bce:	9b e0       	ldi	r25, 0x0B	; 11
    3bd0:	9f 93       	push	r25
    3bd2:	8f 93       	push	r24
    3bd4:	6c df       	rcall	.-296    	; 0x3aae <os_errorPstr>
    3bd6:	0f 90       	pop	r0
    3bd8:	0f 90       	pop	r0
    3bda:	03 c0       	rjmp	.+6      	; 0x3be2 <os_enterCriticalSection+0x2a>
    3bdc:	8f 5f       	subi	r24, 0xFF	; 255
    3bde:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <criticalSectionCount>
    3be2:	e0 e7       	ldi	r30, 0x70	; 112
    3be4:	f0 e0       	ldi	r31, 0x00	; 0
    3be6:	80 81       	ld	r24, Z
    3be8:	8d 7f       	andi	r24, 0xFD	; 253
    3bea:	80 83       	st	Z, r24
    3bec:	cc 23       	and	r28, r28
    3bee:	09 f0       	breq	.+2      	; 0x3bf2 <os_enterCriticalSection+0x3a>
    3bf0:	78 94       	sei
    3bf2:	cf 91       	pop	r28
    3bf4:	08 95       	ret

00003bf6 <os_leaveCriticalSection>:
    3bf6:	cf 93       	push	r28
    3bf8:	cf b7       	in	r28, 0x3f	; 63
    3bfa:	cc 1f       	adc	r28, r28
    3bfc:	cc 27       	eor	r28, r28
    3bfe:	cc 1f       	adc	r28, r28
    3c00:	f8 94       	cli
    3c02:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <criticalSectionCount>
    3c06:	81 11       	cpse	r24, r1
    3c08:	08 c0       	rjmp	.+16     	; 0x3c1a <os_leaveCriticalSection+0x24>
    3c0a:	80 e7       	ldi	r24, 0x70	; 112
    3c0c:	9b e0       	ldi	r25, 0x0B	; 11
    3c0e:	9f 93       	push	r25
    3c10:	8f 93       	push	r24
    3c12:	4d df       	rcall	.-358    	; 0x3aae <os_errorPstr>
    3c14:	0f 90       	pop	r0
    3c16:	0f 90       	pop	r0
    3c18:	03 c0       	rjmp	.+6      	; 0x3c20 <os_leaveCriticalSection+0x2a>
    3c1a:	81 50       	subi	r24, 0x01	; 1
    3c1c:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <criticalSectionCount>
    3c20:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <criticalSectionCount>
    3c24:	81 11       	cpse	r24, r1
    3c26:	05 c0       	rjmp	.+10     	; 0x3c32 <os_leaveCriticalSection+0x3c>
    3c28:	e0 e7       	ldi	r30, 0x70	; 112
    3c2a:	f0 e0       	ldi	r31, 0x00	; 0
    3c2c:	80 81       	ld	r24, Z
    3c2e:	82 60       	ori	r24, 0x02	; 2
    3c30:	80 83       	st	Z, r24
    3c32:	cc 23       	and	r28, r28
    3c34:	09 f0       	breq	.+2      	; 0x3c38 <os_leaveCriticalSection+0x42>
    3c36:	78 94       	sei
    3c38:	cf 91       	pop	r28
    3c3a:	08 95       	ret

00003c3c <registerProgram0>:
    3c3c:	80 e0       	ldi	r24, 0x00	; 0
    3c3e:	b0 df       	rcall	.-160    	; 0x3ba0 <os_getProgramSlot>
    3c40:	2f e8       	ldi	r18, 0x8F	; 143
    3c42:	3d e1       	ldi	r19, 0x1D	; 29
    3c44:	fc 01       	movw	r30, r24
    3c46:	31 83       	std	Z+1, r19	; 0x01
    3c48:	20 83       	st	Z, r18
    3c4a:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <os_autostart>
    3c4e:	90 91 ee 05 	lds	r25, 0x05EE	; 0x8005ee <os_autostart+0x1>
    3c52:	81 60       	ori	r24, 0x01	; 1
    3c54:	90 93 ee 05 	sts	0x05EE, r25	; 0x8005ee <os_autostart+0x1>
    3c58:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <os_autostart>
    3c5c:	08 95       	ret

00003c5e <os_startScheduler>:
 *  function to start the concurrent execution of the applications.
 */
void os_startScheduler(void)
{
	 // Set currentProc to idle process
	 currentProc = 0;
    3c5e:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <currentProc>

	 // Set the state of the now chosen process to running
	 os_processes[currentProc].state = OS_PS_RUNNING;
    3c62:	ed e9       	ldi	r30, 0x9D	; 157
    3c64:	f5 e0       	ldi	r31, 0x05	; 5
    3c66:	82 e0       	ldi	r24, 0x02	; 2
    3c68:	81 83       	std	Z+1, r24	; 0x01

	 // Set SP on the stack of the idle process, this will cause the idle process to start running,
	 // as the SP now points onto the idle functions address
	 SP = os_processes[currentProc].sp.as_int;
    3c6a:	82 81       	ldd	r24, Z+2	; 0x02
    3c6c:	93 81       	ldd	r25, Z+3	; 0x03
    3c6e:	9e bf       	out	0x3e, r25	; 62
    3c70:	8d bf       	out	0x3d, r24	; 61

	 // Load initial context and start the idle process
	 restoreContext();
    3c72:	0f 90       	pop	r0
    3c74:	1f 90       	pop	r1
    3c76:	2f 90       	pop	r2
    3c78:	3f 90       	pop	r3
    3c7a:	4f 90       	pop	r4
    3c7c:	5f 90       	pop	r5
    3c7e:	6f 90       	pop	r6
    3c80:	7f 90       	pop	r7
    3c82:	8f 90       	pop	r8
    3c84:	9f 90       	pop	r9
    3c86:	af 90       	pop	r10
    3c88:	bf 90       	pop	r11
    3c8a:	cf 90       	pop	r12
    3c8c:	df 90       	pop	r13
    3c8e:	ef 90       	pop	r14
    3c90:	ff 90       	pop	r15
    3c92:	0f 91       	pop	r16
    3c94:	1f 91       	pop	r17
    3c96:	2f 91       	pop	r18
    3c98:	3f 91       	pop	r19
    3c9a:	4f 91       	pop	r20
    3c9c:	5f 91       	pop	r21
    3c9e:	6f 91       	pop	r22
    3ca0:	7f 91       	pop	r23
    3ca2:	8f 91       	pop	r24
    3ca4:	9f 91       	pop	r25
    3ca6:	af 91       	pop	r26
    3ca8:	bf 91       	pop	r27
    3caa:	cf 91       	pop	r28
    3cac:	df 91       	pop	r29
    3cae:	ef 91       	pop	r30
    3cb0:	ff 91       	pop	r31
    3cb2:	ff bf       	out	0x3f, r31	; 63
    3cb4:	ff 91       	pop	r31
    3cb6:	18 95       	reti

	 os_error("os_startScheduler() terminated against all odds - scary stuff...");
    3cb8:	89 ea       	ldi	r24, 0xA9	; 169
    3cba:	9a e0       	ldi	r25, 0x0A	; 10
    3cbc:	9f 93       	push	r25
    3cbe:	8f 93       	push	r24
    3cc0:	f6 de       	rcall	.-532    	; 0x3aae <os_errorPstr>
	 // You should never get here, as the scheduler must not terminate
	

}
    3cc2:	0f 90       	pop	r0
    3cc4:	0f 90       	pop	r0
    3cc6:	08 95       	ret

00003cc8 <os_getStackChecksum>:
	// Be aware of cases where the whole stack is less than 10 bytes
	// (although this actually won't happen due to the call to saveContext() beforehand, which always puts 33 bytes on to the stack already)
	
	
	stack_checksum_t checksum = 0;
	uint8_t *stack_bottom = (uint8_t *)(uintptr_t)PROCESS_STACK_BOTTOM(pid);
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	25 e3       	ldi	r18, 0x35	; 53
    3ccc:	33 e0       	ldi	r19, 0x03	; 3
    3cce:	82 9f       	mul	r24, r18
    3cd0:	a0 01       	movw	r20, r0
    3cd2:	83 9f       	mul	r24, r19
    3cd4:	50 0d       	add	r21, r0
    3cd6:	92 9f       	mul	r25, r18
    3cd8:	50 0d       	add	r21, r0
    3cda:	11 24       	eor	r1, r1
    3cdc:	2f e1       	ldi	r18, 0x1F	; 31
    3cde:	31 e2       	ldi	r19, 0x21	; 33
    3ce0:	24 1b       	sub	r18, r20
    3ce2:	35 0b       	sbc	r19, r21
	uint8_t *stack_top = (uint8_t *)(uintptr_t)(os_processes[pid].sp.as_int);
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	ee 0f       	add	r30, r30
    3ce8:	ff 1f       	adc	r31, r31
    3cea:	e8 0f       	add	r30, r24
    3cec:	f9 1f       	adc	r31, r25
    3cee:	ee 0f       	add	r30, r30
    3cf0:	ff 1f       	adc	r31, r31
    3cf2:	e3 56       	subi	r30, 0x63	; 99
    3cf4:	fa 4f       	sbci	r31, 0xFA	; 250
    3cf6:	42 81       	ldd	r20, Z+2	; 0x02
    3cf8:	53 81       	ldd	r21, Z+3	; 0x03
	uint8_t stack_size = stack_bottom - stack_top;
    3cfa:	24 1b       	sub	r18, r20

	if (stack_size >= 16)
    3cfc:	20 31       	cpi	r18, 0x10	; 16
    3cfe:	78 f4       	brcc	.+30     	; 0x3d1e <os_getStackChecksum+0x56>
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	80 e0       	ldi	r24, 0x00	; 0
    3d04:	17 c0       	rjmp	.+46     	; 0x3d34 <os_getStackChecksum+0x6c>
	{
		for (uint8_t i = 0; i < 16; i++)
		{
			checksum ^= stack_top[i * (stack_size / 16)];
    3d06:	32 2f       	mov	r19, r18
    3d08:	32 95       	swap	r19
    3d0a:	3f 70       	andi	r19, 0x0F	; 15
    3d0c:	fa 01       	movw	r30, r20
    3d0e:	39 9f       	mul	r19, r25
    3d10:	e0 0d       	add	r30, r0
    3d12:	f1 1d       	adc	r31, r1
    3d14:	11 24       	eor	r1, r1
    3d16:	30 81       	ld	r19, Z
    3d18:	83 27       	eor	r24, r19
	uint8_t *stack_top = (uint8_t *)(uintptr_t)(os_processes[pid].sp.as_int);
	uint8_t stack_size = stack_bottom - stack_top;

	if (stack_size >= 16)
	{
		for (uint8_t i = 0; i < 16; i++)
    3d1a:	9f 5f       	subi	r25, 0xFF	; 255
    3d1c:	02 c0       	rjmp	.+4      	; 0x3d22 <os_getStackChecksum+0x5a>
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	80 e0       	ldi	r24, 0x00	; 0
    3d22:	90 31       	cpi	r25, 0x10	; 16
    3d24:	80 f3       	brcs	.-32     	; 0x3d06 <os_getStackChecksum+0x3e>
    3d26:	08 95       	ret
	}
	else
	{
		for (uint8_t i = 0; i < stack_size; i++)
		{
			checksum ^= stack_top[i];
    3d28:	fa 01       	movw	r30, r20
    3d2a:	e9 0f       	add	r30, r25
    3d2c:	f1 1d       	adc	r31, r1
    3d2e:	30 81       	ld	r19, Z
    3d30:	83 27       	eor	r24, r19
			checksum ^= stack_top[i * (stack_size / 16)];
		}
	}
	else
	{
		for (uint8_t i = 0; i < stack_size; i++)
    3d32:	9f 5f       	subi	r25, 0xFF	; 255
    3d34:	92 17       	cp	r25, r18
    3d36:	c0 f3       	brcs	.-16     	; 0x3d28 <os_getStackChecksum+0x60>
		}
	}

	return checksum;

}
    3d38:	08 95       	ret

00003d3a <os_exec>:
 *                  strategies.
 *  \return The index of the new process (throws error on failure and returns
 *          INVALID_PROCESS as specified in defines.h).
 */
process_id_t os_exec(program_id_t programID, priority_t priority)
{
    3d3a:	ef 92       	push	r14
    3d3c:	ff 92       	push	r15
    3d3e:	0f 93       	push	r16
    3d40:	1f 93       	push	r17
    3d42:	cf 93       	push	r28
    3d44:	df 93       	push	r29
    3d46:	e8 2e       	mov	r14, r24
    3d48:	f6 2e       	mov	r15, r22
	// 1. Enter a critical section
	os_enterCriticalSection();
    3d4a:	36 df       	rcall	.-404    	; 0x3bb8 <os_enterCriticalSection>

	// 2. Find free slot in os_processes array
	int free_slot = -1;

	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    3d4c:	c0 e0       	ldi	r28, 0x00	; 0
    3d4e:	d0 e0       	ldi	r29, 0x00	; 0
    3d50:	0d c0       	rjmp	.+26     	; 0x3d6c <os_exec+0x32>
	{
		if (os_processes[i].state == OS_PS_UNUSED)
    3d52:	fe 01       	movw	r30, r28
    3d54:	ee 0f       	add	r30, r30
    3d56:	ff 1f       	adc	r31, r31
    3d58:	ec 0f       	add	r30, r28
    3d5a:	fd 1f       	adc	r31, r29
    3d5c:	ee 0f       	add	r30, r30
    3d5e:	ff 1f       	adc	r31, r31
    3d60:	e3 56       	subi	r30, 0x63	; 99
    3d62:	fa 4f       	sbci	r31, 0xFA	; 250
    3d64:	81 81       	ldd	r24, Z+1	; 0x01
    3d66:	88 23       	and	r24, r24
    3d68:	31 f0       	breq	.+12     	; 0x3d76 <os_exec+0x3c>
	os_enterCriticalSection();

	// 2. Find free slot in os_processes array
	int free_slot = -1;

	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    3d6a:	21 96       	adiw	r28, 0x01	; 1
    3d6c:	c8 30       	cpi	r28, 0x08	; 8
    3d6e:	d1 05       	cpc	r29, r1
    3d70:	84 f3       	brlt	.-32     	; 0x3d52 <os_exec+0x18>
{
	// 1. Enter a critical section
	os_enterCriticalSection();

	// 2. Find free slot in os_processes array
	int free_slot = -1;
    3d72:	cf ef       	ldi	r28, 0xFF	; 255
    3d74:	df ef       	ldi	r29, 0xFF	; 255
			break;
		}
	}


	if (free_slot == -1)
    3d76:	cf 3f       	cpi	r28, 0xFF	; 255
    3d78:	8f ef       	ldi	r24, 0xFF	; 255
    3d7a:	d8 07       	cpc	r29, r24
    3d7c:	81 f4       	brne	.+32     	; 0x3d9e <os_exec+0x64>
	{
		// os_error("No free slot available");
		terminal_log_printf_p(PSTR("os_exec() -> "), PSTR("No free slot available\n"));
    3d7e:	8e e0       	ldi	r24, 0x0E	; 14
    3d80:	9b e0       	ldi	r25, 0x0B	; 11
    3d82:	9f 93       	push	r25
    3d84:	8f 93       	push	r24
    3d86:	80 e0       	ldi	r24, 0x00	; 0
    3d88:	9b e0       	ldi	r25, 0x0B	; 11
    3d8a:	9f 93       	push	r25
    3d8c:	8f 93       	push	r24
		os_leaveCriticalSection();
    3d8e:	85 db       	rcall	.-2294   	; 0x349a <terminal_log_printf_p>
    3d90:	32 df       	rcall	.-412    	; 0x3bf6 <os_leaveCriticalSection>
		return INVALID_PROCESS;
    3d92:	0f 90       	pop	r0
    3d94:	0f 90       	pop	r0
    3d96:	0f 90       	pop	r0
    3d98:	0f 90       	pop	r0
    3d9a:	1f ef       	ldi	r17, 0xFF	; 255
    3d9c:	6b c0       	rjmp	.+214    	; 0x3e74 <os_exec+0x13a>
		os_leaveCriticalSection();
		return INVALID_PROCESS;
	}

	// 4. Save ProgramID and the process' state (and some more)
	os_processes[free_slot].progID = programID;
    3d9e:	8e 01       	movw	r16, r28
    3da0:	00 0f       	add	r16, r16
    3da2:	11 1f       	adc	r17, r17
    3da4:	0c 0f       	add	r16, r28
    3da6:	1d 1f       	adc	r17, r29
    3da8:	00 0f       	add	r16, r16
    3daa:	11 1f       	adc	r17, r17
    3dac:	03 56       	subi	r16, 0x63	; 99
    3dae:	1a 4f       	sbci	r17, 0xFA	; 250
    3db0:	d8 01       	movw	r26, r16
    3db2:	ec 92       	st	X, r14
	os_processes[free_slot].state = OS_PS_READY;
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	11 96       	adiw	r26, 0x01	; 1
    3db8:	8c 93       	st	X, r24
    3dba:	11 97       	sbiw	r26, 0x01	; 1
	os_processes[free_slot].priority = priority;
    3dbc:	14 96       	adiw	r26, 0x04	; 4
    3dbe:	fc 92       	st	X, r15
    3dc0:	14 97       	sbiw	r26, 0x04	; 4

	// Initialize the stack pointer
	os_processes[free_slot].sp.as_int = PROCESS_STACK_BOTTOM(free_slot);
    3dc2:	85 e3       	ldi	r24, 0x35	; 53
    3dc4:	93 e0       	ldi	r25, 0x03	; 3
    3dc6:	c8 9f       	mul	r28, r24
    3dc8:	90 01       	movw	r18, r0
    3dca:	c9 9f       	mul	r28, r25
    3dcc:	30 0d       	add	r19, r0
    3dce:	d8 9f       	mul	r29, r24
    3dd0:	30 0d       	add	r19, r0
    3dd2:	11 24       	eor	r1, r1
    3dd4:	8f e1       	ldi	r24, 0x1F	; 31
    3dd6:	91 e2       	ldi	r25, 0x21	; 33
    3dd8:	7c 01       	movw	r14, r24
    3dda:	e2 1a       	sub	r14, r18
    3ddc:	f3 0a       	sbc	r15, r19

	// 5.1 push the address of the function to the stack
	// Note for task 2: use address of os_dispatcher instead

	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)(addressOfProgram(function));
    3dde:	c7 01       	movw	r24, r14
    3de0:	01 97       	sbiw	r24, 0x01	; 1
    3de2:	13 96       	adiw	r26, 0x03	; 3
    3de4:	9c 93       	st	X, r25
    3de6:	8e 93       	st	-X, r24
    3de8:	12 97       	sbiw	r26, 0x02	; 2
    3dea:	82 ee       	ldi	r24, 0xE2	; 226
    3dec:	90 e2       	ldi	r25, 0x20	; 32
    3dee:	a8 de       	rcall	.-688    	; 0x3b40 <addressOfProgram>
    3df0:	f7 01       	movw	r30, r14
    3df2:	60 83       	st	Z, r22
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 8));
    3df4:	d8 01       	movw	r26, r16
    3df6:	12 96       	adiw	r26, 0x02	; 2
    3df8:	ed 91       	ld	r30, X+
    3dfa:	fc 91       	ld	r31, X
    3dfc:	13 97       	sbiw	r26, 0x03	; 3
    3dfe:	9f 01       	movw	r18, r30
    3e00:	21 50       	subi	r18, 0x01	; 1
    3e02:	31 09       	sbc	r19, r1
    3e04:	13 96       	adiw	r26, 0x03	; 3
    3e06:	3c 93       	st	X, r19
    3e08:	2e 93       	st	-X, r18
    3e0a:	12 97       	sbiw	r26, 0x02	; 2
    3e0c:	70 83       	st	Z, r23
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 16));
    3e0e:	12 96       	adiw	r26, 0x02	; 2
    3e10:	ed 91       	ld	r30, X+
    3e12:	fc 91       	ld	r31, X
    3e14:	13 97       	sbiw	r26, 0x03	; 3
    3e16:	9f 01       	movw	r18, r30
    3e18:	21 50       	subi	r18, 0x01	; 1
    3e1a:	31 09       	sbc	r19, r1
    3e1c:	13 96       	adiw	r26, 0x03	; 3
    3e1e:	3c 93       	st	X, r19
    3e20:	2e 93       	st	-X, r18
    3e22:	12 97       	sbiw	r26, 0x02	; 2
    3e24:	80 83       	st	Z, r24

	// 5.2 leave space on the process stack for register entries
	for (uint8_t i = 0; i < 33; i++)
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	12 c0       	rjmp	.+36     	; 0x3e4e <os_exec+0x114>
	{
		*os_processes[free_slot].sp.as_ptr-- = 0;
    3e2a:	fe 01       	movw	r30, r28
    3e2c:	ee 0f       	add	r30, r30
    3e2e:	ff 1f       	adc	r31, r31
    3e30:	ec 0f       	add	r30, r28
    3e32:	fd 1f       	adc	r31, r29
    3e34:	ee 0f       	add	r30, r30
    3e36:	ff 1f       	adc	r31, r31
    3e38:	e3 56       	subi	r30, 0x63	; 99
    3e3a:	fa 4f       	sbci	r31, 0xFA	; 250
    3e3c:	a2 81       	ldd	r26, Z+2	; 0x02
    3e3e:	b3 81       	ldd	r27, Z+3	; 0x03
    3e40:	9d 01       	movw	r18, r26
    3e42:	21 50       	subi	r18, 0x01	; 1
    3e44:	31 09       	sbc	r19, r1
    3e46:	33 83       	std	Z+3, r19	; 0x03
    3e48:	22 83       	std	Z+2, r18	; 0x02
    3e4a:	1c 92       	st	X, r1
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)(addressOfProgram(function));
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 8));
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 16));

	// 5.2 leave space on the process stack for register entries
	for (uint8_t i = 0; i < 33; i++)
    3e4c:	8f 5f       	subi	r24, 0xFF	; 255
    3e4e:	81 32       	cpi	r24, 0x21	; 33
	{
		*os_processes[free_slot].sp.as_ptr-- = 0;
	}

	// For task 2: Save the stack checksum
	os_processes[free_slot].checksum = os_getStackChecksum(free_slot);
    3e50:	60 f3       	brcs	.-40     	; 0x3e2a <os_exec+0xf0>
    3e52:	1c 2f       	mov	r17, r28
    3e54:	8c 2f       	mov	r24, r28
    3e56:	38 df       	rcall	.-400    	; 0x3cc8 <os_getStackChecksum>
    3e58:	fe 01       	movw	r30, r28
    3e5a:	ee 0f       	add	r30, r30
    3e5c:	ff 1f       	adc	r31, r31
    3e5e:	ec 0f       	add	r30, r28
    3e60:	fd 1f       	adc	r31, r29
    3e62:	ee 0f       	add	r30, r30
    3e64:	ff 1f       	adc	r31, r31
    3e66:	e3 56       	subi	r30, 0x63	; 99

	os_resetProcessSchedulingInformation(os_getSchedulingStrategy(), free_slot);
    3e68:	fa 4f       	sbci	r31, 0xFA	; 250
    3e6a:	85 83       	std	Z+5, r24	; 0x05
    3e6c:	a2 de       	rcall	.-700    	; 0x3bb2 <os_getSchedulingStrategy>
    3e6e:	6c 2f       	mov	r22, r28
    3e70:	01 d2       	rcall	.+1026   	; 0x4274 <os_resetProcessSchedulingInformation>

	// 6. Leave Critical Section
	os_leaveCriticalSection();
    3e72:	c1 de       	rcall	.-638    	; 0x3bf6 <os_leaveCriticalSection>
    3e74:	81 2f       	mov	r24, r17
	return free_slot;
	
	
	

}
    3e76:	df 91       	pop	r29
    3e78:	cf 91       	pop	r28
    3e7a:	1f 91       	pop	r17
    3e7c:	0f 91       	pop	r16
    3e7e:	ff 90       	pop	r15
    3e80:	ef 90       	pop	r14
    3e82:	08 95       	ret

00003e84 <os_initScheduler>:
    3e84:	cf 93       	push	r28
 *  In order for the scheduler to work properly, it must have the chance to
 *  initialize its internal data-structures and register and start the idle
 *  program.
 */
void os_initScheduler(void)
{
    3e86:	df 93       	push	r29
	// 1.
	// As the processes are just being initialized, all slots should be unused so far.
	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	0b c0       	rjmp	.+22     	; 0x3ea4 <os_initScheduler+0x20>
	{
		os_processes[i].state = OS_PS_UNUSED;
    3e8e:	fc 01       	movw	r30, r24
    3e90:	ee 0f       	add	r30, r30
    3e92:	ff 1f       	adc	r31, r31
    3e94:	e8 0f       	add	r30, r24
    3e96:	f9 1f       	adc	r31, r25
    3e98:	ee 0f       	add	r30, r30
    3e9a:	ff 1f       	adc	r31, r31
    3e9c:	e3 56       	subi	r30, 0x63	; 99
    3e9e:	fa 4f       	sbci	r31, 0xFA	; 250
    3ea0:	11 82       	std	Z+1, r1	; 0x01
 */
void os_initScheduler(void)
{
	// 1.
	// As the processes are just being initialized, all slots should be unused so far.
	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    3ea2:	01 96       	adiw	r24, 0x01	; 1
    3ea4:	88 30       	cpi	r24, 0x08	; 8
    3ea6:	91 05       	cpc	r25, r1
    3ea8:	94 f3       	brlt	.-28     	; 0x3e8e <os_initScheduler+0xa>
    3eaa:	c0 e0       	ldi	r28, 0x00	; 0
    3eac:	d0 e0       	ldi	r29, 0x00	; 0
    3eae:	08 c0       	rjmp	.+16     	; 0x3ec0 <os_initScheduler+0x3c>
	}

	// Start all registered programs, which a flagged as autostart (i.e. call os_exec on them).
	for (int i = 0; i < MAX_NUMBER_OF_PROGRAMS; i++)
	{
		if (os_checkAutostartProgram(i))
    3eb0:	8c 2f       	mov	r24, r28
    3eb2:	4b de       	rcall	.-874    	; 0x3b4a <os_checkAutostartProgram>
    3eb4:	88 23       	and	r24, r24
    3eb6:	19 f0       	breq	.+6      	; 0x3ebe <os_initScheduler+0x3a>
		{
			os_exec(i, DEFAULT_PRIORITY);
    3eb8:	62 e0       	ldi	r22, 0x02	; 2
    3eba:	8c 2f       	mov	r24, r28
    3ebc:	3e df       	rcall	.-388    	; 0x3d3a <os_exec>
	{
		os_processes[i].state = OS_PS_UNUSED;
	}

	// Start all registered programs, which a flagged as autostart (i.e. call os_exec on them).
	for (int i = 0; i < MAX_NUMBER_OF_PROGRAMS; i++)
    3ebe:	21 96       	adiw	r28, 0x01	; 1
    3ec0:	c0 31       	cpi	r28, 0x10	; 16
    3ec2:	d1 05       	cpc	r29, r1
    3ec4:	ac f3       	brlt	.-22     	; 0x3eb0 <os_initScheduler+0x2c>
		{
			os_exec(i, DEFAULT_PRIORITY);
		}

	}
	os_resetSchedulingInformation(currSchedStrat);
    3ec6:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <currSchedStrat>
    3eca:	fc d1       	rcall	.+1016   	; 0x42c4 <os_resetSchedulingInformation>

	delayMs(3000);
    3ecc:	88 eb       	ldi	r24, 0xB8	; 184
    3ece:	9b e0       	ldi	r25, 0x0B	; 11
    3ed0:	46 dd       	rcall	.-1396   	; 0x395e <delayMs>
    3ed2:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <os_programs>

	// Uncomment:
	assert(os_programs[0] != NULL, "There is no idle proc");
    3ed6:	30 91 ce 05 	lds	r19, 0x05CE	; 0x8005ce <os_programs+0x1>
    3eda:	8a ee       	ldi	r24, 0xEA	; 234
    3edc:	9a e0       	ldi	r25, 0x0A	; 10
    3ede:	9f 93       	push	r25
    3ee0:	8f 93       	push	r24
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	23 2b       	or	r18, r19
    3ee6:	09 f4       	brne	.+2      	; 0x3eea <os_initScheduler+0x66>
    3ee8:	80 e0       	ldi	r24, 0x00	; 0
    3eea:	8f 93       	push	r24
    3eec:	65 dd       	rcall	.-1334   	; 0x39b8 <assertPstr>
    3eee:	0f 90       	pop	r0
}
    3ef0:	0f 90       	pop	r0
    3ef2:	0f 90       	pop	r0
    3ef4:	df 91       	pop	r29
    3ef6:	cf 91       	pop	r28
    3ef8:	08 95       	ret

00003efa <os_isStackInBounds>:
    3efa:	8f 92       	push	r8
 *
 *  \param pid The ID of the process for which the stack pointer has to be checked.
 *  \return True if the stack pointer is still in its bounds.
 */
bool os_isStackInBounds(process_id_t pid)
{
    3efc:	9f 92       	push	r9
    3efe:	af 92       	push	r10
    3f00:	bf 92       	push	r11
    3f02:	cf 92       	push	r12
    3f04:	df 92       	push	r13
    3f06:	ef 92       	push	r14
    3f08:	ff 92       	push	r15
    3f0a:	0f 93       	push	r16
    3f0c:	1f 93       	push	r17
	if (os_processes[pid].sp.as_int > PROCESS_STACK_BOTTOM(pid) || os_processes[pid].sp.as_int < PROCESS_STACK_BOTTOM(pid) - STACK_SIZE_PROC)
    3f0e:	48 2f       	mov	r20, r24
    3f10:	50 e0       	ldi	r21, 0x00	; 0
    3f12:	fa 01       	movw	r30, r20
    3f14:	ee 0f       	add	r30, r30
    3f16:	ff 1f       	adc	r31, r31
    3f18:	e4 0f       	add	r30, r20
    3f1a:	f5 1f       	adc	r31, r21
    3f1c:	ee 0f       	add	r30, r30
    3f1e:	ff 1f       	adc	r31, r31
    3f20:	e3 56       	subi	r30, 0x63	; 99
    3f22:	fa 4f       	sbci	r31, 0xFA	; 250
    3f24:	c2 80       	ldd	r12, Z+2	; 0x02
    3f26:	d3 80       	ldd	r13, Z+3	; 0x03
    3f28:	e1 2c       	mov	r14, r1
    3f2a:	f1 2c       	mov	r15, r1
    3f2c:	9a 01       	movw	r18, r20
    3f2e:	a5 e3       	ldi	r26, 0x35	; 53
    3f30:	b3 e0       	ldi	r27, 0x03	; 3
    3f32:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__umulhisi3>
    3f36:	0f e1       	ldi	r16, 0x1F	; 31
    3f38:	11 e2       	ldi	r17, 0x21	; 33
    3f3a:	20 e0       	ldi	r18, 0x00	; 0
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	06 1b       	sub	r16, r22
    3f40:	17 0b       	sbc	r17, r23
    3f42:	28 0b       	sbc	r18, r24
    3f44:	39 0b       	sbc	r19, r25
    3f46:	0c 15       	cp	r16, r12
    3f48:	1d 05       	cpc	r17, r13
    3f4a:	2e 05       	cpc	r18, r14
    3f4c:	3f 05       	cpc	r19, r15
    3f4e:	88 f0       	brcs	.+34     	; 0x3f72 <os_isStackInBounds+0x78>
    3f50:	0a ee       	ldi	r16, 0xEA	; 234
    3f52:	1d e1       	ldi	r17, 0x1D	; 29
    3f54:	20 e0       	ldi	r18, 0x00	; 0
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	48 01       	movw	r8, r16
    3f5a:	59 01       	movw	r10, r18
    3f5c:	86 1a       	sub	r8, r22
    3f5e:	97 0a       	sbc	r9, r23
    3f60:	a8 0a       	sbc	r10, r24
    3f62:	b9 0a       	sbc	r11, r25
    3f64:	c8 14       	cp	r12, r8
    3f66:	d9 04       	cpc	r13, r9
    3f68:	ea 04       	cpc	r14, r10
    3f6a:	fb 04       	cpc	r15, r11
    3f6c:	20 f4       	brcc	.+8      	; 0x3f76 <os_isStackInBounds+0x7c>
	{
		return false;
    3f6e:	80 e0       	ldi	r24, 0x00	; 0
    3f70:	03 c0       	rjmp	.+6      	; 0x3f78 <os_isStackInBounds+0x7e>
    3f72:	80 e0       	ldi	r24, 0x00	; 0
    3f74:	01 c0       	rjmp	.+2      	; 0x3f78 <os_isStackInBounds+0x7e>
	}
	return true;
    3f76:	81 e0       	ldi	r24, 0x01	; 1
}
    3f78:	1f 91       	pop	r17
    3f7a:	0f 91       	pop	r16
    3f7c:	ff 90       	pop	r15
    3f7e:	ef 90       	pop	r14
    3f80:	df 90       	pop	r13
    3f82:	cf 90       	pop	r12
    3f84:	bf 90       	pop	r11
    3f86:	af 90       	pop	r10
    3f88:	9f 90       	pop	r9
    3f8a:	8f 90       	pop	r8
    3f8c:	08 95       	ret

00003f8e <__vector_13>:
ISR(TIMER2_COMPA_vect)
{
	// 1. Is implicitly done

	// 2. Save runtime-context of recently current process using the well-known macro
	saveContext();
    3f8e:	ff 93       	push	r31
    3f90:	ff b7       	in	r31, 0x3f	; 63
    3f92:	ff 93       	push	r31
    3f94:	ef 93       	push	r30
    3f96:	df 93       	push	r29
    3f98:	cf 93       	push	r28
    3f9a:	bf 93       	push	r27
    3f9c:	af 93       	push	r26
    3f9e:	9f 93       	push	r25
    3fa0:	8f 93       	push	r24
    3fa2:	7f 93       	push	r23
    3fa4:	6f 93       	push	r22
    3fa6:	5f 93       	push	r21
    3fa8:	4f 93       	push	r20
    3faa:	3f 93       	push	r19
    3fac:	2f 93       	push	r18
    3fae:	1f 93       	push	r17
    3fb0:	0f 93       	push	r16
    3fb2:	ff 92       	push	r15
    3fb4:	ef 92       	push	r14
    3fb6:	df 92       	push	r13
    3fb8:	cf 92       	push	r12
    3fba:	bf 92       	push	r11
    3fbc:	af 92       	push	r10
    3fbe:	9f 92       	push	r9
    3fc0:	8f 92       	push	r8
    3fc2:	7f 92       	push	r7
    3fc4:	6f 92       	push	r6
    3fc6:	5f 92       	push	r5
    3fc8:	4f 92       	push	r4
    3fca:	3f 92       	push	r3
    3fcc:	2f 92       	push	r2
    3fce:	1f 92       	push	r1
    3fd0:	11 24       	eor	r1, r1
    3fd2:	0f 92       	push	r0

	// 3. Save stack pointer of current process
	os_processes[currentProc].sp.as_int = SP;
    3fd4:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <currentProc>
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	2d b7       	in	r18, 0x3d	; 61
    3fdc:	3e b7       	in	r19, 0x3e	; 62
    3fde:	fc 01       	movw	r30, r24
    3fe0:	ee 0f       	add	r30, r30
    3fe2:	ff 1f       	adc	r31, r31
    3fe4:	e8 0f       	add	r30, r24
    3fe6:	f9 1f       	adc	r31, r25
    3fe8:	ee 0f       	add	r30, r30
    3fea:	ff 1f       	adc	r31, r31
    3fec:	e3 56       	subi	r30, 0x63	; 99
    3fee:	fa 4f       	sbci	r31, 0xFA	; 250
    3ff0:	33 83       	std	Z+3, r19	; 0x03
    3ff2:	22 83       	std	Z+2, r18	; 0x02

	// 4. Set stack pointer onto ISR-Stack
	SP = BOTTOM_OF_ISR_STACK;
    3ff4:	8f ed       	ldi	r24, 0xDF	; 223
    3ff6:	91 e2       	ldi	r25, 0x21	; 33
    3ff8:	9e bf       	out	0x3e, r25	; 62
    3ffa:	8d bf       	out	0x3d, r24	; 61

	// 5. Set process state to ready
	if (os_processes[currentProc].state == OS_PS_RUNNING)
    3ffc:	10 91 28 05 	lds	r17, 0x0528	; 0x800528 <currentProc>
    4000:	c1 2f       	mov	r28, r17
    4002:	d0 e0       	ldi	r29, 0x00	; 0
    4004:	fe 01       	movw	r30, r28
    4006:	ee 0f       	add	r30, r30
    4008:	ff 1f       	adc	r31, r31
    400a:	ec 0f       	add	r30, r28
    400c:	fd 1f       	adc	r31, r29
    400e:	ee 0f       	add	r30, r30
    4010:	ff 1f       	adc	r31, r31
    4012:	e3 56       	subi	r30, 0x63	; 99
    4014:	fa 4f       	sbci	r31, 0xFA	; 250
    4016:	81 81       	ldd	r24, Z+1	; 0x01
    4018:	82 30       	cpi	r24, 0x02	; 2
    401a:	59 f4       	brne	.+22     	; 0x4032 <__vector_13+0xa4>
	{
		os_processes[currentProc].state = OS_PS_READY;
    401c:	fe 01       	movw	r30, r28
    401e:	ee 0f       	add	r30, r30
    4020:	ff 1f       	adc	r31, r31
    4022:	ec 0f       	add	r30, r28
    4024:	fd 1f       	adc	r31, r29
    4026:	ee 0f       	add	r30, r30
    4028:	ff 1f       	adc	r31, r31
    402a:	e3 56       	subi	r30, 0x63	; 99
    402c:	fa 4f       	sbci	r31, 0xFA	; 250
    402e:	81 e0       	ldi	r24, 0x01	; 1
    4030:	81 83       	std	Z+1, r24	; 0x01
	}
	// Note for task 2: Only set to ready if it is currently running because of os_kill

	// In task 2: Save the processes stack checksum
	os_processes[currentProc].checksum = os_getStackChecksum(currentProc);
    4032:	81 2f       	mov	r24, r17
    4034:	49 de       	rcall	.-878    	; 0x3cc8 <os_getStackChecksum>
    4036:	9e 01       	movw	r18, r28
    4038:	22 0f       	add	r18, r18
    403a:	33 1f       	adc	r19, r19
    403c:	c2 0f       	add	r28, r18
    403e:	d3 1f       	adc	r29, r19
    4040:	cc 0f       	add	r28, r28
    4042:	dd 1f       	adc	r29, r29
    4044:	c3 56       	subi	r28, 0x63	; 99
    4046:	da 4f       	sbci	r29, 0xFA	; 250
    4048:	8d 83       	std	Y+5, r24	; 0x05

	// In task 2: Check if the stack pointer has an invalid value
	if (!os_isStackInBounds(currentProc))
    404a:	81 2f       	mov	r24, r17
    404c:	56 df       	rcall	.-340    	; 0x3efa <os_isStackInBounds>
    404e:	81 11       	cpse	r24, r1
    4050:	0b c0       	rjmp	.+22     	; 0x4068 <__vector_13+0xda>
	{
		os_error("Stack pointer out of bounds in process %d", currentProc);
    4052:	1f 92       	push	r1
    4054:	1f 93       	push	r17
    4056:	86 e4       	ldi	r24, 0x46	; 70
    4058:	9b e0       	ldi	r25, 0x0B	; 11
    405a:	9f 93       	push	r25
    405c:	8f 93       	push	r24
    405e:	27 dd       	rcall	.-1458   	; 0x3aae <os_errorPstr>
    4060:	0f 90       	pop	r0
    4062:	0f 90       	pop	r0
    4064:	0f 90       	pop	r0
	}

	// 6. Find next process using the set scheduling strategy

	switch (os_getSchedulingStrategy())
    4066:	0f 90       	pop	r0
    4068:	a4 dd       	rcall	.-1208   	; 0x3bb2 <os_getSchedulingStrategy>
    406a:	88 23       	and	r24, r24
    406c:	19 f0       	breq	.+6      	; 0x4074 <__vector_13+0xe6>
    406e:	81 30       	cpi	r24, 0x01	; 1
    4070:	49 f0       	breq	.+18     	; 0x4084 <__vector_13+0xf6>
    4072:	10 c0       	rjmp	.+32     	; 0x4094 <__vector_13+0x106>
	{
		case OS_SS_ROUND_ROBIN:
		currentProc = os_scheduler_RoundRobin(os_processes, currentProc);
    4074:	60 91 28 05 	lds	r22, 0x0528	; 0x800528 <currentProc>
    4078:	8d e9       	ldi	r24, 0x9D	; 157
    407a:	95 e0       	ldi	r25, 0x05	; 5
    407c:	c1 d0       	rcall	.+386    	; 0x4200 <os_scheduler_RoundRobin>
    407e:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <currentProc>
		break;
		case OS_SS_DYNAMIC_PRIORITY_ROUND_ROBIN:
		currentProc = os_scheduler_DynamicPriorityRoundRobin(os_processes, currentProc);
    4082:	0a c0       	rjmp	.+20     	; 0x4098 <__vector_13+0x10a>
    4084:	60 91 28 05 	lds	r22, 0x0528	; 0x800528 <currentProc>
    4088:	8d e9       	ldi	r24, 0x9D	; 157
    408a:	95 e0       	ldi	r25, 0x05	; 5
    408c:	45 d1       	rcall	.+650    	; 0x4318 <os_scheduler_DynamicPriorityRoundRobin>
    408e:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <currentProc>
		break;
    4092:	02 c0       	rjmp	.+4      	; 0x4098 <__vector_13+0x10a>
		default:
		currentProc = 0;
    4094:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <currentProc>
		break;
	}

	// In task 2: Check if the checksum changed since the process was interrupted
	if (os_processes[currentProc].checksum != os_getStackChecksum(currentProc))
    4098:	c0 91 28 05 	lds	r28, 0x0528	; 0x800528 <currentProc>
    409c:	8c 2f       	mov	r24, r28
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	fc 01       	movw	r30, r24
    40a2:	ee 0f       	add	r30, r30
    40a4:	ff 1f       	adc	r31, r31
    40a6:	e8 0f       	add	r30, r24
    40a8:	f9 1f       	adc	r31, r25
    40aa:	ee 0f       	add	r30, r30
    40ac:	ff 1f       	adc	r31, r31
    40ae:	e3 56       	subi	r30, 0x63	; 99
    40b0:	fa 4f       	sbci	r31, 0xFA	; 250
    40b2:	d5 81       	ldd	r29, Z+5	; 0x05
    40b4:	8c 2f       	mov	r24, r28
    40b6:	08 de       	rcall	.-1008   	; 0x3cc8 <os_getStackChecksum>
    40b8:	d8 17       	cp	r29, r24
    40ba:	59 f0       	breq	.+22     	; 0x40d2 <__vector_13+0x144>
	{
		os_error("Checksum mismatch in process %d", currentProc);
    40bc:	1f 92       	push	r1
    40be:	cf 93       	push	r28
    40c0:	86 e2       	ldi	r24, 0x26	; 38
    40c2:	9b e0       	ldi	r25, 0x0B	; 11
    40c4:	9f 93       	push	r25
    40c6:	8f 93       	push	r24
    40c8:	f2 dc       	rcall	.-1564   	; 0x3aae <os_errorPstr>
    40ca:	0f 90       	pop	r0
    40cc:	0f 90       	pop	r0
    40ce:	0f 90       	pop	r0
    40d0:	0f 90       	pop	r0
    40d2:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <currentProc>
	}

	// 7. Set the state of the now chosen process to running
	os_processes[currentProc].state = OS_PS_RUNNING;
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	fc 01       	movw	r30, r24
    40da:	ee 0f       	add	r30, r30
    40dc:	ff 1f       	adc	r31, r31
    40de:	df 01       	movw	r26, r30
    40e0:	a8 0f       	add	r26, r24
    40e2:	b9 1f       	adc	r27, r25
    40e4:	aa 0f       	add	r26, r26
    40e6:	bb 1f       	adc	r27, r27
    40e8:	a3 56       	subi	r26, 0x63	; 99
    40ea:	ba 4f       	sbci	r27, 0xFA	; 250
    40ec:	22 e0       	ldi	r18, 0x02	; 2
    40ee:	11 96       	adiw	r26, 0x01	; 1
    40f0:	2c 93       	st	X, r18
    40f2:	11 97       	sbiw	r26, 0x01	; 1
    40f4:	fd 01       	movw	r30, r26

	// 8. Set SP to where it was when the resuming process was interrupted
	SP = os_processes[currentProc].sp.as_int;
    40f6:	82 81       	ldd	r24, Z+2	; 0x02
    40f8:	93 81       	ldd	r25, Z+3	; 0x03
    40fa:	9e bf       	out	0x3e, r25	; 62
    40fc:	8d bf       	out	0x3d, r24	; 61
    40fe:	0f 90       	pop	r0

	// 9. Restore runtime context using the well-known macro.
	// This will cause the process to continue where it was interrupted.
	// Any code after the macro won't be executed as it has an reti() instruction at the end.
	restoreContext();
    4100:	1f 90       	pop	r1
    4102:	2f 90       	pop	r2
    4104:	3f 90       	pop	r3
    4106:	4f 90       	pop	r4
    4108:	5f 90       	pop	r5
    410a:	6f 90       	pop	r6
    410c:	7f 90       	pop	r7
    410e:	8f 90       	pop	r8
    4110:	9f 90       	pop	r9
    4112:	af 90       	pop	r10
    4114:	bf 90       	pop	r11
    4116:	cf 90       	pop	r12
    4118:	df 90       	pop	r13
    411a:	ef 90       	pop	r14
    411c:	ff 90       	pop	r15
    411e:	0f 91       	pop	r16
    4120:	1f 91       	pop	r17
    4122:	2f 91       	pop	r18
    4124:	3f 91       	pop	r19
    4126:	4f 91       	pop	r20
    4128:	5f 91       	pop	r21
    412a:	6f 91       	pop	r22
    412c:	7f 91       	pop	r23
    412e:	8f 91       	pop	r24
    4130:	9f 91       	pop	r25
    4132:	af 91       	pop	r26
    4134:	bf 91       	pop	r27
    4136:	cf 91       	pop	r28
    4138:	df 91       	pop	r29
    413a:	ef 91       	pop	r30
    413c:	ff 91       	pop	r31
    413e:	ff bf       	out	0x3f, r31	; 63
    4140:	ff 91       	pop	r31
    4142:	18 95       	reti

00004144 <os_yield>:
    4144:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <criticalSectionCount>
/*!
 * Triggers scheduler to schedule another process.
 */
void os_yield()
{
	if (criticalSectionCount != 0)
    4148:	81 11       	cpse	r24, r1
    414a:	04 c0       	rjmp	.+8      	; 0x4154 <os_yield+0x10>
	{
		return;
	}
	cli();
    414c:	f8 94       	cli
	TCNT2 = 0;
    414e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
	TIMER2_COMPA_vect();
    4152:	1d cf       	rjmp	.-454    	; 0x3f8e <__vector_13>
    4154:	08 95       	ret

00004156 <os_kill>:
 *
 *  \param pid The process id of the process to be killed
 *  \return True, if the killing process was successful
 */
bool os_kill(process_id_t pid)
{
    4156:	cf 93       	push	r28
	
	// If the pid is invalid, return false
	if (pid >= MAX_NUMBER_OF_PROCESSES || pid == 0 || os_processes[pid].state == OS_PS_UNUSED)
    4158:	9f ef       	ldi	r25, 0xFF	; 255
    415a:	98 0f       	add	r25, r24
    415c:	97 30       	cpi	r25, 0x07	; 7
    415e:	68 f5       	brcc	.+90     	; 0x41ba <os_kill+0x64>
    4160:	28 2f       	mov	r18, r24
    4162:	30 e0       	ldi	r19, 0x00	; 0
    4164:	f9 01       	movw	r30, r18
    4166:	ee 0f       	add	r30, r30
    4168:	ff 1f       	adc	r31, r31
    416a:	e2 0f       	add	r30, r18
    416c:	f3 1f       	adc	r31, r19
    416e:	ee 0f       	add	r30, r30
    4170:	ff 1f       	adc	r31, r31
    4172:	e3 56       	subi	r30, 0x63	; 99
    4174:	fa 4f       	sbci	r31, 0xFA	; 250
    4176:	91 81       	ldd	r25, Z+1	; 0x01
    4178:	99 23       	and	r25, r25
    417a:	09 f1       	breq	.+66     	; 0x41be <os_kill+0x68>
    417c:	c8 2f       	mov	r28, r24
	{
		return false;
	}
	os_enterCriticalSection();
    417e:	1c dd       	rcall	.-1480   	; 0x3bb8 <os_enterCriticalSection>

	os_getProcessSlot(pid)->state = OS_PS_UNUSED;
    4180:	8c 2f       	mov	r24, r28
    4182:	03 dd       	rcall	.-1530   	; 0x3b8a <os_getProcessSlot>
    4184:	fc 01       	movw	r30, r24

	// Tidy up the scheduler
	// (Process needs to be removed from ready queue of DPRR)

	os_resetProcessSchedulingInformation(os_getSchedulingStrategy(), pid);
    4186:	11 82       	std	Z+1, r1	; 0x01
    4188:	14 dd       	rcall	.-1496   	; 0x3bb2 <os_getSchedulingStrategy>
    418a:	6c 2f       	mov	r22, r28

	// If the process kills itself, we mustn't return
	if (os_getCurrentProc() == pid)
    418c:	73 d0       	rcall	.+230    	; 0x4274 <os_resetProcessSchedulingInformation>
    418e:	0e dd       	rcall	.-1508   	; 0x3bac <os_getCurrentProc>
    4190:	c8 13       	cpse	r28, r24
	{
		criticalSectionCount = 1;
    4192:	0f c0       	rjmp	.+30     	; 0x41b2 <os_kill+0x5c>
    4194:	81 e0       	ldi	r24, 0x01	; 1
		os_leaveCriticalSection();
    4196:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <criticalSectionCount>
		sei();
    419a:	2d dd       	rcall	.-1446   	; 0x3bf6 <os_leaveCriticalSection>
		os_yield();
    419c:	78 94       	sei
    419e:	d2 df       	rcall	.-92     	; 0x4144 <os_yield>
		while (1)
			printf("Penis");
    41a0:	80 e2       	ldi	r24, 0x20	; 32
    41a2:	93 e0       	ldi	r25, 0x03	; 3
    41a4:	9f 93       	push	r25
    41a6:	8f 93       	push	r24
    41a8:	0e 94 bb 2b 	call	0x5776	; 0x5776 <printf>
    41ac:	0f 90       	pop	r0
	}
	os_leaveCriticalSection();
    41ae:	0f 90       	pop	r0
    41b0:	f7 cf       	rjmp	.-18     	; 0x41a0 <os_kill+0x4a>
	os_yield();
    41b2:	21 dd       	rcall	.-1470   	; 0x3bf6 <os_leaveCriticalSection>
    41b4:	c7 df       	rcall	.-114    	; 0x4144 <os_yield>

	return true;
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	03 c0       	rjmp	.+6      	; 0x41c0 <os_kill+0x6a>
{
	
	// If the pid is invalid, return false
	if (pid >= MAX_NUMBER_OF_PROCESSES || pid == 0 || os_processes[pid].state == OS_PS_UNUSED)
	{
		return false;
    41ba:	80 e0       	ldi	r24, 0x00	; 0
    41bc:	01 c0       	rjmp	.+2      	; 0x41c0 <os_kill+0x6a>
    41be:	80 e0       	ldi	r24, 0x00	; 0
	os_leaveCriticalSection();
	os_yield();

	return true;

}
    41c0:	cf 91       	pop	r28
    41c2:	08 95       	ret

000041c4 <os_dispatcher>:
 * This wrapper enables the possibility to perform a few necessary steps after the actual process
 * function has finished.
 */
void os_dispatcher()
{
	process_id_t currentProc = os_getCurrentProc();
    41c4:	f3 dc       	rcall	.-1562   	; 0x3bac <os_getCurrentProc>
    41c6:	c8 2f       	mov	r28, r24
	program_t *function = os_lookupProgramFunction(os_processes[currentProc].progID);
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	fc 01       	movw	r30, r24
    41cc:	ee 0f       	add	r30, r30
    41ce:	ff 1f       	adc	r31, r31
    41d0:	e8 0f       	add	r30, r24
    41d2:	f9 1f       	adc	r31, r25
    41d4:	ee 0f       	add	r30, r30
    41d6:	ff 1f       	adc	r31, r31
    41d8:	e3 56       	subi	r30, 0x63	; 99
    41da:	fa 4f       	sbci	r31, 0xFA	; 250
    41dc:	80 81       	ld	r24, Z
    41de:	c7 dc       	rcall	.-1650   	; 0x3b6e <os_lookupProgramFunction>
	
	if (function != NULL)
    41e0:	00 97       	sbiw	r24, 0x00	; 0
    41e2:	11 f0       	breq	.+4      	; 0x41e8 <os_dispatcher+0x24>
	function();
    41e4:	fc 01       	movw	r30, r24


	os_kill(currentProc);
    41e6:	19 95       	eicall
    41e8:	8c 2f       	mov	r24, r28


	os_yield();
    41ea:	b5 df       	rcall	.-150    	; 0x4156 <os_kill>
    41ec:	ab df       	rcall	.-170    	; 0x4144 <os_yield>
	while (1)
		printf("Penis");
    41ee:	80 e2       	ldi	r24, 0x20	; 32
    41f0:	93 e0       	ldi	r25, 0x03	; 3
    41f2:	9f 93       	push	r25
    41f4:	8f 93       	push	r24
    41f6:	0e 94 bb 2b 	call	0x5776	; 0x5776 <printf>
    41fa:	0f 90       	pop	r0
    41fc:	0f 90       	pop	r0
    41fe:	f7 cf       	rjmp	.-18     	; 0x41ee <os_dispatcher+0x2a>

00004200 <os_scheduler_RoundRobin>:
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the even strategy.
 */
process_id_t os_scheduler_RoundRobin(process_t const processes[], process_id_t current)
{
    4200:	cf 93       	push	r28
    4202:	df 93       	push	r29
    4204:	ec 01       	movw	r28, r24

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process

	// Return resulting process id
	
	process_id_t currentProc = os_getCurrentProc();
    4206:	d2 dc       	rcall	.-1628   	; 0x3bac <os_getCurrentProc>

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
    4208:	91 e0       	ldi	r25, 0x01	; 1
    420a:	98 0f       	add	r25, r24
    420c:	0f c0       	rjmp	.+30     	; 0x422c <os_scheduler_RoundRobin+0x2c>
	{
		if (processes[i].state == OS_PS_READY)
    420e:	29 2f       	mov	r18, r25
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	f9 01       	movw	r30, r18
    4214:	ee 0f       	add	r30, r30
    4216:	ff 1f       	adc	r31, r31
    4218:	e2 0f       	add	r30, r18
    421a:	f3 1f       	adc	r31, r19
    421c:	ee 0f       	add	r30, r30
    421e:	ff 1f       	adc	r31, r31
    4220:	ec 0f       	add	r30, r28
    4222:	fd 1f       	adc	r31, r29
    4224:	21 81       	ldd	r18, Z+1	; 0x01
    4226:	21 30       	cpi	r18, 0x01	; 1
    4228:	f9 f0       	breq	.+62     	; 0x4268 <os_scheduler_RoundRobin+0x68>
	// Return resulting process id
	
	process_id_t currentProc = os_getCurrentProc();

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
    422a:	9f 5f       	subi	r25, 0xFF	; 255
    422c:	98 30       	cpi	r25, 0x08	; 8
    422e:	78 f3       	brcs	.-34     	; 0x420e <os_scheduler_RoundRobin+0xe>
    4230:	91 e0       	ldi	r25, 0x01	; 1
    4232:	0f c0       	rjmp	.+30     	; 0x4252 <os_scheduler_RoundRobin+0x52>
			return i; // Return resulting process id
		}
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
	{
		if (processes[i].state == OS_PS_READY)
    4234:	29 2f       	mov	r18, r25
    4236:	30 e0       	ldi	r19, 0x00	; 0
    4238:	f9 01       	movw	r30, r18
    423a:	ee 0f       	add	r30, r30
    423c:	ff 1f       	adc	r31, r31
    423e:	e2 0f       	add	r30, r18
    4240:	f3 1f       	adc	r31, r19
    4242:	ee 0f       	add	r30, r30
    4244:	ff 1f       	adc	r31, r31
    4246:	ec 0f       	add	r30, r28
    4248:	fd 1f       	adc	r31, r29
    424a:	21 81       	ldd	r18, Z+1	; 0x01
    424c:	21 30       	cpi	r18, 0x01	; 1
    424e:	71 f0       	breq	.+28     	; 0x426c <os_scheduler_RoundRobin+0x6c>
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
		}
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
    4250:	9f 5f       	subi	r25, 0xFF	; 255
    4252:	49 2f       	mov	r20, r25
    4254:	50 e0       	ldi	r21, 0x00	; 0
    4256:	28 2f       	mov	r18, r24
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	2f 5f       	subi	r18, 0xFF	; 255
    425c:	3f 4f       	sbci	r19, 0xFF	; 255
    425e:	42 17       	cp	r20, r18
    4260:	53 07       	cpc	r21, r19
    4262:	44 f3       	brlt	.-48     	; 0x4234 <os_scheduler_RoundRobin+0x34>
			return i; // Return resulting process id
		}
	}

	// If no process except idle process ready, choose idle process
	return 0; // Return resulting process id
    4264:	80 e0       	ldi	r24, 0x00	; 0
    4266:	03 c0       	rjmp	.+6      	; 0x426e <os_scheduler_RoundRobin+0x6e>
	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
	{
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
    4268:	89 2f       	mov	r24, r25
    426a:	01 c0       	rjmp	.+2      	; 0x426e <os_scheduler_RoundRobin+0x6e>
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
	{
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
    426c:	89 2f       	mov	r24, r25
	}

	// If no process except idle process ready, choose idle process
	return 0; // Return resulting process id

}
    426e:	df 91       	pop	r29
    4270:	cf 91       	pop	r28
    4272:	08 95       	ret

00004274 <os_resetProcessSchedulingInformation>:
 *
 * \param strategy The scheduling strategy currently in use
 * \param id  The process slot to erase state for
 */
void os_resetProcessSchedulingInformation(scheduling_strategy_t strategy, process_id_t id)
{
    4274:	cf 93       	push	r28
    4276:	df 93       	push	r29
	
	if (strategy == OS_SS_ROUND_ROBIN)
    4278:	88 23       	and	r24, r24
    427a:	09 f1       	breq	.+66     	; 0x42be <os_resetProcessSchedulingInformation+0x4a>
    427c:	d6 2f       	mov	r29, r22
    427e:	c0 e0       	ldi	r28, 0x00	; 0
    4280:	09 c0       	rjmp	.+18     	; 0x4294 <os_resetProcessSchedulingInformation+0x20>
		return;
	}

	for (uint8_t i = OS_PRIO_HIGH; i <= OS_PRIO_LOW; i++)
	{
		rq_remove(&(schedulingInfo.queues_ready[i]), id);
    4282:	2b e0       	ldi	r18, 0x0B	; 11
    4284:	c2 9f       	mul	r28, r18
    4286:	c0 01       	movw	r24, r0
    4288:	11 24       	eor	r1, r1
    428a:	6d 2f       	mov	r22, r29
    428c:	81 51       	subi	r24, 0x11	; 17
    428e:	9a 4f       	sbci	r25, 0xFA	; 250
    4290:	22 d8       	rcall	.-4028   	; 0x32d6 <rq_remove>
	if (strategy == OS_SS_ROUND_ROBIN)
	{
		return;
	}

	for (uint8_t i = OS_PRIO_HIGH; i <= OS_PRIO_LOW; i++)
    4292:	cf 5f       	subi	r28, 0xFF	; 255
    4294:	c3 30       	cpi	r28, 0x03	; 3
    4296:	a8 f3       	brcs	.-22     	; 0x4282 <os_resetProcessSchedulingInformation+0xe>
	{
		rq_remove(&(schedulingInfo.queues_ready[i]), id);
	}
	if (os_getProcessSlot(id)->state == OS_PS_READY)
    4298:	8d 2f       	mov	r24, r29
    429a:	77 dc       	rcall	.-1810   	; 0x3b8a <os_getProcessSlot>
    429c:	fc 01       	movw	r30, r24
    429e:	81 81       	ldd	r24, Z+1	; 0x01
    42a0:	81 30       	cpi	r24, 0x01	; 1
    42a2:	69 f4       	brne	.+26     	; 0x42be <os_resetProcessSchedulingInformation+0x4a>
	rq_push(&(schedulingInfo.queues_ready[os_getProcessSlot(id)->priority]), id);
    42a4:	8d 2f       	mov	r24, r29
    42a6:	71 dc       	rcall	.-1822   	; 0x3b8a <os_getProcessSlot>
    42a8:	fc 01       	movw	r30, r24
    42aa:	84 81       	ldd	r24, Z+4	; 0x04
    42ac:	fb e0       	ldi	r31, 0x0B	; 11
    42ae:	8f 9f       	mul	r24, r31
    42b0:	c0 01       	movw	r24, r0
    42b2:	11 24       	eor	r1, r1
    42b4:	6d 2f       	mov	r22, r29
    42b6:	81 51       	subi	r24, 0x11	; 17
    42b8:	9a 4f       	sbci	r25, 0xFA	; 250
    42ba:	0e 94 46 19 	call	0x328c	; 0x328c <rq_push>
}
    42be:	df 91       	pop	r29
    42c0:	cf 91       	pop	r28
    42c2:	08 95       	ret

000042c4 <os_resetSchedulingInformation>:
 *  and is done when the strategy is changed through os_setSchedulingStrategy
 *
 * \param strategy  The strategy to reset information for
 */
void os_resetSchedulingInformation(scheduling_strategy_t strategy)
{
    42c4:	cf 93       	push	r28
	 if (strategy == OS_SS_ROUND_ROBIN)
    42c6:	88 23       	and	r24, r24
    42c8:	29 f1       	breq	.+74     	; 0x4314 <os_resetSchedulingInformation+0x50>
    42ca:	c0 e0       	ldi	r28, 0x00	; 0
    42cc:	09 c0       	rjmp	.+18     	; 0x42e0 <os_resetSchedulingInformation+0x1c>
	 else
	 //terminal_log_printf_p(PSTR("os_resetSchedulingInformation() -> "), PSTR("Resetting scheduling information\n"));

	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
	 {
		 rq_clear(&schedulingInfo.queues_ready[i]);
    42ce:	2b e0       	ldi	r18, 0x0B	; 11
    42d0:	c2 9f       	mul	r28, r18
    42d2:	c0 01       	movw	r24, r0
    42d4:	11 24       	eor	r1, r1
    42d6:	81 51       	subi	r24, 0x11	; 17
    42d8:	9a 4f       	sbci	r25, 0xFA	; 250
    42da:	0e 94 67 19 	call	0x32ce	; 0x32ce <rq_clear>
		return;
	 }
	 else
	 //terminal_log_printf_p(PSTR("os_resetSchedulingInformation() -> "), PSTR("Resetting scheduling information\n"));

	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
    42de:	cf 5f       	subi	r28, 0xFF	; 255
    42e0:	c3 30       	cpi	r28, 0x03	; 3
    42e2:	a8 f3       	brcs	.-22     	; 0x42ce <os_resetSchedulingInformation+0xa>
    42e4:	c1 e0       	ldi	r28, 0x01	; 1
    42e6:	14 c0       	rjmp	.+40     	; 0x4310 <os_resetSchedulingInformation+0x4c>
		 rq_clear(&schedulingInfo.queues_ready[i]);
	 }

	 for (process_id_t pid = 1; pid < MAX_NUMBER_OF_PROCESSES; pid++)
	 {
		 if (os_getProcessSlot(pid)->state == OS_PS_READY)
    42e8:	8c 2f       	mov	r24, r28
    42ea:	4f dc       	rcall	.-1890   	; 0x3b8a <os_getProcessSlot>
    42ec:	fc 01       	movw	r30, r24
    42ee:	81 81       	ldd	r24, Z+1	; 0x01
    42f0:	81 30       	cpi	r24, 0x01	; 1
    42f2:	69 f4       	brne	.+26     	; 0x430e <os_resetSchedulingInformation+0x4a>
		 {
			 rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(pid)->priority], pid);
    42f4:	8c 2f       	mov	r24, r28
    42f6:	49 dc       	rcall	.-1902   	; 0x3b8a <os_getProcessSlot>
    42f8:	fc 01       	movw	r30, r24
    42fa:	84 81       	ldd	r24, Z+4	; 0x04
    42fc:	fb e0       	ldi	r31, 0x0B	; 11
    42fe:	8f 9f       	mul	r24, r31
    4300:	c0 01       	movw	r24, r0
    4302:	11 24       	eor	r1, r1
    4304:	6c 2f       	mov	r22, r28
    4306:	81 51       	subi	r24, 0x11	; 17
    4308:	9a 4f       	sbci	r25, 0xFA	; 250
    430a:	0e 94 46 19 	call	0x328c	; 0x328c <rq_push>
	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
	 {
		 rq_clear(&schedulingInfo.queues_ready[i]);
	 }

	 for (process_id_t pid = 1; pid < MAX_NUMBER_OF_PROCESSES; pid++)
    430e:	cf 5f       	subi	r28, 0xFF	; 255
    4310:	c8 30       	cpi	r28, 0x08	; 8
    4312:	50 f3       	brcs	.-44     	; 0x42e8 <os_resetSchedulingInformation+0x24>
		 if (os_getProcessSlot(pid)->state == OS_PS_READY)
		 {
			 rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(pid)->priority], pid);
		 }
	 }
}
    4314:	cf 91       	pop	r28
    4316:	08 95       	ret

00004318 <os_scheduler_DynamicPriorityRoundRobin>:
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the dynamic priority round-robin strategy.
 */
process_id_t os_scheduler_DynamicPriorityRoundRobin(process_t const processes[], process_id_t current)
{
    4318:	df 92       	push	r13
    431a:	ef 92       	push	r14
    431c:	ff 92       	push	r15
    431e:	0f 93       	push	r16
    4320:	1f 93       	push	r17
    4322:	cf 93       	push	r28
    4324:	df 93       	push	r29
    4326:	d6 2e       	mov	r13, r22

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    4328:	c0 e0       	ldi	r28, 0x00	; 0
    432a:	d0 e0       	ldi	r29, 0x00	; 0
    432c:	21 c0       	rjmp	.+66     	; 0x4370 <os_scheduler_DynamicPriorityRoundRobin+0x58>
	{

		if (!rq_isEmpty(&schedulingInfo.queues_ready[i + 1]))
    432e:	7e 01       	movw	r14, r28
    4330:	2f ef       	ldi	r18, 0xFF	; 255
    4332:	e2 1a       	sub	r14, r18
    4334:	f2 0a       	sbc	r15, r18
    4336:	8b e0       	ldi	r24, 0x0B	; 11
    4338:	8e 9d       	mul	r24, r14
    433a:	80 01       	movw	r16, r0
    433c:	8f 9d       	mul	r24, r15
    433e:	10 0d       	add	r17, r0
    4340:	11 24       	eor	r1, r1
    4342:	01 51       	subi	r16, 0x11	; 17
    4344:	1a 4f       	sbci	r17, 0xFA	; 250
    4346:	c8 01       	movw	r24, r16
    4348:	0e 94 0c 19 	call	0x3218	; 0x3218 <rq_isEmpty>
    434c:	81 11       	cpse	r24, r1
    434e:	0f c0       	rjmp	.+30     	; 0x436e <os_scheduler_DynamicPriorityRoundRobin+0x56>
		{
			process_id_t pid = rq_pop(&schedulingInfo.queues_ready[i + 1]);
    4350:	c8 01       	movw	r24, r16
    4352:	0e 94 13 19 	call	0x3226	; 0x3226 <rq_pop>

			rq_push(&schedulingInfo.queues_ready[i], pid);
    4356:	9b e0       	ldi	r25, 0x0B	; 11
    4358:	9c 9f       	mul	r25, r28
    435a:	90 01       	movw	r18, r0
    435c:	9d 9f       	mul	r25, r29
    435e:	30 0d       	add	r19, r0
    4360:	11 24       	eor	r1, r1
    4362:	68 2f       	mov	r22, r24
    4364:	c9 01       	movw	r24, r18
    4366:	81 51       	subi	r24, 0x11	; 17
    4368:	9a 4f       	sbci	r25, 0xFA	; 250
    436a:	0e 94 46 19 	call	0x328c	; 0x328c <rq_push>
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the dynamic priority round-robin strategy.
 */
process_id_t os_scheduler_DynamicPriorityRoundRobin(process_t const processes[], process_id_t current)
{
    436e:	e7 01       	movw	r28, r14

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    4370:	c2 30       	cpi	r28, 0x02	; 2
    4372:	d1 05       	cpc	r29, r1
    4374:	e4 f2       	brlt	.-72     	; 0x432e <os_scheduler_DynamicPriorityRoundRobin+0x16>
		else
		{		}
	}

	// 2. Push current process to the ready queue
	if (os_getProcessSlot(current)->state == OS_PS_READY)
    4376:	8d 2d       	mov	r24, r13
    4378:	08 dc       	rcall	.-2032   	; 0x3b8a <os_getProcessSlot>
    437a:	fc 01       	movw	r30, r24
    437c:	81 81       	ldd	r24, Z+1	; 0x01
    437e:	81 30       	cpi	r24, 0x01	; 1
    4380:	69 f4       	brne	.+26     	; 0x439c <os_scheduler_DynamicPriorityRoundRobin+0x84>
	{
		rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(current)->priority], current);
    4382:	8d 2d       	mov	r24, r13
    4384:	02 dc       	rcall	.-2044   	; 0x3b8a <os_getProcessSlot>
    4386:	fc 01       	movw	r30, r24
    4388:	84 81       	ldd	r24, Z+4	; 0x04
    438a:	fb e0       	ldi	r31, 0x0B	; 11
    438c:	8f 9f       	mul	r24, r31
    438e:	c0 01       	movw	r24, r0
    4390:	11 24       	eor	r1, r1
    4392:	6d 2d       	mov	r22, r13
    4394:	81 51       	subi	r24, 0x11	; 17
    4396:	9a 4f       	sbci	r25, 0xFA	; 250
    4398:	0e 94 46 19 	call	0x328c	; 0x328c <rq_push>

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    439c:	c0 e0       	ldi	r28, 0x00	; 0
    439e:	d0 e0       	ldi	r29, 0x00	; 0
    43a0:	12 c0       	rjmp	.+36     	; 0x43c6 <os_scheduler_DynamicPriorityRoundRobin+0xae>
	}
	
	// 3. Get next process from ready queue
	for (int i = 0; i < PRIORITY_COUNT; i++)
	{
		if (!rq_isEmpty(&schedulingInfo.queues_ready[i]))
    43a2:	8b e0       	ldi	r24, 0x0B	; 11
    43a4:	8c 9f       	mul	r24, r28
    43a6:	80 01       	movw	r16, r0
    43a8:	8d 9f       	mul	r24, r29
    43aa:	10 0d       	add	r17, r0
    43ac:	11 24       	eor	r1, r1
    43ae:	01 51       	subi	r16, 0x11	; 17
    43b0:	1a 4f       	sbci	r17, 0xFA	; 250
    43b2:	c8 01       	movw	r24, r16
    43b4:	0e 94 0c 19 	call	0x3218	; 0x3218 <rq_isEmpty>
    43b8:	81 11       	cpse	r24, r1
    43ba:	04 c0       	rjmp	.+8      	; 0x43c4 <os_scheduler_DynamicPriorityRoundRobin+0xac>
		{

			process_id_t next_pid = rq_pop(&schedulingInfo.queues_ready[i]);
    43bc:	c8 01       	movw	r24, r16
    43be:	0e 94 13 19 	call	0x3226	; 0x3226 <rq_pop>
			return next_pid;
    43c2:	05 c0       	rjmp	.+10     	; 0x43ce <os_scheduler_DynamicPriorityRoundRobin+0xb6>
	{
		rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(current)->priority], current);
	}
	
	// 3. Get next process from ready queue
	for (int i = 0; i < PRIORITY_COUNT; i++)
    43c4:	21 96       	adiw	r28, 0x01	; 1
    43c6:	c3 30       	cpi	r28, 0x03	; 3
    43c8:	d1 05       	cpc	r29, r1
    43ca:	5c f3       	brlt	.-42     	; 0x43a2 <os_scheduler_DynamicPriorityRoundRobin+0x8a>
		}

	}

	// If no process is ready, return idle process (0)
	return 0;
    43cc:	80 e0       	ldi	r24, 0x00	; 0

}
    43ce:	df 91       	pop	r29
    43d0:	cf 91       	pop	r28
    43d2:	1f 91       	pop	r17
    43d4:	0f 91       	pop	r16
    43d6:	ff 90       	pop	r15
    43d8:	ef 90       	pop	r14
    43da:	df 90       	pop	r13
    43dc:	08 95       	ret

000043de <serialAdapter_calculateChecksum>:
{
    serialAdapter_calculateChecksum(checksum, &frame->header, sizeof(frame->header));
    serialAdapter_calculateChecksum(checksum, &frame->innerFrame, frame->header.length);
}

PROGRAM(3, AUTOSTART)
    43de:	fc 01       	movw	r30, r24
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	08 c0       	rjmp	.+16     	; 0x43f4 <serialAdapter_calculateChecksum+0x16>
    43e4:	db 01       	movw	r26, r22
    43e6:	a9 0f       	add	r26, r25
    43e8:	b1 1d       	adc	r27, r1
    43ea:	2c 91       	ld	r18, X
    43ec:	80 81       	ld	r24, Z
    43ee:	28 27       	eor	r18, r24
    43f0:	20 83       	st	Z, r18
    43f2:	9f 5f       	subi	r25, 0xFF	; 255
    43f4:	94 17       	cp	r25, r20
    43f6:	b0 f3       	brcs	.-20     	; 0x43e4 <serialAdapter_calculateChecksum+0x6>
    43f8:	08 95       	ret

000043fa <serialAdapter_calculateFrameChecksum>:
    43fa:	0f 93       	push	r16
    43fc:	1f 93       	push	r17
    43fe:	cf 93       	push	r28
    4400:	df 93       	push	r29
    4402:	8c 01       	movw	r16, r24
    4404:	eb 01       	movw	r28, r22
    4406:	45 e0       	ldi	r20, 0x05	; 5
    4408:	ea df       	rcall	.-44     	; 0x43de <serialAdapter_calculateChecksum>
    440a:	be 01       	movw	r22, r28
    440c:	6b 5f       	subi	r22, 0xFB	; 251
    440e:	7f 4f       	sbci	r23, 0xFF	; 255
    4410:	4c 81       	ldd	r20, Y+4	; 0x04
    4412:	c8 01       	movw	r24, r16
    4414:	e4 df       	rcall	.-56     	; 0x43de <serialAdapter_calculateChecksum>
    4416:	df 91       	pop	r29
    4418:	cf 91       	pop	r28
    441a:	1f 91       	pop	r17
    441c:	0f 91       	pop	r16
    441e:	08 95       	ret

00004420 <prog1>:
    4420:	0e 94 08 06 	call	0xc10	; 0xc10 <rfAdapter_init>
    4424:	0e 94 10 06 	call	0xc20	; 0xc20 <rfAdapter_worker>
    4428:	fd cf       	rjmp	.-6      	; 0x4424 <prog1+0x4>

0000442a <prog2>:
    442a:	da d0       	rcall	.+436    	; 0x45e0 <tlcd_init>
    442c:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <gui_worker>
    4430:	08 95       	ret

00004432 <prog3>:
    4432:	cf 93       	push	r28
    4434:	df 93       	push	r29
    4436:	cd b7       	in	r28, 0x3d	; 61
    4438:	de b7       	in	r29, 0x3e	; 62
    443a:	ee 97       	sbiw	r28, 0x3e	; 62
    443c:	0f b6       	in	r0, 0x3f	; 63
    443e:	f8 94       	cli
    4440:	de bf       	out	0x3e, r29	; 62
    4442:	0f be       	out	0x3f, r0	; 63
    4444:	cd bf       	out	0x3d, r28	; 61
    4446:	80 ea       	ldi	r24, 0xA0	; 160
    4448:	9f e0       	ldi	r25, 0x0F	; 15
    444a:	89 da       	rcall	.-2798   	; 0x395e <delayMs>
    444c:	81 2c       	mov	r8, r1
    444e:	91 2c       	mov	r9, r1
    4450:	54 01       	movw	r10, r8
    4452:	83 94       	inc	r8
    4454:	00 e0       	ldi	r16, 0x00	; 0
    4456:	10 e0       	ldi	r17, 0x00	; 0
    4458:	4c c0       	rjmp	.+152    	; 0x44f2 <prog3+0xc0>
    445a:	8f ef       	ldi	r24, 0xFF	; 255
    445c:	8c 83       	std	Y+4, r24	; 0x04
    445e:	8d e0       	ldi	r24, 0x0D	; 13
    4460:	80 0f       	add	r24, r16
    4462:	8b 83       	std	Y+3, r24	; 0x03
    4464:	87 e0       	ldi	r24, 0x07	; 7
    4466:	8d 83       	std	Y+5, r24	; 0x05
    4468:	80 e2       	ldi	r24, 0x20	; 32
    446a:	8e 83       	std	Y+6, r24	; 0x06
    446c:	89 e0       	ldi	r24, 0x09	; 9
    446e:	88 af       	std	Y+56, r24	; 0x38
    4470:	81 e0       	ldi	r24, 0x01	; 1
    4472:	89 af       	std	Y+57, r24	; 0x39
    4474:	c5 01       	movw	r24, r10
    4476:	b4 01       	movw	r22, r8
    4478:	49 d3       	rcall	.+1682   	; 0x4b0c <__floatunsisf>
    447a:	20 e0       	ldi	r18, 0x00	; 0
    447c:	30 e0       	ldi	r19, 0x00	; 0
    447e:	40 e5       	ldi	r20, 0x50	; 80
    4480:	51 e4       	ldi	r21, 0x41	; 65
    4482:	a9 d3       	rcall	.+1874   	; 0x4bd6 <__mulsf3>
    4484:	f6 2e       	mov	r15, r22
    4486:	e7 2e       	mov	r14, r23
    4488:	d8 2e       	mov	r13, r24
    448a:	c9 2e       	mov	r12, r25
    448c:	86 2f       	mov	r24, r22
    448e:	9e 2d       	mov	r25, r14
    4490:	ad 2d       	mov	r26, r13
    4492:	bc 2d       	mov	r27, r12
    4494:	8a af       	std	Y+58, r24	; 0x3a
    4496:	9b af       	std	Y+59, r25	; 0x3b
    4498:	ac af       	std	Y+60, r26	; 0x3c
    449a:	bd af       	std	Y+61, r27	; 0x3d
    449c:	86 e0       	ldi	r24, 0x06	; 6
    449e:	fe 01       	movw	r30, r28
    44a0:	f8 96       	adiw	r30, 0x38	; 56
    44a2:	de 01       	movw	r26, r28
    44a4:	17 96       	adiw	r26, 0x07	; 7
    44a6:	01 90       	ld	r0, Z+
    44a8:	0d 92       	st	X+, r0
    44aa:	8a 95       	dec	r24
    44ac:	e1 f7       	brne	.-8      	; 0x44a6 <prog3+0x74>
    44ae:	1e ae       	std	Y+62, r1	; 0x3e
    44b0:	be 01       	movw	r22, r28
    44b2:	6f 5f       	subi	r22, 0xFF	; 255
    44b4:	7f 4f       	sbci	r23, 0xFF	; 255
    44b6:	ce 01       	movw	r24, r28
    44b8:	ce 96       	adiw	r24, 0x3e	; 62
    44ba:	9f df       	rcall	.-194    	; 0x43fa <serialAdapter_calculateFrameChecksum>
    44bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    44be:	8f ab       	std	Y+55, r24	; 0x37
    44c0:	ce 01       	movw	r24, r28
    44c2:	01 96       	adiw	r24, 0x01	; 1
    44c4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <serialAdapter_processFrame>
    44c8:	cf 92       	push	r12
    44ca:	df 92       	push	r13
    44cc:	ef 92       	push	r14
    44ce:	ff 92       	push	r15
    44d0:	86 e2       	ldi	r24, 0x26	; 38
    44d2:	93 e0       	ldi	r25, 0x03	; 3
    44d4:	9f 93       	push	r25
    44d6:	8f 93       	push	r24
    44d8:	0e 94 bb 2b 	call	0x5776	; 0x5776 <printf>
    44dc:	80 ed       	ldi	r24, 0xD0	; 208
    44de:	97 e0       	ldi	r25, 0x07	; 7
    44e0:	3e da       	rcall	.-2948   	; 0x395e <delayMs>
    44e2:	0f 5f       	subi	r16, 0xFF	; 255
    44e4:	1f 4f       	sbci	r17, 0xFF	; 255
    44e6:	0f 90       	pop	r0
    44e8:	0f 90       	pop	r0
    44ea:	0f 90       	pop	r0
    44ec:	0f 90       	pop	r0
    44ee:	0f 90       	pop	r0
    44f0:	0f 90       	pop	r0
    44f2:	06 30       	cpi	r16, 0x06	; 6
    44f4:	11 05       	cpc	r17, r1
    44f6:	0c f4       	brge	.+2      	; 0x44fa <prog3+0xc8>
    44f8:	b0 cf       	rjmp	.-160    	; 0x445a <prog3+0x28>
    44fa:	8f ef       	ldi	r24, 0xFF	; 255
    44fc:	88 1a       	sub	r8, r24
    44fe:	98 0a       	sbc	r9, r24
    4500:	a8 0a       	sbc	r10, r24
    4502:	b8 0a       	sbc	r11, r24
    4504:	a7 cf       	rjmp	.-178    	; 0x4454 <prog3+0x22>

00004506 <registerProgram1>:
    4506:	81 e0       	ldi	r24, 0x01	; 1
    4508:	4b db       	rcall	.-2410   	; 0x3ba0 <os_getProgramSlot>
    450a:	20 e1       	ldi	r18, 0x10	; 16
    450c:	32 e2       	ldi	r19, 0x22	; 34
    450e:	fc 01       	movw	r30, r24
    4510:	31 83       	std	Z+1, r19	; 0x01
    4512:	20 83       	st	Z, r18
    4514:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <os_autostart>
    4518:	90 91 ee 05 	lds	r25, 0x05EE	; 0x8005ee <os_autostart+0x1>
    451c:	82 60       	ori	r24, 0x02	; 2
    451e:	90 93 ee 05 	sts	0x05EE, r25	; 0x8005ee <os_autostart+0x1>
    4522:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <os_autostart>
    4526:	08 95       	ret

00004528 <registerProgram2>:
    4528:	82 e0       	ldi	r24, 0x02	; 2
    452a:	3a db       	rcall	.-2444   	; 0x3ba0 <os_getProgramSlot>
    452c:	25 e1       	ldi	r18, 0x15	; 21
    452e:	32 e2       	ldi	r19, 0x22	; 34
    4530:	fc 01       	movw	r30, r24
    4532:	31 83       	std	Z+1, r19	; 0x01
    4534:	20 83       	st	Z, r18
    4536:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <os_autostart>
    453a:	90 91 ee 05 	lds	r25, 0x05EE	; 0x8005ee <os_autostart+0x1>
    453e:	84 60       	ori	r24, 0x04	; 4
    4540:	90 93 ee 05 	sts	0x05EE, r25	; 0x8005ee <os_autostart+0x1>
    4544:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <os_autostart>
    4548:	08 95       	ret

0000454a <registerProgram3>:
    454a:	83 e0       	ldi	r24, 0x03	; 3
    454c:	29 db       	rcall	.-2478   	; 0x3ba0 <os_getProgramSlot>
    454e:	29 e1       	ldi	r18, 0x19	; 25
    4550:	32 e2       	ldi	r19, 0x22	; 34
    4552:	fc 01       	movw	r30, r24
    4554:	31 83       	std	Z+1, r19	; 0x01
    4556:	20 83       	st	Z, r18
    4558:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <os_autostart>
    455c:	90 91 ee 05 	lds	r25, 0x05EE	; 0x8005ee <os_autostart+0x1>
    4560:	88 60       	ori	r24, 0x08	; 8
    4562:	90 93 ee 05 	sts	0x05EE, r25	; 0x8005ee <os_autostart+0x1>
    4566:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <os_autostart>
    456a:	08 95       	ret

0000456c <spi_cs_enable>:
/*!
 *  Enables the SPI chip select
 */
inline void spi_cs_enable()
{
	SPI_PORT &= ~(1 << SPI_CS_BIT);
    456c:	85 b1       	in	r24, 0x05	; 5
    456e:	8e 7f       	andi	r24, 0xFE	; 254
    4570:	85 b9       	out	0x05, r24	; 5
    4572:	08 95       	ret

00004574 <spi_cs_disable>:
/*!
 *  Disables the SPI chip select
 */
inline void spi_cs_disable()
{
	SPI_PORT |= (1 << SPI_CS_BIT);
    4574:	85 b1       	in	r24, 0x05	; 5
    4576:	81 60       	ori	r24, 0x01	; 1
    4578:	85 b9       	out	0x05, r24	; 5
    457a:	08 95       	ret

0000457c <spi_init>:
void spi_init()
{
	// Set the direction of the SPI pins
	// Output: CS, MOSI, CLK
	// Input: MISO
	SPI_DDR |= (1 << SPI_CS_BIT) | (1 << SPI_MOSI_BIT) | (1 << SPI_CLK_BIT);
    457c:	84 b1       	in	r24, 0x04	; 4
    457e:	87 60       	ori	r24, 0x07	; 7
    4580:	84 b9       	out	0x04, r24	; 4
/*!
 *  Disables the SPI chip select
 */
inline void spi_cs_disable()
{
	SPI_PORT |= (1 << SPI_CS_BIT);
    4582:	85 b1       	in	r24, 0x05	; 5
    4584:	81 60       	ori	r24, 0x01	; 1
    4586:	85 b9       	out	0x05, r24	; 5

	// Disable CS
	spi_cs_disable();

	// Enable the pull-up resistor for MISO
	SPI_PORT |= (1 << SPI_MISO_BIT);
    4588:	85 b1       	in	r24, 0x05	; 5
    458a:	88 60       	ori	r24, 0x08	; 8
    458c:	85 b9       	out	0x05, r24	; 5
	// Data Order: 0:MSB first, 1:LSB first			-> SPI_DATA_ORDER: 1
	// ATmega is Master								-> SPI_MASTER_ENABLE: 1
	// Clock Polarity: 0:low, 1:high (idle)			-> SPI_CLOCK_POLARITY: 1
	// Clock Phase: 0:leading, 1:trailing (sample) 	-> SPI_CLOCK_PHASE: 1
	// Clock Rate: fosc/128							-> SPI_CLOCK_RATE_SELECT0: 1, SPI_CLOCK_RATE_SELECT1: 1
	SPI_CONTROL_REGISTER = (1 << SPI_ENABLE) |
    458e:	8f e7       	ldi	r24, 0x7F	; 127
    4590:	8c bd       	out	0x2c, r24	; 44
    4592:	08 95       	ret

00004594 <spi_write_read>:
 *
 *  \param byte The byte that will be sent
 *  \return The byte that has been read
 */
uint8_t spi_write_read(uint8_t byte)
{
    4594:	cf 93       	push	r28
    4596:	c8 2f       	mov	r28, r24
	os_enterCriticalSection();
    4598:	0f db       	rcall	.-2530   	; 0x3bb8 <os_enterCriticalSection>

	// spi_cs_enable(); // Select the slave
	//_delay_us(6);	 // wait for slave to be ready

	// send the byte
	SPDR = byte;
    459a:	ce bd       	out	0x2e, r28	; 46

	// wait for transmission to be completed
	while (!(SPSR & (1 << SPIF)))
    459c:	0d b4       	in	r0, 0x2d	; 45
    459e:	07 fe       	sbrs	r0, 7
    45a0:	fd cf       	rjmp	.-6      	; 0x459c <spi_write_read+0x8>
	uint8_t receivedByte = SPDR;

	// deselect the slave
	// spi_cs_disable();

	os_leaveCriticalSection();
    45a2:	ce b5       	in	r28, 0x2e	; 46
    45a4:	28 db       	rcall	.-2480   	; 0x3bf6 <os_leaveCriticalSection>

	return receivedByte;
}
    45a6:	8c 2f       	mov	r24, r28
    45a8:	cf 91       	pop	r28
    45aa:	08 95       	ret

000045ac <spi_read>:
 */
uint8_t spi_read()
{
	// spi_cs_enable(); // Select the slave
	//_delay_us(6);	 // wait for slave to be ready
	return spi_write_read(SPI_DUMMY_BYTE);
    45ac:	8f ef       	ldi	r24, 0xFF	; 255
    45ae:	f2 cf       	rjmp	.-28     	; 0x4594 <spi_write_read>
	// spi_cs_disable(); // Deselect the slave
}
    45b0:	08 95       	ret

000045b2 <spi_write>:
 */
void spi_write(uint8_t byte)
{
	// spi_cs_enable(); // Select the slave
	//_delay_us(6);	 // wait for slave to be ready
	spi_write_read(byte);
    45b2:	f0 cf       	rjmp	.-32     	; 0x4594 <spi_write_read>
    45b4:	08 95       	ret

000045b6 <spi_writeData>:
 *
 *  \param data buffer with will be sent through SPI
 *  \param length size of the buffer
 */
void spi_writeData(const void *data, uint8_t length)
{
    45b6:	0f 93       	push	r16
    45b8:	1f 93       	push	r17
    45ba:	cf 93       	push	r28
    45bc:	df 93       	push	r29
    45be:	8c 01       	movw	r16, r24
    45c0:	d6 2f       	mov	r29, r22
	// os_enterCriticalSection();

	// spi_cs_enable(); // Select the slave
	//_delay_us(6);	 // wait for slave to be ready

	for (uint8_t i = 0; i < length; i++)
    45c2:	c0 e0       	ldi	r28, 0x00	; 0
    45c4:	06 c0       	rjmp	.+12     	; 0x45d2 <spi_writeData+0x1c>
	{
		spi_write_read(((uint8_t *)data)[i]);
    45c6:	f8 01       	movw	r30, r16
    45c8:	ec 0f       	add	r30, r28
    45ca:	f1 1d       	adc	r31, r1
    45cc:	80 81       	ld	r24, Z
    45ce:	e2 df       	rcall	.-60     	; 0x4594 <spi_write_read>
	// os_enterCriticalSection();

	// spi_cs_enable(); // Select the slave
	//_delay_us(6);	 // wait for slave to be ready

	for (uint8_t i = 0; i < length; i++)
    45d0:	cf 5f       	subi	r28, 0xFF	; 255
    45d2:	cd 17       	cp	r28, r29
    45d4:	c0 f3       	brcs	.-16     	; 0x45c6 <spi_writeData+0x10>
	}

	// spi_cs_disable(); // Deselect the slave

	// os_leaveCriticalSection();
}
    45d6:	df 91       	pop	r29
    45d8:	cf 91       	pop	r28
    45da:	1f 91       	pop	r17
    45dc:	0f 91       	pop	r16
    45de:	08 95       	ret

000045e0 <tlcd_init>:
	{
		// os_error("no ACK");
	}

	os_leaveCriticalSection();
}
    45e0:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <tlcd_initialized>
    45e4:	81 11       	cpse	r24, r1
    45e6:	07 c0       	rjmp	.+14     	; 0x45f6 <tlcd_init+0x16>
    45e8:	e7 da       	rcall	.-2610   	; 0x3bb8 <os_enterCriticalSection>
    45ea:	c8 df       	rcall	.-112    	; 0x457c <spi_init>
    45ec:	73 d1       	rcall	.+742    	; 0x48d4 <tlcd_clearDisplay>
    45ee:	81 e0       	ldi	r24, 0x01	; 1
    45f0:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <tlcd_initialized>
    45f4:	00 cb       	rjmp	.-2560   	; 0x3bf6 <os_leaveCriticalSection>
    45f6:	08 95       	ret

000045f8 <tlcd_calculateBCC>:
    45f8:	fc 01       	movw	r30, r24
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	08 c0       	rjmp	.+16     	; 0x460e <tlcd_calculateBCC+0x16>
    45fe:	db 01       	movw	r26, r22
    4600:	a9 0f       	add	r26, r25
    4602:	b1 1d       	adc	r27, r1
    4604:	2c 91       	ld	r18, X
    4606:	80 81       	ld	r24, Z
    4608:	28 0f       	add	r18, r24
    460a:	20 83       	st	Z, r18
    460c:	9f 5f       	subi	r25, 0xFF	; 255
    460e:	94 17       	cp	r25, r20
    4610:	b0 f3       	brcs	.-20     	; 0x45fe <tlcd_calculateBCC+0x6>
    4612:	08 95       	ret

00004614 <tlcd_writeCommand>:
 *
 * \param cmd pointer to the command data buffer
 * \param len length of the command data buffer
 */
void tlcd_writeCommand(const void *cmd, uint8_t len)
{
    4614:	ef 92       	push	r14
    4616:	ff 92       	push	r15
    4618:	0f 93       	push	r16
    461a:	1f 93       	push	r17
    461c:	cf 93       	push	r28
    461e:	df 93       	push	r29
    4620:	1f 92       	push	r1
    4622:	cd b7       	in	r28, 0x3d	; 61
    4624:	de b7       	in	r29, 0x3e	; 62
    4626:	7c 01       	movw	r14, r24
    4628:	16 2f       	mov	r17, r22
	os_enterCriticalSection();
    462a:	c6 da       	rcall	.-2676   	; 0x3bb8 <os_enterCriticalSection>

	// Pre calculate BCC
	uint8_t bcc = INITIAL_BCC_VALUE + DC1_BYTE + len;
    462c:	81 e1       	ldi	r24, 0x11	; 17
    462e:	81 0f       	add	r24, r17
    4630:	89 83       	std	Y+1, r24	; 0x01
	tlcd_calculateBCC(&bcc, cmd, len);
    4632:	41 2f       	mov	r20, r17
    4634:	b7 01       	movw	r22, r14
    4636:	ce 01       	movw	r24, r28
    4638:	01 96       	adiw	r24, 0x01	; 1
#endif

	// Send: DC1, len, cmd, BCC; repeat until ACK received
	uint8_t retries = 0;

	spi_cs_enable();
    463a:	de df       	rcall	.-68     	; 0x45f8 <tlcd_calculateBCC>
	}
	terminal_writeHexByte(bcc);
#endif

	// Send: DC1, len, cmd, BCC; repeat until ACK received
	uint8_t retries = 0;
    463c:	97 df       	rcall	.-210    	; 0x456c <spi_cs_enable>

	spi_cs_enable();

	do
	{
		spi_write(DC1_BYTE);
    463e:	00 e0       	ldi	r16, 0x00	; 0
    4640:	81 e1       	ldi	r24, 0x11	; 17
		spi_write(len);
    4642:	b7 df       	rcall	.-146    	; 0x45b2 <spi_write>
    4644:	81 2f       	mov	r24, r17
		spi_writeData(cmd, len);
    4646:	b5 df       	rcall	.-150    	; 0x45b2 <spi_write>
    4648:	61 2f       	mov	r22, r17
    464a:	c7 01       	movw	r24, r14
		spi_write(bcc);
    464c:	b4 df       	rcall	.-152    	; 0x45b6 <spi_writeData>
    464e:	89 81       	ldd	r24, Y+1	; 0x01
    4650:	b0 df       	rcall	.-160    	; 0x45b2 <spi_write>
// Given functions
//----------------------------------------------------------------------------

inline bool spi_ack_or_timeout(uint8_t *retries)
{
	uint8_t read = spi_read();
    4652:	ac df       	rcall	.-168    	; 0x45ac <spi_read>
    4654:	86 30       	cpi	r24, 0x06	; 6
	{
		terminal_writeProgString(PSTR(" ???"));
	}
#endif

	return read != ACK && (*retries)++ < TLCD_MAX_RETRIES;
    4656:	39 f0       	breq	.+14     	; 0x4666 <tlcd_writeCommand+0x52>
    4658:	81 e0       	ldi	r24, 0x01	; 1
    465a:	80 0f       	add	r24, r16
    465c:	02 33       	cpi	r16, 0x32	; 50
    465e:	28 f4       	brcc	.+10     	; 0x466a <tlcd_writeCommand+0x56>
    4660:	08 2f       	mov	r16, r24
    4662:	91 e0       	ldi	r25, 0x01	; 1
    4664:	04 c0       	rjmp	.+8      	; 0x466e <tlcd_writeCommand+0x5a>
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	02 c0       	rjmp	.+4      	; 0x466e <tlcd_writeCommand+0x5a>
    466a:	08 2f       	mov	r16, r24
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	89 2f       	mov	r24, r25
	{
		spi_write(DC1_BYTE);
		spi_write(len);
		spi_writeData(cmd, len);
		spi_write(bcc);
	} while (spi_ack_or_timeout(&retries));
    4670:	81 70       	andi	r24, 0x01	; 1
	}

	terminal_newLine();
#endif

	spi_cs_disable();
    4672:	31 f7       	brne	.-52     	; 0x4640 <tlcd_writeCommand+0x2c>
    4674:	7f df       	rcall	.-258    	; 0x4574 <spi_cs_disable>

	os_leaveCriticalSection();
    4676:	bf da       	rcall	.-2690   	; 0x3bf6 <os_leaveCriticalSection>
    4678:	0f 90       	pop	r0
}
    467a:	df 91       	pop	r29
    467c:	cf 91       	pop	r28
    467e:	1f 91       	pop	r17
    4680:	0f 91       	pop	r16
    4682:	ff 90       	pop	r15
    4684:	ef 90       	pop	r14
    4686:	08 95       	ret

00004688 <tlcd_drawStringAligned>:
    4688:	cf 92       	push	r12
#ifdef DEBUG_SPI_HIGH_LEVEL
    DEBUG("DrawChar: %d,%d: %c", x1, y1, c);
#endif
    const uint8_t cmd[] = { ESC_BYTE, Z_BYTE, C_BYTE, LOW(x1), HIGH(x1), LOW(y1), HIGH(y1), c, 0 };
    tlcd_writeCommand(cmd, sizeof(cmd) / sizeof(cmd[0]));
}
    468a:	df 92       	push	r13
    468c:	ef 92       	push	r14
    468e:	ff 92       	push	r15
    4690:	0f 93       	push	r16
    4692:	1f 93       	push	r17
    4694:	cf 93       	push	r28
    4696:	df 93       	push	r29
    4698:	cd b7       	in	r28, 0x3d	; 61
    469a:	de b7       	in	r29, 0x3e	; 62
    469c:	a0 97       	sbiw	r28, 0x20	; 32
    469e:	0f b6       	in	r0, 0x3f	; 63
    46a0:	f8 94       	cli
    46a2:	de bf       	out	0x3e, r29	; 62
    46a4:	0f be       	out	0x3f, r0	; 63
    46a6:	cd bf       	out	0x3d, r28	; 61
    46a8:	7a 01       	movw	r14, r20
    46aa:	22 30       	cpi	r18, 0x02	; 2
    46ac:	c1 f0       	breq	.+48     	; 0x46de <tlcd_drawStringAligned+0x56>
    46ae:	23 30       	cpi	r18, 0x03	; 3
    46b0:	51 f1       	breq	.+84     	; 0x4706 <tlcd_drawStringAligned+0x7e>
    46b2:	21 30       	cpi	r18, 0x01	; 1
    46b4:	d9 f5       	brne	.+118    	; 0x472c <tlcd_drawStringAligned+0xa4>
    46b6:	2b e1       	ldi	r18, 0x1B	; 27
    46b8:	2f 87       	std	Y+15, r18	; 0x0f
    46ba:	2a e5       	ldi	r18, 0x5A	; 90
    46bc:	28 8b       	std	Y+16, r18	; 0x10
    46be:	2c e4       	ldi	r18, 0x4C	; 76
    46c0:	29 8b       	std	Y+17, r18	; 0x11
    46c2:	8a 8b       	std	Y+18, r24	; 0x12
    46c4:	9b 8b       	std	Y+19, r25	; 0x13
    46c6:	6c 8b       	std	Y+20, r22	; 0x14
    46c8:	7d 8b       	std	Y+21, r23	; 0x15
    46ca:	87 e0       	ldi	r24, 0x07	; 7
    46cc:	fe 01       	movw	r30, r28
    46ce:	3f 96       	adiw	r30, 0x0f	; 15
    46d0:	de 01       	movw	r26, r28
    46d2:	56 96       	adiw	r26, 0x16	; 22
    46d4:	01 90       	ld	r0, Z+
    46d6:	0d 92       	st	X+, r0
    46d8:	8a 95       	dec	r24
    46da:	e1 f7       	brne	.-8      	; 0x46d4 <tlcd_drawStringAligned+0x4c>
    46dc:	27 c0       	rjmp	.+78     	; 0x472c <tlcd_drawStringAligned+0xa4>
    46de:	2b e1       	ldi	r18, 0x1B	; 27
    46e0:	28 87       	std	Y+8, r18	; 0x08
    46e2:	2a e5       	ldi	r18, 0x5A	; 90
    46e4:	29 87       	std	Y+9, r18	; 0x09
    46e6:	23 e4       	ldi	r18, 0x43	; 67
    46e8:	2a 87       	std	Y+10, r18	; 0x0a
    46ea:	8b 87       	std	Y+11, r24	; 0x0b
    46ec:	9c 87       	std	Y+12, r25	; 0x0c
    46ee:	6d 87       	std	Y+13, r22	; 0x0d
    46f0:	7e 87       	std	Y+14, r23	; 0x0e
    46f2:	87 e0       	ldi	r24, 0x07	; 7
    46f4:	fe 01       	movw	r30, r28
    46f6:	38 96       	adiw	r30, 0x08	; 8
    46f8:	de 01       	movw	r26, r28
    46fa:	56 96       	adiw	r26, 0x16	; 22
    46fc:	01 90       	ld	r0, Z+
    46fe:	0d 92       	st	X+, r0
    4700:	8a 95       	dec	r24
    4702:	e1 f7       	brne	.-8      	; 0x46fc <tlcd_drawStringAligned+0x74>
    4704:	13 c0       	rjmp	.+38     	; 0x472c <tlcd_drawStringAligned+0xa4>
    4706:	2b e1       	ldi	r18, 0x1B	; 27
    4708:	29 83       	std	Y+1, r18	; 0x01
    470a:	2a e5       	ldi	r18, 0x5A	; 90
    470c:	2a 83       	std	Y+2, r18	; 0x02
    470e:	22 e5       	ldi	r18, 0x52	; 82
    4710:	2b 83       	std	Y+3, r18	; 0x03
    4712:	8c 83       	std	Y+4, r24	; 0x04
    4714:	9d 83       	std	Y+5, r25	; 0x05
    4716:	6e 83       	std	Y+6, r22	; 0x06
    4718:	7f 83       	std	Y+7, r23	; 0x07
    471a:	87 e0       	ldi	r24, 0x07	; 7
    471c:	fe 01       	movw	r30, r28
    471e:	31 96       	adiw	r30, 0x01	; 1
    4720:	de 01       	movw	r26, r28
    4722:	56 96       	adiw	r26, 0x16	; 22
    4724:	01 90       	ld	r0, Z+
    4726:	0d 92       	st	X+, r0
    4728:	8a 95       	dec	r24
    472a:	e1 f7       	brne	.-8      	; 0x4724 <tlcd_drawStringAligned+0x9c>
    472c:	f7 01       	movw	r30, r14
    472e:	01 90       	ld	r0, Z+
    4730:	00 20       	and	r0, r0
    4732:	e9 f7       	brne	.-6      	; 0x472e <tlcd_drawStringAligned+0xa6>
    4734:	31 97       	sbiw	r30, 0x01	; 1
    4736:	6f 01       	movw	r12, r30
    4738:	ce 18       	sub	r12, r14
    473a:	df 08       	sbc	r13, r15
    473c:	0c 2d       	mov	r16, r12
    473e:	1d 8e       	std	Y+29, r1	; 0x1d
    4740:	88 e0       	ldi	r24, 0x08	; 8
    4742:	8c 0d       	add	r24, r12
    4744:	91 e1       	ldi	r25, 0x11	; 17
    4746:	9e 8f       	std	Y+30, r25	; 0x1e
    4748:	8f 8f       	std	Y+31, r24	; 0x1f
    474a:	18 a2       	std	Y+32, r1	; 0x20
    474c:	42 e0       	ldi	r20, 0x02	; 2
    474e:	be 01       	movw	r22, r28
    4750:	62 5e       	subi	r22, 0xE2	; 226
    4752:	7f 4f       	sbci	r23, 0xFF	; 255
    4754:	ce 01       	movw	r24, r28
    4756:	80 96       	adiw	r24, 0x20	; 32
    4758:	4f df       	rcall	.-354    	; 0x45f8 <tlcd_calculateBCC>
    475a:	47 e0       	ldi	r20, 0x07	; 7
    475c:	be 01       	movw	r22, r28
    475e:	6a 5e       	subi	r22, 0xEA	; 234
    4760:	7f 4f       	sbci	r23, 0xFF	; 255
    4762:	ce 01       	movw	r24, r28
    4764:	80 96       	adiw	r24, 0x20	; 32
    4766:	48 df       	rcall	.-368    	; 0x45f8 <tlcd_calculateBCC>
    4768:	4c 2d       	mov	r20, r12
    476a:	b7 01       	movw	r22, r14
    476c:	ce 01       	movw	r24, r28
    476e:	80 96       	adiw	r24, 0x20	; 32
    4770:	43 df       	rcall	.-378    	; 0x45f8 <tlcd_calculateBCC>
    4772:	41 e0       	ldi	r20, 0x01	; 1
    4774:	be 01       	movw	r22, r28
    4776:	63 5e       	subi	r22, 0xE3	; 227
    4778:	7f 4f       	sbci	r23, 0xFF	; 255
    477a:	ce 01       	movw	r24, r28
    477c:	80 96       	adiw	r24, 0x20	; 32
    477e:	3c df       	rcall	.-392    	; 0x45f8 <tlcd_calculateBCC>
    4780:	1b da       	rcall	.-3018   	; 0x3bb8 <os_enterCriticalSection>
    4782:	f4 de       	rcall	.-536    	; 0x456c <spi_cs_enable>
    4784:	10 e0       	ldi	r17, 0x00	; 0
    4786:	01 c0       	rjmp	.+2      	; 0x478a <tlcd_drawStringAligned+0x102>
    4788:	18 2f       	mov	r17, r24
    478a:	62 e0       	ldi	r22, 0x02	; 2
    478c:	ce 01       	movw	r24, r28
    478e:	4e 96       	adiw	r24, 0x1e	; 30
    4790:	12 df       	rcall	.-476    	; 0x45b6 <spi_writeData>
    4792:	67 e0       	ldi	r22, 0x07	; 7
    4794:	ce 01       	movw	r24, r28
    4796:	46 96       	adiw	r24, 0x16	; 22
    4798:	0e df       	rcall	.-484    	; 0x45b6 <spi_writeData>
    479a:	60 2f       	mov	r22, r16
    479c:	c7 01       	movw	r24, r14
    479e:	0b df       	rcall	.-490    	; 0x45b6 <spi_writeData>
    47a0:	61 e0       	ldi	r22, 0x01	; 1
    47a2:	ce 01       	movw	r24, r28
    47a4:	4d 96       	adiw	r24, 0x1d	; 29
    47a6:	07 df       	rcall	.-498    	; 0x45b6 <spi_writeData>
    47a8:	88 a1       	ldd	r24, Y+32	; 0x20
    47aa:	03 df       	rcall	.-506    	; 0x45b2 <spi_write>
    47ac:	ff de       	rcall	.-514    	; 0x45ac <spi_read>
    47ae:	86 30       	cpi	r24, 0x06	; 6
    47b0:	21 f0       	breq	.+8      	; 0x47ba <tlcd_drawStringAligned+0x132>
    47b2:	81 e0       	ldi	r24, 0x01	; 1
    47b4:	81 0f       	add	r24, r17
    47b6:	12 33       	cpi	r17, 0x32	; 50
    47b8:	38 f3       	brcs	.-50     	; 0x4788 <tlcd_drawStringAligned+0x100>
    47ba:	dc de       	rcall	.-584    	; 0x4574 <spi_cs_disable>
    47bc:	1c da       	rcall	.-3016   	; 0x3bf6 <os_leaveCriticalSection>
    47be:	a0 96       	adiw	r28, 0x20	; 32
    47c0:	0f b6       	in	r0, 0x3f	; 63
    47c2:	f8 94       	cli
    47c4:	de bf       	out	0x3e, r29	; 62
    47c6:	0f be       	out	0x3f, r0	; 63
    47c8:	cd bf       	out	0x3d, r28	; 61
    47ca:	df 91       	pop	r29
    47cc:	cf 91       	pop	r28
    47ce:	1f 91       	pop	r17
    47d0:	0f 91       	pop	r16
    47d2:	ff 90       	pop	r15
    47d4:	ef 90       	pop	r14
    47d6:	df 90       	pop	r13
    47d8:	cf 90       	pop	r12
    47da:	08 95       	ret

000047dc <tlcd_drawString>:
    47dc:	21 e0       	ldi	r18, 0x01	; 1
    47de:	54 cf       	rjmp	.-344    	; 0x4688 <tlcd_drawStringAligned>
    47e0:	08 95       	ret

000047e2 <tlcd_drawStringInArea>:
    47e2:	cf 92       	push	r12
    47e4:	df 92       	push	r13
    47e6:	ef 92       	push	r14
    47e8:	ff 92       	push	r15
    47ea:	0f 93       	push	r16
    47ec:	1f 93       	push	r17
    47ee:	cf 93       	push	r28
    47f0:	df 93       	push	r29
    47f2:	cd b7       	in	r28, 0x3d	; 61
    47f4:	de b7       	in	r29, 0x3e	; 62
    47f6:	60 97       	sbiw	r28, 0x10	; 16
    47f8:	0f b6       	in	r0, 0x3f	; 63
    47fa:	f8 94       	cli
    47fc:	de bf       	out	0x3e, r29	; 62
    47fe:	0f be       	out	0x3f, r0	; 63
    4800:	cd bf       	out	0x3d, r28	; 61
    4802:	78 01       	movw	r14, r16
    4804:	eb e1       	ldi	r30, 0x1B	; 27
    4806:	e9 83       	std	Y+1, r30	; 0x01
    4808:	ea e5       	ldi	r30, 0x5A	; 90
    480a:	ea 83       	std	Y+2, r30	; 0x02
    480c:	e2 e4       	ldi	r30, 0x42	; 66
    480e:	eb 83       	std	Y+3, r30	; 0x03
    4810:	8c 83       	std	Y+4, r24	; 0x04
    4812:	9d 83       	std	Y+5, r25	; 0x05
    4814:	6e 83       	std	Y+6, r22	; 0x06
    4816:	7f 83       	std	Y+7, r23	; 0x07
    4818:	48 87       	std	Y+8, r20	; 0x08
    481a:	59 87       	std	Y+9, r21	; 0x09
    481c:	2a 87       	std	Y+10, r18	; 0x0a
    481e:	3b 87       	std	Y+11, r19	; 0x0b
    4820:	85 e0       	ldi	r24, 0x05	; 5
    4822:	8c 87       	std	Y+12, r24	; 0x0c
    4824:	f8 01       	movw	r30, r16
    4826:	01 90       	ld	r0, Z+
    4828:	00 20       	and	r0, r0
    482a:	e9 f7       	brne	.-6      	; 0x4826 <tlcd_drawStringInArea+0x44>
    482c:	31 97       	sbiw	r30, 0x01	; 1
    482e:	6f 01       	movw	r12, r30
    4830:	c0 1a       	sub	r12, r16
    4832:	d1 0a       	sbc	r13, r17
    4834:	0c 2d       	mov	r16, r12
    4836:	1d 86       	std	Y+13, r1	; 0x0d
    4838:	8d e0       	ldi	r24, 0x0D	; 13
    483a:	8c 0d       	add	r24, r12
    483c:	91 e1       	ldi	r25, 0x11	; 17
    483e:	9e 87       	std	Y+14, r25	; 0x0e
    4840:	8f 87       	std	Y+15, r24	; 0x0f
    4842:	18 8a       	std	Y+16, r1	; 0x10
    4844:	42 e0       	ldi	r20, 0x02	; 2
    4846:	be 01       	movw	r22, r28
    4848:	62 5f       	subi	r22, 0xF2	; 242
    484a:	7f 4f       	sbci	r23, 0xFF	; 255
    484c:	ce 01       	movw	r24, r28
    484e:	40 96       	adiw	r24, 0x10	; 16
    4850:	d3 de       	rcall	.-602    	; 0x45f8 <tlcd_calculateBCC>
    4852:	4c e0       	ldi	r20, 0x0C	; 12
    4854:	be 01       	movw	r22, r28
    4856:	6f 5f       	subi	r22, 0xFF	; 255
    4858:	7f 4f       	sbci	r23, 0xFF	; 255
    485a:	ce 01       	movw	r24, r28
    485c:	40 96       	adiw	r24, 0x10	; 16
    485e:	cc de       	rcall	.-616    	; 0x45f8 <tlcd_calculateBCC>
    4860:	4c 2d       	mov	r20, r12
    4862:	b7 01       	movw	r22, r14
    4864:	ce 01       	movw	r24, r28
    4866:	40 96       	adiw	r24, 0x10	; 16
    4868:	c7 de       	rcall	.-626    	; 0x45f8 <tlcd_calculateBCC>
    486a:	41 e0       	ldi	r20, 0x01	; 1
    486c:	be 01       	movw	r22, r28
    486e:	63 5f       	subi	r22, 0xF3	; 243
    4870:	7f 4f       	sbci	r23, 0xFF	; 255
    4872:	ce 01       	movw	r24, r28
    4874:	40 96       	adiw	r24, 0x10	; 16
    4876:	c0 de       	rcall	.-640    	; 0x45f8 <tlcd_calculateBCC>
    4878:	9f d9       	rcall	.-3266   	; 0x3bb8 <os_enterCriticalSection>
    487a:	78 de       	rcall	.-784    	; 0x456c <spi_cs_enable>
    487c:	10 e0       	ldi	r17, 0x00	; 0
    487e:	01 c0       	rjmp	.+2      	; 0x4882 <tlcd_drawStringInArea+0xa0>
    4880:	18 2f       	mov	r17, r24
    4882:	62 e0       	ldi	r22, 0x02	; 2
    4884:	ce 01       	movw	r24, r28
    4886:	0e 96       	adiw	r24, 0x0e	; 14
    4888:	96 de       	rcall	.-724    	; 0x45b6 <spi_writeData>
    488a:	6c e0       	ldi	r22, 0x0C	; 12
    488c:	ce 01       	movw	r24, r28
    488e:	01 96       	adiw	r24, 0x01	; 1
    4890:	92 de       	rcall	.-732    	; 0x45b6 <spi_writeData>
    4892:	60 2f       	mov	r22, r16
    4894:	c7 01       	movw	r24, r14
    4896:	8f de       	rcall	.-738    	; 0x45b6 <spi_writeData>
    4898:	61 e0       	ldi	r22, 0x01	; 1
    489a:	ce 01       	movw	r24, r28
    489c:	0d 96       	adiw	r24, 0x0d	; 13
    489e:	8b de       	rcall	.-746    	; 0x45b6 <spi_writeData>
    48a0:	88 89       	ldd	r24, Y+16	; 0x10
    48a2:	87 de       	rcall	.-754    	; 0x45b2 <spi_write>
    48a4:	83 de       	rcall	.-762    	; 0x45ac <spi_read>
    48a6:	86 30       	cpi	r24, 0x06	; 6
    48a8:	21 f0       	breq	.+8      	; 0x48b2 <tlcd_drawStringInArea+0xd0>
    48aa:	81 e0       	ldi	r24, 0x01	; 1
    48ac:	81 0f       	add	r24, r17
    48ae:	12 33       	cpi	r17, 0x32	; 50
    48b0:	38 f3       	brcs	.-50     	; 0x4880 <tlcd_drawStringInArea+0x9e>
    48b2:	60 de       	rcall	.-832    	; 0x4574 <spi_cs_disable>
    48b4:	a0 d9       	rcall	.-3264   	; 0x3bf6 <os_leaveCriticalSection>
    48b6:	60 96       	adiw	r28, 0x10	; 16
    48b8:	0f b6       	in	r0, 0x3f	; 63
    48ba:	f8 94       	cli
    48bc:	de bf       	out	0x3e, r29	; 62
    48be:	0f be       	out	0x3f, r0	; 63
    48c0:	cd bf       	out	0x3d, r28	; 61
    48c2:	df 91       	pop	r29
    48c4:	cf 91       	pop	r28
    48c6:	1f 91       	pop	r17
    48c8:	0f 91       	pop	r16
    48ca:	ff 90       	pop	r15
    48cc:	ef 90       	pop	r14
    48ce:	df 90       	pop	r13
    48d0:	cf 90       	pop	r12
    48d2:	08 95       	ret

000048d4 <tlcd_clearDisplay>:
    48d4:	cf 93       	push	r28
    48d6:	df 93       	push	r29
    48d8:	00 d0       	rcall	.+0      	; 0x48da <tlcd_clearDisplay+0x6>
    48da:	cd b7       	in	r28, 0x3d	; 61
    48dc:	de b7       	in	r29, 0x3e	; 62
    48de:	8b e1       	ldi	r24, 0x1B	; 27
    48e0:	89 83       	std	Y+1, r24	; 0x01
    48e2:	84 e4       	ldi	r24, 0x44	; 68
    48e4:	8a 83       	std	Y+2, r24	; 0x02
    48e6:	8c e4       	ldi	r24, 0x4C	; 76
    48e8:	8b 83       	std	Y+3, r24	; 0x03
    48ea:	63 e0       	ldi	r22, 0x03	; 3
    48ec:	ce 01       	movw	r24, r28
    48ee:	01 96       	adiw	r24, 0x01	; 1
    48f0:	91 de       	rcall	.-734    	; 0x4614 <tlcd_writeCommand>
    48f2:	0f 90       	pop	r0
    48f4:	0f 90       	pop	r0
    48f6:	0f 90       	pop	r0
    48f8:	df 91       	pop	r29
    48fa:	cf 91       	pop	r28
    48fc:	08 95       	ret

000048fe <tlcd_drawBox>:
    48fe:	0f 93       	push	r16
    4900:	cf 93       	push	r28
    4902:	df 93       	push	r29
    4904:	cd b7       	in	r28, 0x3d	; 61
    4906:	de b7       	in	r29, 0x3e	; 62
    4908:	2c 97       	sbiw	r28, 0x0c	; 12
    490a:	0f b6       	in	r0, 0x3f	; 63
    490c:	f8 94       	cli
    490e:	de bf       	out	0x3e, r29	; 62
    4910:	0f be       	out	0x3f, r0	; 63
    4912:	cd bf       	out	0x3d, r28	; 61
    4914:	eb e1       	ldi	r30, 0x1B	; 27
    4916:	e9 83       	std	Y+1, r30	; 0x01
    4918:	e2 e5       	ldi	r30, 0x52	; 82
    491a:	ea 83       	std	Y+2, r30	; 0x02
    491c:	e6 e4       	ldi	r30, 0x46	; 70
    491e:	eb 83       	std	Y+3, r30	; 0x03
    4920:	8c 83       	std	Y+4, r24	; 0x04
    4922:	9d 83       	std	Y+5, r25	; 0x05
    4924:	6e 83       	std	Y+6, r22	; 0x06
    4926:	7f 83       	std	Y+7, r23	; 0x07
    4928:	48 87       	std	Y+8, r20	; 0x08
    492a:	59 87       	std	Y+9, r21	; 0x09
    492c:	2a 87       	std	Y+10, r18	; 0x0a
    492e:	3b 87       	std	Y+11, r19	; 0x0b
    4930:	0c 87       	std	Y+12, r16	; 0x0c
    4932:	6c e0       	ldi	r22, 0x0C	; 12
    4934:	ce 01       	movw	r24, r28
    4936:	01 96       	adiw	r24, 0x01	; 1
    4938:	6d de       	rcall	.-806    	; 0x4614 <tlcd_writeCommand>
    493a:	2c 96       	adiw	r28, 0x0c	; 12
    493c:	0f b6       	in	r0, 0x3f	; 63
    493e:	f8 94       	cli
    4940:	de bf       	out	0x3e, r29	; 62
    4942:	0f be       	out	0x3f, r0	; 63
    4944:	cd bf       	out	0x3d, r28	; 61
    4946:	df 91       	pop	r29
    4948:	cf 91       	pop	r28
    494a:	0f 91       	pop	r16
    494c:	08 95       	ret

0000494e <tlcd_drawRectangle>:
    494e:	cf 93       	push	r28
    4950:	df 93       	push	r29
    4952:	cd b7       	in	r28, 0x3d	; 61
    4954:	de b7       	in	r29, 0x3e	; 62
    4956:	2b 97       	sbiw	r28, 0x0b	; 11
    4958:	0f b6       	in	r0, 0x3f	; 63
    495a:	f8 94       	cli
    495c:	de bf       	out	0x3e, r29	; 62
    495e:	0f be       	out	0x3f, r0	; 63
    4960:	cd bf       	out	0x3d, r28	; 61
    4962:	eb e1       	ldi	r30, 0x1B	; 27
    4964:	e9 83       	std	Y+1, r30	; 0x01
    4966:	e7 e4       	ldi	r30, 0x47	; 71
    4968:	ea 83       	std	Y+2, r30	; 0x02
    496a:	e2 e5       	ldi	r30, 0x52	; 82
    496c:	eb 83       	std	Y+3, r30	; 0x03
    496e:	8c 83       	std	Y+4, r24	; 0x04
    4970:	9d 83       	std	Y+5, r25	; 0x05
    4972:	6e 83       	std	Y+6, r22	; 0x06
    4974:	7f 83       	std	Y+7, r23	; 0x07
    4976:	48 87       	std	Y+8, r20	; 0x08
    4978:	59 87       	std	Y+9, r21	; 0x09
    497a:	2a 87       	std	Y+10, r18	; 0x0a
    497c:	3b 87       	std	Y+11, r19	; 0x0b
    497e:	6b e0       	ldi	r22, 0x0B	; 11
    4980:	ce 01       	movw	r24, r28
    4982:	01 96       	adiw	r24, 0x01	; 1
    4984:	47 de       	rcall	.-882    	; 0x4614 <tlcd_writeCommand>
    4986:	2b 96       	adiw	r28, 0x0b	; 11
    4988:	0f b6       	in	r0, 0x3f	; 63
    498a:	f8 94       	cli
    498c:	de bf       	out	0x3e, r29	; 62
    498e:	0f be       	out	0x3f, r0	; 63
    4990:	cd bf       	out	0x3d, r28	; 61
    4992:	df 91       	pop	r29
    4994:	cf 91       	pop	r28
    4996:	08 95       	ret

00004998 <tlcd_drawLine>:
    4998:	cf 93       	push	r28
    499a:	df 93       	push	r29
    499c:	cd b7       	in	r28, 0x3d	; 61
    499e:	de b7       	in	r29, 0x3e	; 62
    49a0:	2b 97       	sbiw	r28, 0x0b	; 11
    49a2:	0f b6       	in	r0, 0x3f	; 63
    49a4:	f8 94       	cli
    49a6:	de bf       	out	0x3e, r29	; 62
    49a8:	0f be       	out	0x3f, r0	; 63
    49aa:	cd bf       	out	0x3d, r28	; 61
    49ac:	eb e1       	ldi	r30, 0x1B	; 27
    49ae:	e9 83       	std	Y+1, r30	; 0x01
    49b0:	e7 e4       	ldi	r30, 0x47	; 71
    49b2:	ea 83       	std	Y+2, r30	; 0x02
    49b4:	e4 e4       	ldi	r30, 0x44	; 68
    49b6:	eb 83       	std	Y+3, r30	; 0x03
    49b8:	8c 83       	std	Y+4, r24	; 0x04
    49ba:	9d 83       	std	Y+5, r25	; 0x05
    49bc:	6e 83       	std	Y+6, r22	; 0x06
    49be:	7f 83       	std	Y+7, r23	; 0x07
    49c0:	48 87       	std	Y+8, r20	; 0x08
    49c2:	59 87       	std	Y+9, r21	; 0x09
    49c4:	2a 87       	std	Y+10, r18	; 0x0a
    49c6:	3b 87       	std	Y+11, r19	; 0x0b
    49c8:	6b e0       	ldi	r22, 0x0B	; 11
    49ca:	ce 01       	movw	r24, r28
    49cc:	01 96       	adiw	r24, 0x01	; 1
    49ce:	22 de       	rcall	.-956    	; 0x4614 <tlcd_writeCommand>
    49d0:	2b 96       	adiw	r28, 0x0b	; 11
    49d2:	0f b6       	in	r0, 0x3f	; 63
    49d4:	f8 94       	cli
    49d6:	de bf       	out	0x3e, r29	; 62
    49d8:	0f be       	out	0x3f, r0	; 63
    49da:	cd bf       	out	0x3d, r28	; 61
    49dc:	df 91       	pop	r29
    49de:	cf 91       	pop	r28
    49e0:	08 95       	ret

000049e2 <tlcd_changePenSize>:
    49e2:	cf 93       	push	r28
    49e4:	df 93       	push	r29
    49e6:	00 d0       	rcall	.+0      	; 0x49e8 <tlcd_changePenSize+0x6>
    49e8:	1f 92       	push	r1
    49ea:	1f 92       	push	r1
    49ec:	cd b7       	in	r28, 0x3d	; 61
    49ee:	de b7       	in	r29, 0x3e	; 62
    49f0:	9b e1       	ldi	r25, 0x1B	; 27
    49f2:	99 83       	std	Y+1, r25	; 0x01
    49f4:	97 e4       	ldi	r25, 0x47	; 71
    49f6:	9a 83       	std	Y+2, r25	; 0x02
    49f8:	9a e5       	ldi	r25, 0x5A	; 90
    49fa:	9b 83       	std	Y+3, r25	; 0x03
    49fc:	8c 83       	std	Y+4, r24	; 0x04
    49fe:	8d 83       	std	Y+5, r24	; 0x05
    4a00:	65 e0       	ldi	r22, 0x05	; 5
    4a02:	ce 01       	movw	r24, r28
    4a04:	01 96       	adiw	r24, 0x01	; 1
    4a06:	06 de       	rcall	.-1012   	; 0x4614 <tlcd_writeCommand>
    4a08:	0f 90       	pop	r0
    4a0a:	0f 90       	pop	r0
    4a0c:	0f 90       	pop	r0
    4a0e:	0f 90       	pop	r0
    4a10:	0f 90       	pop	r0
    4a12:	df 91       	pop	r29
    4a14:	cf 91       	pop	r28
    4a16:	08 95       	ret

00004a18 <tlcd_changeTextSize>:
    4a18:	cf 93       	push	r28
    4a1a:	df 93       	push	r29
    4a1c:	00 d0       	rcall	.+0      	; 0x4a1e <tlcd_changeTextSize+0x6>
    4a1e:	1f 92       	push	r1
    4a20:	1f 92       	push	r1
    4a22:	cd b7       	in	r28, 0x3d	; 61
    4a24:	de b7       	in	r29, 0x3e	; 62
    4a26:	9b e1       	ldi	r25, 0x1B	; 27
    4a28:	99 83       	std	Y+1, r25	; 0x01
    4a2a:	9a e5       	ldi	r25, 0x5A	; 90
    4a2c:	9a 83       	std	Y+2, r25	; 0x02
    4a2e:	9b 83       	std	Y+3, r25	; 0x03
    4a30:	8c 83       	std	Y+4, r24	; 0x04
    4a32:	8d 83       	std	Y+5, r24	; 0x05
    4a34:	65 e0       	ldi	r22, 0x05	; 5
    4a36:	ce 01       	movw	r24, r28
    4a38:	01 96       	adiw	r24, 0x01	; 1
    4a3a:	ec dd       	rcall	.-1064   	; 0x4614 <tlcd_writeCommand>
    4a3c:	0f 90       	pop	r0
    4a3e:	0f 90       	pop	r0
    4a40:	0f 90       	pop	r0
    4a42:	0f 90       	pop	r0
    4a44:	0f 90       	pop	r0
    4a46:	df 91       	pop	r29
    4a48:	cf 91       	pop	r28
    4a4a:	08 95       	ret

00004a4c <tlcd_changeLineColor>:
    4a4c:	cf 93       	push	r28
    4a4e:	df 93       	push	r29
    4a50:	00 d0       	rcall	.+0      	; 0x4a52 <tlcd_changeLineColor+0x6>
    4a52:	1f 92       	push	r1
    4a54:	1f 92       	push	r1
    4a56:	cd b7       	in	r28, 0x3d	; 61
    4a58:	de b7       	in	r29, 0x3e	; 62
    4a5a:	9b e1       	ldi	r25, 0x1B	; 27
    4a5c:	99 83       	std	Y+1, r25	; 0x01
    4a5e:	96 e4       	ldi	r25, 0x46	; 70
    4a60:	9a 83       	std	Y+2, r25	; 0x02
    4a62:	97 e4       	ldi	r25, 0x47	; 71
    4a64:	9b 83       	std	Y+3, r25	; 0x03
    4a66:	8c 83       	std	Y+4, r24	; 0x04
    4a68:	1d 82       	std	Y+5, r1	; 0x05
    4a6a:	65 e0       	ldi	r22, 0x05	; 5
    4a6c:	ce 01       	movw	r24, r28
    4a6e:	01 96       	adiw	r24, 0x01	; 1
    4a70:	d1 dd       	rcall	.-1118   	; 0x4614 <tlcd_writeCommand>
    4a72:	0f 90       	pop	r0
    4a74:	0f 90       	pop	r0
    4a76:	0f 90       	pop	r0
    4a78:	0f 90       	pop	r0
    4a7a:	0f 90       	pop	r0
    4a7c:	df 91       	pop	r29
    4a7e:	cf 91       	pop	r28
    4a80:	08 95       	ret

00004a82 <tlcd_changeTextColor>:
    4a82:	cf 93       	push	r28
    4a84:	df 93       	push	r29
    4a86:	00 d0       	rcall	.+0      	; 0x4a88 <tlcd_changeTextColor+0x6>
    4a88:	1f 92       	push	r1
    4a8a:	1f 92       	push	r1
    4a8c:	cd b7       	in	r28, 0x3d	; 61
    4a8e:	de b7       	in	r29, 0x3e	; 62
    4a90:	9b e1       	ldi	r25, 0x1B	; 27
    4a92:	99 83       	std	Y+1, r25	; 0x01
    4a94:	96 e4       	ldi	r25, 0x46	; 70
    4a96:	9a 83       	std	Y+2, r25	; 0x02
    4a98:	9a e5       	ldi	r25, 0x5A	; 90
    4a9a:	9b 83       	std	Y+3, r25	; 0x03
    4a9c:	8c 83       	std	Y+4, r24	; 0x04
    4a9e:	1d 82       	std	Y+5, r1	; 0x05
    4aa0:	65 e0       	ldi	r22, 0x05	; 5
    4aa2:	ce 01       	movw	r24, r28
    4aa4:	01 96       	adiw	r24, 0x01	; 1
    4aa6:	b6 dd       	rcall	.-1172   	; 0x4614 <tlcd_writeCommand>
    4aa8:	0f 90       	pop	r0
    4aaa:	0f 90       	pop	r0
    4aac:	0f 90       	pop	r0
    4aae:	0f 90       	pop	r0
    4ab0:	0f 90       	pop	r0
    4ab2:	df 91       	pop	r29
    4ab4:	cf 91       	pop	r28
    4ab6:	08 95       	ret

00004ab8 <tlcd_defineColor>:
    4ab8:	cf 93       	push	r28
    4aba:	df 93       	push	r29
    4abc:	cd b7       	in	r28, 0x3d	; 61
    4abe:	de b7       	in	r29, 0x3e	; 62
    4ac0:	27 97       	sbiw	r28, 0x07	; 7
    4ac2:	0f b6       	in	r0, 0x3f	; 63
    4ac4:	f8 94       	cli
    4ac6:	de bf       	out	0x3e, r29	; 62
    4ac8:	0f be       	out	0x3f, r0	; 63
    4aca:	cd bf       	out	0x3d, r28	; 61
    4acc:	9b e1       	ldi	r25, 0x1B	; 27
    4ace:	99 83       	std	Y+1, r25	; 0x01
    4ad0:	96 e4       	ldi	r25, 0x46	; 70
    4ad2:	9a 83       	std	Y+2, r25	; 0x02
    4ad4:	90 e5       	ldi	r25, 0x50	; 80
    4ad6:	9b 83       	std	Y+3, r25	; 0x03
    4ad8:	8c 83       	std	Y+4, r24	; 0x04
    4ada:	4d 83       	std	Y+5, r20	; 0x05
    4adc:	5e 83       	std	Y+6, r21	; 0x06
    4ade:	6f 83       	std	Y+7, r22	; 0x07
    4ae0:	67 e0       	ldi	r22, 0x07	; 7
    4ae2:	ce 01       	movw	r24, r28
    4ae4:	01 96       	adiw	r24, 0x01	; 1
    4ae6:	96 dd       	rcall	.-1236   	; 0x4614 <tlcd_writeCommand>
    4ae8:	27 96       	adiw	r28, 0x07	; 7
    4aea:	0f b6       	in	r0, 0x3f	; 63
    4aec:	f8 94       	cli
    4aee:	de bf       	out	0x3e, r29	; 62
    4af0:	0f be       	out	0x3f, r0	; 63
    4af2:	cd bf       	out	0x3d, r28	; 61
    4af4:	df 91       	pop	r29
    4af6:	cf 91       	pop	r28
    4af8:	08 95       	ret

00004afa <tlcd_clearArea>:


void tlcd_clearArea(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    4afa:	0f 93       	push	r16
#ifdef DEBUG_SPI_HIGH_LEVEL
    DEBUG("ClearArea: %d,%d:%d,%d", x1, y1, x2, y2);
#endif
    tlcd_drawBox(x1, y1, x2, y2, 1);
    4afc:	01 e0       	ldi	r16, 0x01	; 1
    4afe:	ff de       	rcall	.-514    	; 0x48fe <tlcd_drawBox>
    4b00:	0f 91       	pop	r16
    4b02:	08 95       	ret

00004b04 <__cmpsf2>:
    4b04:	40 d0       	rcall	.+128    	; 0x4b86 <__fp_cmp>
    4b06:	08 f4       	brcc	.+2      	; 0x4b0a <__cmpsf2+0x6>
    4b08:	81 e0       	ldi	r24, 0x01	; 1
    4b0a:	08 95       	ret

00004b0c <__floatunsisf>:
    4b0c:	e8 94       	clt
    4b0e:	09 c0       	rjmp	.+18     	; 0x4b22 <__floatsisf+0x12>

00004b10 <__floatsisf>:
    4b10:	97 fb       	bst	r25, 7
    4b12:	3e f4       	brtc	.+14     	; 0x4b22 <__floatsisf+0x12>
    4b14:	90 95       	com	r25
    4b16:	80 95       	com	r24
    4b18:	70 95       	com	r23
    4b1a:	61 95       	neg	r22
    4b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b1e:	8f 4f       	sbci	r24, 0xFF	; 255
    4b20:	9f 4f       	sbci	r25, 0xFF	; 255
    4b22:	99 23       	and	r25, r25
    4b24:	a9 f0       	breq	.+42     	; 0x4b50 <__floatsisf+0x40>
    4b26:	f9 2f       	mov	r31, r25
    4b28:	96 e9       	ldi	r25, 0x96	; 150
    4b2a:	bb 27       	eor	r27, r27
    4b2c:	93 95       	inc	r25
    4b2e:	f6 95       	lsr	r31
    4b30:	87 95       	ror	r24
    4b32:	77 95       	ror	r23
    4b34:	67 95       	ror	r22
    4b36:	b7 95       	ror	r27
    4b38:	f1 11       	cpse	r31, r1
    4b3a:	f8 cf       	rjmp	.-16     	; 0x4b2c <__floatsisf+0x1c>
    4b3c:	fa f4       	brpl	.+62     	; 0x4b7c <__floatsisf+0x6c>
    4b3e:	bb 0f       	add	r27, r27
    4b40:	11 f4       	brne	.+4      	; 0x4b46 <__floatsisf+0x36>
    4b42:	60 ff       	sbrs	r22, 0
    4b44:	1b c0       	rjmp	.+54     	; 0x4b7c <__floatsisf+0x6c>
    4b46:	6f 5f       	subi	r22, 0xFF	; 255
    4b48:	7f 4f       	sbci	r23, 0xFF	; 255
    4b4a:	8f 4f       	sbci	r24, 0xFF	; 255
    4b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b4e:	16 c0       	rjmp	.+44     	; 0x4b7c <__floatsisf+0x6c>
    4b50:	88 23       	and	r24, r24
    4b52:	11 f0       	breq	.+4      	; 0x4b58 <__floatsisf+0x48>
    4b54:	96 e9       	ldi	r25, 0x96	; 150
    4b56:	11 c0       	rjmp	.+34     	; 0x4b7a <__floatsisf+0x6a>
    4b58:	77 23       	and	r23, r23
    4b5a:	21 f0       	breq	.+8      	; 0x4b64 <__floatsisf+0x54>
    4b5c:	9e e8       	ldi	r25, 0x8E	; 142
    4b5e:	87 2f       	mov	r24, r23
    4b60:	76 2f       	mov	r23, r22
    4b62:	05 c0       	rjmp	.+10     	; 0x4b6e <__floatsisf+0x5e>
    4b64:	66 23       	and	r22, r22
    4b66:	71 f0       	breq	.+28     	; 0x4b84 <__floatsisf+0x74>
    4b68:	96 e8       	ldi	r25, 0x86	; 134
    4b6a:	86 2f       	mov	r24, r22
    4b6c:	70 e0       	ldi	r23, 0x00	; 0
    4b6e:	60 e0       	ldi	r22, 0x00	; 0
    4b70:	2a f0       	brmi	.+10     	; 0x4b7c <__floatsisf+0x6c>
    4b72:	9a 95       	dec	r25
    4b74:	66 0f       	add	r22, r22
    4b76:	77 1f       	adc	r23, r23
    4b78:	88 1f       	adc	r24, r24
    4b7a:	da f7       	brpl	.-10     	; 0x4b72 <__floatsisf+0x62>
    4b7c:	88 0f       	add	r24, r24
    4b7e:	96 95       	lsr	r25
    4b80:	87 95       	ror	r24
    4b82:	97 f9       	bld	r25, 7
    4b84:	08 95       	ret

00004b86 <__fp_cmp>:
    4b86:	99 0f       	add	r25, r25
    4b88:	00 08       	sbc	r0, r0
    4b8a:	55 0f       	add	r21, r21
    4b8c:	aa 0b       	sbc	r26, r26
    4b8e:	e0 e8       	ldi	r30, 0x80	; 128
    4b90:	fe ef       	ldi	r31, 0xFE	; 254
    4b92:	16 16       	cp	r1, r22
    4b94:	17 06       	cpc	r1, r23
    4b96:	e8 07       	cpc	r30, r24
    4b98:	f9 07       	cpc	r31, r25
    4b9a:	c0 f0       	brcs	.+48     	; 0x4bcc <__fp_cmp+0x46>
    4b9c:	12 16       	cp	r1, r18
    4b9e:	13 06       	cpc	r1, r19
    4ba0:	e4 07       	cpc	r30, r20
    4ba2:	f5 07       	cpc	r31, r21
    4ba4:	98 f0       	brcs	.+38     	; 0x4bcc <__fp_cmp+0x46>
    4ba6:	62 1b       	sub	r22, r18
    4ba8:	73 0b       	sbc	r23, r19
    4baa:	84 0b       	sbc	r24, r20
    4bac:	95 0b       	sbc	r25, r21
    4bae:	39 f4       	brne	.+14     	; 0x4bbe <__fp_cmp+0x38>
    4bb0:	0a 26       	eor	r0, r26
    4bb2:	61 f0       	breq	.+24     	; 0x4bcc <__fp_cmp+0x46>
    4bb4:	23 2b       	or	r18, r19
    4bb6:	24 2b       	or	r18, r20
    4bb8:	25 2b       	or	r18, r21
    4bba:	21 f4       	brne	.+8      	; 0x4bc4 <__fp_cmp+0x3e>
    4bbc:	08 95       	ret
    4bbe:	0a 26       	eor	r0, r26
    4bc0:	09 f4       	brne	.+2      	; 0x4bc4 <__fp_cmp+0x3e>
    4bc2:	a1 40       	sbci	r26, 0x01	; 1
    4bc4:	a6 95       	lsr	r26
    4bc6:	8f ef       	ldi	r24, 0xFF	; 255
    4bc8:	81 1d       	adc	r24, r1
    4bca:	81 1d       	adc	r24, r1
    4bcc:	08 95       	ret

00004bce <__gesf2>:
    4bce:	db df       	rcall	.-74     	; 0x4b86 <__fp_cmp>
    4bd0:	08 f4       	brcc	.+2      	; 0x4bd4 <__gesf2+0x6>
    4bd2:	8f ef       	ldi	r24, 0xFF	; 255
    4bd4:	08 95       	ret

00004bd6 <__mulsf3>:
    4bd6:	0b d0       	rcall	.+22     	; 0x4bee <__mulsf3x>
    4bd8:	78 c0       	rjmp	.+240    	; 0x4cca <__fp_round>
    4bda:	69 d0       	rcall	.+210    	; 0x4cae <__fp_pscA>
    4bdc:	28 f0       	brcs	.+10     	; 0x4be8 <__mulsf3+0x12>
    4bde:	6e d0       	rcall	.+220    	; 0x4cbc <__fp_pscB>
    4be0:	18 f0       	brcs	.+6      	; 0x4be8 <__mulsf3+0x12>
    4be2:	95 23       	and	r25, r21
    4be4:	09 f0       	breq	.+2      	; 0x4be8 <__mulsf3+0x12>
    4be6:	5a c0       	rjmp	.+180    	; 0x4c9c <__fp_inf>
    4be8:	5f c0       	rjmp	.+190    	; 0x4ca8 <__fp_nan>
    4bea:	11 24       	eor	r1, r1
    4bec:	a2 c0       	rjmp	.+324    	; 0x4d32 <__fp_szero>

00004bee <__mulsf3x>:
    4bee:	7e d0       	rcall	.+252    	; 0x4cec <__fp_split3>
    4bf0:	a0 f3       	brcs	.-24     	; 0x4bda <__mulsf3+0x4>

00004bf2 <__mulsf3_pse>:
    4bf2:	95 9f       	mul	r25, r21
    4bf4:	d1 f3       	breq	.-12     	; 0x4bea <__mulsf3+0x14>
    4bf6:	95 0f       	add	r25, r21
    4bf8:	50 e0       	ldi	r21, 0x00	; 0
    4bfa:	55 1f       	adc	r21, r21
    4bfc:	62 9f       	mul	r22, r18
    4bfe:	f0 01       	movw	r30, r0
    4c00:	72 9f       	mul	r23, r18
    4c02:	bb 27       	eor	r27, r27
    4c04:	f0 0d       	add	r31, r0
    4c06:	b1 1d       	adc	r27, r1
    4c08:	63 9f       	mul	r22, r19
    4c0a:	aa 27       	eor	r26, r26
    4c0c:	f0 0d       	add	r31, r0
    4c0e:	b1 1d       	adc	r27, r1
    4c10:	aa 1f       	adc	r26, r26
    4c12:	64 9f       	mul	r22, r20
    4c14:	66 27       	eor	r22, r22
    4c16:	b0 0d       	add	r27, r0
    4c18:	a1 1d       	adc	r26, r1
    4c1a:	66 1f       	adc	r22, r22
    4c1c:	82 9f       	mul	r24, r18
    4c1e:	22 27       	eor	r18, r18
    4c20:	b0 0d       	add	r27, r0
    4c22:	a1 1d       	adc	r26, r1
    4c24:	62 1f       	adc	r22, r18
    4c26:	73 9f       	mul	r23, r19
    4c28:	b0 0d       	add	r27, r0
    4c2a:	a1 1d       	adc	r26, r1
    4c2c:	62 1f       	adc	r22, r18
    4c2e:	83 9f       	mul	r24, r19
    4c30:	a0 0d       	add	r26, r0
    4c32:	61 1d       	adc	r22, r1
    4c34:	22 1f       	adc	r18, r18
    4c36:	74 9f       	mul	r23, r20
    4c38:	33 27       	eor	r19, r19
    4c3a:	a0 0d       	add	r26, r0
    4c3c:	61 1d       	adc	r22, r1
    4c3e:	23 1f       	adc	r18, r19
    4c40:	84 9f       	mul	r24, r20
    4c42:	60 0d       	add	r22, r0
    4c44:	21 1d       	adc	r18, r1
    4c46:	82 2f       	mov	r24, r18
    4c48:	76 2f       	mov	r23, r22
    4c4a:	6a 2f       	mov	r22, r26
    4c4c:	11 24       	eor	r1, r1
    4c4e:	9f 57       	subi	r25, 0x7F	; 127
    4c50:	50 40       	sbci	r21, 0x00	; 0
    4c52:	8a f0       	brmi	.+34     	; 0x4c76 <__mulsf3_pse+0x84>
    4c54:	e1 f0       	breq	.+56     	; 0x4c8e <__mulsf3_pse+0x9c>
    4c56:	88 23       	and	r24, r24
    4c58:	4a f0       	brmi	.+18     	; 0x4c6c <__mulsf3_pse+0x7a>
    4c5a:	ee 0f       	add	r30, r30
    4c5c:	ff 1f       	adc	r31, r31
    4c5e:	bb 1f       	adc	r27, r27
    4c60:	66 1f       	adc	r22, r22
    4c62:	77 1f       	adc	r23, r23
    4c64:	88 1f       	adc	r24, r24
    4c66:	91 50       	subi	r25, 0x01	; 1
    4c68:	50 40       	sbci	r21, 0x00	; 0
    4c6a:	a9 f7       	brne	.-22     	; 0x4c56 <__mulsf3_pse+0x64>
    4c6c:	9e 3f       	cpi	r25, 0xFE	; 254
    4c6e:	51 05       	cpc	r21, r1
    4c70:	70 f0       	brcs	.+28     	; 0x4c8e <__mulsf3_pse+0x9c>
    4c72:	14 c0       	rjmp	.+40     	; 0x4c9c <__fp_inf>
    4c74:	5e c0       	rjmp	.+188    	; 0x4d32 <__fp_szero>
    4c76:	5f 3f       	cpi	r21, 0xFF	; 255
    4c78:	ec f3       	brlt	.-6      	; 0x4c74 <__mulsf3_pse+0x82>
    4c7a:	98 3e       	cpi	r25, 0xE8	; 232
    4c7c:	dc f3       	brlt	.-10     	; 0x4c74 <__mulsf3_pse+0x82>
    4c7e:	86 95       	lsr	r24
    4c80:	77 95       	ror	r23
    4c82:	67 95       	ror	r22
    4c84:	b7 95       	ror	r27
    4c86:	f7 95       	ror	r31
    4c88:	e7 95       	ror	r30
    4c8a:	9f 5f       	subi	r25, 0xFF	; 255
    4c8c:	c1 f7       	brne	.-16     	; 0x4c7e <__mulsf3_pse+0x8c>
    4c8e:	fe 2b       	or	r31, r30
    4c90:	88 0f       	add	r24, r24
    4c92:	91 1d       	adc	r25, r1
    4c94:	96 95       	lsr	r25
    4c96:	87 95       	ror	r24
    4c98:	97 f9       	bld	r25, 7
    4c9a:	08 95       	ret

00004c9c <__fp_inf>:
    4c9c:	97 f9       	bld	r25, 7
    4c9e:	9f 67       	ori	r25, 0x7F	; 127
    4ca0:	80 e8       	ldi	r24, 0x80	; 128
    4ca2:	70 e0       	ldi	r23, 0x00	; 0
    4ca4:	60 e0       	ldi	r22, 0x00	; 0
    4ca6:	08 95       	ret

00004ca8 <__fp_nan>:
    4ca8:	9f ef       	ldi	r25, 0xFF	; 255
    4caa:	80 ec       	ldi	r24, 0xC0	; 192
    4cac:	08 95       	ret

00004cae <__fp_pscA>:
    4cae:	00 24       	eor	r0, r0
    4cb0:	0a 94       	dec	r0
    4cb2:	16 16       	cp	r1, r22
    4cb4:	17 06       	cpc	r1, r23
    4cb6:	18 06       	cpc	r1, r24
    4cb8:	09 06       	cpc	r0, r25
    4cba:	08 95       	ret

00004cbc <__fp_pscB>:
    4cbc:	00 24       	eor	r0, r0
    4cbe:	0a 94       	dec	r0
    4cc0:	12 16       	cp	r1, r18
    4cc2:	13 06       	cpc	r1, r19
    4cc4:	14 06       	cpc	r1, r20
    4cc6:	05 06       	cpc	r0, r21
    4cc8:	08 95       	ret

00004cca <__fp_round>:
    4cca:	09 2e       	mov	r0, r25
    4ccc:	03 94       	inc	r0
    4cce:	00 0c       	add	r0, r0
    4cd0:	11 f4       	brne	.+4      	; 0x4cd6 <__fp_round+0xc>
    4cd2:	88 23       	and	r24, r24
    4cd4:	52 f0       	brmi	.+20     	; 0x4cea <__fp_round+0x20>
    4cd6:	bb 0f       	add	r27, r27
    4cd8:	40 f4       	brcc	.+16     	; 0x4cea <__fp_round+0x20>
    4cda:	bf 2b       	or	r27, r31
    4cdc:	11 f4       	brne	.+4      	; 0x4ce2 <__fp_round+0x18>
    4cde:	60 ff       	sbrs	r22, 0
    4ce0:	04 c0       	rjmp	.+8      	; 0x4cea <__fp_round+0x20>
    4ce2:	6f 5f       	subi	r22, 0xFF	; 255
    4ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ce6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    4cea:	08 95       	ret

00004cec <__fp_split3>:
    4cec:	57 fd       	sbrc	r21, 7
    4cee:	90 58       	subi	r25, 0x80	; 128
    4cf0:	44 0f       	add	r20, r20
    4cf2:	55 1f       	adc	r21, r21
    4cf4:	59 f0       	breq	.+22     	; 0x4d0c <__fp_splitA+0x10>
    4cf6:	5f 3f       	cpi	r21, 0xFF	; 255
    4cf8:	71 f0       	breq	.+28     	; 0x4d16 <__fp_splitA+0x1a>
    4cfa:	47 95       	ror	r20

00004cfc <__fp_splitA>:
    4cfc:	88 0f       	add	r24, r24
    4cfe:	97 fb       	bst	r25, 7
    4d00:	99 1f       	adc	r25, r25
    4d02:	61 f0       	breq	.+24     	; 0x4d1c <__fp_splitA+0x20>
    4d04:	9f 3f       	cpi	r25, 0xFF	; 255
    4d06:	79 f0       	breq	.+30     	; 0x4d26 <__fp_splitA+0x2a>
    4d08:	87 95       	ror	r24
    4d0a:	08 95       	ret
    4d0c:	12 16       	cp	r1, r18
    4d0e:	13 06       	cpc	r1, r19
    4d10:	14 06       	cpc	r1, r20
    4d12:	55 1f       	adc	r21, r21
    4d14:	f2 cf       	rjmp	.-28     	; 0x4cfa <__fp_split3+0xe>
    4d16:	46 95       	lsr	r20
    4d18:	f1 df       	rcall	.-30     	; 0x4cfc <__fp_splitA>
    4d1a:	08 c0       	rjmp	.+16     	; 0x4d2c <__fp_splitA+0x30>
    4d1c:	16 16       	cp	r1, r22
    4d1e:	17 06       	cpc	r1, r23
    4d20:	18 06       	cpc	r1, r24
    4d22:	99 1f       	adc	r25, r25
    4d24:	f1 cf       	rjmp	.-30     	; 0x4d08 <__fp_splitA+0xc>
    4d26:	86 95       	lsr	r24
    4d28:	71 05       	cpc	r23, r1
    4d2a:	61 05       	cpc	r22, r1
    4d2c:	08 94       	sec
    4d2e:	08 95       	ret

00004d30 <__fp_zero>:
    4d30:	e8 94       	clt

00004d32 <__fp_szero>:
    4d32:	bb 27       	eor	r27, r27
    4d34:	66 27       	eor	r22, r22
    4d36:	77 27       	eor	r23, r23
    4d38:	cb 01       	movw	r24, r22
    4d3a:	97 f9       	bld	r25, 7
    4d3c:	08 95       	ret

00004d3e <vfprintf>:
    4d3e:	2f 92       	push	r2
    4d40:	3f 92       	push	r3
    4d42:	4f 92       	push	r4
    4d44:	5f 92       	push	r5
    4d46:	6f 92       	push	r6
    4d48:	7f 92       	push	r7
    4d4a:	8f 92       	push	r8
    4d4c:	9f 92       	push	r9
    4d4e:	af 92       	push	r10
    4d50:	bf 92       	push	r11
    4d52:	cf 92       	push	r12
    4d54:	df 92       	push	r13
    4d56:	ef 92       	push	r14
    4d58:	ff 92       	push	r15
    4d5a:	0f 93       	push	r16
    4d5c:	1f 93       	push	r17
    4d5e:	cf 93       	push	r28
    4d60:	df 93       	push	r29
    4d62:	cd b7       	in	r28, 0x3d	; 61
    4d64:	de b7       	in	r29, 0x3e	; 62
    4d66:	60 97       	sbiw	r28, 0x10	; 16
    4d68:	0f b6       	in	r0, 0x3f	; 63
    4d6a:	f8 94       	cli
    4d6c:	de bf       	out	0x3e, r29	; 62
    4d6e:	0f be       	out	0x3f, r0	; 63
    4d70:	cd bf       	out	0x3d, r28	; 61
    4d72:	7c 01       	movw	r14, r24
    4d74:	1b 01       	movw	r2, r22
    4d76:	6a 01       	movw	r12, r20
    4d78:	fc 01       	movw	r30, r24
    4d7a:	17 82       	std	Z+7, r1	; 0x07
    4d7c:	16 82       	std	Z+6, r1	; 0x06
    4d7e:	83 81       	ldd	r24, Z+3	; 0x03
    4d80:	81 ff       	sbrs	r24, 1
    4d82:	2a c3       	rjmp	.+1620   	; 0x53d8 <vfprintf+0x69a>
    4d84:	9e 01       	movw	r18, r28
    4d86:	2f 5f       	subi	r18, 0xFF	; 255
    4d88:	3f 4f       	sbci	r19, 0xFF	; 255
    4d8a:	39 01       	movw	r6, r18
    4d8c:	f7 01       	movw	r30, r14
    4d8e:	93 81       	ldd	r25, Z+3	; 0x03
    4d90:	f1 01       	movw	r30, r2
    4d92:	93 fd       	sbrc	r25, 3
    4d94:	85 91       	lpm	r24, Z+
    4d96:	93 ff       	sbrs	r25, 3
    4d98:	81 91       	ld	r24, Z+
    4d9a:	1f 01       	movw	r2, r30
    4d9c:	88 23       	and	r24, r24
    4d9e:	09 f4       	brne	.+2      	; 0x4da2 <vfprintf+0x64>
    4da0:	17 c3       	rjmp	.+1582   	; 0x53d0 <vfprintf+0x692>
    4da2:	85 32       	cpi	r24, 0x25	; 37
    4da4:	39 f4       	brne	.+14     	; 0x4db4 <vfprintf+0x76>
    4da6:	93 fd       	sbrc	r25, 3
    4da8:	85 91       	lpm	r24, Z+
    4daa:	93 ff       	sbrs	r25, 3
    4dac:	81 91       	ld	r24, Z+
    4dae:	1f 01       	movw	r2, r30
    4db0:	85 32       	cpi	r24, 0x25	; 37
    4db2:	31 f4       	brne	.+12     	; 0x4dc0 <vfprintf+0x82>
    4db4:	b7 01       	movw	r22, r14
    4db6:	90 e0       	ldi	r25, 0x00	; 0
    4db8:	a2 d4       	rcall	.+2372   	; 0x56fe <fputc>
    4dba:	56 01       	movw	r10, r12
    4dbc:	65 01       	movw	r12, r10
    4dbe:	e6 cf       	rjmp	.-52     	; 0x4d8c <vfprintf+0x4e>
    4dc0:	10 e0       	ldi	r17, 0x00	; 0
    4dc2:	51 2c       	mov	r5, r1
    4dc4:	91 2c       	mov	r9, r1
    4dc6:	ff e1       	ldi	r31, 0x1F	; 31
    4dc8:	f9 15       	cp	r31, r9
    4dca:	d8 f0       	brcs	.+54     	; 0x4e02 <vfprintf+0xc4>
    4dcc:	8b 32       	cpi	r24, 0x2B	; 43
    4dce:	79 f0       	breq	.+30     	; 0x4dee <vfprintf+0xb0>
    4dd0:	38 f4       	brcc	.+14     	; 0x4de0 <vfprintf+0xa2>
    4dd2:	80 32       	cpi	r24, 0x20	; 32
    4dd4:	79 f0       	breq	.+30     	; 0x4df4 <vfprintf+0xb6>
    4dd6:	83 32       	cpi	r24, 0x23	; 35
    4dd8:	a1 f4       	brne	.+40     	; 0x4e02 <vfprintf+0xc4>
    4dda:	f9 2d       	mov	r31, r9
    4ddc:	f0 61       	ori	r31, 0x10	; 16
    4dde:	2e c0       	rjmp	.+92     	; 0x4e3c <vfprintf+0xfe>
    4de0:	8d 32       	cpi	r24, 0x2D	; 45
    4de2:	61 f0       	breq	.+24     	; 0x4dfc <vfprintf+0xbe>
    4de4:	80 33       	cpi	r24, 0x30	; 48
    4de6:	69 f4       	brne	.+26     	; 0x4e02 <vfprintf+0xc4>
    4de8:	29 2d       	mov	r18, r9
    4dea:	21 60       	ori	r18, 0x01	; 1
    4dec:	2d c0       	rjmp	.+90     	; 0x4e48 <vfprintf+0x10a>
    4dee:	39 2d       	mov	r19, r9
    4df0:	32 60       	ori	r19, 0x02	; 2
    4df2:	93 2e       	mov	r9, r19
    4df4:	89 2d       	mov	r24, r9
    4df6:	84 60       	ori	r24, 0x04	; 4
    4df8:	98 2e       	mov	r9, r24
    4dfa:	2a c0       	rjmp	.+84     	; 0x4e50 <vfprintf+0x112>
    4dfc:	e9 2d       	mov	r30, r9
    4dfe:	e8 60       	ori	r30, 0x08	; 8
    4e00:	15 c0       	rjmp	.+42     	; 0x4e2c <vfprintf+0xee>
    4e02:	97 fc       	sbrc	r9, 7
    4e04:	2d c0       	rjmp	.+90     	; 0x4e60 <vfprintf+0x122>
    4e06:	20 ed       	ldi	r18, 0xD0	; 208
    4e08:	28 0f       	add	r18, r24
    4e0a:	2a 30       	cpi	r18, 0x0A	; 10
    4e0c:	88 f4       	brcc	.+34     	; 0x4e30 <vfprintf+0xf2>
    4e0e:	96 fe       	sbrs	r9, 6
    4e10:	06 c0       	rjmp	.+12     	; 0x4e1e <vfprintf+0xe0>
    4e12:	3a e0       	ldi	r19, 0x0A	; 10
    4e14:	13 9f       	mul	r17, r19
    4e16:	20 0d       	add	r18, r0
    4e18:	11 24       	eor	r1, r1
    4e1a:	12 2f       	mov	r17, r18
    4e1c:	19 c0       	rjmp	.+50     	; 0x4e50 <vfprintf+0x112>
    4e1e:	8a e0       	ldi	r24, 0x0A	; 10
    4e20:	58 9e       	mul	r5, r24
    4e22:	20 0d       	add	r18, r0
    4e24:	11 24       	eor	r1, r1
    4e26:	52 2e       	mov	r5, r18
    4e28:	e9 2d       	mov	r30, r9
    4e2a:	e0 62       	ori	r30, 0x20	; 32
    4e2c:	9e 2e       	mov	r9, r30
    4e2e:	10 c0       	rjmp	.+32     	; 0x4e50 <vfprintf+0x112>
    4e30:	8e 32       	cpi	r24, 0x2E	; 46
    4e32:	31 f4       	brne	.+12     	; 0x4e40 <vfprintf+0x102>
    4e34:	96 fc       	sbrc	r9, 6
    4e36:	cc c2       	rjmp	.+1432   	; 0x53d0 <vfprintf+0x692>
    4e38:	f9 2d       	mov	r31, r9
    4e3a:	f0 64       	ori	r31, 0x40	; 64
    4e3c:	9f 2e       	mov	r9, r31
    4e3e:	08 c0       	rjmp	.+16     	; 0x4e50 <vfprintf+0x112>
    4e40:	8c 36       	cpi	r24, 0x6C	; 108
    4e42:	21 f4       	brne	.+8      	; 0x4e4c <vfprintf+0x10e>
    4e44:	29 2d       	mov	r18, r9
    4e46:	20 68       	ori	r18, 0x80	; 128
    4e48:	92 2e       	mov	r9, r18
    4e4a:	02 c0       	rjmp	.+4      	; 0x4e50 <vfprintf+0x112>
    4e4c:	88 36       	cpi	r24, 0x68	; 104
    4e4e:	41 f4       	brne	.+16     	; 0x4e60 <vfprintf+0x122>
    4e50:	f1 01       	movw	r30, r2
    4e52:	93 fd       	sbrc	r25, 3
    4e54:	85 91       	lpm	r24, Z+
    4e56:	93 ff       	sbrs	r25, 3
    4e58:	81 91       	ld	r24, Z+
    4e5a:	1f 01       	movw	r2, r30
    4e5c:	81 11       	cpse	r24, r1
    4e5e:	b3 cf       	rjmp	.-154    	; 0x4dc6 <vfprintf+0x88>
    4e60:	9b eb       	ldi	r25, 0xBB	; 187
    4e62:	98 0f       	add	r25, r24
    4e64:	93 30       	cpi	r25, 0x03	; 3
    4e66:	20 f4       	brcc	.+8      	; 0x4e70 <vfprintf+0x132>
    4e68:	99 2d       	mov	r25, r9
    4e6a:	90 61       	ori	r25, 0x10	; 16
    4e6c:	80 5e       	subi	r24, 0xE0	; 224
    4e6e:	07 c0       	rjmp	.+14     	; 0x4e7e <vfprintf+0x140>
    4e70:	9b e9       	ldi	r25, 0x9B	; 155
    4e72:	98 0f       	add	r25, r24
    4e74:	93 30       	cpi	r25, 0x03	; 3
    4e76:	08 f0       	brcs	.+2      	; 0x4e7a <vfprintf+0x13c>
    4e78:	59 c1       	rjmp	.+690    	; 0x512c <vfprintf+0x3ee>
    4e7a:	99 2d       	mov	r25, r9
    4e7c:	9f 7e       	andi	r25, 0xEF	; 239
    4e7e:	96 ff       	sbrs	r25, 6
    4e80:	16 e0       	ldi	r17, 0x06	; 6
    4e82:	9f 73       	andi	r25, 0x3F	; 63
    4e84:	99 2e       	mov	r9, r25
    4e86:	85 36       	cpi	r24, 0x65	; 101
    4e88:	19 f4       	brne	.+6      	; 0x4e90 <vfprintf+0x152>
    4e8a:	90 64       	ori	r25, 0x40	; 64
    4e8c:	99 2e       	mov	r9, r25
    4e8e:	08 c0       	rjmp	.+16     	; 0x4ea0 <vfprintf+0x162>
    4e90:	86 36       	cpi	r24, 0x66	; 102
    4e92:	21 f4       	brne	.+8      	; 0x4e9c <vfprintf+0x15e>
    4e94:	39 2f       	mov	r19, r25
    4e96:	30 68       	ori	r19, 0x80	; 128
    4e98:	93 2e       	mov	r9, r19
    4e9a:	02 c0       	rjmp	.+4      	; 0x4ea0 <vfprintf+0x162>
    4e9c:	11 11       	cpse	r17, r1
    4e9e:	11 50       	subi	r17, 0x01	; 1
    4ea0:	97 fe       	sbrs	r9, 7
    4ea2:	07 c0       	rjmp	.+14     	; 0x4eb2 <vfprintf+0x174>
    4ea4:	1c 33       	cpi	r17, 0x3C	; 60
    4ea6:	50 f4       	brcc	.+20     	; 0x4ebc <vfprintf+0x17e>
    4ea8:	44 24       	eor	r4, r4
    4eaa:	43 94       	inc	r4
    4eac:	41 0e       	add	r4, r17
    4eae:	27 e0       	ldi	r18, 0x07	; 7
    4eb0:	0b c0       	rjmp	.+22     	; 0x4ec8 <vfprintf+0x18a>
    4eb2:	18 30       	cpi	r17, 0x08	; 8
    4eb4:	38 f0       	brcs	.+14     	; 0x4ec4 <vfprintf+0x186>
    4eb6:	27 e0       	ldi	r18, 0x07	; 7
    4eb8:	17 e0       	ldi	r17, 0x07	; 7
    4eba:	05 c0       	rjmp	.+10     	; 0x4ec6 <vfprintf+0x188>
    4ebc:	27 e0       	ldi	r18, 0x07	; 7
    4ebe:	9c e3       	ldi	r25, 0x3C	; 60
    4ec0:	49 2e       	mov	r4, r25
    4ec2:	02 c0       	rjmp	.+4      	; 0x4ec8 <vfprintf+0x18a>
    4ec4:	21 2f       	mov	r18, r17
    4ec6:	41 2c       	mov	r4, r1
    4ec8:	56 01       	movw	r10, r12
    4eca:	84 e0       	ldi	r24, 0x04	; 4
    4ecc:	a8 0e       	add	r10, r24
    4ece:	b1 1c       	adc	r11, r1
    4ed0:	f6 01       	movw	r30, r12
    4ed2:	60 81       	ld	r22, Z
    4ed4:	71 81       	ldd	r23, Z+1	; 0x01
    4ed6:	82 81       	ldd	r24, Z+2	; 0x02
    4ed8:	93 81       	ldd	r25, Z+3	; 0x03
    4eda:	04 2d       	mov	r16, r4
    4edc:	a3 01       	movw	r20, r6
    4ede:	18 d3       	rcall	.+1584   	; 0x5510 <__ftoa_engine>
    4ee0:	6c 01       	movw	r12, r24
    4ee2:	f9 81       	ldd	r31, Y+1	; 0x01
    4ee4:	fc 87       	std	Y+12, r31	; 0x0c
    4ee6:	f0 ff       	sbrs	r31, 0
    4ee8:	02 c0       	rjmp	.+4      	; 0x4eee <vfprintf+0x1b0>
    4eea:	f3 ff       	sbrs	r31, 3
    4eec:	06 c0       	rjmp	.+12     	; 0x4efa <vfprintf+0x1bc>
    4eee:	91 fc       	sbrc	r9, 1
    4ef0:	06 c0       	rjmp	.+12     	; 0x4efe <vfprintf+0x1c0>
    4ef2:	92 fe       	sbrs	r9, 2
    4ef4:	06 c0       	rjmp	.+12     	; 0x4f02 <vfprintf+0x1c4>
    4ef6:	00 e2       	ldi	r16, 0x20	; 32
    4ef8:	05 c0       	rjmp	.+10     	; 0x4f04 <vfprintf+0x1c6>
    4efa:	0d e2       	ldi	r16, 0x2D	; 45
    4efc:	03 c0       	rjmp	.+6      	; 0x4f04 <vfprintf+0x1c6>
    4efe:	0b e2       	ldi	r16, 0x2B	; 43
    4f00:	01 c0       	rjmp	.+2      	; 0x4f04 <vfprintf+0x1c6>
    4f02:	00 e0       	ldi	r16, 0x00	; 0
    4f04:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f06:	8c 70       	andi	r24, 0x0C	; 12
    4f08:	19 f0       	breq	.+6      	; 0x4f10 <vfprintf+0x1d2>
    4f0a:	01 11       	cpse	r16, r1
    4f0c:	43 c2       	rjmp	.+1158   	; 0x5394 <vfprintf+0x656>
    4f0e:	80 c2       	rjmp	.+1280   	; 0x5410 <vfprintf+0x6d2>
    4f10:	97 fe       	sbrs	r9, 7
    4f12:	10 c0       	rjmp	.+32     	; 0x4f34 <vfprintf+0x1f6>
    4f14:	4c 0c       	add	r4, r12
    4f16:	fc 85       	ldd	r31, Y+12	; 0x0c
    4f18:	f4 ff       	sbrs	r31, 4
    4f1a:	04 c0       	rjmp	.+8      	; 0x4f24 <vfprintf+0x1e6>
    4f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f1e:	81 33       	cpi	r24, 0x31	; 49
    4f20:	09 f4       	brne	.+2      	; 0x4f24 <vfprintf+0x1e6>
    4f22:	4a 94       	dec	r4
    4f24:	14 14       	cp	r1, r4
    4f26:	74 f5       	brge	.+92     	; 0x4f84 <vfprintf+0x246>
    4f28:	28 e0       	ldi	r18, 0x08	; 8
    4f2a:	24 15       	cp	r18, r4
    4f2c:	78 f5       	brcc	.+94     	; 0x4f8c <vfprintf+0x24e>
    4f2e:	88 e0       	ldi	r24, 0x08	; 8
    4f30:	48 2e       	mov	r4, r24
    4f32:	2c c0       	rjmp	.+88     	; 0x4f8c <vfprintf+0x24e>
    4f34:	96 fc       	sbrc	r9, 6
    4f36:	2a c0       	rjmp	.+84     	; 0x4f8c <vfprintf+0x24e>
    4f38:	81 2f       	mov	r24, r17
    4f3a:	90 e0       	ldi	r25, 0x00	; 0
    4f3c:	8c 15       	cp	r24, r12
    4f3e:	9d 05       	cpc	r25, r13
    4f40:	9c f0       	brlt	.+38     	; 0x4f68 <vfprintf+0x22a>
    4f42:	3c ef       	ldi	r19, 0xFC	; 252
    4f44:	c3 16       	cp	r12, r19
    4f46:	3f ef       	ldi	r19, 0xFF	; 255
    4f48:	d3 06       	cpc	r13, r19
    4f4a:	74 f0       	brlt	.+28     	; 0x4f68 <vfprintf+0x22a>
    4f4c:	89 2d       	mov	r24, r9
    4f4e:	80 68       	ori	r24, 0x80	; 128
    4f50:	98 2e       	mov	r9, r24
    4f52:	0a c0       	rjmp	.+20     	; 0x4f68 <vfprintf+0x22a>
    4f54:	e2 e0       	ldi	r30, 0x02	; 2
    4f56:	f0 e0       	ldi	r31, 0x00	; 0
    4f58:	ec 0f       	add	r30, r28
    4f5a:	fd 1f       	adc	r31, r29
    4f5c:	e1 0f       	add	r30, r17
    4f5e:	f1 1d       	adc	r31, r1
    4f60:	80 81       	ld	r24, Z
    4f62:	80 33       	cpi	r24, 0x30	; 48
    4f64:	19 f4       	brne	.+6      	; 0x4f6c <vfprintf+0x22e>
    4f66:	11 50       	subi	r17, 0x01	; 1
    4f68:	11 11       	cpse	r17, r1
    4f6a:	f4 cf       	rjmp	.-24     	; 0x4f54 <vfprintf+0x216>
    4f6c:	97 fe       	sbrs	r9, 7
    4f6e:	0e c0       	rjmp	.+28     	; 0x4f8c <vfprintf+0x24e>
    4f70:	44 24       	eor	r4, r4
    4f72:	43 94       	inc	r4
    4f74:	41 0e       	add	r4, r17
    4f76:	81 2f       	mov	r24, r17
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	c8 16       	cp	r12, r24
    4f7c:	d9 06       	cpc	r13, r25
    4f7e:	2c f4       	brge	.+10     	; 0x4f8a <vfprintf+0x24c>
    4f80:	1c 19       	sub	r17, r12
    4f82:	04 c0       	rjmp	.+8      	; 0x4f8c <vfprintf+0x24e>
    4f84:	44 24       	eor	r4, r4
    4f86:	43 94       	inc	r4
    4f88:	01 c0       	rjmp	.+2      	; 0x4f8c <vfprintf+0x24e>
    4f8a:	10 e0       	ldi	r17, 0x00	; 0
    4f8c:	97 fe       	sbrs	r9, 7
    4f8e:	06 c0       	rjmp	.+12     	; 0x4f9c <vfprintf+0x25e>
    4f90:	1c 14       	cp	r1, r12
    4f92:	1d 04       	cpc	r1, r13
    4f94:	34 f4       	brge	.+12     	; 0x4fa2 <vfprintf+0x264>
    4f96:	c6 01       	movw	r24, r12
    4f98:	01 96       	adiw	r24, 0x01	; 1
    4f9a:	05 c0       	rjmp	.+10     	; 0x4fa6 <vfprintf+0x268>
    4f9c:	85 e0       	ldi	r24, 0x05	; 5
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	02 c0       	rjmp	.+4      	; 0x4fa6 <vfprintf+0x268>
    4fa2:	81 e0       	ldi	r24, 0x01	; 1
    4fa4:	90 e0       	ldi	r25, 0x00	; 0
    4fa6:	01 11       	cpse	r16, r1
    4fa8:	01 96       	adiw	r24, 0x01	; 1
    4faa:	11 23       	and	r17, r17
    4fac:	31 f0       	breq	.+12     	; 0x4fba <vfprintf+0x27c>
    4fae:	21 2f       	mov	r18, r17
    4fb0:	30 e0       	ldi	r19, 0x00	; 0
    4fb2:	2f 5f       	subi	r18, 0xFF	; 255
    4fb4:	3f 4f       	sbci	r19, 0xFF	; 255
    4fb6:	82 0f       	add	r24, r18
    4fb8:	93 1f       	adc	r25, r19
    4fba:	25 2d       	mov	r18, r5
    4fbc:	30 e0       	ldi	r19, 0x00	; 0
    4fbe:	82 17       	cp	r24, r18
    4fc0:	93 07       	cpc	r25, r19
    4fc2:	14 f4       	brge	.+4      	; 0x4fc8 <vfprintf+0x28a>
    4fc4:	58 1a       	sub	r5, r24
    4fc6:	01 c0       	rjmp	.+2      	; 0x4fca <vfprintf+0x28c>
    4fc8:	51 2c       	mov	r5, r1
    4fca:	89 2d       	mov	r24, r9
    4fcc:	89 70       	andi	r24, 0x09	; 9
    4fce:	41 f4       	brne	.+16     	; 0x4fe0 <vfprintf+0x2a2>
    4fd0:	55 20       	and	r5, r5
    4fd2:	31 f0       	breq	.+12     	; 0x4fe0 <vfprintf+0x2a2>
    4fd4:	b7 01       	movw	r22, r14
    4fd6:	80 e2       	ldi	r24, 0x20	; 32
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	91 d3       	rcall	.+1826   	; 0x56fe <fputc>
    4fdc:	5a 94       	dec	r5
    4fde:	f8 cf       	rjmp	.-16     	; 0x4fd0 <vfprintf+0x292>
    4fe0:	00 23       	and	r16, r16
    4fe2:	21 f0       	breq	.+8      	; 0x4fec <vfprintf+0x2ae>
    4fe4:	b7 01       	movw	r22, r14
    4fe6:	80 2f       	mov	r24, r16
    4fe8:	90 e0       	ldi	r25, 0x00	; 0
    4fea:	89 d3       	rcall	.+1810   	; 0x56fe <fputc>
    4fec:	93 fc       	sbrc	r9, 3
    4fee:	08 c0       	rjmp	.+16     	; 0x5000 <vfprintf+0x2c2>
    4ff0:	55 20       	and	r5, r5
    4ff2:	31 f0       	breq	.+12     	; 0x5000 <vfprintf+0x2c2>
    4ff4:	b7 01       	movw	r22, r14
    4ff6:	80 e3       	ldi	r24, 0x30	; 48
    4ff8:	90 e0       	ldi	r25, 0x00	; 0
    4ffa:	81 d3       	rcall	.+1794   	; 0x56fe <fputc>
    4ffc:	5a 94       	dec	r5
    4ffe:	f8 cf       	rjmp	.-16     	; 0x4ff0 <vfprintf+0x2b2>
    5000:	97 fe       	sbrs	r9, 7
    5002:	4a c0       	rjmp	.+148    	; 0x5098 <vfprintf+0x35a>
    5004:	46 01       	movw	r8, r12
    5006:	d7 fe       	sbrs	r13, 7
    5008:	02 c0       	rjmp	.+4      	; 0x500e <vfprintf+0x2d0>
    500a:	81 2c       	mov	r8, r1
    500c:	91 2c       	mov	r9, r1
    500e:	c6 01       	movw	r24, r12
    5010:	88 19       	sub	r24, r8
    5012:	99 09       	sbc	r25, r9
    5014:	f3 01       	movw	r30, r6
    5016:	e8 0f       	add	r30, r24
    5018:	f9 1f       	adc	r31, r25
    501a:	fe 87       	std	Y+14, r31	; 0x0e
    501c:	ed 87       	std	Y+13, r30	; 0x0d
    501e:	96 01       	movw	r18, r12
    5020:	24 19       	sub	r18, r4
    5022:	31 09       	sbc	r19, r1
    5024:	38 8b       	std	Y+16, r19	; 0x10
    5026:	2f 87       	std	Y+15, r18	; 0x0f
    5028:	01 2f       	mov	r16, r17
    502a:	10 e0       	ldi	r17, 0x00	; 0
    502c:	11 95       	neg	r17
    502e:	01 95       	neg	r16
    5030:	11 09       	sbc	r17, r1
    5032:	3f ef       	ldi	r19, 0xFF	; 255
    5034:	83 16       	cp	r8, r19
    5036:	93 06       	cpc	r9, r19
    5038:	21 f4       	brne	.+8      	; 0x5042 <vfprintf+0x304>
    503a:	b7 01       	movw	r22, r14
    503c:	8e e2       	ldi	r24, 0x2E	; 46
    503e:	90 e0       	ldi	r25, 0x00	; 0
    5040:	5e d3       	rcall	.+1724   	; 0x56fe <fputc>
    5042:	c8 14       	cp	r12, r8
    5044:	d9 04       	cpc	r13, r9
    5046:	4c f0       	brlt	.+18     	; 0x505a <vfprintf+0x31c>
    5048:	8f 85       	ldd	r24, Y+15	; 0x0f
    504a:	98 89       	ldd	r25, Y+16	; 0x10
    504c:	88 15       	cp	r24, r8
    504e:	99 05       	cpc	r25, r9
    5050:	24 f4       	brge	.+8      	; 0x505a <vfprintf+0x31c>
    5052:	ed 85       	ldd	r30, Y+13	; 0x0d
    5054:	fe 85       	ldd	r31, Y+14	; 0x0e
    5056:	81 81       	ldd	r24, Z+1	; 0x01
    5058:	01 c0       	rjmp	.+2      	; 0x505c <vfprintf+0x31e>
    505a:	80 e3       	ldi	r24, 0x30	; 48
    505c:	f1 e0       	ldi	r31, 0x01	; 1
    505e:	8f 1a       	sub	r8, r31
    5060:	91 08       	sbc	r9, r1
    5062:	2d 85       	ldd	r18, Y+13	; 0x0d
    5064:	3e 85       	ldd	r19, Y+14	; 0x0e
    5066:	2f 5f       	subi	r18, 0xFF	; 255
    5068:	3f 4f       	sbci	r19, 0xFF	; 255
    506a:	3e 87       	std	Y+14, r19	; 0x0e
    506c:	2d 87       	std	Y+13, r18	; 0x0d
    506e:	80 16       	cp	r8, r16
    5070:	91 06       	cpc	r9, r17
    5072:	24 f0       	brlt	.+8      	; 0x507c <vfprintf+0x33e>
    5074:	b7 01       	movw	r22, r14
    5076:	90 e0       	ldi	r25, 0x00	; 0
    5078:	42 d3       	rcall	.+1668   	; 0x56fe <fputc>
    507a:	db cf       	rjmp	.-74     	; 0x5032 <vfprintf+0x2f4>
    507c:	c8 14       	cp	r12, r8
    507e:	d9 04       	cpc	r13, r9
    5080:	41 f4       	brne	.+16     	; 0x5092 <vfprintf+0x354>
    5082:	9a 81       	ldd	r25, Y+2	; 0x02
    5084:	96 33       	cpi	r25, 0x36	; 54
    5086:	20 f4       	brcc	.+8      	; 0x5090 <vfprintf+0x352>
    5088:	95 33       	cpi	r25, 0x35	; 53
    508a:	19 f4       	brne	.+6      	; 0x5092 <vfprintf+0x354>
    508c:	3c 85       	ldd	r19, Y+12	; 0x0c
    508e:	34 ff       	sbrs	r19, 4
    5090:	81 e3       	ldi	r24, 0x31	; 49
    5092:	b7 01       	movw	r22, r14
    5094:	90 e0       	ldi	r25, 0x00	; 0
    5096:	48 c0       	rjmp	.+144    	; 0x5128 <vfprintf+0x3ea>
    5098:	8a 81       	ldd	r24, Y+2	; 0x02
    509a:	81 33       	cpi	r24, 0x31	; 49
    509c:	19 f0       	breq	.+6      	; 0x50a4 <vfprintf+0x366>
    509e:	9c 85       	ldd	r25, Y+12	; 0x0c
    50a0:	9f 7e       	andi	r25, 0xEF	; 239
    50a2:	9c 87       	std	Y+12, r25	; 0x0c
    50a4:	b7 01       	movw	r22, r14
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	2a d3       	rcall	.+1620   	; 0x56fe <fputc>
    50aa:	11 11       	cpse	r17, r1
    50ac:	05 c0       	rjmp	.+10     	; 0x50b8 <vfprintf+0x37a>
    50ae:	94 fc       	sbrc	r9, 4
    50b0:	16 c0       	rjmp	.+44     	; 0x50de <vfprintf+0x3a0>
    50b2:	85 e6       	ldi	r24, 0x65	; 101
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	15 c0       	rjmp	.+42     	; 0x50e2 <vfprintf+0x3a4>
    50b8:	b7 01       	movw	r22, r14
    50ba:	8e e2       	ldi	r24, 0x2E	; 46
    50bc:	90 e0       	ldi	r25, 0x00	; 0
    50be:	1f d3       	rcall	.+1598   	; 0x56fe <fputc>
    50c0:	1e 5f       	subi	r17, 0xFE	; 254
    50c2:	82 e0       	ldi	r24, 0x02	; 2
    50c4:	01 e0       	ldi	r16, 0x01	; 1
    50c6:	08 0f       	add	r16, r24
    50c8:	f3 01       	movw	r30, r6
    50ca:	e8 0f       	add	r30, r24
    50cc:	f1 1d       	adc	r31, r1
    50ce:	80 81       	ld	r24, Z
    50d0:	b7 01       	movw	r22, r14
    50d2:	90 e0       	ldi	r25, 0x00	; 0
    50d4:	14 d3       	rcall	.+1576   	; 0x56fe <fputc>
    50d6:	80 2f       	mov	r24, r16
    50d8:	01 13       	cpse	r16, r17
    50da:	f4 cf       	rjmp	.-24     	; 0x50c4 <vfprintf+0x386>
    50dc:	e8 cf       	rjmp	.-48     	; 0x50ae <vfprintf+0x370>
    50de:	85 e4       	ldi	r24, 0x45	; 69
    50e0:	90 e0       	ldi	r25, 0x00	; 0
    50e2:	b7 01       	movw	r22, r14
    50e4:	0c d3       	rcall	.+1560   	; 0x56fe <fputc>
    50e6:	d7 fc       	sbrc	r13, 7
    50e8:	06 c0       	rjmp	.+12     	; 0x50f6 <vfprintf+0x3b8>
    50ea:	c1 14       	cp	r12, r1
    50ec:	d1 04       	cpc	r13, r1
    50ee:	41 f4       	brne	.+16     	; 0x5100 <vfprintf+0x3c2>
    50f0:	ec 85       	ldd	r30, Y+12	; 0x0c
    50f2:	e4 ff       	sbrs	r30, 4
    50f4:	05 c0       	rjmp	.+10     	; 0x5100 <vfprintf+0x3c2>
    50f6:	d1 94       	neg	r13
    50f8:	c1 94       	neg	r12
    50fa:	d1 08       	sbc	r13, r1
    50fc:	8d e2       	ldi	r24, 0x2D	; 45
    50fe:	01 c0       	rjmp	.+2      	; 0x5102 <vfprintf+0x3c4>
    5100:	8b e2       	ldi	r24, 0x2B	; 43
    5102:	b7 01       	movw	r22, r14
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	fb d2       	rcall	.+1526   	; 0x56fe <fputc>
    5108:	80 e3       	ldi	r24, 0x30	; 48
    510a:	2a e0       	ldi	r18, 0x0A	; 10
    510c:	c2 16       	cp	r12, r18
    510e:	d1 04       	cpc	r13, r1
    5110:	2c f0       	brlt	.+10     	; 0x511c <vfprintf+0x3de>
    5112:	8f 5f       	subi	r24, 0xFF	; 255
    5114:	fa e0       	ldi	r31, 0x0A	; 10
    5116:	cf 1a       	sub	r12, r31
    5118:	d1 08       	sbc	r13, r1
    511a:	f7 cf       	rjmp	.-18     	; 0x510a <vfprintf+0x3cc>
    511c:	b7 01       	movw	r22, r14
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	ee d2       	rcall	.+1500   	; 0x56fe <fputc>
    5122:	b7 01       	movw	r22, r14
    5124:	c6 01       	movw	r24, r12
    5126:	c0 96       	adiw	r24, 0x30	; 48
    5128:	ea d2       	rcall	.+1492   	; 0x56fe <fputc>
    512a:	49 c1       	rjmp	.+658    	; 0x53be <vfprintf+0x680>
    512c:	83 36       	cpi	r24, 0x63	; 99
    512e:	31 f0       	breq	.+12     	; 0x513c <vfprintf+0x3fe>
    5130:	83 37       	cpi	r24, 0x73	; 115
    5132:	79 f0       	breq	.+30     	; 0x5152 <vfprintf+0x414>
    5134:	83 35       	cpi	r24, 0x53	; 83
    5136:	09 f0       	breq	.+2      	; 0x513a <vfprintf+0x3fc>
    5138:	52 c0       	rjmp	.+164    	; 0x51de <vfprintf+0x4a0>
    513a:	1f c0       	rjmp	.+62     	; 0x517a <vfprintf+0x43c>
    513c:	56 01       	movw	r10, r12
    513e:	32 e0       	ldi	r19, 0x02	; 2
    5140:	a3 0e       	add	r10, r19
    5142:	b1 1c       	adc	r11, r1
    5144:	f6 01       	movw	r30, r12
    5146:	80 81       	ld	r24, Z
    5148:	89 83       	std	Y+1, r24	; 0x01
    514a:	01 e0       	ldi	r16, 0x01	; 1
    514c:	10 e0       	ldi	r17, 0x00	; 0
    514e:	63 01       	movw	r12, r6
    5150:	11 c0       	rjmp	.+34     	; 0x5174 <vfprintf+0x436>
    5152:	56 01       	movw	r10, r12
    5154:	f2 e0       	ldi	r31, 0x02	; 2
    5156:	af 0e       	add	r10, r31
    5158:	b1 1c       	adc	r11, r1
    515a:	f6 01       	movw	r30, r12
    515c:	c0 80       	ld	r12, Z
    515e:	d1 80       	ldd	r13, Z+1	; 0x01
    5160:	96 fe       	sbrs	r9, 6
    5162:	03 c0       	rjmp	.+6      	; 0x516a <vfprintf+0x42c>
    5164:	61 2f       	mov	r22, r17
    5166:	70 e0       	ldi	r23, 0x00	; 0
    5168:	02 c0       	rjmp	.+4      	; 0x516e <vfprintf+0x430>
    516a:	6f ef       	ldi	r22, 0xFF	; 255
    516c:	7f ef       	ldi	r23, 0xFF	; 255
    516e:	c6 01       	movw	r24, r12
    5170:	bb d2       	rcall	.+1398   	; 0x56e8 <strnlen>
    5172:	8c 01       	movw	r16, r24
    5174:	f9 2d       	mov	r31, r9
    5176:	ff 77       	andi	r31, 0x7F	; 127
    5178:	13 c0       	rjmp	.+38     	; 0x51a0 <vfprintf+0x462>
    517a:	56 01       	movw	r10, r12
    517c:	22 e0       	ldi	r18, 0x02	; 2
    517e:	a2 0e       	add	r10, r18
    5180:	b1 1c       	adc	r11, r1
    5182:	f6 01       	movw	r30, r12
    5184:	c0 80       	ld	r12, Z
    5186:	d1 80       	ldd	r13, Z+1	; 0x01
    5188:	96 fe       	sbrs	r9, 6
    518a:	03 c0       	rjmp	.+6      	; 0x5192 <vfprintf+0x454>
    518c:	61 2f       	mov	r22, r17
    518e:	70 e0       	ldi	r23, 0x00	; 0
    5190:	02 c0       	rjmp	.+4      	; 0x5196 <vfprintf+0x458>
    5192:	6f ef       	ldi	r22, 0xFF	; 255
    5194:	7f ef       	ldi	r23, 0xFF	; 255
    5196:	c6 01       	movw	r24, r12
    5198:	93 d2       	rcall	.+1318   	; 0x56c0 <strnlen_P>
    519a:	8c 01       	movw	r16, r24
    519c:	f9 2d       	mov	r31, r9
    519e:	f0 68       	ori	r31, 0x80	; 128
    51a0:	9f 2e       	mov	r9, r31
    51a2:	f3 fd       	sbrc	r31, 3
    51a4:	18 c0       	rjmp	.+48     	; 0x51d6 <vfprintf+0x498>
    51a6:	85 2d       	mov	r24, r5
    51a8:	90 e0       	ldi	r25, 0x00	; 0
    51aa:	08 17       	cp	r16, r24
    51ac:	19 07       	cpc	r17, r25
    51ae:	98 f4       	brcc	.+38     	; 0x51d6 <vfprintf+0x498>
    51b0:	b7 01       	movw	r22, r14
    51b2:	80 e2       	ldi	r24, 0x20	; 32
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    51b6:	a3 d2       	rcall	.+1350   	; 0x56fe <fputc>
    51b8:	5a 94       	dec	r5
    51ba:	f5 cf       	rjmp	.-22     	; 0x51a6 <vfprintf+0x468>
    51bc:	f6 01       	movw	r30, r12
    51be:	97 fc       	sbrc	r9, 7
    51c0:	85 91       	lpm	r24, Z+
    51c2:	97 fe       	sbrs	r9, 7
    51c4:	81 91       	ld	r24, Z+
    51c6:	6f 01       	movw	r12, r30
    51c8:	b7 01       	movw	r22, r14
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	98 d2       	rcall	.+1328   	; 0x56fe <fputc>
    51ce:	51 10       	cpse	r5, r1
    51d0:	5a 94       	dec	r5
    51d2:	01 50       	subi	r16, 0x01	; 1
    51d4:	11 09       	sbc	r17, r1
    51d6:	01 15       	cp	r16, r1
    51d8:	11 05       	cpc	r17, r1
    51da:	81 f7       	brne	.-32     	; 0x51bc <vfprintf+0x47e>
    51dc:	f0 c0       	rjmp	.+480    	; 0x53be <vfprintf+0x680>
    51de:	84 36       	cpi	r24, 0x64	; 100
    51e0:	11 f0       	breq	.+4      	; 0x51e6 <vfprintf+0x4a8>
    51e2:	89 36       	cpi	r24, 0x69	; 105
    51e4:	59 f5       	brne	.+86     	; 0x523c <vfprintf+0x4fe>
    51e6:	56 01       	movw	r10, r12
    51e8:	97 fe       	sbrs	r9, 7
    51ea:	09 c0       	rjmp	.+18     	; 0x51fe <vfprintf+0x4c0>
    51ec:	24 e0       	ldi	r18, 0x04	; 4
    51ee:	a2 0e       	add	r10, r18
    51f0:	b1 1c       	adc	r11, r1
    51f2:	f6 01       	movw	r30, r12
    51f4:	60 81       	ld	r22, Z
    51f6:	71 81       	ldd	r23, Z+1	; 0x01
    51f8:	82 81       	ldd	r24, Z+2	; 0x02
    51fa:	93 81       	ldd	r25, Z+3	; 0x03
    51fc:	0a c0       	rjmp	.+20     	; 0x5212 <vfprintf+0x4d4>
    51fe:	f2 e0       	ldi	r31, 0x02	; 2
    5200:	af 0e       	add	r10, r31
    5202:	b1 1c       	adc	r11, r1
    5204:	f6 01       	movw	r30, r12
    5206:	60 81       	ld	r22, Z
    5208:	71 81       	ldd	r23, Z+1	; 0x01
    520a:	07 2e       	mov	r0, r23
    520c:	00 0c       	add	r0, r0
    520e:	88 0b       	sbc	r24, r24
    5210:	99 0b       	sbc	r25, r25
    5212:	f9 2d       	mov	r31, r9
    5214:	ff 76       	andi	r31, 0x6F	; 111
    5216:	9f 2e       	mov	r9, r31
    5218:	97 ff       	sbrs	r25, 7
    521a:	09 c0       	rjmp	.+18     	; 0x522e <vfprintf+0x4f0>
    521c:	90 95       	com	r25
    521e:	80 95       	com	r24
    5220:	70 95       	com	r23
    5222:	61 95       	neg	r22
    5224:	7f 4f       	sbci	r23, 0xFF	; 255
    5226:	8f 4f       	sbci	r24, 0xFF	; 255
    5228:	9f 4f       	sbci	r25, 0xFF	; 255
    522a:	f0 68       	ori	r31, 0x80	; 128
    522c:	9f 2e       	mov	r9, r31
    522e:	2a e0       	ldi	r18, 0x0A	; 10
    5230:	30 e0       	ldi	r19, 0x00	; 0
    5232:	a3 01       	movw	r20, r6
    5234:	46 d3       	rcall	.+1676   	; 0x58c2 <__ultoa_invert>
    5236:	c8 2e       	mov	r12, r24
    5238:	c6 18       	sub	r12, r6
    523a:	3e c0       	rjmp	.+124    	; 0x52b8 <vfprintf+0x57a>
    523c:	09 2d       	mov	r16, r9
    523e:	85 37       	cpi	r24, 0x75	; 117
    5240:	21 f4       	brne	.+8      	; 0x524a <vfprintf+0x50c>
    5242:	0f 7e       	andi	r16, 0xEF	; 239
    5244:	2a e0       	ldi	r18, 0x0A	; 10
    5246:	30 e0       	ldi	r19, 0x00	; 0
    5248:	1d c0       	rjmp	.+58     	; 0x5284 <vfprintf+0x546>
    524a:	09 7f       	andi	r16, 0xF9	; 249
    524c:	8f 36       	cpi	r24, 0x6F	; 111
    524e:	91 f0       	breq	.+36     	; 0x5274 <vfprintf+0x536>
    5250:	18 f4       	brcc	.+6      	; 0x5258 <vfprintf+0x51a>
    5252:	88 35       	cpi	r24, 0x58	; 88
    5254:	59 f0       	breq	.+22     	; 0x526c <vfprintf+0x52e>
    5256:	bc c0       	rjmp	.+376    	; 0x53d0 <vfprintf+0x692>
    5258:	80 37       	cpi	r24, 0x70	; 112
    525a:	19 f0       	breq	.+6      	; 0x5262 <vfprintf+0x524>
    525c:	88 37       	cpi	r24, 0x78	; 120
    525e:	11 f0       	breq	.+4      	; 0x5264 <vfprintf+0x526>
    5260:	b7 c0       	rjmp	.+366    	; 0x53d0 <vfprintf+0x692>
    5262:	00 61       	ori	r16, 0x10	; 16
    5264:	04 ff       	sbrs	r16, 4
    5266:	09 c0       	rjmp	.+18     	; 0x527a <vfprintf+0x53c>
    5268:	04 60       	ori	r16, 0x04	; 4
    526a:	07 c0       	rjmp	.+14     	; 0x527a <vfprintf+0x53c>
    526c:	94 fe       	sbrs	r9, 4
    526e:	08 c0       	rjmp	.+16     	; 0x5280 <vfprintf+0x542>
    5270:	06 60       	ori	r16, 0x06	; 6
    5272:	06 c0       	rjmp	.+12     	; 0x5280 <vfprintf+0x542>
    5274:	28 e0       	ldi	r18, 0x08	; 8
    5276:	30 e0       	ldi	r19, 0x00	; 0
    5278:	05 c0       	rjmp	.+10     	; 0x5284 <vfprintf+0x546>
    527a:	20 e1       	ldi	r18, 0x10	; 16
    527c:	30 e0       	ldi	r19, 0x00	; 0
    527e:	02 c0       	rjmp	.+4      	; 0x5284 <vfprintf+0x546>
    5280:	20 e1       	ldi	r18, 0x10	; 16
    5282:	32 e0       	ldi	r19, 0x02	; 2
    5284:	56 01       	movw	r10, r12
    5286:	07 ff       	sbrs	r16, 7
    5288:	09 c0       	rjmp	.+18     	; 0x529c <vfprintf+0x55e>
    528a:	84 e0       	ldi	r24, 0x04	; 4
    528c:	a8 0e       	add	r10, r24
    528e:	b1 1c       	adc	r11, r1
    5290:	f6 01       	movw	r30, r12
    5292:	60 81       	ld	r22, Z
    5294:	71 81       	ldd	r23, Z+1	; 0x01
    5296:	82 81       	ldd	r24, Z+2	; 0x02
    5298:	93 81       	ldd	r25, Z+3	; 0x03
    529a:	08 c0       	rjmp	.+16     	; 0x52ac <vfprintf+0x56e>
    529c:	f2 e0       	ldi	r31, 0x02	; 2
    529e:	af 0e       	add	r10, r31
    52a0:	b1 1c       	adc	r11, r1
    52a2:	f6 01       	movw	r30, r12
    52a4:	60 81       	ld	r22, Z
    52a6:	71 81       	ldd	r23, Z+1	; 0x01
    52a8:	80 e0       	ldi	r24, 0x00	; 0
    52aa:	90 e0       	ldi	r25, 0x00	; 0
    52ac:	a3 01       	movw	r20, r6
    52ae:	09 d3       	rcall	.+1554   	; 0x58c2 <__ultoa_invert>
    52b0:	c8 2e       	mov	r12, r24
    52b2:	c6 18       	sub	r12, r6
    52b4:	0f 77       	andi	r16, 0x7F	; 127
    52b6:	90 2e       	mov	r9, r16
    52b8:	96 fe       	sbrs	r9, 6
    52ba:	0b c0       	rjmp	.+22     	; 0x52d2 <vfprintf+0x594>
    52bc:	09 2d       	mov	r16, r9
    52be:	0e 7f       	andi	r16, 0xFE	; 254
    52c0:	c1 16       	cp	r12, r17
    52c2:	50 f4       	brcc	.+20     	; 0x52d8 <vfprintf+0x59a>
    52c4:	94 fe       	sbrs	r9, 4
    52c6:	0a c0       	rjmp	.+20     	; 0x52dc <vfprintf+0x59e>
    52c8:	92 fc       	sbrc	r9, 2
    52ca:	08 c0       	rjmp	.+16     	; 0x52dc <vfprintf+0x59e>
    52cc:	09 2d       	mov	r16, r9
    52ce:	0e 7e       	andi	r16, 0xEE	; 238
    52d0:	05 c0       	rjmp	.+10     	; 0x52dc <vfprintf+0x59e>
    52d2:	dc 2c       	mov	r13, r12
    52d4:	09 2d       	mov	r16, r9
    52d6:	03 c0       	rjmp	.+6      	; 0x52de <vfprintf+0x5a0>
    52d8:	dc 2c       	mov	r13, r12
    52da:	01 c0       	rjmp	.+2      	; 0x52de <vfprintf+0x5a0>
    52dc:	d1 2e       	mov	r13, r17
    52de:	04 ff       	sbrs	r16, 4
    52e0:	0d c0       	rjmp	.+26     	; 0x52fc <vfprintf+0x5be>
    52e2:	fe 01       	movw	r30, r28
    52e4:	ec 0d       	add	r30, r12
    52e6:	f1 1d       	adc	r31, r1
    52e8:	80 81       	ld	r24, Z
    52ea:	80 33       	cpi	r24, 0x30	; 48
    52ec:	11 f4       	brne	.+4      	; 0x52f2 <vfprintf+0x5b4>
    52ee:	09 7e       	andi	r16, 0xE9	; 233
    52f0:	09 c0       	rjmp	.+18     	; 0x5304 <vfprintf+0x5c6>
    52f2:	02 ff       	sbrs	r16, 2
    52f4:	06 c0       	rjmp	.+12     	; 0x5302 <vfprintf+0x5c4>
    52f6:	d3 94       	inc	r13
    52f8:	d3 94       	inc	r13
    52fa:	04 c0       	rjmp	.+8      	; 0x5304 <vfprintf+0x5c6>
    52fc:	80 2f       	mov	r24, r16
    52fe:	86 78       	andi	r24, 0x86	; 134
    5300:	09 f0       	breq	.+2      	; 0x5304 <vfprintf+0x5c6>
    5302:	d3 94       	inc	r13
    5304:	03 fd       	sbrc	r16, 3
    5306:	10 c0       	rjmp	.+32     	; 0x5328 <vfprintf+0x5ea>
    5308:	00 ff       	sbrs	r16, 0
    530a:	06 c0       	rjmp	.+12     	; 0x5318 <vfprintf+0x5da>
    530c:	1c 2d       	mov	r17, r12
    530e:	d5 14       	cp	r13, r5
    5310:	78 f4       	brcc	.+30     	; 0x5330 <vfprintf+0x5f2>
    5312:	15 0d       	add	r17, r5
    5314:	1d 19       	sub	r17, r13
    5316:	0c c0       	rjmp	.+24     	; 0x5330 <vfprintf+0x5f2>
    5318:	d5 14       	cp	r13, r5
    531a:	50 f4       	brcc	.+20     	; 0x5330 <vfprintf+0x5f2>
    531c:	b7 01       	movw	r22, r14
    531e:	80 e2       	ldi	r24, 0x20	; 32
    5320:	90 e0       	ldi	r25, 0x00	; 0
    5322:	ed d1       	rcall	.+986    	; 0x56fe <fputc>
    5324:	d3 94       	inc	r13
    5326:	f8 cf       	rjmp	.-16     	; 0x5318 <vfprintf+0x5da>
    5328:	d5 14       	cp	r13, r5
    532a:	10 f4       	brcc	.+4      	; 0x5330 <vfprintf+0x5f2>
    532c:	5d 18       	sub	r5, r13
    532e:	01 c0       	rjmp	.+2      	; 0x5332 <vfprintf+0x5f4>
    5330:	51 2c       	mov	r5, r1
    5332:	04 ff       	sbrs	r16, 4
    5334:	0f c0       	rjmp	.+30     	; 0x5354 <vfprintf+0x616>
    5336:	b7 01       	movw	r22, r14
    5338:	80 e3       	ldi	r24, 0x30	; 48
    533a:	90 e0       	ldi	r25, 0x00	; 0
    533c:	e0 d1       	rcall	.+960    	; 0x56fe <fputc>
    533e:	02 ff       	sbrs	r16, 2
    5340:	16 c0       	rjmp	.+44     	; 0x536e <vfprintf+0x630>
    5342:	01 fd       	sbrc	r16, 1
    5344:	03 c0       	rjmp	.+6      	; 0x534c <vfprintf+0x60e>
    5346:	88 e7       	ldi	r24, 0x78	; 120
    5348:	90 e0       	ldi	r25, 0x00	; 0
    534a:	02 c0       	rjmp	.+4      	; 0x5350 <vfprintf+0x612>
    534c:	88 e5       	ldi	r24, 0x58	; 88
    534e:	90 e0       	ldi	r25, 0x00	; 0
    5350:	b7 01       	movw	r22, r14
    5352:	0c c0       	rjmp	.+24     	; 0x536c <vfprintf+0x62e>
    5354:	80 2f       	mov	r24, r16
    5356:	86 78       	andi	r24, 0x86	; 134
    5358:	51 f0       	breq	.+20     	; 0x536e <vfprintf+0x630>
    535a:	01 ff       	sbrs	r16, 1
    535c:	02 c0       	rjmp	.+4      	; 0x5362 <vfprintf+0x624>
    535e:	8b e2       	ldi	r24, 0x2B	; 43
    5360:	01 c0       	rjmp	.+2      	; 0x5364 <vfprintf+0x626>
    5362:	80 e2       	ldi	r24, 0x20	; 32
    5364:	07 fd       	sbrc	r16, 7
    5366:	8d e2       	ldi	r24, 0x2D	; 45
    5368:	b7 01       	movw	r22, r14
    536a:	90 e0       	ldi	r25, 0x00	; 0
    536c:	c8 d1       	rcall	.+912    	; 0x56fe <fputc>
    536e:	c1 16       	cp	r12, r17
    5370:	30 f4       	brcc	.+12     	; 0x537e <vfprintf+0x640>
    5372:	b7 01       	movw	r22, r14
    5374:	80 e3       	ldi	r24, 0x30	; 48
    5376:	90 e0       	ldi	r25, 0x00	; 0
    5378:	c2 d1       	rcall	.+900    	; 0x56fe <fputc>
    537a:	11 50       	subi	r17, 0x01	; 1
    537c:	f8 cf       	rjmp	.-16     	; 0x536e <vfprintf+0x630>
    537e:	ca 94       	dec	r12
    5380:	f3 01       	movw	r30, r6
    5382:	ec 0d       	add	r30, r12
    5384:	f1 1d       	adc	r31, r1
    5386:	80 81       	ld	r24, Z
    5388:	b7 01       	movw	r22, r14
    538a:	90 e0       	ldi	r25, 0x00	; 0
    538c:	b8 d1       	rcall	.+880    	; 0x56fe <fputc>
    538e:	c1 10       	cpse	r12, r1
    5390:	f6 cf       	rjmp	.-20     	; 0x537e <vfprintf+0x640>
    5392:	15 c0       	rjmp	.+42     	; 0x53be <vfprintf+0x680>
    5394:	f4 e0       	ldi	r31, 0x04	; 4
    5396:	f5 15       	cp	r31, r5
    5398:	50 f5       	brcc	.+84     	; 0x53ee <vfprintf+0x6b0>
    539a:	84 e0       	ldi	r24, 0x04	; 4
    539c:	58 1a       	sub	r5, r24
    539e:	93 fe       	sbrs	r9, 3
    53a0:	1e c0       	rjmp	.+60     	; 0x53de <vfprintf+0x6a0>
    53a2:	01 11       	cpse	r16, r1
    53a4:	25 c0       	rjmp	.+74     	; 0x53f0 <vfprintf+0x6b2>
    53a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    53a8:	23 ff       	sbrs	r18, 3
    53aa:	27 c0       	rjmp	.+78     	; 0x53fa <vfprintf+0x6bc>
    53ac:	06 e8       	ldi	r16, 0x86	; 134
    53ae:	11 e0       	ldi	r17, 0x01	; 1
    53b0:	39 2d       	mov	r19, r9
    53b2:	30 71       	andi	r19, 0x10	; 16
    53b4:	93 2e       	mov	r9, r19
    53b6:	f8 01       	movw	r30, r16
    53b8:	84 91       	lpm	r24, Z
    53ba:	81 11       	cpse	r24, r1
    53bc:	21 c0       	rjmp	.+66     	; 0x5400 <vfprintf+0x6c2>
    53be:	55 20       	and	r5, r5
    53c0:	09 f4       	brne	.+2      	; 0x53c4 <vfprintf+0x686>
    53c2:	fc cc       	rjmp	.-1544   	; 0x4dbc <vfprintf+0x7e>
    53c4:	b7 01       	movw	r22, r14
    53c6:	80 e2       	ldi	r24, 0x20	; 32
    53c8:	90 e0       	ldi	r25, 0x00	; 0
    53ca:	99 d1       	rcall	.+818    	; 0x56fe <fputc>
    53cc:	5a 94       	dec	r5
    53ce:	f7 cf       	rjmp	.-18     	; 0x53be <vfprintf+0x680>
    53d0:	f7 01       	movw	r30, r14
    53d2:	86 81       	ldd	r24, Z+6	; 0x06
    53d4:	97 81       	ldd	r25, Z+7	; 0x07
    53d6:	23 c0       	rjmp	.+70     	; 0x541e <vfprintf+0x6e0>
    53d8:	8f ef       	ldi	r24, 0xFF	; 255
    53da:	9f ef       	ldi	r25, 0xFF	; 255
    53dc:	20 c0       	rjmp	.+64     	; 0x541e <vfprintf+0x6e0>
    53de:	b7 01       	movw	r22, r14
    53e0:	80 e2       	ldi	r24, 0x20	; 32
    53e2:	90 e0       	ldi	r25, 0x00	; 0
    53e4:	8c d1       	rcall	.+792    	; 0x56fe <fputc>
    53e6:	5a 94       	dec	r5
    53e8:	51 10       	cpse	r5, r1
    53ea:	f9 cf       	rjmp	.-14     	; 0x53de <vfprintf+0x6a0>
    53ec:	da cf       	rjmp	.-76     	; 0x53a2 <vfprintf+0x664>
    53ee:	51 2c       	mov	r5, r1
    53f0:	b7 01       	movw	r22, r14
    53f2:	80 2f       	mov	r24, r16
    53f4:	90 e0       	ldi	r25, 0x00	; 0
    53f6:	83 d1       	rcall	.+774    	; 0x56fe <fputc>
    53f8:	d6 cf       	rjmp	.-84     	; 0x53a6 <vfprintf+0x668>
    53fa:	0a e8       	ldi	r16, 0x8A	; 138
    53fc:	11 e0       	ldi	r17, 0x01	; 1
    53fe:	d8 cf       	rjmp	.-80     	; 0x53b0 <vfprintf+0x672>
    5400:	91 10       	cpse	r9, r1
    5402:	80 52       	subi	r24, 0x20	; 32
    5404:	b7 01       	movw	r22, r14
    5406:	90 e0       	ldi	r25, 0x00	; 0
    5408:	7a d1       	rcall	.+756    	; 0x56fe <fputc>
    540a:	0f 5f       	subi	r16, 0xFF	; 255
    540c:	1f 4f       	sbci	r17, 0xFF	; 255
    540e:	d3 cf       	rjmp	.-90     	; 0x53b6 <vfprintf+0x678>
    5410:	23 e0       	ldi	r18, 0x03	; 3
    5412:	25 15       	cp	r18, r5
    5414:	10 f4       	brcc	.+4      	; 0x541a <vfprintf+0x6dc>
    5416:	83 e0       	ldi	r24, 0x03	; 3
    5418:	c1 cf       	rjmp	.-126    	; 0x539c <vfprintf+0x65e>
    541a:	51 2c       	mov	r5, r1
    541c:	c4 cf       	rjmp	.-120    	; 0x53a6 <vfprintf+0x668>
    541e:	60 96       	adiw	r28, 0x10	; 16
    5420:	0f b6       	in	r0, 0x3f	; 63
    5422:	f8 94       	cli
    5424:	de bf       	out	0x3e, r29	; 62
    5426:	0f be       	out	0x3f, r0	; 63
    5428:	cd bf       	out	0x3d, r28	; 61
    542a:	df 91       	pop	r29
    542c:	cf 91       	pop	r28
    542e:	1f 91       	pop	r17
    5430:	0f 91       	pop	r16
    5432:	ff 90       	pop	r15
    5434:	ef 90       	pop	r14
    5436:	df 90       	pop	r13
    5438:	cf 90       	pop	r12
    543a:	bf 90       	pop	r11
    543c:	af 90       	pop	r10
    543e:	9f 90       	pop	r9
    5440:	8f 90       	pop	r8
    5442:	7f 90       	pop	r7
    5444:	6f 90       	pop	r6
    5446:	5f 90       	pop	r5
    5448:	4f 90       	pop	r4
    544a:	3f 90       	pop	r3
    544c:	2f 90       	pop	r2
    544e:	08 95       	ret

00005450 <__divmodhi4>:
    5450:	97 fb       	bst	r25, 7
    5452:	07 2e       	mov	r0, r23
    5454:	16 f4       	brtc	.+4      	; 0x545a <__divmodhi4+0xa>
    5456:	00 94       	com	r0
    5458:	06 d0       	rcall	.+12     	; 0x5466 <__divmodhi4_neg1>
    545a:	77 fd       	sbrc	r23, 7
    545c:	08 d0       	rcall	.+16     	; 0x546e <__divmodhi4_neg2>
    545e:	44 d0       	rcall	.+136    	; 0x54e8 <__udivmodhi4>
    5460:	07 fc       	sbrc	r0, 7
    5462:	05 d0       	rcall	.+10     	; 0x546e <__divmodhi4_neg2>
    5464:	3e f4       	brtc	.+14     	; 0x5474 <__divmodhi4_exit>

00005466 <__divmodhi4_neg1>:
    5466:	90 95       	com	r25
    5468:	81 95       	neg	r24
    546a:	9f 4f       	sbci	r25, 0xFF	; 255
    546c:	08 95       	ret

0000546e <__divmodhi4_neg2>:
    546e:	70 95       	com	r23
    5470:	61 95       	neg	r22
    5472:	7f 4f       	sbci	r23, 0xFF	; 255

00005474 <__divmodhi4_exit>:
    5474:	08 95       	ret

00005476 <__udivmodsi4>:
    5476:	a1 e2       	ldi	r26, 0x21	; 33
    5478:	1a 2e       	mov	r1, r26
    547a:	aa 1b       	sub	r26, r26
    547c:	bb 1b       	sub	r27, r27
    547e:	fd 01       	movw	r30, r26
    5480:	0d c0       	rjmp	.+26     	; 0x549c <__udivmodsi4_ep>

00005482 <__udivmodsi4_loop>:
    5482:	aa 1f       	adc	r26, r26
    5484:	bb 1f       	adc	r27, r27
    5486:	ee 1f       	adc	r30, r30
    5488:	ff 1f       	adc	r31, r31
    548a:	a2 17       	cp	r26, r18
    548c:	b3 07       	cpc	r27, r19
    548e:	e4 07       	cpc	r30, r20
    5490:	f5 07       	cpc	r31, r21
    5492:	20 f0       	brcs	.+8      	; 0x549c <__udivmodsi4_ep>
    5494:	a2 1b       	sub	r26, r18
    5496:	b3 0b       	sbc	r27, r19
    5498:	e4 0b       	sbc	r30, r20
    549a:	f5 0b       	sbc	r31, r21

0000549c <__udivmodsi4_ep>:
    549c:	66 1f       	adc	r22, r22
    549e:	77 1f       	adc	r23, r23
    54a0:	88 1f       	adc	r24, r24
    54a2:	99 1f       	adc	r25, r25
    54a4:	1a 94       	dec	r1
    54a6:	69 f7       	brne	.-38     	; 0x5482 <__udivmodsi4_loop>
    54a8:	60 95       	com	r22
    54aa:	70 95       	com	r23
    54ac:	80 95       	com	r24
    54ae:	90 95       	com	r25
    54b0:	9b 01       	movw	r18, r22
    54b2:	ac 01       	movw	r20, r24
    54b4:	bd 01       	movw	r22, r26
    54b6:	cf 01       	movw	r24, r30
    54b8:	08 95       	ret

000054ba <__tablejump2__>:
    54ba:	ee 0f       	add	r30, r30
    54bc:	ff 1f       	adc	r31, r31
    54be:	88 1f       	adc	r24, r24
    54c0:	8b bf       	out	0x3b, r24	; 59
    54c2:	07 90       	elpm	r0, Z+
    54c4:	f6 91       	elpm	r31, Z
    54c6:	e0 2d       	mov	r30, r0
    54c8:	19 94       	eijmp

000054ca <__umulhisi3>:
    54ca:	a2 9f       	mul	r26, r18
    54cc:	b0 01       	movw	r22, r0
    54ce:	b3 9f       	mul	r27, r19
    54d0:	c0 01       	movw	r24, r0
    54d2:	a3 9f       	mul	r26, r19
    54d4:	70 0d       	add	r23, r0
    54d6:	81 1d       	adc	r24, r1
    54d8:	11 24       	eor	r1, r1
    54da:	91 1d       	adc	r25, r1
    54dc:	b2 9f       	mul	r27, r18
    54de:	70 0d       	add	r23, r0
    54e0:	81 1d       	adc	r24, r1
    54e2:	11 24       	eor	r1, r1
    54e4:	91 1d       	adc	r25, r1
    54e6:	08 95       	ret

000054e8 <__udivmodhi4>:
    54e8:	aa 1b       	sub	r26, r26
    54ea:	bb 1b       	sub	r27, r27
    54ec:	51 e1       	ldi	r21, 0x11	; 17
    54ee:	07 c0       	rjmp	.+14     	; 0x54fe <__udivmodhi4_ep>

000054f0 <__udivmodhi4_loop>:
    54f0:	aa 1f       	adc	r26, r26
    54f2:	bb 1f       	adc	r27, r27
    54f4:	a6 17       	cp	r26, r22
    54f6:	b7 07       	cpc	r27, r23
    54f8:	10 f0       	brcs	.+4      	; 0x54fe <__udivmodhi4_ep>
    54fa:	a6 1b       	sub	r26, r22
    54fc:	b7 0b       	sbc	r27, r23

000054fe <__udivmodhi4_ep>:
    54fe:	88 1f       	adc	r24, r24
    5500:	99 1f       	adc	r25, r25
    5502:	5a 95       	dec	r21
    5504:	a9 f7       	brne	.-22     	; 0x54f0 <__udivmodhi4_loop>
    5506:	80 95       	com	r24
    5508:	90 95       	com	r25
    550a:	bc 01       	movw	r22, r24
    550c:	cd 01       	movw	r24, r26
    550e:	08 95       	ret

00005510 <__ftoa_engine>:
    5510:	28 30       	cpi	r18, 0x08	; 8
    5512:	08 f0       	brcs	.+2      	; 0x5516 <__ftoa_engine+0x6>
    5514:	27 e0       	ldi	r18, 0x07	; 7
    5516:	33 27       	eor	r19, r19
    5518:	da 01       	movw	r26, r20
    551a:	99 0f       	add	r25, r25
    551c:	31 1d       	adc	r19, r1
    551e:	87 fd       	sbrc	r24, 7
    5520:	91 60       	ori	r25, 0x01	; 1
    5522:	00 96       	adiw	r24, 0x00	; 0
    5524:	61 05       	cpc	r22, r1
    5526:	71 05       	cpc	r23, r1
    5528:	39 f4       	brne	.+14     	; 0x5538 <__ftoa_engine+0x28>
    552a:	32 60       	ori	r19, 0x02	; 2
    552c:	2e 5f       	subi	r18, 0xFE	; 254
    552e:	3d 93       	st	X+, r19
    5530:	30 e3       	ldi	r19, 0x30	; 48
    5532:	2a 95       	dec	r18
    5534:	e1 f7       	brne	.-8      	; 0x552e <__ftoa_engine+0x1e>
    5536:	08 95       	ret
    5538:	9f 3f       	cpi	r25, 0xFF	; 255
    553a:	30 f0       	brcs	.+12     	; 0x5548 <__ftoa_engine+0x38>
    553c:	80 38       	cpi	r24, 0x80	; 128
    553e:	71 05       	cpc	r23, r1
    5540:	61 05       	cpc	r22, r1
    5542:	09 f0       	breq	.+2      	; 0x5546 <__ftoa_engine+0x36>
    5544:	3c 5f       	subi	r19, 0xFC	; 252
    5546:	3c 5f       	subi	r19, 0xFC	; 252
    5548:	3d 93       	st	X+, r19
    554a:	91 30       	cpi	r25, 0x01	; 1
    554c:	08 f0       	brcs	.+2      	; 0x5550 <__ftoa_engine+0x40>
    554e:	80 68       	ori	r24, 0x80	; 128
    5550:	91 1d       	adc	r25, r1
    5552:	df 93       	push	r29
    5554:	cf 93       	push	r28
    5556:	1f 93       	push	r17
    5558:	0f 93       	push	r16
    555a:	ff 92       	push	r15
    555c:	ef 92       	push	r14
    555e:	19 2f       	mov	r17, r25
    5560:	98 7f       	andi	r25, 0xF8	; 248
    5562:	96 95       	lsr	r25
    5564:	e9 2f       	mov	r30, r25
    5566:	96 95       	lsr	r25
    5568:	96 95       	lsr	r25
    556a:	e9 0f       	add	r30, r25
    556c:	ff 27       	eor	r31, r31
    556e:	e8 51       	subi	r30, 0x18	; 24
    5570:	fe 4f       	sbci	r31, 0xFE	; 254
    5572:	99 27       	eor	r25, r25
    5574:	33 27       	eor	r19, r19
    5576:	ee 24       	eor	r14, r14
    5578:	ff 24       	eor	r15, r15
    557a:	a7 01       	movw	r20, r14
    557c:	e7 01       	movw	r28, r14
    557e:	05 90       	lpm	r0, Z+
    5580:	08 94       	sec
    5582:	07 94       	ror	r0
    5584:	28 f4       	brcc	.+10     	; 0x5590 <__ftoa_engine+0x80>
    5586:	36 0f       	add	r19, r22
    5588:	e7 1e       	adc	r14, r23
    558a:	f8 1e       	adc	r15, r24
    558c:	49 1f       	adc	r20, r25
    558e:	51 1d       	adc	r21, r1
    5590:	66 0f       	add	r22, r22
    5592:	77 1f       	adc	r23, r23
    5594:	88 1f       	adc	r24, r24
    5596:	99 1f       	adc	r25, r25
    5598:	06 94       	lsr	r0
    559a:	a1 f7       	brne	.-24     	; 0x5584 <__ftoa_engine+0x74>
    559c:	05 90       	lpm	r0, Z+
    559e:	07 94       	ror	r0
    55a0:	28 f4       	brcc	.+10     	; 0x55ac <__ftoa_engine+0x9c>
    55a2:	e7 0e       	add	r14, r23
    55a4:	f8 1e       	adc	r15, r24
    55a6:	49 1f       	adc	r20, r25
    55a8:	56 1f       	adc	r21, r22
    55aa:	c1 1d       	adc	r28, r1
    55ac:	77 0f       	add	r23, r23
    55ae:	88 1f       	adc	r24, r24
    55b0:	99 1f       	adc	r25, r25
    55b2:	66 1f       	adc	r22, r22
    55b4:	06 94       	lsr	r0
    55b6:	a1 f7       	brne	.-24     	; 0x55a0 <__ftoa_engine+0x90>
    55b8:	05 90       	lpm	r0, Z+
    55ba:	07 94       	ror	r0
    55bc:	28 f4       	brcc	.+10     	; 0x55c8 <__ftoa_engine+0xb8>
    55be:	f8 0e       	add	r15, r24
    55c0:	49 1f       	adc	r20, r25
    55c2:	56 1f       	adc	r21, r22
    55c4:	c7 1f       	adc	r28, r23
    55c6:	d1 1d       	adc	r29, r1
    55c8:	88 0f       	add	r24, r24
    55ca:	99 1f       	adc	r25, r25
    55cc:	66 1f       	adc	r22, r22
    55ce:	77 1f       	adc	r23, r23
    55d0:	06 94       	lsr	r0
    55d2:	a1 f7       	brne	.-24     	; 0x55bc <__ftoa_engine+0xac>
    55d4:	05 90       	lpm	r0, Z+
    55d6:	07 94       	ror	r0
    55d8:	20 f4       	brcc	.+8      	; 0x55e2 <__ftoa_engine+0xd2>
    55da:	49 0f       	add	r20, r25
    55dc:	56 1f       	adc	r21, r22
    55de:	c7 1f       	adc	r28, r23
    55e0:	d8 1f       	adc	r29, r24
    55e2:	99 0f       	add	r25, r25
    55e4:	66 1f       	adc	r22, r22
    55e6:	77 1f       	adc	r23, r23
    55e8:	88 1f       	adc	r24, r24
    55ea:	06 94       	lsr	r0
    55ec:	a9 f7       	brne	.-22     	; 0x55d8 <__ftoa_engine+0xc8>
    55ee:	84 91       	lpm	r24, Z
    55f0:	10 95       	com	r17
    55f2:	17 70       	andi	r17, 0x07	; 7
    55f4:	41 f0       	breq	.+16     	; 0x5606 <__ftoa_engine+0xf6>
    55f6:	d6 95       	lsr	r29
    55f8:	c7 95       	ror	r28
    55fa:	57 95       	ror	r21
    55fc:	47 95       	ror	r20
    55fe:	f7 94       	ror	r15
    5600:	e7 94       	ror	r14
    5602:	1a 95       	dec	r17
    5604:	c1 f7       	brne	.-16     	; 0x55f6 <__ftoa_engine+0xe6>
    5606:	ee e8       	ldi	r30, 0x8E	; 142
    5608:	f1 e0       	ldi	r31, 0x01	; 1
    560a:	68 94       	set
    560c:	15 90       	lpm	r1, Z+
    560e:	15 91       	lpm	r17, Z+
    5610:	35 91       	lpm	r19, Z+
    5612:	65 91       	lpm	r22, Z+
    5614:	95 91       	lpm	r25, Z+
    5616:	05 90       	lpm	r0, Z+
    5618:	7f e2       	ldi	r23, 0x2F	; 47
    561a:	73 95       	inc	r23
    561c:	e1 18       	sub	r14, r1
    561e:	f1 0a       	sbc	r15, r17
    5620:	43 0b       	sbc	r20, r19
    5622:	56 0b       	sbc	r21, r22
    5624:	c9 0b       	sbc	r28, r25
    5626:	d0 09       	sbc	r29, r0
    5628:	c0 f7       	brcc	.-16     	; 0x561a <__ftoa_engine+0x10a>
    562a:	e1 0c       	add	r14, r1
    562c:	f1 1e       	adc	r15, r17
    562e:	43 1f       	adc	r20, r19
    5630:	56 1f       	adc	r21, r22
    5632:	c9 1f       	adc	r28, r25
    5634:	d0 1d       	adc	r29, r0
    5636:	7e f4       	brtc	.+30     	; 0x5656 <__ftoa_engine+0x146>
    5638:	70 33       	cpi	r23, 0x30	; 48
    563a:	11 f4       	brne	.+4      	; 0x5640 <__ftoa_engine+0x130>
    563c:	8a 95       	dec	r24
    563e:	e6 cf       	rjmp	.-52     	; 0x560c <__ftoa_engine+0xfc>
    5640:	e8 94       	clt
    5642:	01 50       	subi	r16, 0x01	; 1
    5644:	30 f0       	brcs	.+12     	; 0x5652 <__ftoa_engine+0x142>
    5646:	08 0f       	add	r16, r24
    5648:	0a f4       	brpl	.+2      	; 0x564c <__ftoa_engine+0x13c>
    564a:	00 27       	eor	r16, r16
    564c:	02 17       	cp	r16, r18
    564e:	08 f4       	brcc	.+2      	; 0x5652 <__ftoa_engine+0x142>
    5650:	20 2f       	mov	r18, r16
    5652:	23 95       	inc	r18
    5654:	02 2f       	mov	r16, r18
    5656:	7a 33       	cpi	r23, 0x3A	; 58
    5658:	28 f0       	brcs	.+10     	; 0x5664 <__ftoa_engine+0x154>
    565a:	79 e3       	ldi	r23, 0x39	; 57
    565c:	7d 93       	st	X+, r23
    565e:	2a 95       	dec	r18
    5660:	e9 f7       	brne	.-6      	; 0x565c <__ftoa_engine+0x14c>
    5662:	10 c0       	rjmp	.+32     	; 0x5684 <__ftoa_engine+0x174>
    5664:	7d 93       	st	X+, r23
    5666:	2a 95       	dec	r18
    5668:	89 f6       	brne	.-94     	; 0x560c <__ftoa_engine+0xfc>
    566a:	06 94       	lsr	r0
    566c:	97 95       	ror	r25
    566e:	67 95       	ror	r22
    5670:	37 95       	ror	r19
    5672:	17 95       	ror	r17
    5674:	17 94       	ror	r1
    5676:	e1 18       	sub	r14, r1
    5678:	f1 0a       	sbc	r15, r17
    567a:	43 0b       	sbc	r20, r19
    567c:	56 0b       	sbc	r21, r22
    567e:	c9 0b       	sbc	r28, r25
    5680:	d0 09       	sbc	r29, r0
    5682:	98 f0       	brcs	.+38     	; 0x56aa <__ftoa_engine+0x19a>
    5684:	23 95       	inc	r18
    5686:	7e 91       	ld	r23, -X
    5688:	73 95       	inc	r23
    568a:	7a 33       	cpi	r23, 0x3A	; 58
    568c:	08 f0       	brcs	.+2      	; 0x5690 <__ftoa_engine+0x180>
    568e:	70 e3       	ldi	r23, 0x30	; 48
    5690:	7c 93       	st	X, r23
    5692:	20 13       	cpse	r18, r16
    5694:	b8 f7       	brcc	.-18     	; 0x5684 <__ftoa_engine+0x174>
    5696:	7e 91       	ld	r23, -X
    5698:	70 61       	ori	r23, 0x10	; 16
    569a:	7d 93       	st	X+, r23
    569c:	30 f0       	brcs	.+12     	; 0x56aa <__ftoa_engine+0x19a>
    569e:	83 95       	inc	r24
    56a0:	71 e3       	ldi	r23, 0x31	; 49
    56a2:	7d 93       	st	X+, r23
    56a4:	70 e3       	ldi	r23, 0x30	; 48
    56a6:	2a 95       	dec	r18
    56a8:	e1 f7       	brne	.-8      	; 0x56a2 <__ftoa_engine+0x192>
    56aa:	11 24       	eor	r1, r1
    56ac:	ef 90       	pop	r14
    56ae:	ff 90       	pop	r15
    56b0:	0f 91       	pop	r16
    56b2:	1f 91       	pop	r17
    56b4:	cf 91       	pop	r28
    56b6:	df 91       	pop	r29
    56b8:	99 27       	eor	r25, r25
    56ba:	87 fd       	sbrc	r24, 7
    56bc:	90 95       	com	r25
    56be:	08 95       	ret

000056c0 <strnlen_P>:
    56c0:	fc 01       	movw	r30, r24
    56c2:	05 90       	lpm	r0, Z+
    56c4:	61 50       	subi	r22, 0x01	; 1
    56c6:	70 40       	sbci	r23, 0x00	; 0
    56c8:	01 10       	cpse	r0, r1
    56ca:	d8 f7       	brcc	.-10     	; 0x56c2 <strnlen_P+0x2>
    56cc:	80 95       	com	r24
    56ce:	90 95       	com	r25
    56d0:	8e 0f       	add	r24, r30
    56d2:	9f 1f       	adc	r25, r31
    56d4:	08 95       	ret

000056d6 <memcpy>:
    56d6:	fb 01       	movw	r30, r22
    56d8:	dc 01       	movw	r26, r24
    56da:	02 c0       	rjmp	.+4      	; 0x56e0 <memcpy+0xa>
    56dc:	01 90       	ld	r0, Z+
    56de:	0d 92       	st	X+, r0
    56e0:	41 50       	subi	r20, 0x01	; 1
    56e2:	50 40       	sbci	r21, 0x00	; 0
    56e4:	d8 f7       	brcc	.-10     	; 0x56dc <memcpy+0x6>
    56e6:	08 95       	ret

000056e8 <strnlen>:
    56e8:	fc 01       	movw	r30, r24
    56ea:	61 50       	subi	r22, 0x01	; 1
    56ec:	70 40       	sbci	r23, 0x00	; 0
    56ee:	01 90       	ld	r0, Z+
    56f0:	01 10       	cpse	r0, r1
    56f2:	d8 f7       	brcc	.-10     	; 0x56ea <strnlen+0x2>
    56f4:	80 95       	com	r24
    56f6:	90 95       	com	r25
    56f8:	8e 0f       	add	r24, r30
    56fa:	9f 1f       	adc	r25, r31
    56fc:	08 95       	ret

000056fe <fputc>:
    56fe:	0f 93       	push	r16
    5700:	1f 93       	push	r17
    5702:	cf 93       	push	r28
    5704:	df 93       	push	r29
    5706:	fb 01       	movw	r30, r22
    5708:	23 81       	ldd	r18, Z+3	; 0x03
    570a:	21 fd       	sbrc	r18, 1
    570c:	03 c0       	rjmp	.+6      	; 0x5714 <fputc+0x16>
    570e:	8f ef       	ldi	r24, 0xFF	; 255
    5710:	9f ef       	ldi	r25, 0xFF	; 255
    5712:	2c c0       	rjmp	.+88     	; 0x576c <fputc+0x6e>
    5714:	22 ff       	sbrs	r18, 2
    5716:	16 c0       	rjmp	.+44     	; 0x5744 <fputc+0x46>
    5718:	46 81       	ldd	r20, Z+6	; 0x06
    571a:	57 81       	ldd	r21, Z+7	; 0x07
    571c:	24 81       	ldd	r18, Z+4	; 0x04
    571e:	35 81       	ldd	r19, Z+5	; 0x05
    5720:	42 17       	cp	r20, r18
    5722:	53 07       	cpc	r21, r19
    5724:	44 f4       	brge	.+16     	; 0x5736 <fputc+0x38>
    5726:	a0 81       	ld	r26, Z
    5728:	b1 81       	ldd	r27, Z+1	; 0x01
    572a:	9d 01       	movw	r18, r26
    572c:	2f 5f       	subi	r18, 0xFF	; 255
    572e:	3f 4f       	sbci	r19, 0xFF	; 255
    5730:	31 83       	std	Z+1, r19	; 0x01
    5732:	20 83       	st	Z, r18
    5734:	8c 93       	st	X, r24
    5736:	26 81       	ldd	r18, Z+6	; 0x06
    5738:	37 81       	ldd	r19, Z+7	; 0x07
    573a:	2f 5f       	subi	r18, 0xFF	; 255
    573c:	3f 4f       	sbci	r19, 0xFF	; 255
    573e:	37 83       	std	Z+7, r19	; 0x07
    5740:	26 83       	std	Z+6, r18	; 0x06
    5742:	14 c0       	rjmp	.+40     	; 0x576c <fputc+0x6e>
    5744:	8b 01       	movw	r16, r22
    5746:	ec 01       	movw	r28, r24
    5748:	fb 01       	movw	r30, r22
    574a:	00 84       	ldd	r0, Z+8	; 0x08
    574c:	f1 85       	ldd	r31, Z+9	; 0x09
    574e:	e0 2d       	mov	r30, r0
    5750:	19 95       	eicall
    5752:	89 2b       	or	r24, r25
    5754:	e1 f6       	brne	.-72     	; 0x570e <fputc+0x10>
    5756:	d8 01       	movw	r26, r16
    5758:	16 96       	adiw	r26, 0x06	; 6
    575a:	8d 91       	ld	r24, X+
    575c:	9c 91       	ld	r25, X
    575e:	17 97       	sbiw	r26, 0x07	; 7
    5760:	01 96       	adiw	r24, 0x01	; 1
    5762:	17 96       	adiw	r26, 0x07	; 7
    5764:	9c 93       	st	X, r25
    5766:	8e 93       	st	-X, r24
    5768:	16 97       	sbiw	r26, 0x06	; 6
    576a:	ce 01       	movw	r24, r28
    576c:	df 91       	pop	r29
    576e:	cf 91       	pop	r28
    5770:	1f 91       	pop	r17
    5772:	0f 91       	pop	r16
    5774:	08 95       	ret

00005776 <printf>:
    5776:	cf 93       	push	r28
    5778:	df 93       	push	r29
    577a:	cd b7       	in	r28, 0x3d	; 61
    577c:	de b7       	in	r29, 0x3e	; 62
    577e:	ae 01       	movw	r20, r28
    5780:	4a 5f       	subi	r20, 0xFA	; 250
    5782:	5f 4f       	sbci	r21, 0xFF	; 255
    5784:	fa 01       	movw	r30, r20
    5786:	61 91       	ld	r22, Z+
    5788:	71 91       	ld	r23, Z+
    578a:	af 01       	movw	r20, r30
    578c:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <__iob+0x2>
    5790:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <__iob+0x3>
    5794:	d4 da       	rcall	.-2648   	; 0x4d3e <vfprintf>
    5796:	df 91       	pop	r29
    5798:	cf 91       	pop	r28
    579a:	08 95       	ret

0000579c <printf_P>:
    579c:	0f 93       	push	r16
    579e:	1f 93       	push	r17
    57a0:	cf 93       	push	r28
    57a2:	df 93       	push	r29
    57a4:	cd b7       	in	r28, 0x3d	; 61
    57a6:	de b7       	in	r29, 0x3e	; 62
    57a8:	ae 01       	movw	r20, r28
    57aa:	48 5f       	subi	r20, 0xF8	; 248
    57ac:	5f 4f       	sbci	r21, 0xFF	; 255
    57ae:	da 01       	movw	r26, r20
    57b0:	6d 91       	ld	r22, X+
    57b2:	7d 91       	ld	r23, X+
    57b4:	ad 01       	movw	r20, r26
    57b6:	00 e1       	ldi	r16, 0x10	; 16
    57b8:	16 e0       	ldi	r17, 0x06	; 6
    57ba:	f8 01       	movw	r30, r16
    57bc:	82 81       	ldd	r24, Z+2	; 0x02
    57be:	93 81       	ldd	r25, Z+3	; 0x03
    57c0:	dc 01       	movw	r26, r24
    57c2:	13 96       	adiw	r26, 0x03	; 3
    57c4:	2c 91       	ld	r18, X
    57c6:	13 97       	sbiw	r26, 0x03	; 3
    57c8:	28 60       	ori	r18, 0x08	; 8
    57ca:	13 96       	adiw	r26, 0x03	; 3
    57cc:	2c 93       	st	X, r18
    57ce:	b7 da       	rcall	.-2706   	; 0x4d3e <vfprintf>
    57d0:	d8 01       	movw	r26, r16
    57d2:	12 96       	adiw	r26, 0x02	; 2
    57d4:	ed 91       	ld	r30, X+
    57d6:	fc 91       	ld	r31, X
    57d8:	13 97       	sbiw	r26, 0x03	; 3
    57da:	23 81       	ldd	r18, Z+3	; 0x03
    57dc:	27 7f       	andi	r18, 0xF7	; 247
    57de:	23 83       	std	Z+3, r18	; 0x03
    57e0:	df 91       	pop	r29
    57e2:	cf 91       	pop	r28
    57e4:	1f 91       	pop	r17
    57e6:	0f 91       	pop	r16
    57e8:	08 95       	ret

000057ea <puts>:
    57ea:	0f 93       	push	r16
    57ec:	1f 93       	push	r17
    57ee:	cf 93       	push	r28
    57f0:	df 93       	push	r29
    57f2:	e0 91 12 06 	lds	r30, 0x0612	; 0x800612 <__iob+0x2>
    57f6:	f0 91 13 06 	lds	r31, 0x0613	; 0x800613 <__iob+0x3>
    57fa:	23 81       	ldd	r18, Z+3	; 0x03
    57fc:	21 ff       	sbrs	r18, 1
    57fe:	1b c0       	rjmp	.+54     	; 0x5836 <puts+0x4c>
    5800:	8c 01       	movw	r16, r24
    5802:	d0 e0       	ldi	r29, 0x00	; 0
    5804:	c0 e0       	ldi	r28, 0x00	; 0
    5806:	f8 01       	movw	r30, r16
    5808:	81 91       	ld	r24, Z+
    580a:	8f 01       	movw	r16, r30
    580c:	60 91 12 06 	lds	r22, 0x0612	; 0x800612 <__iob+0x2>
    5810:	70 91 13 06 	lds	r23, 0x0613	; 0x800613 <__iob+0x3>
    5814:	db 01       	movw	r26, r22
    5816:	18 96       	adiw	r26, 0x08	; 8
    5818:	ed 91       	ld	r30, X+
    581a:	fc 91       	ld	r31, X
    581c:	19 97       	sbiw	r26, 0x09	; 9
    581e:	88 23       	and	r24, r24
    5820:	31 f0       	breq	.+12     	; 0x582e <puts+0x44>
    5822:	19 95       	eicall
    5824:	89 2b       	or	r24, r25
    5826:	79 f3       	breq	.-34     	; 0x5806 <puts+0x1c>
    5828:	df ef       	ldi	r29, 0xFF	; 255
    582a:	cf ef       	ldi	r28, 0xFF	; 255
    582c:	ec cf       	rjmp	.-40     	; 0x5806 <puts+0x1c>
    582e:	8a e0       	ldi	r24, 0x0A	; 10
    5830:	19 95       	eicall
    5832:	89 2b       	or	r24, r25
    5834:	19 f0       	breq	.+6      	; 0x583c <puts+0x52>
    5836:	8f ef       	ldi	r24, 0xFF	; 255
    5838:	9f ef       	ldi	r25, 0xFF	; 255
    583a:	02 c0       	rjmp	.+4      	; 0x5840 <puts+0x56>
    583c:	8d 2f       	mov	r24, r29
    583e:	9c 2f       	mov	r25, r28
    5840:	df 91       	pop	r29
    5842:	cf 91       	pop	r28
    5844:	1f 91       	pop	r17
    5846:	0f 91       	pop	r16
    5848:	08 95       	ret

0000584a <sprintf>:
    584a:	0f 93       	push	r16
    584c:	1f 93       	push	r17
    584e:	cf 93       	push	r28
    5850:	df 93       	push	r29
    5852:	cd b7       	in	r28, 0x3d	; 61
    5854:	de b7       	in	r29, 0x3e	; 62
    5856:	2e 97       	sbiw	r28, 0x0e	; 14
    5858:	0f b6       	in	r0, 0x3f	; 63
    585a:	f8 94       	cli
    585c:	de bf       	out	0x3e, r29	; 62
    585e:	0f be       	out	0x3f, r0	; 63
    5860:	cd bf       	out	0x3d, r28	; 61
    5862:	0e 89       	ldd	r16, Y+22	; 0x16
    5864:	1f 89       	ldd	r17, Y+23	; 0x17
    5866:	86 e0       	ldi	r24, 0x06	; 6
    5868:	8c 83       	std	Y+4, r24	; 0x04
    586a:	1a 83       	std	Y+2, r17	; 0x02
    586c:	09 83       	std	Y+1, r16	; 0x01
    586e:	8f ef       	ldi	r24, 0xFF	; 255
    5870:	9f e7       	ldi	r25, 0x7F	; 127
    5872:	9e 83       	std	Y+6, r25	; 0x06
    5874:	8d 83       	std	Y+5, r24	; 0x05
    5876:	ae 01       	movw	r20, r28
    5878:	46 5e       	subi	r20, 0xE6	; 230
    587a:	5f 4f       	sbci	r21, 0xFF	; 255
    587c:	68 8d       	ldd	r22, Y+24	; 0x18
    587e:	79 8d       	ldd	r23, Y+25	; 0x19
    5880:	ce 01       	movw	r24, r28
    5882:	01 96       	adiw	r24, 0x01	; 1
    5884:	5c da       	rcall	.-2888   	; 0x4d3e <vfprintf>
    5886:	ef 81       	ldd	r30, Y+7	; 0x07
    5888:	f8 85       	ldd	r31, Y+8	; 0x08
    588a:	e0 0f       	add	r30, r16
    588c:	f1 1f       	adc	r31, r17
    588e:	10 82       	st	Z, r1
    5890:	2e 96       	adiw	r28, 0x0e	; 14
    5892:	0f b6       	in	r0, 0x3f	; 63
    5894:	f8 94       	cli
    5896:	de bf       	out	0x3e, r29	; 62
    5898:	0f be       	out	0x3f, r0	; 63
    589a:	cd bf       	out	0x3d, r28	; 61
    589c:	df 91       	pop	r29
    589e:	cf 91       	pop	r28
    58a0:	1f 91       	pop	r17
    58a2:	0f 91       	pop	r16
    58a4:	08 95       	ret

000058a6 <vfprintf_P>:
    58a6:	cf 93       	push	r28
    58a8:	df 93       	push	r29
    58aa:	ec 01       	movw	r28, r24
    58ac:	8b 81       	ldd	r24, Y+3	; 0x03
    58ae:	88 60       	ori	r24, 0x08	; 8
    58b0:	8b 83       	std	Y+3, r24	; 0x03
    58b2:	ce 01       	movw	r24, r28
    58b4:	44 da       	rcall	.-2936   	; 0x4d3e <vfprintf>
    58b6:	2b 81       	ldd	r18, Y+3	; 0x03
    58b8:	27 7f       	andi	r18, 0xF7	; 247
    58ba:	2b 83       	std	Y+3, r18	; 0x03
    58bc:	df 91       	pop	r29
    58be:	cf 91       	pop	r28
    58c0:	08 95       	ret

000058c2 <__ultoa_invert>:
    58c2:	fa 01       	movw	r30, r20
    58c4:	aa 27       	eor	r26, r26
    58c6:	28 30       	cpi	r18, 0x08	; 8
    58c8:	51 f1       	breq	.+84     	; 0x591e <__ultoa_invert+0x5c>
    58ca:	20 31       	cpi	r18, 0x10	; 16
    58cc:	81 f1       	breq	.+96     	; 0x592e <__ultoa_invert+0x6c>
    58ce:	e8 94       	clt
    58d0:	6f 93       	push	r22
    58d2:	6e 7f       	andi	r22, 0xFE	; 254
    58d4:	6e 5f       	subi	r22, 0xFE	; 254
    58d6:	7f 4f       	sbci	r23, 0xFF	; 255
    58d8:	8f 4f       	sbci	r24, 0xFF	; 255
    58da:	9f 4f       	sbci	r25, 0xFF	; 255
    58dc:	af 4f       	sbci	r26, 0xFF	; 255
    58de:	b1 e0       	ldi	r27, 0x01	; 1
    58e0:	3e d0       	rcall	.+124    	; 0x595e <__ultoa_invert+0x9c>
    58e2:	b4 e0       	ldi	r27, 0x04	; 4
    58e4:	3c d0       	rcall	.+120    	; 0x595e <__ultoa_invert+0x9c>
    58e6:	67 0f       	add	r22, r23
    58e8:	78 1f       	adc	r23, r24
    58ea:	89 1f       	adc	r24, r25
    58ec:	9a 1f       	adc	r25, r26
    58ee:	a1 1d       	adc	r26, r1
    58f0:	68 0f       	add	r22, r24
    58f2:	79 1f       	adc	r23, r25
    58f4:	8a 1f       	adc	r24, r26
    58f6:	91 1d       	adc	r25, r1
    58f8:	a1 1d       	adc	r26, r1
    58fa:	6a 0f       	add	r22, r26
    58fc:	71 1d       	adc	r23, r1
    58fe:	81 1d       	adc	r24, r1
    5900:	91 1d       	adc	r25, r1
    5902:	a1 1d       	adc	r26, r1
    5904:	20 d0       	rcall	.+64     	; 0x5946 <__ultoa_invert+0x84>
    5906:	09 f4       	brne	.+2      	; 0x590a <__ultoa_invert+0x48>
    5908:	68 94       	set
    590a:	3f 91       	pop	r19
    590c:	2a e0       	ldi	r18, 0x0A	; 10
    590e:	26 9f       	mul	r18, r22
    5910:	11 24       	eor	r1, r1
    5912:	30 19       	sub	r19, r0
    5914:	30 5d       	subi	r19, 0xD0	; 208
    5916:	31 93       	st	Z+, r19
    5918:	de f6       	brtc	.-74     	; 0x58d0 <__ultoa_invert+0xe>
    591a:	cf 01       	movw	r24, r30
    591c:	08 95       	ret
    591e:	46 2f       	mov	r20, r22
    5920:	47 70       	andi	r20, 0x07	; 7
    5922:	40 5d       	subi	r20, 0xD0	; 208
    5924:	41 93       	st	Z+, r20
    5926:	b3 e0       	ldi	r27, 0x03	; 3
    5928:	0f d0       	rcall	.+30     	; 0x5948 <__ultoa_invert+0x86>
    592a:	c9 f7       	brne	.-14     	; 0x591e <__ultoa_invert+0x5c>
    592c:	f6 cf       	rjmp	.-20     	; 0x591a <__ultoa_invert+0x58>
    592e:	46 2f       	mov	r20, r22
    5930:	4f 70       	andi	r20, 0x0F	; 15
    5932:	40 5d       	subi	r20, 0xD0	; 208
    5934:	4a 33       	cpi	r20, 0x3A	; 58
    5936:	18 f0       	brcs	.+6      	; 0x593e <__ultoa_invert+0x7c>
    5938:	49 5d       	subi	r20, 0xD9	; 217
    593a:	31 fd       	sbrc	r19, 1
    593c:	40 52       	subi	r20, 0x20	; 32
    593e:	41 93       	st	Z+, r20
    5940:	02 d0       	rcall	.+4      	; 0x5946 <__ultoa_invert+0x84>
    5942:	a9 f7       	brne	.-22     	; 0x592e <__ultoa_invert+0x6c>
    5944:	ea cf       	rjmp	.-44     	; 0x591a <__ultoa_invert+0x58>
    5946:	b4 e0       	ldi	r27, 0x04	; 4
    5948:	a6 95       	lsr	r26
    594a:	97 95       	ror	r25
    594c:	87 95       	ror	r24
    594e:	77 95       	ror	r23
    5950:	67 95       	ror	r22
    5952:	ba 95       	dec	r27
    5954:	c9 f7       	brne	.-14     	; 0x5948 <__ultoa_invert+0x86>
    5956:	00 97       	sbiw	r24, 0x00	; 0
    5958:	61 05       	cpc	r22, r1
    595a:	71 05       	cpc	r23, r1
    595c:	08 95       	ret
    595e:	9b 01       	movw	r18, r22
    5960:	ac 01       	movw	r20, r24
    5962:	0a 2e       	mov	r0, r26
    5964:	06 94       	lsr	r0
    5966:	57 95       	ror	r21
    5968:	47 95       	ror	r20
    596a:	37 95       	ror	r19
    596c:	27 95       	ror	r18
    596e:	ba 95       	dec	r27
    5970:	c9 f7       	brne	.-14     	; 0x5964 <__ultoa_invert+0xa2>
    5972:	62 0f       	add	r22, r18
    5974:	73 1f       	adc	r23, r19
    5976:	84 1f       	adc	r24, r20
    5978:	95 1f       	adc	r25, r21
    597a:	a0 1d       	adc	r26, r0
    597c:	08 95       	ret

0000597e <_exit>:
    597e:	f8 94       	cli

00005980 <__stop_program>:
    5980:	ff cf       	rjmp	.-2      	; 0x5980 <__stop_program>

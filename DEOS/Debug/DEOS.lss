
DEOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800200  000028e4  00002978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025a  0080023e  0080023e  000029b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000029b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006d8  00000000  00000000  00002a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006875  00000000  00000000  0000312c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024a4  00000000  00000000  000099a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003a63  00000000  00000000  0000be45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013d4  00000000  00000000  0000f8a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a7b  00000000  00000000  00010c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004642  00000000  00000000  000126f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000668  00000000  00000000  00016d39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	02 c2       	rjmp	.+1028   	; 0x406 <__ctors_end>
       2:	00 00       	nop
       4:	31 c2       	rjmp	.+1122   	; 0x468 <__bad_interrupt>
       6:	00 00       	nop
       8:	2f c2       	rjmp	.+1118   	; 0x468 <__bad_interrupt>
       a:	00 00       	nop
       c:	2d c2       	rjmp	.+1114   	; 0x468 <__bad_interrupt>
       e:	00 00       	nop
      10:	2b c2       	rjmp	.+1110   	; 0x468 <__bad_interrupt>
      12:	00 00       	nop
      14:	29 c2       	rjmp	.+1106   	; 0x468 <__bad_interrupt>
      16:	00 00       	nop
      18:	27 c2       	rjmp	.+1102   	; 0x468 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	25 c2       	rjmp	.+1098   	; 0x468 <__bad_interrupt>
      1e:	00 00       	nop
      20:	23 c2       	rjmp	.+1094   	; 0x468 <__bad_interrupt>
      22:	00 00       	nop
      24:	21 c2       	rjmp	.+1090   	; 0x468 <__bad_interrupt>
      26:	00 00       	nop
      28:	1f c2       	rjmp	.+1086   	; 0x468 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	1d c2       	rjmp	.+1082   	; 0x468 <__bad_interrupt>
      2e:	00 00       	nop
      30:	1b c2       	rjmp	.+1078   	; 0x468 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__vector_13>
      38:	17 c2       	rjmp	.+1070   	; 0x468 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	15 c2       	rjmp	.+1066   	; 0x468 <__bad_interrupt>
      3e:	00 00       	nop
      40:	13 c2       	rjmp	.+1062   	; 0x468 <__bad_interrupt>
      42:	00 00       	nop
      44:	b2 c7       	rjmp	.+3940   	; 0xfaa <__vector_17>
      46:	00 00       	nop
      48:	0f c2       	rjmp	.+1054   	; 0x468 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0d c2       	rjmp	.+1050   	; 0x468 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0b c2       	rjmp	.+1046   	; 0x468 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__vector_21>
      58:	07 c2       	rjmp	.+1038   	; 0x468 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	05 c2       	rjmp	.+1034   	; 0x468 <__bad_interrupt>
      5e:	00 00       	nop
      60:	03 c2       	rjmp	.+1030   	; 0x468 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__vector_25>
      68:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__vector_26>
      6c:	fd c1       	rjmp	.+1018   	; 0x468 <__bad_interrupt>
      6e:	00 00       	nop
      70:	fb c1       	rjmp	.+1014   	; 0x468 <__bad_interrupt>
      72:	00 00       	nop
      74:	f9 c1       	rjmp	.+1010   	; 0x468 <__bad_interrupt>
      76:	00 00       	nop
      78:	f7 c1       	rjmp	.+1006   	; 0x468 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f5 c1       	rjmp	.+1002   	; 0x468 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f3 c1       	rjmp	.+998    	; 0x468 <__bad_interrupt>
      82:	00 00       	nop
      84:	f1 c1       	rjmp	.+994    	; 0x468 <__bad_interrupt>
      86:	00 00       	nop
      88:	ef c1       	rjmp	.+990    	; 0x468 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ed c1       	rjmp	.+986    	; 0x468 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 05 09 	jmp	0x120a	; 0x120a <__vector_36>
      94:	0c 94 36 09 	jmp	0x126c	; 0x126c <__vector_37>
      98:	e7 c1       	rjmp	.+974    	; 0x468 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e5 c1       	rjmp	.+970    	; 0x468 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e3 c1       	rjmp	.+966    	; 0x468 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e1 c1       	rjmp	.+962    	; 0x468 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	df c1       	rjmp	.+958    	; 0x468 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	dd c1       	rjmp	.+954    	; 0x468 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	db c1       	rjmp	.+950    	; 0x468 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d9 c1       	rjmp	.+946    	; 0x468 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d7 c1       	rjmp	.+942    	; 0x468 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d5 c1       	rjmp	.+938    	; 0x468 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d3 c1       	rjmp	.+934    	; 0x468 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d1 c1       	rjmp	.+930    	; 0x468 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	cf c1       	rjmp	.+926    	; 0x468 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__vector_51>
      d0:	0c 94 95 09 	jmp	0x132a	; 0x132a <__vector_52>
      d4:	c9 c1       	rjmp	.+914    	; 0x468 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__vector_54>
      dc:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__vector_55>
      e0:	c3 c1       	rjmp	.+902    	; 0x468 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b9 06       	cpc	r11, r25
      e6:	ba 06       	cpc	r11, r26
      e8:	ba 06       	cpc	r11, r26
      ea:	ba 06       	cpc	r11, r26
      ec:	ba 06       	cpc	r11, r26
      ee:	ba 06       	cpc	r11, r26
      f0:	ba 06       	cpc	r11, r26
      f2:	ba 06       	cpc	r11, r26
      f4:	ba 06       	cpc	r11, r26
      f6:	ba 06       	cpc	r11, r26
      f8:	ba 06       	cpc	r11, r26
      fa:	ba 06       	cpc	r11, r26
      fc:	ba 06       	cpc	r11, r26
      fe:	ba 06       	cpc	r11, r26
     100:	ba 06       	cpc	r11, r26
     102:	ba 06       	cpc	r11, r26
     104:	ba 06       	cpc	r11, r26
     106:	ba 06       	cpc	r11, r26
     108:	b1 06       	cpc	r11, r17
     10a:	ba 06       	cpc	r11, r26
     10c:	ba 06       	cpc	r11, r26
     10e:	ba 06       	cpc	r11, r26
     110:	ba 06       	cpc	r11, r26
     112:	ba 06       	cpc	r11, r26
     114:	b3 06       	cpc	r11, r19
     116:	ba 06       	cpc	r11, r26
     118:	ba 06       	cpc	r11, r26
     11a:	af 06       	cpc	r10, r31
     11c:	ba 06       	cpc	r11, r26
     11e:	ba 06       	cpc	r11, r26
     120:	ba 06       	cpc	r11, r26
     122:	ba 06       	cpc	r11, r26
     124:	b9 06       	cpc	r11, r25
     126:	ba 06       	cpc	r11, r26
     128:	ba 06       	cpc	r11, r26
     12a:	ba 06       	cpc	r11, r26
     12c:	ba 06       	cpc	r11, r26
     12e:	ba 06       	cpc	r11, r26
     130:	ba 06       	cpc	r11, r26
     132:	ba 06       	cpc	r11, r26
     134:	ba 06       	cpc	r11, r26
     136:	ba 06       	cpc	r11, r26
     138:	ba 06       	cpc	r11, r26
     13a:	ba 06       	cpc	r11, r26
     13c:	b5 06       	cpc	r11, r21
     13e:	ba 06       	cpc	r11, r26
     140:	ba 06       	cpc	r11, r26
     142:	ba 06       	cpc	r11, r26
     144:	ba 06       	cpc	r11, r26
     146:	b7 06       	cpc	r11, r23
     148:	ab 06       	cpc	r10, r27
     14a:	ba 06       	cpc	r11, r26
     14c:	ba 06       	cpc	r11, r26
     14e:	ba 06       	cpc	r11, r26
     150:	ba 06       	cpc	r11, r26
     152:	ba 06       	cpc	r11, r26
     154:	ad 06       	cpc	r10, r29

00000156 <__trampolines_end>:
     156:	43 61       	ori	r20, 0x13	; 19
     158:	6e 27       	eor	r22, r30
     15a:	74 20       	and	r7, r4
     15c:	70 6f       	ori	r23, 0xF0	; 240
     15e:	70 20       	and	r7, r0
     160:	66 72       	andi	r22, 0x26	; 38
     162:	6f 6d       	ori	r22, 0xDF	; 223
     164:	20 65       	ori	r18, 0x50	; 80
     166:	6d 70       	andi	r22, 0x0D	; 13
     168:	74 79       	andi	r23, 0x94	; 148
     16a:	20 72       	andi	r18, 0x20	; 32
     16c:	65 61       	ori	r22, 0x15	; 21
     16e:	64 79       	andi	r22, 0x94	; 148
     170:	20 71       	andi	r18, 0x10	; 16
     172:	75 65       	ori	r23, 0x55	; 85
     174:	75 65       	ori	r23, 0x55	; 85
	...

00000177 <__c.2283>:
     177:	43 61 6e 27 74 20 70 75 73 68 20 6f 6e 20 66 75     Can't push on fu
     187:	6c 6c 20 72 65 61 64 79 20 71 75 65 75 65 00        ll ready queue.

00000196 <__c.2073>:
     196:	20 20 20 20 20 20 20 20 00                                  .

0000019f <__c.2289>:
     19f:	5b 45 52 52 4f 52 5d 20 00                          [ERROR] .

000001a8 <__c.2283>:
     1a8:	20 53 74 61 63 6b 20 63 6f 6c 6c 69 64 65 73 20      Stack collides 
     1b8:	77 69 74 68 20 67 6c 6f 62 61 6c 20 76 61 72 73     with global vars
	...

000001c9 <__c.2281>:
     1c9:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     1d9:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     1e9:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     1f9:	2d 2d 0a 00                                         --..

000001fd <__c.2277>:
     1fd:	5b 49 4e 46 4f 5d 20 20 00                          [INFO]  .

00000206 <__c.2279>:
     206:	55 73 65 64 20 67 6c 6f 62 61 6c 20 76 61 72 73     Used global vars
     216:	3a 20 25 64 2f 25 64 20 62 79 74 65 73 00           : %d/%d bytes.

00000224 <__c.2273>:
     224:	5b 49 4e 46 4f 5d 20 20 00                          [INFO]  .

0000022d <__c.2275>:
     22d:	42 6f 6f 74 69 6e 67 20 44 45 4f 53 20 2e 2e 2e     Booting DEOS ...
	...

0000023e <__c.2271>:
     23e:	0a 0a 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ..##############
     24e:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
     25e:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
     26e:	23 23 23 23 0a 00                                   ####..

00000274 <__c.2269>:
     274:	42 6f 6f 74 69 6e 67 20 44 45 4f 53 20 2e 2e 2e     Booting DEOS ...
	...

00000285 <__c.2445>:
     285:	6f 73 5f 73 74 61 72 74 53 63 68 65 64 75 6c 65     os_startSchedule
     295:	72 28 29 20 74 65 72 6d 69 6e 61 74 65 64 20 61     r() terminated a
     2a5:	67 61 69 6e 73 74 20 61 6c 6c 20 6f 64 64 73 20     gainst all odds 
     2b5:	2d 20 73 63 61 72 79 20 73 74 75 66 66 2e 2e 2e     - scary stuff...
	...

000002c6 <__c.2440>:
     2c6:	54 68 65 72 65 20 69 73 20 6e 6f 20 69 64 6c 65     There is no idle
     2d6:	20 70 72 6f 63 00                                    proc.

000002dc <__c.2418>:
     2dc:	6f 73 5f 65 78 65 63 28 29 20 2d 3e 20 00           os_exec() -> .

000002ea <__c.2420>:
     2ea:	4e 6f 20 66 72 65 65 20 73 6c 6f 74 20 61 76 61     No free slot ava
     2fa:	69 6c 61 62 6c 65 0a 00                             ilable..

00000302 <__c.2384>:
     302:	43 68 65 63 6b 73 75 6d 20 6d 69 73 6d 61 74 63     Checksum mismatc
     312:	68 20 69 6e 20 70 72 6f 63 65 73 73 20 25 64 00     h in process %d.

00000322 <__c.2378>:
     322:	53 74 61 63 6b 20 70 6f 69 6e 74 65 72 20 6f 75     Stack pointer ou
     332:	74 20 6f 66 20 62 6f 75 6e 64 73 20 69 6e 20 70     t of bounds in p
     342:	72 6f 63 65 73 73 20 25 64 00                       rocess %d.

0000034c <__c.2371>:
     34c:	43 72 69 74 2e 20 53 65 63 74 69 6f 6e 20 20 20     Crit. Section   
     35c:	75 6e 64 65 72 66 6c 6f 77 00                       underflow.

00000366 <__c.2365>:
     366:	43 72 69 74 2e 20 53 65 63 74 69 6f 6e 20 20 20     Crit. Section   
     376:	6f 76 65 72 66 6c 6f 77 00                          overflow.

0000037f <__c.2376>:
     37f:	20 54 65 73 74 20 66 69 6e 69 73 68 65 64 00         Test finished.

0000038e <__c.2372>:
     38e:	50 68 61 73 65 20 35 3a 20 20 72 65 66 65 72 2d     Phase 5:  refer-
     39e:	65 6e 63 65 20 66 72 61 6d 65 20 00                 ence frame .

000003aa <__c.2370>:
     3aa:	4f 4b 00                                            OK.

000003ad <__c.2368>:
     3ad:	20 20 20 20 2d 2d 3e 20 20 3c 2d 2d 00                  -->  <--.

000003ba <__c.2366>:
     3ba:	50 68 61 73 65 20 34 3a 00                          Phase 4:.

000003c3 <__c.2360>:
     3c3:	50 68 61 73 65 20 33 3a 00                          Phase 3:.

000003cc <__c.2354>:
     3cc:	4c 45 44 20 4f 66 66 00                             LED Off.

000003d4 <__c.2348>:
     3d4:	4c 45 44 20 4f 6e 00                                LED On.

000003db <__c.2346>:
     3db:	50 68 61 73 65 20 32 3a 00                          Phase 2:.

000003e4 <__c.2340>:
     3e4:	4f 6e 62 6f 61 72 64 20 4c 45 44 00                 Onboard LED.

000003f0 <__c.2338>:
     3f0:	50 68 61 73 65 20 31 3a 20 54 6f 67 67 6c 65 00     Phase 1: Toggle.

00000400 <__ctors_start>:
     400:	5f 0c       	add	r5, r15
     402:	30 10       	cpse	r3, r0
     404:	41 10       	cpse	r4, r1

00000406 <__ctors_end>:
     406:	11 24       	eor	r1, r1
     408:	1f be       	out	0x3f, r1	; 63
     40a:	cf ef       	ldi	r28, 0xFF	; 255
     40c:	d1 e2       	ldi	r29, 0x21	; 33
     40e:	de bf       	out	0x3e, r29	; 62
     410:	cd bf       	out	0x3d, r28	; 61
     412:	00 e0       	ldi	r16, 0x00	; 0
     414:	0c bf       	out	0x3c, r16	; 60

00000416 <__do_copy_data>:
     416:	12 e0       	ldi	r17, 0x02	; 2
     418:	a0 e0       	ldi	r26, 0x00	; 0
     41a:	b2 e0       	ldi	r27, 0x02	; 2
     41c:	e4 ee       	ldi	r30, 0xE4	; 228
     41e:	f8 e2       	ldi	r31, 0x28	; 40
     420:	00 e0       	ldi	r16, 0x00	; 0
     422:	0b bf       	out	0x3b, r16	; 59
     424:	02 c0       	rjmp	.+4      	; 0x42a <__do_copy_data+0x14>
     426:	07 90       	elpm	r0, Z+
     428:	0d 92       	st	X+, r0
     42a:	ae 33       	cpi	r26, 0x3E	; 62
     42c:	b1 07       	cpc	r27, r17
     42e:	d9 f7       	brne	.-10     	; 0x426 <__do_copy_data+0x10>

00000430 <__do_clear_bss>:
     430:	24 e0       	ldi	r18, 0x04	; 4
     432:	ae e3       	ldi	r26, 0x3E	; 62
     434:	b2 e0       	ldi	r27, 0x02	; 2
     436:	01 c0       	rjmp	.+2      	; 0x43a <.do_clear_bss_start>

00000438 <.do_clear_bss_loop>:
     438:	1d 92       	st	X+, r1

0000043a <.do_clear_bss_start>:
     43a:	a8 39       	cpi	r26, 0x98	; 152
     43c:	b2 07       	cpc	r27, r18
     43e:	e1 f7       	brne	.-8      	; 0x438 <.do_clear_bss_loop>

00000440 <__do_global_ctors>:
     440:	12 e0       	ldi	r17, 0x02	; 2
     442:	c3 e0       	ldi	r28, 0x03	; 3
     444:	d2 e0       	ldi	r29, 0x02	; 2
     446:	00 e0       	ldi	r16, 0x00	; 0
     448:	06 c0       	rjmp	.+12     	; 0x456 <__do_global_ctors+0x16>
     44a:	21 97       	sbiw	r28, 0x01	; 1
     44c:	01 09       	sbc	r16, r1
     44e:	80 2f       	mov	r24, r16
     450:	fe 01       	movw	r30, r28
     452:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__tablejump2__>
     456:	c0 30       	cpi	r28, 0x00	; 0
     458:	d1 07       	cpc	r29, r17
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	08 07       	cpc	r16, r24
     45e:	a9 f7       	brne	.-22     	; 0x44a <__do_global_ctors+0xa>
     460:	0e 94 35 0b 	call	0x166a	; 0x166a <main>
     464:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <_exit>

00000468 <__bad_interrupt>:
     468:	cb cd       	rjmp	.-1130   	; 0x0 <__vectors>

0000046a <rfAdapter_init>:
 * \return True if the communication has been initialized
 */
uint8_t rfAdapter_isInitialized()
{
	return rfAdapter_initialized;
}
     46a:	94 d1       	rcall	.+808    	; 0x794 <serialAdapter_init>
     46c:	84 b1       	in	r24, 0x04	; 4
     46e:	80 68       	ori	r24, 0x80	; 128
     470:	84 b9       	out	0x04, r24	; 4
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__data_end>
     478:	08 95       	ret

0000047a <rfAdapter_worker>:
/*!
 *  Main task of adapter
 */
void rfAdapter_worker()
{
	serialAdapter_worker();
     47a:	13 c2       	rjmp	.+1062   	; 0x8a2 <serialAdapter_worker>
     47c:	08 95       	ret

0000047e <rfAdapter_receiveSetLed>:
 *  \param data Payload of received frame
 */
void rfAdapter_receiveSetLed(cmd_setLed_t *data)
{
	// printf("rfAdapter_receiveSetLed()");
	if ((bool)data->enable)
     47e:	fc 01       	movw	r30, r24
     480:	80 81       	ld	r24, Z
     482:	88 23       	and	r24, r24
     484:	21 f0       	breq	.+8      	; 0x48e <rfAdapter_receiveSetLed+0x10>
	{
		PORTB |= (1 << PB7); // on
     486:	85 b1       	in	r24, 0x05	; 5
     488:	80 68       	ori	r24, 0x80	; 128
     48a:	85 b9       	out	0x05, r24	; 5
     48c:	08 95       	ret
	}
	else
	{
		PORTB &= ~(1 << PB7); // off
     48e:	85 b1       	in	r24, 0x05	; 5
     490:	8f 77       	andi	r24, 0x7F	; 127
     492:	85 b9       	out	0x05, r24	; 5
     494:	08 95       	ret

00000496 <rfAdapter_receiveToggleLed>:
 *  Handler that's called when command CMD_TOGGLE_LED was received
 */
void rfAdapter_receiveToggleLed()
{
	// printf("rfAdapter_receiveToggleLed()");
	PORTB ^= (1 << PB7);
     496:	85 b1       	in	r24, 0x05	; 5
     498:	80 58       	subi	r24, 0x80	; 128
     49a:	85 b9       	out	0x05, r24	; 5
     49c:	08 95       	ret

0000049e <rfAdapter_receiveLcdClear>:
 *  Handler that's called when command CMD_LCD_CLEAR was received
 */
void rfAdapter_receiveLcdClear()
{
	// printf("rfAdapter_receiveLcdClear()");
	PORTB &= ~(1 << PB7);
     49e:	85 b1       	in	r24, 0x05	; 5
     4a0:	8f 77       	andi	r24, 0x7F	; 127
     4a2:	85 b9       	out	0x05, r24	; 5
     4a4:	08 95       	ret

000004a6 <rfAdapter_receiveLcdGoto>:
 *  \param data Payload of received frame
 */
void rfAdapter_receiveLcdGoto(cmd_lcdGoto_t *data)
{
	// printf("rfAdapter_receiveLcdGoto()");
	lcd_goto(data->x, data->y);
     4a6:	fc 01       	movw	r30, r24
     4a8:	61 81       	ldd	r22, Z+1	; 0x01
     4aa:	80 81       	ld	r24, Z
     4ac:	fb c3       	rjmp	.+2038   	; 0xca4 <lcd_goto>
     4ae:	08 95       	ret

000004b0 <rfAdapter_receiveLcdPrint>:
 *  Handler that's called when command CMD_LCD_PRINT was received
 *
 *  \param data Payload of received frame
 */
void rfAdapter_receiveLcdPrint(cmd_lcdPrint_t *data)
{
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
     4bc:	a1 97       	sbiw	r28, 0x21	; 33
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	f8 94       	cli
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	cd bf       	out	0x3d, r28	; 61
	// printf("rfAdapter_receiveLcdPrint()");

	char buffer[33];
	if (data->length > 32)
     4c8:	fc 01       	movw	r30, r24
     4ca:	40 81       	ld	r20, Z
     4cc:	41 32       	cpi	r20, 0x21	; 33
     4ce:	a8 f4       	brcc	.+42     	; 0x4fa <rfAdapter_receiveLcdPrint+0x4a>
     4d0:	8c 01       	movw	r16, r24
		return;
	memcpy(&buffer, &(data->message), data->length);
     4d2:	bc 01       	movw	r22, r24
     4d4:	6f 5f       	subi	r22, 0xFF	; 255
     4d6:	7f 4f       	sbci	r23, 0xFF	; 255
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	ce 01       	movw	r24, r28
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	0e 94 8a 11 	call	0x2314	; 0x2314 <memcpy>
	buffer[data->length] = '\0';
     4e2:	f8 01       	movw	r30, r16
     4e4:	80 81       	ld	r24, Z
     4e6:	e1 e0       	ldi	r30, 0x01	; 1
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	ec 0f       	add	r30, r28
     4ec:	fd 1f       	adc	r31, r29
     4ee:	e8 0f       	add	r30, r24
     4f0:	f1 1d       	adc	r31, r1
     4f2:	10 82       	st	Z, r1
	lcd_writeString(&buffer[0]);
     4f4:	ce 01       	movw	r24, r28
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	4b d4       	rcall	.+2198   	; 0xd90 <lcd_writeString>
}
     4fa:	a1 96       	adiw	r28, 0x21	; 33
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	de bf       	out	0x3e, r29	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	cd bf       	out	0x3d, r28	; 61
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	08 95       	ret

00000510 <serialAdapter_processFrame>:
 *  \param frame Received frame
 */
void serialAdapter_processFrame(frame_t *frame)
{

	if (frame->header.length > COMM_MAX_PAYLOAD_LENGTH + sizeof(uint8_t) || frame->header.length < sizeof(command_t))
     510:	fc 01       	movw	r30, r24
     512:	34 81       	ldd	r19, Z+4	; 0x04
     514:	2f ef       	ldi	r18, 0xFF	; 255
     516:	23 0f       	add	r18, r19
     518:	21 33       	cpi	r18, 0x31	; 49
     51a:	20 f5       	brcc	.+72     	; 0x564 <serialAdapter_processFrame+0x54>
	{
		return;
	}


	switch (frame->innerFrame.command)
     51c:	25 81       	ldd	r18, Z+5	; 0x05
     51e:	20 31       	cpi	r18, 0x10	; 16
     520:	a1 f0       	breq	.+40     	; 0x54a <serialAdapter_processFrame+0x3a>
     522:	28 f4       	brcc	.+10     	; 0x52e <serialAdapter_processFrame+0x1e>
     524:	21 30       	cpi	r18, 0x01	; 1
     526:	41 f0       	breq	.+16     	; 0x538 <serialAdapter_processFrame+0x28>
     528:	22 30       	cpi	r18, 0x02	; 2
     52a:	59 f0       	breq	.+22     	; 0x542 <serialAdapter_processFrame+0x32>
     52c:	08 95       	ret
     52e:	21 31       	cpi	r18, 0x11	; 17
     530:	81 f0       	breq	.+32     	; 0x552 <serialAdapter_processFrame+0x42>
     532:	22 31       	cpi	r18, 0x12	; 18
     534:	99 f0       	breq	.+38     	; 0x55c <serialAdapter_processFrame+0x4c>
     536:	08 95       	ret
	{
	case CMD_SET_LED:
	{
		if (frame->header.length - sizeof(command_t) != sizeof(cmd_setLed_t))
     538:	32 30       	cpi	r19, 0x02	; 2
     53a:	a1 f4       	brne	.+40     	; 0x564 <serialAdapter_processFrame+0x54>
		{
			return;
		}
		else
			rfAdapter_receiveSetLed((cmd_setLed_t *)&(frame->innerFrame.payload));
     53c:	06 96       	adiw	r24, 0x06	; 6
     53e:	9f cf       	rjmp	.-194    	; 0x47e <rfAdapter_receiveSetLed>
	}
	break;
     540:	08 95       	ret
	case CMD_TOGGLE_LED:
	{
		if (frame->header.length - sizeof(command_t) != 0)
     542:	31 30       	cpi	r19, 0x01	; 1
		{
			return;
		}
		else
			rfAdapter_receiveToggleLed();
     544:	79 f4       	brne	.+30     	; 0x564 <serialAdapter_processFrame+0x54>
     546:	a7 cf       	rjmp	.-178    	; 0x496 <rfAdapter_receiveToggleLed>
	}
	break;
     548:	08 95       	ret

	case CMD_LCD_CLEAR:
	{
		if (frame->header.length - sizeof(command_t) != 0)
     54a:	31 30       	cpi	r19, 0x01	; 1
		{
			return;
		}
		else
			rfAdapter_receiveLcdClear();
     54c:	59 f4       	brne	.+22     	; 0x564 <serialAdapter_processFrame+0x54>
     54e:	a7 cf       	rjmp	.-178    	; 0x49e <rfAdapter_receiveLcdClear>
	}
	break;
     550:	08 95       	ret

	case CMD_LCD_GOTO:
	{
		if (frame->header.length - sizeof(command_t) != sizeof(cmd_lcdGoto_t))
     552:	33 30       	cpi	r19, 0x03	; 3
		{
			return;
		}
		else
			rfAdapter_receiveLcdGoto((cmd_lcdGoto_t *)&(frame->innerFrame.payload));
     554:	39 f4       	brne	.+14     	; 0x564 <serialAdapter_processFrame+0x54>
     556:	06 96       	adiw	r24, 0x06	; 6
     558:	a6 cf       	rjmp	.-180    	; 0x4a6 <rfAdapter_receiveLcdGoto>
	}
	break;

	case CMD_LCD_PRINT:
	{
		if (frame->header.length - sizeof(command_t) != sizeof(cmd_lcdPrint_t))
     55a:	08 95       	ret
     55c:	32 32       	cpi	r19, 0x22	; 34
		{
			return;
		}
		else
			rfAdapter_receiveLcdPrint((cmd_lcdPrint_t *)&(frame->innerFrame.payload));
     55e:	11 f4       	brne	.+4      	; 0x564 <serialAdapter_processFrame+0x54>
     560:	06 96       	adiw	r24, 0x06	; 6
     562:	a6 cf       	rjmp	.-180    	; 0x4b0 <rfAdapter_receiveLcdPrint>
     564:	08 95       	ret

00000566 <rfAdapter_sendSetLed>:
 *
 *  \param destAddr Where to send the frame
 *  \param enable Whether the receiver should enable or disable their led
 */
void rfAdapter_sendSetLed(address_t destAddr, bool enable)
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	e1 97       	sbiw	r28, 0x31	; 49
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
	// printf("rfAdapter_sendSetLed()");

	inner_frame_t inner_frame;
	inner_frame.command = CMD_SET_LED;
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	99 83       	std	Y+1, r25	; 0x01
	inner_frame.payload[0] = (uint8_t)enable;
     57e:	6a 83       	std	Y+2, r22	; 0x02

	serialAdapter_writeFrame(destAddr, sizeof(inner_frame), &inner_frame);
     580:	ae 01       	movw	r20, r28
     582:	4f 5f       	subi	r20, 0xFF	; 255
     584:	5f 4f       	sbci	r21, 0xFF	; 255
     586:	61 e3       	ldi	r22, 0x31	; 49
     588:	4c d1       	rcall	.+664    	; 0x822 <serialAdapter_writeFrame>
}
     58a:	e1 96       	adiw	r28, 0x31	; 49
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <rfAdapter_sendToggleLed>:
 *  Sends a frame with command CMD_TOGGLE_LED
 *
 *  \param destAddr Where to send the frame
 */
void rfAdapter_sendToggleLed(address_t destAddr)
{
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	e1 97       	sbiw	r28, 0x31	; 49
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	cd bf       	out	0x3d, r28	; 61
	inner_frame_t inner_frame;
	inner_frame.command = CMD_TOGGLE_LED;
     5b0:	92 e0       	ldi	r25, 0x02	; 2
     5b2:	99 83       	std	Y+1, r25	; 0x01

	serialAdapter_writeFrame(destAddr, sizeof(command_t), &inner_frame);
     5b4:	ae 01       	movw	r20, r28
     5b6:	4f 5f       	subi	r20, 0xFF	; 255
     5b8:	5f 4f       	sbci	r21, 0xFF	; 255
     5ba:	61 e0       	ldi	r22, 0x01	; 1
     5bc:	32 d1       	rcall	.+612    	; 0x822 <serialAdapter_writeFrame>
}
     5be:	e1 96       	adiw	r28, 0x31	; 49
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <rfAdapter_sendLcdClear>:
 *  Sends a frame with command CMD_LCD_CLEAR
 *
 *  \param destAddr Where to send the frame
 */
void rfAdapter_sendLcdClear(address_t destAddr)
{
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	e1 97       	sbiw	r28, 0x31	; 49
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
	// printf("rfAdapter_sendLcdClear()");
	inner_frame_t inner_frame;
	inner_frame.command = CMD_LCD_CLEAR;
     5e4:	90 e1       	ldi	r25, 0x10	; 16
     5e6:	99 83       	std	Y+1, r25	; 0x01

	serialAdapter_writeFrame(destAddr, sizeof(inner_frame), &inner_frame);
     5e8:	ae 01       	movw	r20, r28
     5ea:	4f 5f       	subi	r20, 0xFF	; 255
     5ec:	5f 4f       	sbci	r21, 0xFF	; 255
     5ee:	61 e3       	ldi	r22, 0x31	; 49
     5f0:	18 d1       	rcall	.+560    	; 0x822 <serialAdapter_writeFrame>
}
     5f2:	e1 96       	adiw	r28, 0x31	; 49
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <rfAdapter_sendLcdGoto>:
 *  \param destAddr Where to send the frame
 *  \param x Which column should be selected by the receiver
 *  \param y Which row should be selected by the receiver
 */
void rfAdapter_sendLcdGoto(address_t destAddr, uint8_t x, uint8_t y)
{
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	e1 97       	sbiw	r28, 0x31	; 49
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61
	// printf("rfAdapter_sendLcdGoto()");
	inner_frame_t inner_frame;
	inner_frame.command = CMD_LCD_GOTO;
     618:	91 e1       	ldi	r25, 0x11	; 17
     61a:	99 83       	std	Y+1, r25	; 0x01

	cmd_lcdGoto_t cmd;
	cmd.x = x;
	cmd.y = y;
	memcpy(&inner_frame.payload, &cmd, sizeof(cmd));
     61c:	6a 83       	std	Y+2, r22	; 0x02
     61e:	4b 83       	std	Y+3, r20	; 0x03

	serialAdapter_writeFrame(destAddr, sizeof(inner_frame), &inner_frame);
     620:	ae 01       	movw	r20, r28
     622:	4f 5f       	subi	r20, 0xFF	; 255
     624:	5f 4f       	sbci	r21, 0xFF	; 255
     626:	61 e3       	ldi	r22, 0x31	; 49
     628:	fc d0       	rcall	.+504    	; 0x822 <serialAdapter_writeFrame>
}
     62a:	e1 96       	adiw	r28, 0x31	; 49
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <rfAdapter_sendLcdPrint>:
 *
 *  \param destAddr Where to send the frame
 *  \param message Which message should be printed on receiver side
 */
void rfAdapter_sendLcdPrint(address_t destAddr, const char *message)
{
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
     646:	c4 55       	subi	r28, 0x54	; 84
     648:	d1 09       	sbc	r29, r1
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
     654:	18 2f       	mov	r17, r24
     656:	65 96       	adiw	r28, 0x15	; 21
     658:	7f af       	std	Y+63, r23	; 0x3f
     65a:	6e af       	std	Y+62, r22	; 0x3e
     65c:	65 97       	sbiw	r28, 0x15	; 21
	// printf("rfAdapter_sendLcdPrint()");
	inner_frame_t inner_frame;
	inner_frame.command = CMD_LCD_PRINT;
     65e:	22 e1       	ldi	r18, 0x12	; 18
     660:	29 83       	std	Y+1, r18	; 0x01

	cmd_lcdPrint_t cmd;
	cmd.length = strlen(message);
     662:	a6 2f       	mov	r26, r22
     664:	b7 2f       	mov	r27, r23
     666:	fd 01       	movw	r30, r26
     668:	01 90       	ld	r0, Z+
     66a:	00 20       	and	r0, r0
     66c:	e9 f7       	brne	.-6      	; 0x668 <rfAdapter_sendLcdPrint+0x2c>
     66e:	31 97       	sbiw	r30, 0x01	; 1
     670:	ea 1b       	sub	r30, r26
     672:	fb 0b       	sbc	r31, r27
     674:	ea ab       	std	Y+50, r30	; 0x32
	memcpy(&cmd.message, &message, cmd.length);
     676:	4e 2f       	mov	r20, r30
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	be 01       	movw	r22, r28
     67c:	6d 5a       	subi	r22, 0xAD	; 173
     67e:	7f 4f       	sbci	r23, 0xFF	; 255
     680:	ce 01       	movw	r24, r28
     682:	c3 96       	adiw	r24, 0x33	; 51
     684:	0e 94 8a 11 	call	0x2314	; 0x2314 <memcpy>

	memcpy(&inner_frame.payload, &cmd, sizeof(cmd));
     688:	81 e2       	ldi	r24, 0x21	; 33
     68a:	fe 01       	movw	r30, r28
     68c:	f2 96       	adiw	r30, 0x32	; 50
     68e:	de 01       	movw	r26, r28
     690:	12 96       	adiw	r26, 0x02	; 2
     692:	01 90       	ld	r0, Z+
     694:	0d 92       	st	X+, r0
     696:	8a 95       	dec	r24
     698:	e1 f7       	brne	.-8      	; 0x692 <rfAdapter_sendLcdPrint+0x56>

	serialAdapter_writeFrame(destAddr, sizeof(inner_frame), &inner_frame);
     69a:	ae 01       	movw	r20, r28
     69c:	4f 5f       	subi	r20, 0xFF	; 255
     69e:	5f 4f       	sbci	r21, 0xFF	; 255
     6a0:	61 e3       	ldi	r22, 0x31	; 49
     6a2:	81 2f       	mov	r24, r17
     6a4:	be d0       	rcall	.+380    	; 0x822 <serialAdapter_writeFrame>
}
     6a6:	cc 5a       	subi	r28, 0xAC	; 172
     6a8:	df 4f       	sbci	r29, 0xFF	; 255
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	de bf       	out	0x3e, r29	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	08 95       	ret

000006bc <rfAdapter_sendLcdPrintProcMem>:
 *
 *  \param destAddr Where to send the frame
 *  \param message Which message should be printed on receiver side as address to program memory. Use PSTR for creating strings on program memory
 */
void rfAdapter_sendLcdPrintProcMem(address_t destAddr, const char *message)
{
     6bc:	ff 92       	push	r15
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
     6ca:	c2 58       	subi	r28, 0x82	; 130
     6cc:	d1 09       	sbc	r29, r1
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	f8 2e       	mov	r15, r24
	// printf("rfAdapter_sendLcdPrintProcMem()");
	inner_frame_t inner_frame;
	inner_frame.command = CMD_LCD_PRINT;
     6da:	82 e1       	ldi	r24, 0x12	; 18
     6dc:	89 83       	std	Y+1, r24	; 0x01

	// Temporary buffer to hold the string from program memory
	char buffer[COMM_MAX_PAYLOAD_LENGTH];

	// Copy the string from program memory to the buffer
	strncpy_P(buffer, message, sizeof(buffer) - 1);
     6de:	8e 01       	movw	r16, r28
     6e0:	0d 5a       	subi	r16, 0xAD	; 173
     6e2:	1f 4f       	sbci	r17, 0xFF	; 255
     6e4:	4f e2       	ldi	r20, 0x2F	; 47
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	c8 01       	movw	r24, r16
     6ea:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <strncpy_P>
	buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
     6ee:	f8 01       	movw	r30, r16
     6f0:	17 a6       	std	Z+47, r1	; 0x2f

	// Populate the command structure
	cmd.length = strlen(buffer);
     6f2:	01 90       	ld	r0, Z+
     6f4:	00 20       	and	r0, r0
     6f6:	e9 f7       	brne	.-6      	; 0x6f2 <rfAdapter_sendLcdPrintProcMem+0x36>
     6f8:	31 97       	sbiw	r30, 0x01	; 1
     6fa:	e0 1b       	sub	r30, r16
     6fc:	f1 0b       	sbc	r31, r17
     6fe:	ea ab       	std	Y+50, r30	; 0x32
	strncpy(cmd.message, buffer, sizeof(cmd.message) - 1);
     700:	4f e1       	ldi	r20, 0x1F	; 31
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	b8 01       	movw	r22, r16
     706:	ce 01       	movw	r24, r28
     708:	c3 96       	adiw	r24, 0x33	; 51
     70a:	0e 94 93 11 	call	0x2326	; 0x2326 <strncpy>
	cmd.message[sizeof(cmd.message) - 1] = '\0'; // Ensure null termination
     70e:	63 96       	adiw	r28, 0x13	; 19
     710:	1f ae       	std	Y+63, r1	; 0x3f
     712:	63 97       	sbiw	r28, 0x13	; 19

	// Copy the command structure to the inner frame payload
	memcpy(&inner_frame.payload, &cmd, sizeof(cmd));
     714:	81 e2       	ldi	r24, 0x21	; 33
     716:	fe 01       	movw	r30, r28
     718:	f2 96       	adiw	r30, 0x32	; 50
     71a:	de 01       	movw	r26, r28
     71c:	12 96       	adiw	r26, 0x02	; 2
     71e:	01 90       	ld	r0, Z+
     720:	0d 92       	st	X+, r0
     722:	8a 95       	dec	r24
     724:	e1 f7       	brne	.-8      	; 0x71e <rfAdapter_sendLcdPrintProcMem+0x62>

	// Send the frame
	serialAdapter_writeFrame(destAddr, sizeof(inner_frame), &inner_frame);
     726:	ae 01       	movw	r20, r28
     728:	4f 5f       	subi	r20, 0xFF	; 255
     72a:	5f 4f       	sbci	r21, 0xFF	; 255
     72c:	61 e3       	ldi	r22, 0x31	; 49
     72e:	8f 2d       	mov	r24, r15
     730:	78 d0       	rcall	.+240    	; 0x822 <serialAdapter_writeFrame>
     732:	ce 57       	subi	r28, 0x7E	; 126
     734:	df 4f       	sbci	r29, 0xFF	; 255
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	f8 94       	cli
     73a:	de bf       	out	0x3e, r29	; 62
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	cd bf       	out	0x3d, r28	; 61
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	ff 90       	pop	r15
     74a:	08 95       	ret

0000074c <serialAdapter_hasTimeout>:
{
	while (xbee_getNumberOfBytesReceived() == 0)
	{
		os_yield();
	}
}
     74c:	8f 92       	push	r8
     74e:	9f 92       	push	r9
     750:	af 92       	push	r10
     752:	bf 92       	push	r11
     754:	cf 92       	push	r12
     756:	df 92       	push	r13
     758:	ef 92       	push	r14
     75a:	ff 92       	push	r15
     75c:	4b 01       	movw	r8, r22
     75e:	5c 01       	movw	r10, r24
     760:	69 01       	movw	r12, r18
     762:	7a 01       	movw	r14, r20
     764:	10 d7       	rcall	.+3616   	; 0x1586 <getSystemTime_ms>
     766:	dc 01       	movw	r26, r24
     768:	cb 01       	movw	r24, r22
     76a:	88 19       	sub	r24, r8
     76c:	99 09       	sbc	r25, r9
     76e:	aa 09       	sbc	r26, r10
     770:	bb 09       	sbc	r27, r11
     772:	21 e0       	ldi	r18, 0x01	; 1
     774:	8c 15       	cp	r24, r12
     776:	9d 05       	cpc	r25, r13
     778:	ae 05       	cpc	r26, r14
     77a:	bf 05       	cpc	r27, r15
     77c:	08 f4       	brcc	.+2      	; 0x780 <serialAdapter_hasTimeout+0x34>
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	82 2f       	mov	r24, r18
     782:	ff 90       	pop	r15
     784:	ef 90       	pop	r14
     786:	df 90       	pop	r13
     788:	cf 90       	pop	r12
     78a:	bf 90       	pop	r11
     78c:	af 90       	pop	r10
     78e:	9f 90       	pop	r9
     790:	8f 90       	pop	r8
     792:	08 95       	ret

00000794 <serialAdapter_init>:
/*!
 *  Initializes the serialAdapter and their dependencies
 */
void serialAdapter_init(void)
{
	xbee_init();
     794:	10 c1       	rjmp	.+544    	; 0x9b6 <xbee_init>
     796:	08 95       	ret

00000798 <serialAdapter_waitForData>:
 *  \param byteCount Count of bytes that need to arrive so that the function will unblock
 *  \param frameTimestamp Start time of the first byte arrived from which the timeout will be calculated on
 *  \return False when it times out.
 */
bool serialAdapter_waitForData(uint16_t byteCount, time_t frameTimestamp)
{
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	ec 01       	movw	r28, r24
     7a6:	6a 01       	movw	r12, r20
     7a8:	7b 01       	movw	r14, r22
	int i = xbee_getNumberOfBytesReceived();
     7aa:	50 d1       	rcall	.+672    	; 0xa4c <xbee_getNumberOfBytesReceived>

	while (i < byteCount)
     7ac:	0c c0       	rjmp	.+24     	; 0x7c6 <serialAdapter_waitForData+0x2e>
	{
		if (serialAdapter_hasTimeout(frameTimestamp, SERIAL_ADAPTER_READ_TIMEOUT_MS))
     7ae:	24 ef       	ldi	r18, 0xF4	; 244
     7b0:	31 e0       	ldi	r19, 0x01	; 1
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	c7 01       	movw	r24, r14
     7b8:	b6 01       	movw	r22, r12
     7ba:	c8 df       	rcall	.-112    	; 0x74c <serialAdapter_hasTimeout>
     7bc:	81 11       	cpse	r24, r1
     7be:	08 c0       	rjmp	.+16     	; 0x7d0 <serialAdapter_waitForData+0x38>
			return false;
		else
			os_yield();
     7c0:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <os_yield>
		i = xbee_getNumberOfBytesReceived();
     7c4:	43 d1       	rcall	.+646    	; 0xa4c <xbee_getNumberOfBytesReceived>
 */
bool serialAdapter_waitForData(uint16_t byteCount, time_t frameTimestamp)
{
	int i = xbee_getNumberOfBytesReceived();

	while (i < byteCount)
     7c6:	8c 17       	cp	r24, r28
     7c8:	9d 07       	cpc	r25, r29
     7ca:	88 f3       	brcs	.-30     	; 0x7ae <serialAdapter_waitForData+0x16>
			return false;
		else
			os_yield();
		i = xbee_getNumberOfBytesReceived();
	}
	return true;
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <serialAdapter_waitForData+0x3a>
	int i = xbee_getNumberOfBytesReceived();

	while (i < byteCount)
	{
		if (serialAdapter_hasTimeout(frameTimestamp, SERIAL_ADAPTER_READ_TIMEOUT_MS))
			return false;
     7d0:	80 e0       	ldi	r24, 0x00	; 0
		else
			os_yield();
		i = xbee_getNumberOfBytesReceived();
	}
	return true;
}
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	df 90       	pop	r13
     7dc:	cf 90       	pop	r12
     7de:	08 95       	ret

000007e0 <serialAdapter_calculateChecksum>:
 *  \param checksum pointer to a checksum that will be updated
 *  \param data buffer on which the checksum will be calculated
 *  \param length size of the given buffer
 */
void serialAdapter_calculateChecksum(checksum_t *checksum, void *data, uint8_t length)
{
     7e0:	fc 01       	movw	r30, r24
	for (uint8_t i = 0; i < length; i++)
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	08 c0       	rjmp	.+16     	; 0x7f6 <serialAdapter_calculateChecksum+0x16>
	{
		*checksum ^= ((uint8_t *)data)[i];
     7e6:	db 01       	movw	r26, r22
     7e8:	a9 0f       	add	r26, r25
     7ea:	b1 1d       	adc	r27, r1
     7ec:	2c 91       	ld	r18, X
     7ee:	80 81       	ld	r24, Z
     7f0:	28 27       	eor	r18, r24
     7f2:	20 83       	st	Z, r18
 *  \param data buffer on which the checksum will be calculated
 *  \param length size of the given buffer
 */
void serialAdapter_calculateChecksum(checksum_t *checksum, void *data, uint8_t length)
{
	for (uint8_t i = 0; i < length; i++)
     7f4:	9f 5f       	subi	r25, 0xFF	; 255
     7f6:	94 17       	cp	r25, r20
     7f8:	b0 f3       	brcs	.-20     	; 0x7e6 <serialAdapter_calculateChecksum+0x6>
	{
		*checksum ^= ((uint8_t *)data)[i];
	}
}
     7fa:	08 95       	ret

000007fc <serialAdapter_calculateFrameChecksum>:
 *
 *  \param checksum pointer to a checksum that will be updated
 *  \param frame data on which the checksum will be calculated
 */
void serialAdapter_calculateFrameChecksum(checksum_t *checksum, frame_t *frame)
{
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	8c 01       	movw	r16, r24
     806:	eb 01       	movw	r28, r22
	serialAdapter_calculateChecksum(checksum, &frame->header, sizeof(frame->header));
     808:	45 e0       	ldi	r20, 0x05	; 5
     80a:	ea df       	rcall	.-44     	; 0x7e0 <serialAdapter_calculateChecksum>
	serialAdapter_calculateChecksum(checksum, &frame->innerFrame, frame->header.length);
     80c:	be 01       	movw	r22, r28
     80e:	6b 5f       	subi	r22, 0xFB	; 251
     810:	7f 4f       	sbci	r23, 0xFF	; 255
     812:	4c 81       	ldd	r20, Y+4	; 0x04
     814:	c8 01       	movw	r24, r16
     816:	e4 df       	rcall	.-56     	; 0x7e0 <serialAdapter_calculateChecksum>
}
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	08 95       	ret

00000822 <serialAdapter_writeFrame>:
 *  \param destAddr where to send the frame to
 *  \param length how many bytes the innerFrame has
 *  \param innerFrame buffer as payload of the frame
 */
void serialAdapter_writeFrame(address_t destAddr, inner_frame_length_t length, inner_frame_t *innerFrame)
{
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	e7 97       	sbiw	r28, 0x37	; 55
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
     83c:	f6 2e       	mov	r15, r22
     83e:	8a 01       	movw	r16, r20
	// Prepare frame
	frame_t newFrame;

	newFrame.header.destAddr = destAddr;
     840:	8c 83       	std	Y+4, r24	; 0x04
	newFrame.header.length = length;
     842:	6d 83       	std	Y+5, r22	; 0x05
	newFrame.header.srcAddr = serialAdapter_address;
     844:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     848:	8b 83       	std	Y+3, r24	; 0x03
	newFrame.header.startFlag = serialAdapter_startFlag;
     84a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <serialAdapter_startFlag>
     84e:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <serialAdapter_startFlag+0x1>
     852:	9a 83       	std	Y+2, r25	; 0x02
     854:	89 83       	std	Y+1, r24	; 0x01


	newFrame.footer.checksum = INITIAL_CHECKSUM_VALUE;
     856:	1f aa       	std	Y+55, r1	; 0x37

	newFrame.header = newFrame.header;
	newFrame.innerFrame = *innerFrame;
     858:	81 e3       	ldi	r24, 0x31	; 49
     85a:	fa 01       	movw	r30, r20
     85c:	de 01       	movw	r26, r28
     85e:	16 96       	adiw	r26, 0x06	; 6
     860:	01 90       	ld	r0, Z+
     862:	0d 92       	st	X+, r0
     864:	8a 95       	dec	r24
     866:	e1 f7       	brne	.-8      	; 0x860 <serialAdapter_writeFrame+0x3e>
	newFrame.footer = newFrame.footer;

	serialAdapter_calculateFrameChecksum(&newFrame.footer.checksum, &newFrame);
     868:	be 01       	movw	r22, r28
     86a:	6f 5f       	subi	r22, 0xFF	; 255
     86c:	7f 4f       	sbci	r23, 0xFF	; 255
     86e:	ce 01       	movw	r24, r28
     870:	c7 96       	adiw	r24, 0x37	; 55
     872:	c4 df       	rcall	.-120    	; 0x7fc <serialAdapter_calculateFrameChecksum>

	xbee_writeData(&newFrame.header, sizeof(newFrame.header));
     874:	65 e0       	ldi	r22, 0x05	; 5
     876:	ce 01       	movw	r24, r28
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	a3 d0       	rcall	.+326    	; 0x9c2 <xbee_writeData>
	xbee_writeData(innerFrame, length);
     87c:	6f 2d       	mov	r22, r15
     87e:	c8 01       	movw	r24, r16
     880:	a0 d0       	rcall	.+320    	; 0x9c2 <xbee_writeData>
	xbee_writeData(&newFrame.footer, sizeof(newFrame.footer));
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	ce 01       	movw	r24, r28
     886:	c7 96       	adiw	r24, 0x37	; 55
     888:	9c d0       	rcall	.+312    	; 0x9c2 <xbee_writeData>
}
     88a:	e7 96       	adiw	r28, 0x37	; 55
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	08 95       	ret

000008a2 <serialAdapter_worker>:
/*!
 *  Reads incoming data and processes it. Needs to be called periodically.
 *  Don't read from UART in any other process while this is running.
 */
void serialAdapter_worker()
{
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	ea 97       	sbiw	r28, 0x3a	; 58
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
	if (!serialAdapter_waitForData(sizeof(start_flag_t), getSystemTime_ms()))
     8b6:	67 d6       	rcall	.+3278   	; 0x1586 <getSystemTime_ms>
     8b8:	ab 01       	movw	r20, r22
     8ba:	bc 01       	movw	r22, r24
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	6b df       	rcall	.-298    	; 0x798 <serialAdapter_waitForData>
     8c2:	88 23       	and	r24, r24
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <serialAdapter_worker+0x26>
     8c6:	6e c0       	rjmp	.+220    	; 0x9a4 <serialAdapter_worker+0x102>
	}

	// Parse header one by one, abort if first byte is not part of the start flag
	uint8_t flag_buffer[sizeof(start_flag_t)];

	if (xbee_readBuffer(&flag_buffer[0], 1) != XBEE_SUCCESS)
     8c8:	61 e0       	ldi	r22, 0x01	; 1
     8ca:	ce 01       	movw	r24, r28
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	c0 d0       	rcall	.+384    	; 0xa50 <xbee_readBuffer>
     8d0:	81 11       	cpse	r24, r1
     8d2:	68 c0       	rjmp	.+208    	; 0x9a4 <serialAdapter_worker+0x102>
	{
		return;
	}
	if (xbee_readBuffer(&flag_buffer[1], 1) != XBEE_SUCCESS)
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	ce 01       	movw	r24, r28
     8d8:	02 96       	adiw	r24, 0x02	; 2
     8da:	ba d0       	rcall	.+372    	; 0xa50 <xbee_readBuffer>
     8dc:	81 11       	cpse	r24, r1
     8de:	62 c0       	rjmp	.+196    	; 0x9a4 <serialAdapter_worker+0x102>
	{
		return;
	}

	if (flag_buffer[0] != (serialAdapter_startFlag & 0xFF))
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <serialAdapter_startFlag>
     8e8:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <serialAdapter_startFlag+0x1>
     8ec:	a9 01       	movw	r20, r18
     8ee:	55 27       	eor	r21, r21
     8f0:	84 17       	cp	r24, r20
     8f2:	95 07       	cpc	r25, r21
     8f4:	09 f0       	breq	.+2      	; 0x8f8 <serialAdapter_worker+0x56>
     8f6:	56 c0       	rjmp	.+172    	; 0x9a4 <serialAdapter_worker+0x102>
		return;
	if (flag_buffer[1] != ((serialAdapter_startFlag >> 8) & 0xFF))
     8f8:	8a 81       	ldd	r24, Y+2	; 0x02
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	23 2f       	mov	r18, r19
     8fe:	33 27       	eor	r19, r19
     900:	82 17       	cp	r24, r18
     902:	93 07       	cpc	r25, r19
     904:	09 f0       	breq	.+2      	; 0x908 <serialAdapter_worker+0x66>
		return;

	// Wait for arrival of complete header

	if (!serialAdapter_waitForData(sizeof(frame_header_t) - (sizeof(start_flag_t)), getSystemTime_ms()))
     906:	4e c0       	rjmp	.+156    	; 0x9a4 <serialAdapter_worker+0x102>
     908:	3e d6       	rcall	.+3196   	; 0x1586 <getSystemTime_ms>
     90a:	ab 01       	movw	r20, r22
     90c:	bc 01       	movw	r22, r24
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	42 df       	rcall	.-380    	; 0x798 <serialAdapter_waitForData>
     914:	88 23       	and	r24, r24
     916:	09 f4       	brne	.+2      	; 0x91a <serialAdapter_worker+0x78>
     918:	45 c0       	rjmp	.+138    	; 0x9a4 <serialAdapter_worker+0x102>
	}


	frame_t received_frame;

	received_frame.header.startFlag = serialAdapter_startFlag;
     91a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <serialAdapter_startFlag>
     91e:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <serialAdapter_startFlag+0x1>
     922:	9c 83       	std	Y+4, r25	; 0x04

	int err;
	err = xbee_readBuffer((uint8_t *)&received_frame.header.srcAddr, sizeof(received_frame.header.srcAddr));
     924:	8b 83       	std	Y+3, r24	; 0x03
     926:	61 e0       	ldi	r22, 0x01	; 1
     928:	ce 01       	movw	r24, r28
     92a:	05 96       	adiw	r24, 0x05	; 5
	if (err != XBEE_SUCCESS)
     92c:	91 d0       	rcall	.+290    	; 0xa50 <xbee_readBuffer>
     92e:	81 11       	cpse	r24, r1
	{
		return;
	}

	err = xbee_readBuffer((uint8_t *)&received_frame.header.destAddr, sizeof(received_frame.header.destAddr));
     930:	39 c0       	rjmp	.+114    	; 0x9a4 <serialAdapter_worker+0x102>
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	ce 01       	movw	r24, r28
     936:	06 96       	adiw	r24, 0x06	; 6
	if (err != XBEE_SUCCESS)
     938:	8b d0       	rcall	.+278    	; 0xa50 <xbee_readBuffer>
     93a:	81 11       	cpse	r24, r1
	{
		return;
	}

	err = xbee_readBuffer((uint8_t *)&received_frame.header.length, sizeof(received_frame.header.length));
     93c:	33 c0       	rjmp	.+102    	; 0x9a4 <serialAdapter_worker+0x102>
     93e:	61 e0       	ldi	r22, 0x01	; 1
     940:	ce 01       	movw	r24, r28
     942:	07 96       	adiw	r24, 0x07	; 7
	if (err != XBEE_SUCCESS)
     944:	85 d0       	rcall	.+266    	; 0xa50 <xbee_readBuffer>
     946:	81 11       	cpse	r24, r1





	if (received_frame.header.length > COMM_MAX_INNER_FRAME_LENGTH)
     948:	2d c0       	rjmp	.+90     	; 0x9a4 <serialAdapter_worker+0x102>
     94a:	8f 81       	ldd	r24, Y+7	; 0x07
		return;

	// Wait for complete inner frame and footer
	if (!serialAdapter_waitForData(received_frame.header.length + sizeof(frame_footer_t), getSystemTime_ms()))
     94c:	82 33       	cpi	r24, 0x32	; 50
     94e:	50 f5       	brcc	.+84     	; 0x9a4 <serialAdapter_worker+0x102>
     950:	1a d6       	rcall	.+3124   	; 0x1586 <getSystemTime_ms>
     952:	ab 01       	movw	r20, r22
     954:	bc 01       	movw	r22, r24
     956:	8f 81       	ldd	r24, Y+7	; 0x07
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	01 96       	adiw	r24, 0x01	; 1
     95c:	1d df       	rcall	.-454    	; 0x798 <serialAdapter_waitForData>
	{
		return;
	}

	// Read inner frame
	err = xbee_readBuffer((uint8_t *)&received_frame.innerFrame, received_frame.header.length);
     95e:	88 23       	and	r24, r24
     960:	09 f1       	breq	.+66     	; 0x9a4 <serialAdapter_worker+0x102>
     962:	6f 81       	ldd	r22, Y+7	; 0x07
     964:	ce 01       	movw	r24, r28
     966:	08 96       	adiw	r24, 0x08	; 8
	if (err != XBEE_SUCCESS)
     968:	73 d0       	rcall	.+230    	; 0xa50 <xbee_readBuffer>
     96a:	81 11       	cpse	r24, r1
	{
		return;
	}

	// Read footer
	err = xbee_readBuffer((uint8_t *)&received_frame.footer, sizeof(frame_footer_t));
     96c:	1b c0       	rjmp	.+54     	; 0x9a4 <serialAdapter_worker+0x102>
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	ce 01       	movw	r24, r28
     972:	c9 96       	adiw	r24, 0x39	; 57
	if (err != XBEE_SUCCESS)
     974:	6d d0       	rcall	.+218    	; 0xa50 <xbee_readBuffer>
     976:	81 11       	cpse	r24, r1
		return;
	}


	// Read checksum
	checksum_t frame_checksum = INITIAL_CHECKSUM_VALUE;
     978:	15 c0       	rjmp	.+42     	; 0x9a4 <serialAdapter_worker+0x102>
	serialAdapter_calculateFrameChecksum(&frame_checksum, &received_frame);
     97a:	1a ae       	std	Y+58, r1	; 0x3a
     97c:	be 01       	movw	r22, r28
     97e:	6d 5f       	subi	r22, 0xFD	; 253
     980:	7f 4f       	sbci	r23, 0xFF	; 255
     982:	ce 01       	movw	r24, r28
     984:	ca 96       	adiw	r24, 0x3a	; 58
	


	// Verify checksum
	if (frame_checksum != received_frame.footer.checksum)
     986:	3a df       	rcall	.-396    	; 0x7fc <serialAdapter_calculateFrameChecksum>
     988:	99 ad       	ldd	r25, Y+57	; 0x39
     98a:	8a ad       	ldd	r24, Y+58	; 0x3a
     98c:	98 13       	cpse	r25, r24
		return;

	// Check if we are addressed by this frame
	if (received_frame.header.destAddr != ADDRESS_BROADCAST && received_frame.header.destAddr != serialAdapter_address)
     98e:	0a c0       	rjmp	.+20     	; 0x9a4 <serialAdapter_worker+0x102>
     990:	8e 81       	ldd	r24, Y+6	; 0x06
     992:	8f 3f       	cpi	r24, 0xFF	; 255
     994:	21 f0       	breq	.+8      	; 0x99e <serialAdapter_worker+0xfc>
     996:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     99a:	89 13       	cpse	r24, r25
		return;



	// Forward to next layer
	serialAdapter_processFrame(&received_frame);
     99c:	03 c0       	rjmp	.+6      	; 0x9a4 <serialAdapter_worker+0x102>
     99e:	ce 01       	movw	r24, r28
     9a0:	03 96       	adiw	r24, 0x03	; 3
     9a2:	b6 dd       	rcall	.-1172   	; 0x510 <serialAdapter_processFrame>
}
     9a4:	ea 96       	adiw	r28, 0x3a	; 58
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	de bf       	out	0x3e, r29	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	cd bf       	out	0x3d, r28	; 61
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <xbee_init>:
/*!
 *  Initializes the XBee
 */
void xbee_init()
{
	uart3_init(UART_BAUD_SELECT(38400,16000000UL));
     9b6:	89 e1       	ldi	r24, 0x19	; 25
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	44 c5       	rjmp	.+2696   	; 0x1444 <uart3_init>
     9bc:	08 95       	ret

000009be <xbee_write>:
 *
 *  \param byte one byte that will be sent through UART
 */
void xbee_write(uint8_t byte)
{
	uart3_putc(byte);
     9be:	7a c5       	rjmp	.+2804   	; 0x14b4 <uart3_putc>
     9c0:	08 95       	ret

000009c2 <xbee_writeData>:
 *
 *  \param data buffer with will be sent through UART
 *  \param length size of the buffer
 */
void xbee_writeData(void *data, uint8_t length)
{
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	7c 01       	movw	r14, r24
     9ce:	16 2f       	mov	r17, r22
	// for(int i = 0; i < length;i++)
	// {
	// 	printf_P(PSTR("Sending byte: %d\n"), *(((uint8_t*)data)+i));
	// }
	for(int i = 0; i < length;i++)
     9d0:	c0 e0       	ldi	r28, 0x00	; 0
     9d2:	d0 e0       	ldi	r29, 0x00	; 0
     9d4:	06 c0       	rjmp	.+12     	; 0x9e2 <xbee_writeData+0x20>
	{
		xbee_write(*(((uint8_t*)data)+i));
     9d6:	f7 01       	movw	r30, r14
     9d8:	ec 0f       	add	r30, r28
     9da:	fd 1f       	adc	r31, r29
     9dc:	80 81       	ld	r24, Z
     9de:	ef df       	rcall	.-34     	; 0x9be <xbee_write>
{
	// for(int i = 0; i < length;i++)
	// {
	// 	printf_P(PSTR("Sending byte: %d\n"), *(((uint8_t*)data)+i));
	// }
	for(int i = 0; i < length;i++)
     9e0:	21 96       	adiw	r28, 0x01	; 1
     9e2:	81 2f       	mov	r24, r17
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	c8 17       	cp	r28, r24
     9e8:	d9 07       	cpc	r29, r25
     9ea:	ac f3       	brlt	.-22     	; 0x9d6 <xbee_writeData+0x14>
	{
		xbee_write(*(((uint8_t*)data)+i));
	}
}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	ff 90       	pop	r15
     9f4:	ef 90       	pop	r14
     9f6:	08 95       	ret

000009f8 <xbee_read>:
 *
 *  \param byte Reference parameter where the read byte will be written to
 *  \return Error code or XBEE_SUCCESS. When XBEE_BUFFER_INCONSISTENCY gets returned, `byte` still gets updated
 */
uint8_t xbee_read(uint8_t *byte)
{
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	ec 01       	movw	r28, r24
	//we are assuming that "int" from the uart library is implemented as uint16_t, kinda ugly ngl
	uint16_t temp = (uint16_t)uart3_getc();
     9fe:	3d d5       	rcall	.+2682   	; 0x147a <uart3_getc>
	
	switch((temp >> 8) & 0xFF)
     a00:	29 2f       	mov	r18, r25
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	21 15       	cp	r18, r1
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	39 07       	cpc	r19, r25
     a0a:	b9 f0       	breq	.+46     	; 0xa3a <xbee_read+0x42>
     a0c:	38 f4       	brcc	.+14     	; 0xa1c <xbee_read+0x24>
     a0e:	21 15       	cp	r18, r1
     a10:	31 05       	cpc	r19, r1
     a12:	69 f0       	breq	.+26     	; 0xa2e <xbee_read+0x36>
     a14:	21 15       	cp	r18, r1
     a16:	31 40       	sbci	r19, 0x01	; 1
     a18:	a9 f0       	breq	.+42     	; 0xa44 <xbee_read+0x4c>
     a1a:	12 c0       	rjmp	.+36     	; 0xa40 <xbee_read+0x48>
     a1c:	21 15       	cp	r18, r1
     a1e:	98 e0       	ldi	r25, 0x08	; 8
     a20:	39 07       	cpc	r19, r25
     a22:	41 f0       	breq	.+16     	; 0xa34 <xbee_read+0x3c>
     a24:	21 15       	cp	r18, r1
     a26:	30 41       	sbci	r19, 0x10	; 16
     a28:	59 f4       	brne	.+22     	; 0xa40 <xbee_read+0x48>
		}
		break;
		
		case UART_FRAME_ERROR:
		{
			return XBEE_READ_ERROR;
     a2a:	82 e0       	ldi	r24, 0x02	; 2
     a2c:	0c c0       	rjmp	.+24     	; 0xa46 <xbee_read+0x4e>
	
	switch((temp >> 8) & 0xFF)
	{
		case 0:
		{
			*byte = (uint8_t)temp;
     a2e:	88 83       	st	Y, r24
			return XBEE_SUCCESS;
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	09 c0       	rjmp	.+18     	; 0xa46 <xbee_read+0x4e>
		}
		break;
		
		case UART_OVERRUN_ERROR:
		{
			*byte = (uint8_t)temp;
     a34:	88 83       	st	Y, r24
			return XBEE_BUFFER_INCONSISTENCY;
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	06 c0       	rjmp	.+12     	; 0xa46 <xbee_read+0x4e>
		}
		break;
		
		case UART_BUFFER_OVERFLOW:
		{
			*byte = (uint8_t)temp;
     a3a:	88 83       	st	Y, r24
			return XBEE_BUFFER_INCONSISTENCY;
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	03 c0       	rjmp	.+6      	; 0xa46 <xbee_read+0x4e>
		}
		break;
		default:
			break;
	}
	return 255;
     a40:	8f ef       	ldi	r24, 0xFF	; 255
     a42:	01 c0       	rjmp	.+2      	; 0xa46 <xbee_read+0x4e>
		}
		break;
		
		case UART_NO_DATA:
		{
			return XBEE_DATA_MISSING;
     a44:	84 e0       	ldi	r24, 0x04	; 4
		break;
		default:
			break;
	}
	return 255;
}
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	08 95       	ret

00000a4c <xbee_getNumberOfBytesReceived>:
 *
 *  \return count of bytes that can be received through `xbee_read`
 */
uint16_t xbee_getNumberOfBytesReceived()
{
	return uart3_getrxcount();
     a4c:	47 c5       	rjmp	.+2702   	; 0x14dc <uart3_getrxcount>
}
     a4e:	08 95       	ret

00000a50 <xbee_readBuffer>:
 *	\param message_buffer Buffer where to store received bytes
 *  \param buffer_size Amount of bytes that need to be received
 *  \return error Code if there is any. If it's not XBEE_SUCCESS, you shouldn't use the result
 */
uint8_t xbee_readBuffer(uint8_t *buffer, uint8_t length)
{
     a50:	6f 92       	push	r6
     a52:	7f 92       	push	r7
     a54:	8f 92       	push	r8
     a56:	9f 92       	push	r9
     a58:	af 92       	push	r10
     a5a:	bf 92       	push	r11
     a5c:	cf 92       	push	r12
     a5e:	df 92       	push	r13
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	4c 01       	movw	r8, r24
     a72:	66 2e       	mov	r6, r22

	// Copy received data into destination buffer
	memcpy(buffer, temp_buff, length);

	return XBEE_SUCCESS;
}
     a74:	ed b6       	in	r14, 0x3d	; 61
     a76:	fe b6       	in	r15, 0x3e	; 62
 *  \param buffer_size Amount of bytes that need to be received
 *  \return error Code if there is any. If it's not XBEE_SUCCESS, you shouldn't use the result
 */
uint8_t xbee_readBuffer(uint8_t *buffer, uint8_t length)
{
	if (xbee_getNumberOfBytesReceived() < length)
     a78:	e9 df       	rcall	.-46     	; 0xa4c <xbee_getNumberOfBytesReceived>
     a7a:	06 2d       	mov	r16, r6
     a7c:	10 e0       	ldi	r17, 0x00	; 0
     a7e:	80 17       	cp	r24, r16
     a80:	91 07       	cpc	r25, r17
     a82:	f0 f0       	brcs	.+60     	; 0xac0 <xbee_readBuffer+0x70>
		return XBEE_DATA_MISSING;

	uint8_t temp_buff[length];
     a84:	8d b7       	in	r24, 0x3d	; 61
     a86:	9e b7       	in	r25, 0x3e	; 62
     a88:	80 1b       	sub	r24, r16
     a8a:	91 0b       	sbc	r25, r17
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	9e bf       	out	0x3e, r25	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	8d bf       	out	0x3d, r24	; 61
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	6c 01       	movw	r12, r24
     a9a:	5c 01       	movw	r10, r24
	
	for (uint8_t i = 0; i < length; i++)
     a9c:	71 2c       	mov	r7, r1
     a9e:	07 c0       	rjmp	.+14     	; 0xaae <xbee_readBuffer+0x5e>
	{
		uint8_t err = xbee_read(&temp_buff[i]);
     aa0:	c5 01       	movw	r24, r10
     aa2:	87 0d       	add	r24, r7
     aa4:	91 1d       	adc	r25, r1
     aa6:	a8 df       	rcall	.-176    	; 0x9f8 <xbee_read>
		if (err != XBEE_SUCCESS)
     aa8:	81 11       	cpse	r24, r1
     aaa:	0b c0       	rjmp	.+22     	; 0xac2 <xbee_readBuffer+0x72>
	if (xbee_getNumberOfBytesReceived() < length)
		return XBEE_DATA_MISSING;

	uint8_t temp_buff[length];
	
	for (uint8_t i = 0; i < length; i++)
     aac:	73 94       	inc	r7
     aae:	76 14       	cp	r7, r6
     ab0:	b8 f3       	brcs	.-18     	; 0xaa0 <xbee_readBuffer+0x50>
		if (err != XBEE_SUCCESS)
			return err; // Early return if an error occurs
	}

	// Copy received data into destination buffer
	memcpy(buffer, temp_buff, length);
     ab2:	a8 01       	movw	r20, r16
     ab4:	b6 01       	movw	r22, r12
     ab6:	c4 01       	movw	r24, r8
     ab8:	0e 94 8a 11 	call	0x2314	; 0x2314 <memcpy>

	return XBEE_SUCCESS;
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	01 c0       	rjmp	.+2      	; 0xac2 <xbee_readBuffer+0x72>
 *  \return error Code if there is any. If it's not XBEE_SUCCESS, you shouldn't use the result
 */
uint8_t xbee_readBuffer(uint8_t *buffer, uint8_t length)
{
	if (xbee_getNumberOfBytesReceived() < length)
		return XBEE_DATA_MISSING;
     ac0:	84 e0       	ldi	r24, 0x04	; 4

	// Copy received data into destination buffer
	memcpy(buffer, temp_buff, length);

	return XBEE_SUCCESS;
}
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	fe be       	out	0x3e, r15	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	ed be       	out	0x3d, r14	; 61
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	bf 90       	pop	r11
     ade:	af 90       	pop	r10
     ae0:	9f 90       	pop	r9
     ae2:	8f 90       	pop	r8
     ae4:	7f 90       	pop	r7
     ae6:	6f 90       	pop	r6
     ae8:	08 95       	ret

00000aea <lcd_enablePulse>:
			lcd_writeHexNibble(number >> nib);
		}
	}

	os_leaveCriticalSection();
}
     aea:	a7 d6       	rcall	.+3406   	; 0x183a <os_enterCriticalSection>
     aec:	e2 e0       	ldi	r30, 0x02	; 2
     aee:	f1 e0       	ldi	r31, 0x01	; 1
     af0:	80 81       	ld	r24, Z
     af2:	80 64       	ori	r24, 0x40	; 64
     af4:	80 83       	st	Z, r24
     af6:	85 e0       	ldi	r24, 0x05	; 5
     af8:	8a 95       	dec	r24
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <lcd_enablePulse+0xe>
     afc:	00 00       	nop
     afe:	80 81       	ld	r24, Z
     b00:	8f 7b       	andi	r24, 0xBF	; 191
     b02:	80 83       	st	Z, r24
     b04:	8f e8       	ldi	r24, 0x8F	; 143
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <lcd_enablePulse+0x1e>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <lcd_enablePulse+0x24>
     b0e:	00 00       	nop
     b10:	b3 c6       	rjmp	.+3430   	; 0x1878 <os_leaveCriticalSection>
     b12:	08 95       	ret

00000b14 <lcd_sendNibble>:
     b14:	cf 93       	push	r28
     b16:	c8 2f       	mov	r28, r24
     b18:	90 d6       	rcall	.+3360   	; 0x183a <os_enterCriticalSection>
     b1a:	c0 ff       	sbrs	r28, 0
     b1c:	04 c0       	rjmp	.+8      	; 0xb26 <lcd_sendNibble+0x12>
     b1e:	84 b3       	in	r24, 0x14	; 20
     b20:	80 62       	ori	r24, 0x20	; 32
     b22:	84 bb       	out	0x14, r24	; 20
     b24:	03 c0       	rjmp	.+6      	; 0xb2c <lcd_sendNibble+0x18>
     b26:	84 b3       	in	r24, 0x14	; 20
     b28:	8f 7d       	andi	r24, 0xDF	; 223
     b2a:	84 bb       	out	0x14, r24	; 20
     b2c:	c1 ff       	sbrs	r28, 1
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <lcd_sendNibble+0x24>
     b30:	8e b1       	in	r24, 0x0e	; 14
     b32:	88 60       	ori	r24, 0x08	; 8
     b34:	8e b9       	out	0x0e, r24	; 14
     b36:	03 c0       	rjmp	.+6      	; 0xb3e <lcd_sendNibble+0x2a>
     b38:	8e b1       	in	r24, 0x0e	; 14
     b3a:	87 7f       	andi	r24, 0xF7	; 247
     b3c:	8e b9       	out	0x0e, r24	; 14
     b3e:	c2 ff       	sbrs	r28, 2
     b40:	06 c0       	rjmp	.+12     	; 0xb4e <lcd_sendNibble+0x3a>
     b42:	e2 e0       	ldi	r30, 0x02	; 2
     b44:	f1 e0       	ldi	r31, 0x01	; 1
     b46:	80 81       	ld	r24, Z
     b48:	88 60       	ori	r24, 0x08	; 8
     b4a:	80 83       	st	Z, r24
     b4c:	05 c0       	rjmp	.+10     	; 0xb58 <lcd_sendNibble+0x44>
     b4e:	e2 e0       	ldi	r30, 0x02	; 2
     b50:	f1 e0       	ldi	r31, 0x01	; 1
     b52:	80 81       	ld	r24, Z
     b54:	87 7f       	andi	r24, 0xF7	; 247
     b56:	80 83       	st	Z, r24
     b58:	c3 ff       	sbrs	r28, 3
     b5a:	06 c0       	rjmp	.+12     	; 0xb68 <lcd_sendNibble+0x54>
     b5c:	e2 e0       	ldi	r30, 0x02	; 2
     b5e:	f1 e0       	ldi	r31, 0x01	; 1
     b60:	80 81       	ld	r24, Z
     b62:	80 61       	ori	r24, 0x10	; 16
     b64:	80 83       	st	Z, r24
     b66:	05 c0       	rjmp	.+10     	; 0xb72 <lcd_sendNibble+0x5e>
     b68:	e2 e0       	ldi	r30, 0x02	; 2
     b6a:	f1 e0       	ldi	r31, 0x01	; 1
     b6c:	80 81       	ld	r24, Z
     b6e:	8f 7e       	andi	r24, 0xEF	; 239
     b70:	80 83       	st	Z, r24
     b72:	bb df       	rcall	.-138    	; 0xaea <lcd_enablePulse>
     b74:	81 d6       	rcall	.+3330   	; 0x1878 <os_leaveCriticalSection>
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret

00000b7a <lcd_printf_p>:
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	ae 01       	movw	r20, r28
     b88:	48 5f       	subi	r20, 0xF8	; 248
     b8a:	5f 4f       	sbci	r21, 0xFF	; 255
     b8c:	da 01       	movw	r26, r20
     b8e:	6d 91       	ld	r22, X+
     b90:	7d 91       	ld	r23, X+
     b92:	ad 01       	movw	r20, r26
     b94:	02 e9       	ldi	r16, 0x92	; 146
     b96:	14 e0       	ldi	r17, 0x04	; 4
     b98:	d8 01       	movw	r26, r16
     b9a:	12 96       	adiw	r26, 0x02	; 2
     b9c:	ed 91       	ld	r30, X+
     b9e:	fc 91       	ld	r31, X
     ba0:	13 97       	sbiw	r26, 0x03	; 3
     ba2:	83 81       	ldd	r24, Z+3	; 0x03
     ba4:	88 60       	ori	r24, 0x08	; 8
     ba6:	83 83       	std	Z+3, r24	; 0x03
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	92 e0       	ldi	r25, 0x02	; 2
     bac:	0e 94 b5 11 	call	0x236a	; 0x236a <vfprintf_P>
     bb0:	d8 01       	movw	r26, r16
     bb2:	12 96       	adiw	r26, 0x02	; 2
     bb4:	ed 91       	ld	r30, X+
     bb6:	fc 91       	ld	r31, X
     bb8:	13 97       	sbiw	r26, 0x03	; 3
     bba:	83 81       	ldd	r24, Z+3	; 0x03
     bbc:	87 7f       	andi	r24, 0xF7	; 247
     bbe:	83 83       	std	Z+3, r24	; 0x03
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	08 95       	ret

00000bca <lcd_sendCommand>:
     bca:	cf 93       	push	r28
     bcc:	c8 2f       	mov	r28, r24
     bce:	35 d6       	rcall	.+3178   	; 0x183a <os_enterCriticalSection>
     bd0:	e2 e0       	ldi	r30, 0x02	; 2
     bd2:	f1 e0       	ldi	r31, 0x01	; 1
     bd4:	80 81       	ld	r24, Z
     bd6:	8f 7d       	andi	r24, 0xDF	; 223
     bd8:	80 83       	st	Z, r24
     bda:	8c 2f       	mov	r24, r28
     bdc:	82 95       	swap	r24
     bde:	8f 70       	andi	r24, 0x0F	; 15
     be0:	99 df       	rcall	.-206    	; 0xb14 <lcd_sendNibble>
     be2:	8c 2f       	mov	r24, r28
     be4:	97 df       	rcall	.-210    	; 0xb14 <lcd_sendNibble>
     be6:	85 ed       	ldi	r24, 0xD5	; 213
     be8:	8a 95       	dec	r24
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <lcd_sendCommand+0x1e>
     bec:	00 00       	nop
     bee:	44 d6       	rcall	.+3208   	; 0x1878 <os_leaveCriticalSection>
     bf0:	cf 91       	pop	r28
     bf2:	08 95       	ret

00000bf4 <lcd_init>:
     bf4:	22 d6       	rcall	.+3140   	; 0x183a <os_enterCriticalSection>
     bf6:	e1 e0       	ldi	r30, 0x01	; 1
     bf8:	f1 e0       	ldi	r31, 0x01	; 1
     bfa:	80 81       	ld	r24, Z
     bfc:	88 67       	ori	r24, 0x78	; 120
     bfe:	80 83       	st	Z, r24
     c00:	8d b1       	in	r24, 0x0d	; 13
     c02:	88 60       	ori	r24, 0x08	; 8
     c04:	8d b9       	out	0x0d, r24	; 13
     c06:	83 b3       	in	r24, 0x13	; 19
     c08:	80 62       	ori	r24, 0x20	; 32
     c0a:	83 bb       	out	0x13, r24	; 19
     c0c:	80 b3       	in	r24, 0x10	; 16
     c0e:	81 60       	ori	r24, 0x01	; 1
     c10:	80 bb       	out	0x10, r24	; 16
     c12:	81 b3       	in	r24, 0x11	; 17
     c14:	8e 7f       	andi	r24, 0xFE	; 254
     c16:	81 bb       	out	0x11, r24	; 17
     c18:	2f ef       	ldi	r18, 0xFF	; 255
     c1a:	80 e7       	ldi	r24, 0x70	; 112
     c1c:	92 e0       	ldi	r25, 0x02	; 2
     c1e:	21 50       	subi	r18, 0x01	; 1
     c20:	80 40       	sbci	r24, 0x00	; 0
     c22:	90 40       	sbci	r25, 0x00	; 0
     c24:	e1 f7       	brne	.-8      	; 0xc1e <lcd_init+0x2a>
     c26:	00 c0       	rjmp	.+0      	; 0xc28 <lcd_init+0x34>
     c28:	00 00       	nop
     c2a:	83 e0       	ldi	r24, 0x03	; 3
     c2c:	73 df       	rcall	.-282    	; 0xb14 <lcd_sendNibble>
     c2e:	8f e1       	ldi	r24, 0x1F	; 31
     c30:	9e e4       	ldi	r25, 0x4E	; 78
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <lcd_init+0x3e>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <lcd_init+0x44>
     c38:	00 00       	nop
     c3a:	83 e0       	ldi	r24, 0x03	; 3
     c3c:	6b df       	rcall	.-298    	; 0xb14 <lcd_sendNibble>
     c3e:	8f e1       	ldi	r24, 0x1F	; 31
     c40:	93 e0       	ldi	r25, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <lcd_init+0x4e>
     c46:	00 c0       	rjmp	.+0      	; 0xc48 <lcd_init+0x54>
     c48:	00 00       	nop
     c4a:	83 e0       	ldi	r24, 0x03	; 3
     c4c:	63 df       	rcall	.-314    	; 0xb14 <lcd_sendNibble>
     c4e:	8f e1       	ldi	r24, 0x1F	; 31
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	f1 f7       	brne	.-4      	; 0xc52 <lcd_init+0x5e>
     c56:	00 c0       	rjmp	.+0      	; 0xc58 <lcd_init+0x64>
     c58:	00 00       	nop
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	5b df       	rcall	.-330    	; 0xb14 <lcd_sendNibble>
     c5e:	88 e2       	ldi	r24, 0x28	; 40
     c60:	b4 df       	rcall	.-152    	; 0xbca <lcd_sendCommand>
     c62:	8c e0       	ldi	r24, 0x0C	; 12
     c64:	b2 df       	rcall	.-156    	; 0xbca <lcd_sendCommand>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	b0 df       	rcall	.-160    	; 0xbca <lcd_sendCommand>
     c6a:	86 e0       	ldi	r24, 0x06	; 6
     c6c:	ae df       	rcall	.-164    	; 0xbca <lcd_sendCommand>
     c6e:	8f e1       	ldi	r24, 0x1F	; 31
     c70:	9e e4       	ldi	r25, 0x4E	; 78
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <lcd_init+0x7e>
     c76:	00 c0       	rjmp	.+0      	; 0xc78 <lcd_init+0x84>
     c78:	00 00       	nop
     c7a:	fe c5       	rjmp	.+3068   	; 0x1878 <os_leaveCriticalSection>
     c7c:	08 95       	ret

00000c7e <lcd_clear>:
     c7e:	dd d5       	rcall	.+3002   	; 0x183a <os_enterCriticalSection>
     c80:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <charCtr>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	a1 df       	rcall	.-190    	; 0xbca <lcd_sendCommand>
     c88:	8f e3       	ldi	r24, 0x3F	; 63
     c8a:	9f e1       	ldi	r25, 0x1F	; 31
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <lcd_clear+0xe>
     c90:	00 c0       	rjmp	.+0      	; 0xc92 <lcd_clear+0x14>
     c92:	00 00       	nop
     c94:	f1 c5       	rjmp	.+3042   	; 0x1878 <os_leaveCriticalSection>
     c96:	08 95       	ret

00000c98 <lcd_displayOn>:
     c98:	8c e0       	ldi	r24, 0x0C	; 12
     c9a:	97 cf       	rjmp	.-210    	; 0xbca <lcd_sendCommand>
     c9c:	08 95       	ret

00000c9e <lcd_displayOff>:
     c9e:	88 e0       	ldi	r24, 0x08	; 8
     ca0:	94 cf       	rjmp	.-216    	; 0xbca <lcd_sendCommand>
     ca2:	08 95       	ret

00000ca4 <lcd_goto>:
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	d8 2f       	mov	r29, r24
     caa:	c6 2f       	mov	r28, r22
     cac:	82 30       	cpi	r24, 0x02	; 2
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <lcd_goto+0xe>
     cb0:	d1 e0       	ldi	r29, 0x01	; 1
     cb2:	c3 d5       	rcall	.+2950   	; 0x183a <os_enterCriticalSection>
     cb4:	8c 2f       	mov	r24, r28
     cb6:	90 e4       	ldi	r25, 0x40	; 64
     cb8:	d9 9f       	mul	r29, r25
     cba:	80 0d       	add	r24, r0
     cbc:	11 24       	eor	r1, r1
     cbe:	80 68       	ori	r24, 0x80	; 128
     cc0:	84 df       	rcall	.-248    	; 0xbca <lcd_sendCommand>
     cc2:	80 e1       	ldi	r24, 0x10	; 16
     cc4:	d8 9f       	mul	r29, r24
     cc6:	c0 0d       	add	r28, r0
     cc8:	11 24       	eor	r1, r1
     cca:	c0 93 1a 04 	sts	0x041A, r28	; 0x80041a <charCtr>
     cce:	d4 d5       	rcall	.+2984   	; 0x1878 <os_leaveCriticalSection>
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <lcd_sendData>:
     cd6:	cf 93       	push	r28
     cd8:	c8 2f       	mov	r28, r24
     cda:	af d5       	rcall	.+2910   	; 0x183a <os_enterCriticalSection>
     cdc:	e2 e0       	ldi	r30, 0x02	; 2
     cde:	f1 e0       	ldi	r31, 0x01	; 1
     ce0:	80 81       	ld	r24, Z
     ce2:	80 62       	ori	r24, 0x20	; 32
     ce4:	80 83       	st	Z, r24
     ce6:	8c 2f       	mov	r24, r28
     ce8:	82 95       	swap	r24
     cea:	8f 70       	andi	r24, 0x0F	; 15
     cec:	13 df       	rcall	.-474    	; 0xb14 <lcd_sendNibble>
     cee:	8c 2f       	mov	r24, r28
     cf0:	11 df       	rcall	.-478    	; 0xb14 <lcd_sendNibble>
     cf2:	85 ed       	ldi	r24, 0xD5	; 213
     cf4:	8a 95       	dec	r24
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <lcd_sendData+0x1e>
     cf8:	00 00       	nop
     cfa:	be d5       	rcall	.+2940   	; 0x1878 <os_leaveCriticalSection>
     cfc:	cf 91       	pop	r28
     cfe:	08 95       	ret

00000d00 <lcd_line1>:
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	cf cf       	rjmp	.-98     	; 0xca4 <lcd_goto>
     d06:	08 95       	ret

00000d08 <lcd_line2>:
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	cb cf       	rjmp	.-106    	; 0xca4 <lcd_goto>
     d0e:	08 95       	ret

00000d10 <lcd_writeChar>:
     d10:	cf 93       	push	r28
     d12:	c8 2f       	mov	r28, r24
     d14:	92 d5       	rcall	.+2852   	; 0x183a <os_enterCriticalSection>
     d16:	ca 30       	cpi	r28, 0x0A	; 10
     d18:	31 f4       	brne	.+12     	; 0xd26 <lcd_writeChar+0x16>
     d1a:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <charCtr>
     d1e:	80 71       	andi	r24, 0x10	; 16
     d20:	80 5f       	subi	r24, 0xF0	; 240
     d22:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <charCtr>
     d26:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <charCtr>
     d2a:	80 31       	cpi	r24, 0x10	; 16
     d2c:	11 f4       	brne	.+4      	; 0xd32 <lcd_writeChar+0x22>
     d2e:	ec df       	rcall	.-40     	; 0xd08 <lcd_line2>
     d30:	04 c0       	rjmp	.+8      	; 0xd3a <lcd_writeChar+0x2a>
     d32:	80 32       	cpi	r24, 0x20	; 32
     d34:	11 f4       	brne	.+4      	; 0xd3a <lcd_writeChar+0x2a>
     d36:	a3 df       	rcall	.-186    	; 0xc7e <lcd_clear>
     d38:	e3 df       	rcall	.-58     	; 0xd00 <lcd_line1>
     d3a:	8c 2f       	mov	r24, r28
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	fc 01       	movw	r30, r24
     d40:	e4 58       	subi	r30, 0x84	; 132
     d42:	f1 09       	sbc	r31, r1
     d44:	e9 33       	cpi	r30, 0x39	; 57
     d46:	f1 05       	cpc	r31, r1
     d48:	a8 f4       	brcc	.+42     	; 0xd74 <lcd_writeChar+0x64>
     d4a:	88 27       	eor	r24, r24
     d4c:	ee 58       	subi	r30, 0x8E	; 142
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	8f 4f       	sbci	r24, 0xFF	; 255
     d52:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__tablejump2__>
     d56:	cf ee       	ldi	r28, 0xEF	; 239
     d58:	0d c0       	rjmp	.+26     	; 0xd74 <lcd_writeChar+0x64>
     d5a:	c5 ef       	ldi	r28, 0xF5	; 245
     d5c:	0b c0       	rjmp	.+22     	; 0xd74 <lcd_writeChar+0x64>
     d5e:	c2 ee       	ldi	r28, 0xE2	; 226
     d60:	09 c0       	rjmp	.+18     	; 0xd74 <lcd_writeChar+0x64>
     d62:	cf ee       	ldi	r28, 0xEF	; 239
     d64:	07 c0       	rjmp	.+14     	; 0xd74 <lcd_writeChar+0x64>
     d66:	c5 ef       	ldi	r28, 0xF5	; 245
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <lcd_writeChar+0x64>
     d6a:	cf ed       	ldi	r28, 0xDF	; 223
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <lcd_writeChar+0x64>
     d6e:	c4 ee       	ldi	r28, 0xE4	; 228
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <lcd_writeChar+0x64>
     d72:	c1 ee       	ldi	r28, 0xE1	; 225
     d74:	8c 2f       	mov	r24, r28
     d76:	af df       	rcall	.-162    	; 0xcd6 <lcd_sendData>
     d78:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <charCtr>
     d7c:	8f 5f       	subi	r24, 0xFF	; 255
     d7e:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <charCtr>
     d82:	7a d5       	rcall	.+2804   	; 0x1878 <os_leaveCriticalSection>
     d84:	cf 91       	pop	r28
     d86:	08 95       	ret

00000d88 <lcd_stdioPutChar>:
     d88:	c3 df       	rcall	.-122    	; 0xd10 <lcd_writeChar>
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	08 95       	ret

00000d90 <lcd_writeString>:
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	ec 01       	movw	r28, r24
     d9a:	4f d5       	rcall	.+2718   	; 0x183a <os_enterCriticalSection>
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <lcd_writeString+0x12>
     d9e:	b8 df       	rcall	.-144    	; 0xd10 <lcd_writeChar>
     da0:	e8 01       	movw	r28, r16
     da2:	8e 01       	movw	r16, r28
     da4:	0f 5f       	subi	r16, 0xFF	; 255
     da6:	1f 4f       	sbci	r17, 0xFF	; 255
     da8:	88 81       	ld	r24, Y
     daa:	81 11       	cpse	r24, r1
     dac:	f8 cf       	rjmp	.-16     	; 0xd9e <lcd_writeString+0xe>
     dae:	64 d5       	rcall	.+2760   	; 0x1878 <os_leaveCriticalSection>
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	08 95       	ret

00000dba <lcd_writeProgString>:
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	ec 01       	movw	r28, r24
     dc4:	3a d5       	rcall	.+2676   	; 0x183a <os_enterCriticalSection>
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <lcd_writeProgString+0x12>
     dc8:	a3 df       	rcall	.-186    	; 0xd10 <lcd_writeChar>
     dca:	e8 01       	movw	r28, r16
     dcc:	8e 01       	movw	r16, r28
     dce:	0f 5f       	subi	r16, 0xFF	; 255
     dd0:	1f 4f       	sbci	r17, 0xFF	; 255
     dd2:	fe 01       	movw	r30, r28
     dd4:	84 91       	lpm	r24, Z
     dd6:	81 11       	cpse	r24, r1
     dd8:	f7 cf       	rjmp	.-18     	; 0xdc8 <lcd_writeProgString+0xe>
     dda:	4e d5       	rcall	.+2716   	; 0x1878 <os_leaveCriticalSection>
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	08 95       	ret

00000de6 <lcd_writeDec>:
 *  Writes a 16 bit integer as a decimal number without leading 0s
 *
 *  \param number The number to be written.
 */
void lcd_writeDec(uint16_t number)
{
     de6:	cf 92       	push	r12
     de8:	df 92       	push	r13
     dea:	ef 92       	push	r14
     dec:	ff 92       	push	r15
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	ec 01       	movw	r28, r24
	if (!number)
     df6:	89 2b       	or	r24, r25
     df8:	19 f4       	brne	.+6      	; 0xe00 <lcd_writeDec+0x1a>
	{
		lcd_writeChar('0');
     dfa:	80 e3       	ldi	r24, 0x30	; 48
     dfc:	89 df       	rcall	.-238    	; 0xd10 <lcd_writeChar>
	}

	uint32_t pos = 10000;
	uint8_t print = 0;

	os_enterCriticalSection();
     dfe:	30 c0       	rjmp	.+96     	; 0xe60 <lcd_writeDec+0x7a>
     e00:	1c d5       	rcall	.+2616   	; 0x183a <os_enterCriticalSection>
		lcd_writeChar('0');
		return;
	}

	uint32_t pos = 10000;
	uint8_t print = 0;
     e02:	10 e0       	ldi	r17, 0x00	; 0
	{
		lcd_writeChar('0');
		return;
	}

	uint32_t pos = 10000;
     e04:	0f 2e       	mov	r0, r31
     e06:	f0 e1       	ldi	r31, 0x10	; 16
     e08:	cf 2e       	mov	r12, r31
     e0a:	f7 e2       	ldi	r31, 0x27	; 39
     e0c:	df 2e       	mov	r13, r31
     e0e:	e1 2c       	mov	r14, r1
     e10:	f1 2c       	mov	r15, r1
     e12:	f0 2d       	mov	r31, r0

	os_enterCriticalSection();

	do
	{
		uint8_t const digit = number / pos;
     e14:	be 01       	movw	r22, r28
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	a7 01       	movw	r20, r14
     e1c:	96 01       	movw	r18, r12
     e1e:	0e 94 42 11 	call	0x2284	; 0x2284 <__udivmodsi4>
		number -= digit * pos;
     e22:	42 2f       	mov	r20, r18
     e24:	50 e0       	ldi	r21, 0x00	; 0
     e26:	4c 9d       	mul	r20, r12
     e28:	c0 01       	movw	r24, r0
     e2a:	4d 9d       	mul	r20, r13
     e2c:	90 0d       	add	r25, r0
     e2e:	5c 9d       	mul	r21, r12
     e30:	90 0d       	add	r25, r0
     e32:	11 24       	eor	r1, r1
     e34:	c8 1b       	sub	r28, r24
     e36:	d9 0b       	sbc	r29, r25
		if (print |= digit)
     e38:	12 2b       	or	r17, r18
     e3a:	19 f0       	breq	.+6      	; 0xe42 <lcd_writeDec+0x5c>
			lcd_writeChar(digit + '0');
     e3c:	80 e3       	ldi	r24, 0x30	; 48
     e3e:	82 0f       	add	r24, r18
     e40:	67 df       	rcall	.-306    	; 0xd10 <lcd_writeChar>
	} while (pos /= 10);
     e42:	c7 01       	movw	r24, r14
     e44:	b6 01       	movw	r22, r12
     e46:	2a e0       	ldi	r18, 0x0A	; 10
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	40 e0       	ldi	r20, 0x00	; 0
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	0e 94 42 11 	call	0x2284	; 0x2284 <__udivmodsi4>
     e52:	69 01       	movw	r12, r18
     e54:	7a 01       	movw	r14, r20
     e56:	23 2b       	or	r18, r19
     e58:	24 2b       	or	r18, r20
     e5a:	25 2b       	or	r18, r21

	os_leaveCriticalSection();
     e5c:	d9 f6       	brne	.-74     	; 0xe14 <lcd_writeDec+0x2e>
     e5e:	0c d5       	rcall	.+2584   	; 0x1878 <os_leaveCriticalSection>
}
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	cf 90       	pop	r12
     e6e:	08 95       	ret

00000e70 <rq_isEmpty>:
 *  \param queue The queue it will check
 *  \return True if queue is empty, false if it's not empty
 */
bool rq_isEmpty(ready_queue_t *queue)
{
	return queue->head == queue->tail;
     e70:	fc 01       	movw	r30, r24
     e72:	21 85       	ldd	r18, Z+9	; 0x09
     e74:	92 85       	ldd	r25, Z+10	; 0x0a
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	29 13       	cpse	r18, r25
     e7a:	80 e0       	ldi	r24, 0x00	; 0
}
     e7c:	08 95       	ret

00000e7e <rq_pop>:
 *  \param queue The queue it will push to
 *  \param process The process that will be pushed
 *  \return Popped process id
 */
process_id_t rq_pop(ready_queue_t *queue)
{
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	ec 01       	movw	r28, r24
	if (rq_isEmpty(queue))
     e84:	f5 df       	rcall	.-22     	; 0xe70 <rq_isEmpty>
     e86:	88 23       	and	r24, r24
     e88:	39 f0       	breq	.+14     	; 0xe98 <rq_pop+0x1a>
	{
		os_error("Can't pop from empty ready queue");
     e8a:	86 e5       	ldi	r24, 0x56	; 86
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	9f 93       	push	r25
     e90:	8f 93       	push	r24
     e92:	4e d4       	rcall	.+2204   	; 0x1730 <os_errorPstr>
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
	}
	process_id_t process = queue->processes[queue->head];
     e98:	99 85       	ldd	r25, Y+9	; 0x09
     e9a:	29 2f       	mov	r18, r25
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	fe 01       	movw	r30, r28
     ea0:	e2 0f       	add	r30, r18
     ea2:	f3 1f       	adc	r31, r19
     ea4:	80 81       	ld	r24, Z
	queue->head = next(queue->head);
     ea6:	2f 5f       	subi	r18, 0xFF	; 255
     ea8:	3f 4f       	sbci	r19, 0xFF	; 255
     eaa:	29 30       	cpi	r18, 0x09	; 9
     eac:	31 05       	cpc	r19, r1
     eae:	14 f4       	brge	.+4      	; 0xeb4 <rq_pop+0x36>
     eb0:	9f 5f       	subi	r25, 0xFF	; 255
     eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <rq_pop+0x38>
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	99 87       	std	Y+9, r25	; 0x09
	return process;
}
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	08 95       	ret

00000ebe <rq_isFull>:
 *  \param queue The queue it will check
 *  \return True if queue is full, false if it's not completely filled
 */
bool rq_isFull(ready_queue_t *queue)
{
	return next(queue->tail) == queue->head;
     ebe:	fc 01       	movw	r30, r24
     ec0:	22 85       	ldd	r18, Z+10	; 0x0a
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	2f 5f       	subi	r18, 0xFF	; 255
     ec6:	3f 4f       	sbci	r19, 0xFF	; 255
     ec8:	29 30       	cpi	r18, 0x09	; 9
     eca:	31 05       	cpc	r19, r1
     ecc:	14 f0       	brlt	.+4      	; 0xed2 <rq_isFull+0x14>
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	fc 01       	movw	r30, r24
     ed4:	41 85       	ldd	r20, Z+9	; 0x09
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	24 17       	cp	r18, r20
     edc:	35 07       	cpc	r19, r21
     ede:	09 f0       	breq	.+2      	; 0xee2 <rq_isFull+0x24>
     ee0:	80 e0       	ldi	r24, 0x00	; 0
}
     ee2:	08 95       	ret

00000ee4 <rq_push>:
 *
 *  \param queue The queue it will push to
 *  \param process The process that will be pushed
 */
void rq_push(ready_queue_t *queue, process_id_t process)
{
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	ec 01       	movw	r28, r24
     eec:	16 2f       	mov	r17, r22
	if (rq_isFull(queue))
     eee:	e7 df       	rcall	.-50     	; 0xebe <rq_isFull>
     ef0:	88 23       	and	r24, r24
     ef2:	39 f0       	breq	.+14     	; 0xf02 <rq_push+0x1e>
	{
		os_error("Can't push on full ready queue");
     ef4:	87 e7       	ldi	r24, 0x77	; 119
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	9f 93       	push	r25
     efa:	8f 93       	push	r24
     efc:	19 d4       	rcall	.+2098   	; 0x1730 <os_errorPstr>
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
	}
	queue->processes[queue->tail] = process;
     f02:	2a 85       	ldd	r18, Y+10	; 0x0a
     f04:	82 2f       	mov	r24, r18
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	fe 01       	movw	r30, r28
     f0a:	e8 0f       	add	r30, r24
     f0c:	f9 1f       	adc	r31, r25
     f0e:	10 83       	st	Z, r17
	queue->tail = next(queue->tail);
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	09 97       	sbiw	r24, 0x09	; 9
     f14:	14 f4       	brge	.+4      	; 0xf1a <rq_push+0x36>
     f16:	2f 5f       	subi	r18, 0xFF	; 255
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <rq_push+0x38>
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	2a 87       	std	Y+10, r18	; 0x0a
}
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	08 95       	ret

00000f26 <rq_clear>:
 *
 *  \param queue The queue that should be emptied
 */
void rq_clear(ready_queue_t *queue)
{
	queue->head = 0;
     f26:	fc 01       	movw	r30, r24
     f28:	11 86       	std	Z+9, r1	; 0x09
	queue->tail = 0;
     f2a:	12 86       	std	Z+10, r1	; 0x0a
     f2c:	08 95       	ret

00000f2e <rq_remove>:
 *  \param queue The queue that should be removed from
 *  \param process The process that should be removed
 *  \return True if the process was removed, false if it wasn't found
 */
bool rq_remove(ready_queue_t *queue, process_id_t process)
{
     f2e:	fc 01       	movw	r30, r24
	for (int i = queue->head; i != queue->tail; i = next(i))
     f30:	21 85       	ldd	r18, Z+9	; 0x09
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	32 c0       	rjmp	.+100    	; 0xf9a <rq_remove+0x6c>
	{
		if (queue->processes[i] == process)
     f36:	df 01       	movw	r26, r30
     f38:	a2 0f       	add	r26, r18
     f3a:	b3 1f       	adc	r27, r19
     f3c:	5c 91       	ld	r21, X
     f3e:	56 13       	cpse	r21, r22
     f40:	24 c0       	rjmp	.+72     	; 0xf8a <rq_remove+0x5c>
     f42:	18 c0       	rjmp	.+48     	; 0xf74 <rq_remove+0x46>
		{
			for (int j = i; j != queue->tail; j = next(j))
			{
				queue->processes[j] = queue->processes[next(j)];
     f44:	b9 01       	movw	r22, r18
     f46:	6f 5f       	subi	r22, 0xFF	; 255
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	69 30       	cpi	r22, 0x09	; 9
     f4c:	71 05       	cpc	r23, r1
     f4e:	1c f0       	brlt	.+6      	; 0xf56 <rq_remove+0x28>
     f50:	a0 e0       	ldi	r26, 0x00	; 0
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <rq_remove+0x2a>
     f56:	db 01       	movw	r26, r22
     f58:	ae 0f       	add	r26, r30
     f5a:	bf 1f       	adc	r27, r31
     f5c:	5c 91       	ld	r21, X
     f5e:	df 01       	movw	r26, r30
     f60:	a2 0f       	add	r26, r18
     f62:	b3 1f       	adc	r27, r19
     f64:	5c 93       	st	X, r21
{
	for (int i = queue->head; i != queue->tail; i = next(i))
	{
		if (queue->processes[i] == process)
		{
			for (int j = i; j != queue->tail; j = next(j))
     f66:	69 30       	cpi	r22, 0x09	; 9
     f68:	71 05       	cpc	r23, r1
     f6a:	1c f0       	brlt	.+6      	; 0xf72 <rq_remove+0x44>
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	01 c0       	rjmp	.+2      	; 0xf74 <rq_remove+0x46>
     f72:	9b 01       	movw	r18, r22
     f74:	28 17       	cp	r18, r24
     f76:	39 07       	cpc	r19, r25
     f78:	29 f7       	brne	.-54     	; 0xf44 <rq_remove+0x16>
			{
				queue->processes[j] = queue->processes[next(j)];
			}
			queue->tail = prev(queue->tail);
     f7a:	44 23       	and	r20, r20
     f7c:	11 f0       	breq	.+4      	; 0xf82 <rq_remove+0x54>
     f7e:	41 50       	subi	r20, 0x01	; 1
     f80:	01 c0       	rjmp	.+2      	; 0xf84 <rq_remove+0x56>
     f82:	48 e0       	ldi	r20, 0x08	; 8
     f84:	42 87       	std	Z+10, r20	; 0x0a
			return true;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	08 95       	ret
 *  \param process The process that should be removed
 *  \return True if the process was removed, false if it wasn't found
 */
bool rq_remove(ready_queue_t *queue, process_id_t process)
{
	for (int i = queue->head; i != queue->tail; i = next(i))
     f8a:	c9 01       	movw	r24, r18
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	89 30       	cpi	r24, 0x09	; 9
     f94:	91 05       	cpc	r25, r1
     f96:	0c f4       	brge	.+2      	; 0xf9a <rq_remove+0x6c>
     f98:	9c 01       	movw	r18, r24
     f9a:	42 85       	ldd	r20, Z+10	; 0x0a
     f9c:	84 2f       	mov	r24, r20
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	28 17       	cp	r18, r24
     fa2:	39 07       	cpc	r19, r25
     fa4:	41 f6       	brne	.-112    	; 0xf36 <rq_remove+0x8>
			}
			queue->tail = prev(queue->tail);
			return true;
		}
	}
	return false;
     fa6:	80 e0       	ldi	r24, 0x00	; 0
}
     fa8:	08 95       	ret

00000faa <__vector_17>:
 */
void stopWatch_activateInterrupt(void)
{
    cbi(TCCR1B, CS10); // /8 prescaler	0
    sbi(TCCR1B, CS11); // /8 prescaler	1
    cbi(TCCR1B, CS12); // /8 prescaler	0
     faa:	1f 92       	push	r1
     fac:	0f 92       	push	r0
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	0f 92       	push	r0
     fb2:	11 24       	eor	r1, r1
     fb4:	8f 93       	push	r24
     fb6:	9f 93       	push	r25
     fb8:	af 93       	push	r26
     fba:	bf 93       	push	r27
     fbc:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <stopWatch_time>
     fc0:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <stopWatch_time+0x1>
     fc4:	a0 91 41 02 	lds	r26, 0x0241	; 0x800241 <stopWatch_time+0x2>
     fc8:	b0 91 42 02 	lds	r27, 0x0242	; 0x800242 <stopWatch_time+0x3>
     fcc:	90 58       	subi	r25, 0x80	; 128
     fce:	af 4f       	sbci	r26, 0xFF	; 255
     fd0:	bf 4f       	sbci	r27, 0xFF	; 255
     fd2:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <stopWatch_time>
     fd6:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <stopWatch_time+0x1>
     fda:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <stopWatch_time+0x2>
     fde:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <stopWatch_time+0x3>
     fe2:	bf 91       	pop	r27
     fe4:	af 91       	pop	r26
     fe6:	9f 91       	pop	r25
     fe8:	8f 91       	pop	r24
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	0f 90       	pop	r0
     ff0:	1f 90       	pop	r1
     ff2:	18 95       	reti

00000ff4 <stopWatch_deactivateInterrupt>:
     ff4:	e1 e8       	ldi	r30, 0x81	; 129
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	8e 7f       	andi	r24, 0xFE	; 254
     ffc:	80 83       	st	Z, r24
     ffe:	80 81       	ld	r24, Z
    1000:	8d 7f       	andi	r24, 0xFD	; 253
    1002:	80 83       	st	Z, r24
    1004:	80 81       	ld	r24, Z
    1006:	8b 7f       	andi	r24, 0xFB	; 251
    1008:	80 83       	st	Z, r24
    100a:	08 95       	ret

0000100c <stopWatch_init>:
 *  Initializes the stop watch
 */
void stopWatch_init(void)
{
    // Set Timer/Counter Control Registers to 0
    TCCR1A = 0x00; // Normal mode
    100c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>

    // Set the Timer/Counter Register to 0
    TCNT1 = 0;
    1010:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
    1014:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

    // Set the compare match value to 1 (1 microsecond)
    OCR1A = 1;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    1020:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>

    // Enable the Output Compare Match A interrupt
    TIMSK1 |= (1 << TOIE1);
    1024:	ef e6       	ldi	r30, 0x6F	; 111
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	81 60       	ori	r24, 0x01	; 1
    102c:	80 83       	st	Z, r24

    stopWatch_deactivateInterrupt();
    102e:	e2 cf       	rjmp	.-60     	; 0xff4 <stopWatch_deactivateInterrupt>
    1030:	08 95       	ret

00001032 <usb2_init>:
 *
 *  \param str  The string to be written (a pointer to the first character).
 */
void terminal_writeString(char *str)
{
    usb2_writeString(str);
    1032:	03 d4       	rcall	.+2054   	; 0x183a <os_enterCriticalSection>
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
    103c:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
    1040:	e0 ed       	ldi	r30, 0xD0	; 208
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	8d 7f       	andi	r24, 0xFD	; 253
    1048:	80 83       	st	Z, r24
    104a:	e1 ed       	ldi	r30, 0xD1	; 209
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	80 61       	ori	r24, 0x10	; 16
    1052:	80 83       	st	Z, r24
    1054:	80 81       	ld	r24, Z
    1056:	88 60       	ori	r24, 0x08	; 8
    1058:	80 83       	st	Z, r24
    105a:	0e c4       	rjmp	.+2076   	; 0x1878 <os_leaveCriticalSection>
    105c:	08 95       	ret

0000105e <usb2_write>:
    105e:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
    1062:	95 ff       	sbrs	r25, 5
    1064:	fc cf       	rjmp	.-8      	; 0x105e <usb2_write>
    1066:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    106a:	08 95       	ret

0000106c <usb2_writeProgString>:
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	8c 01       	movw	r16, r24
    1076:	e1 d3       	rcall	.+1986   	; 0x183a <os_enterCriticalSection>
    1078:	d0 e0       	ldi	r29, 0x00	; 0
    107a:	0d c0       	rjmp	.+26     	; 0x1096 <usb2_writeProgString+0x2a>
    107c:	f8 01       	movw	r30, r16
    107e:	ed 0f       	add	r30, r29
    1080:	f1 1d       	adc	r31, r1
    1082:	c4 91       	lpm	r28, Z
    1084:	ca 30       	cpi	r28, 0x0A	; 10
    1086:	11 f4       	brne	.+4      	; 0x108c <usb2_writeProgString+0x20>
    1088:	8d e0       	ldi	r24, 0x0D	; 13
    108a:	e9 df       	rcall	.-46     	; 0x105e <usb2_write>
    108c:	cc 23       	and	r28, r28
    108e:	29 f0       	breq	.+10     	; 0x109a <usb2_writeProgString+0x2e>
    1090:	8c 2f       	mov	r24, r28
    1092:	e5 df       	rcall	.-54     	; 0x105e <usb2_write>
    1094:	df 5f       	subi	r29, 0xFF	; 255
    1096:	df 3f       	cpi	r29, 0xFF	; 255
    1098:	89 f7       	brne	.-30     	; 0x107c <usb2_writeProgString+0x10>
    109a:	ee d3       	rcall	.+2012   	; 0x1878 <os_leaveCriticalSection>
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	08 95       	ret

000010a6 <terminal_init>:
    10a6:	c5 df       	rcall	.-118    	; 0x1032 <usb2_init>
    10a8:	81 e1       	ldi	r24, 0x11	; 17
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <__iob+0x3>
    10b0:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <__iob+0x2>
    10b4:	08 95       	ret

000010b6 <terminal_writeChar>:
    10b6:	cf 93       	push	r28
    10b8:	c8 2f       	mov	r28, r24
    10ba:	8a 30       	cpi	r24, 0x0A	; 10
    10bc:	11 f4       	brne	.+4      	; 0x10c2 <terminal_writeChar+0xc>
    10be:	8d e0       	ldi	r24, 0x0D	; 13
    10c0:	ce df       	rcall	.-100    	; 0x105e <usb2_write>
    10c2:	8c 2f       	mov	r24, r28
    10c4:	cc df       	rcall	.-104    	; 0x105e <usb2_write>
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <terminal_writeProgString>:
 *
 *  \param pstr  The string to be written (a pointer to the first character).
 */
void terminal_writeProgString(const char *pstr)
{
	usb2_writeProgString(pstr);
    10ca:	d0 cf       	rjmp	.-96     	; 0x106c <usb2_writeProgString>
    10cc:	08 95       	ret

000010ce <stdio_put_char>:

//----------------------------------------------------------------------------
// Configuration of stdio.h
//----------------------------------------------------------------------------
int stdio_put_char(char c, FILE *stream)
{
    10ce:	cf 93       	push	r28
    10d0:	c8 2f       	mov	r28, r24
    os_enterCriticalSection();
    10d2:	b3 d3       	rcall	.+1894   	; 0x183a <os_enterCriticalSection>

    terminal_writeChar(c);
    10d4:	8c 2f       	mov	r24, r28
    10d6:	ef df       	rcall	.-34     	; 0x10b6 <terminal_writeChar>
    if (c == '\n') { terminal_writeProgString(PSTR("        ")); }
    10d8:	ca 30       	cpi	r28, 0x0A	; 10
    10da:	19 f4       	brne	.+6      	; 0x10e2 <stdio_put_char+0x14>
    10dc:	86 e9       	ldi	r24, 0x96	; 150
    10de:	91 e0       	ldi	r25, 0x01	; 1

    os_leaveCriticalSection();
    10e0:	f4 df       	rcall	.-24     	; 0x10ca <terminal_writeProgString>
    10e2:	ca d3       	rcall	.+1940   	; 0x1878 <os_leaveCriticalSection>
    return 0;
}
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	cf 91       	pop	r28
    10ea:	08 95       	ret

000010ec <terminal_newLine>:
/*!
 *  Write a new line
 */
void terminal_newLine()
{
    terminal_writeChar('\n');
    10ec:	8a e0       	ldi	r24, 0x0A	; 10
    10ee:	e3 cf       	rjmp	.-58     	; 0x10b6 <terminal_writeChar>
    10f0:	08 95       	ret

000010f2 <terminal_log_printf_p>:
    os_leaveCriticalSection();
    return 0;
}

void terminal_log_printf_p(const char *prefix, const char *fmt, ...)
{
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    os_enterCriticalSection();
    10fe:	9d d3       	rcall	.+1850   	; 0x183a <os_enterCriticalSection>

    terminal_writeProgString(prefix);
    1100:	88 85       	ldd	r24, Y+8	; 0x08
    1102:	99 85       	ldd	r25, Y+9	; 0x09
    1104:	e2 df       	rcall	.-60     	; 0x10ca <terminal_writeProgString>

    va_list args;
    va_start(args, fmt);
    stdout->flags |= __SPGM;
    1106:	02 e9       	ldi	r16, 0x92	; 146
    1108:	14 e0       	ldi	r17, 0x04	; 4
    110a:	d8 01       	movw	r26, r16
    110c:	12 96       	adiw	r26, 0x02	; 2
    110e:	ed 91       	ld	r30, X+
    1110:	fc 91       	ld	r31, X
    1112:	13 97       	sbiw	r26, 0x03	; 3
    1114:	83 81       	ldd	r24, Z+3	; 0x03
    1116:	88 60       	ori	r24, 0x08	; 8
    1118:	83 83       	std	Z+3, r24	; 0x03
    vfprintf_P(stdout, fmt, args);
    111a:	ae 01       	movw	r20, r28
    111c:	44 5f       	subi	r20, 0xF4	; 244
    111e:	5f 4f       	sbci	r21, 0xFF	; 255
    1120:	6a 85       	ldd	r22, Y+10	; 0x0a
    1122:	7b 85       	ldd	r23, Y+11	; 0x0b
    1124:	12 96       	adiw	r26, 0x02	; 2
    1126:	8d 91       	ld	r24, X+
    1128:	9c 91       	ld	r25, X
    112a:	13 97       	sbiw	r26, 0x03	; 3
    112c:	0e 94 b5 11 	call	0x236a	; 0x236a <vfprintf_P>
    stdout->flags &= ~__SPGM;
    1130:	d8 01       	movw	r26, r16
    1132:	12 96       	adiw	r26, 0x02	; 2
    1134:	ed 91       	ld	r30, X+
    1136:	fc 91       	ld	r31, X
    1138:	13 97       	sbiw	r26, 0x03	; 3
    113a:	83 81       	ldd	r24, Z+3	; 0x03
    113c:	87 7f       	andi	r24, 0xF7	; 247
    va_end(args);

    terminal_newLine();
    113e:	83 83       	std	Z+3, r24	; 0x03
    1140:	d5 df       	rcall	.-86     	; 0x10ec <terminal_newLine>

    os_leaveCriticalSection();
    1142:	9a d3       	rcall	.+1844   	; 0x1878 <os_leaveCriticalSection>
    1144:	df 91       	pop	r29
}
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	08 95       	ret

0000114e <__vector_25>:
    114e:	1f 92       	push	r1
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart3_putc(c);

}/* uart3_puts_p */
    1150:	0f 92       	push	r0
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	0f 92       	push	r0
    1156:	11 24       	eor	r1, r1
    1158:	0b b6       	in	r0, 0x3b	; 59
    115a:	0f 92       	push	r0
    115c:	2f 93       	push	r18
    115e:	8f 93       	push	r24
    1160:	9f 93       	push	r25
    1162:	ef 93       	push	r30
    1164:	ff 93       	push	r31
    1166:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    116a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    116e:	8c 71       	andi	r24, 0x1C	; 28
    1170:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <UART0_RxHead>
    1174:	ef 5f       	subi	r30, 0xFF	; 255
    1176:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <UART0_RxTail>
    117a:	e9 17       	cp	r30, r25
    117c:	39 f0       	breq	.+14     	; 0x118c <__vector_25+0x3e>
    117e:	e0 93 14 04 	sts	0x0414, r30	; 0x800414 <UART0_RxHead>
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	e9 5e       	subi	r30, 0xE9	; 233
    1186:	fb 4f       	sbci	r31, 0xFB	; 251
    1188:	20 83       	st	Z, r18
    118a:	01 c0       	rjmp	.+2      	; 0x118e <__vector_25+0x40>
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <UART0_LastRxError>
    1192:	89 2b       	or	r24, r25
    1194:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <UART0_LastRxError>
    1198:	ff 91       	pop	r31
    119a:	ef 91       	pop	r30
    119c:	9f 91       	pop	r25
    119e:	8f 91       	pop	r24
    11a0:	2f 91       	pop	r18
    11a2:	0f 90       	pop	r0
    11a4:	0b be       	out	0x3b, r0	; 59
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	0f 90       	pop	r0
    11ac:	1f 90       	pop	r1
    11ae:	18 95       	reti

000011b0 <__vector_26>:
    11b0:	1f 92       	push	r1
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	0b b6       	in	r0, 0x3b	; 59
    11bc:	0f 92       	push	r0
    11be:	8f 93       	push	r24
    11c0:	9f 93       	push	r25
    11c2:	ef 93       	push	r30
    11c4:	ff 93       	push	r31
    11c6:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <UART0_TxHead>
    11ca:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <UART0_TxTail>
    11ce:	98 17       	cp	r25, r24
    11d0:	61 f0       	breq	.+24     	; 0x11ea <__vector_26+0x3a>
    11d2:	e0 91 15 04 	lds	r30, 0x0415	; 0x800415 <UART0_TxTail>
    11d6:	ef 5f       	subi	r30, 0xFF	; 255
    11d8:	e0 93 15 04 	sts	0x0415, r30	; 0x800415 <UART0_TxTail>
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	e9 5e       	subi	r30, 0xE9	; 233
    11e0:	fb 4f       	sbci	r31, 0xFB	; 251
    11e2:	80 81       	ld	r24, Z
    11e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    11e8:	05 c0       	rjmp	.+10     	; 0x11f4 <__vector_26+0x44>
    11ea:	e1 ec       	ldi	r30, 0xC1	; 193
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8f 7d       	andi	r24, 0xDF	; 223
    11f2:	80 83       	st	Z, r24
    11f4:	ff 91       	pop	r31
    11f6:	ef 91       	pop	r30
    11f8:	9f 91       	pop	r25
    11fa:	8f 91       	pop	r24
    11fc:	0f 90       	pop	r0
    11fe:	0b be       	out	0x3b, r0	; 59
    1200:	0f 90       	pop	r0
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	0f 90       	pop	r0
    1206:	1f 90       	pop	r1
    1208:	18 95       	reti

0000120a <__vector_36>:
    120a:	1f 92       	push	r1
    120c:	0f 92       	push	r0
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	0f 92       	push	r0
    1212:	11 24       	eor	r1, r1
    1214:	0b b6       	in	r0, 0x3b	; 59
    1216:	0f 92       	push	r0
    1218:	2f 93       	push	r18
    121a:	8f 93       	push	r24
    121c:	9f 93       	push	r25
    121e:	ef 93       	push	r30
    1220:	ff 93       	push	r31
    1222:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    1226:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    122a:	8c 71       	andi	r24, 0x1C	; 28
    122c:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <UART1_RxHead>
    1230:	ef 5f       	subi	r30, 0xFF	; 255
    1232:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <UART1_RxTail>
    1236:	e9 17       	cp	r30, r25
    1238:	39 f0       	breq	.+14     	; 0x1248 <__vector_36+0x3e>
    123a:	e0 93 cf 02 	sts	0x02CF, r30	; 0x8002cf <UART1_RxHead>
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	ee 52       	subi	r30, 0x2E	; 46
    1242:	fd 4f       	sbci	r31, 0xFD	; 253
    1244:	20 83       	st	Z, r18
    1246:	01 c0       	rjmp	.+2      	; 0x124a <__vector_36+0x40>
    1248:	82 e0       	ldi	r24, 0x02	; 2
    124a:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <UART1_LastRxError>
    124e:	89 2b       	or	r24, r25
    1250:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <UART1_LastRxError>
    1254:	ff 91       	pop	r31
    1256:	ef 91       	pop	r30
    1258:	9f 91       	pop	r25
    125a:	8f 91       	pop	r24
    125c:	2f 91       	pop	r18
    125e:	0f 90       	pop	r0
    1260:	0b be       	out	0x3b, r0	; 59
    1262:	0f 90       	pop	r0
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	0f 90       	pop	r0
    1268:	1f 90       	pop	r1
    126a:	18 95       	reti

0000126c <__vector_37>:
    126c:	1f 92       	push	r1
    126e:	0f 92       	push	r0
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	0f 92       	push	r0
    1274:	11 24       	eor	r1, r1
    1276:	0b b6       	in	r0, 0x3b	; 59
    1278:	0f 92       	push	r0
    127a:	8f 93       	push	r24
    127c:	9f 93       	push	r25
    127e:	ef 93       	push	r30
    1280:	ff 93       	push	r31
    1282:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <UART1_TxHead>
    1286:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <UART1_TxTail>
    128a:	98 17       	cp	r25, r24
    128c:	69 f0       	breq	.+26     	; 0x12a8 <__vector_37+0x3c>
    128e:	e0 91 d0 02 	lds	r30, 0x02D0	; 0x8002d0 <UART1_TxTail>
    1292:	ef 5f       	subi	r30, 0xFF	; 255
    1294:	ef 73       	andi	r30, 0x3F	; 63
    1296:	e0 93 d0 02 	sts	0x02D0, r30	; 0x8002d0 <UART1_TxTail>
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	ee 52       	subi	r30, 0x2E	; 46
    129e:	fc 4f       	sbci	r31, 0xFC	; 252
    12a0:	80 81       	ld	r24, Z
    12a2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    12a6:	05 c0       	rjmp	.+10     	; 0x12b2 <__vector_37+0x46>
    12a8:	e9 ec       	ldi	r30, 0xC9	; 201
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	8f 7d       	andi	r24, 0xDF	; 223
    12b0:	80 83       	st	Z, r24
    12b2:	ff 91       	pop	r31
    12b4:	ef 91       	pop	r30
    12b6:	9f 91       	pop	r25
    12b8:	8f 91       	pop	r24
    12ba:	0f 90       	pop	r0
    12bc:	0b be       	out	0x3b, r0	; 59
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	0f 90       	pop	r0
    12c4:	1f 90       	pop	r1
    12c6:	18 95       	reti

000012c8 <__vector_51>:
    12c8:	1f 92       	push	r1
    12ca:	0f 92       	push	r0
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	0f 92       	push	r0
    12d0:	11 24       	eor	r1, r1
    12d2:	0b b6       	in	r0, 0x3b	; 59
    12d4:	0f 92       	push	r0
    12d6:	2f 93       	push	r18
    12d8:	8f 93       	push	r24
    12da:	9f 93       	push	r25
    12dc:	ef 93       	push	r30
    12de:	ff 93       	push	r31
    12e0:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
    12e4:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    12e8:	8c 71       	andi	r24, 0x1C	; 28
    12ea:	e0 91 8a 02 	lds	r30, 0x028A	; 0x80028a <UART2_RxHead>
    12ee:	ef 5f       	subi	r30, 0xFF	; 255
    12f0:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <UART2_RxTail>
    12f4:	e9 17       	cp	r30, r25
    12f6:	39 f0       	breq	.+14     	; 0x1306 <__vector_51+0x3e>
    12f8:	e0 93 8a 02 	sts	0x028A, r30	; 0x80028a <UART2_RxHead>
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	e3 57       	subi	r30, 0x73	; 115
    1300:	fd 4f       	sbci	r31, 0xFD	; 253
    1302:	20 83       	st	Z, r18
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <__vector_51+0x40>
    1306:	82 e0       	ldi	r24, 0x02	; 2
    1308:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <UART2_LastRxError>
    130c:	89 2b       	or	r24, r25
    130e:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <UART2_LastRxError>
    1312:	ff 91       	pop	r31
    1314:	ef 91       	pop	r30
    1316:	9f 91       	pop	r25
    1318:	8f 91       	pop	r24
    131a:	2f 91       	pop	r18
    131c:	0f 90       	pop	r0
    131e:	0b be       	out	0x3b, r0	; 59
    1320:	0f 90       	pop	r0
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	0f 90       	pop	r0
    1326:	1f 90       	pop	r1
    1328:	18 95       	reti

0000132a <__vector_52>:
    132a:	1f 92       	push	r1
    132c:	0f 92       	push	r0
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	0f 92       	push	r0
    1332:	11 24       	eor	r1, r1
    1334:	0b b6       	in	r0, 0x3b	; 59
    1336:	0f 92       	push	r0
    1338:	8f 93       	push	r24
    133a:	9f 93       	push	r25
    133c:	ef 93       	push	r30
    133e:	ff 93       	push	r31
    1340:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <UART2_TxHead>
    1344:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <UART2_TxTail>
    1348:	98 17       	cp	r25, r24
    134a:	69 f0       	breq	.+26     	; 0x1366 <__vector_52+0x3c>
    134c:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <UART2_TxTail>
    1350:	ef 5f       	subi	r30, 0xFF	; 255
    1352:	ef 73       	andi	r30, 0x3F	; 63
    1354:	e0 93 8b 02 	sts	0x028B, r30	; 0x80028b <UART2_TxTail>
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	e3 57       	subi	r30, 0x73	; 115
    135c:	fd 4f       	sbci	r31, 0xFD	; 253
    135e:	80 81       	ld	r24, Z
    1360:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    1364:	05 c0       	rjmp	.+10     	; 0x1370 <__vector_52+0x46>
    1366:	e1 ed       	ldi	r30, 0xD1	; 209
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	8f 7d       	andi	r24, 0xDF	; 223
    136e:	80 83       	st	Z, r24
    1370:	ff 91       	pop	r31
    1372:	ef 91       	pop	r30
    1374:	9f 91       	pop	r25
    1376:	8f 91       	pop	r24
    1378:	0f 90       	pop	r0
    137a:	0b be       	out	0x3b, r0	; 59
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	0f 90       	pop	r0
    1382:	1f 90       	pop	r1
    1384:	18 95       	reti

00001386 <__vector_54>:
    1386:	1f 92       	push	r1
    1388:	0f 92       	push	r0
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	0f 92       	push	r0
    138e:	11 24       	eor	r1, r1
    1390:	0b b6       	in	r0, 0x3b	; 59
    1392:	0f 92       	push	r0
    1394:	2f 93       	push	r18
    1396:	8f 93       	push	r24
    1398:	9f 93       	push	r25
    139a:	ef 93       	push	r30
    139c:	ff 93       	push	r31
    139e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
    13a2:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    13a6:	8c 71       	andi	r24, 0x1C	; 28
    13a8:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <UART3_RxHead>
    13ac:	ef 5f       	subi	r30, 0xFF	; 255
    13ae:	ef 73       	andi	r30, 0x3F	; 63
    13b0:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <UART3_RxTail>
    13b4:	e9 17       	cp	r30, r25
    13b6:	39 f0       	breq	.+14     	; 0x13c6 <__vector_54+0x40>
    13b8:	e0 93 45 02 	sts	0x0245, r30	; 0x800245 <UART3_RxHead>
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	e8 5b       	subi	r30, 0xB8	; 184
    13c0:	fd 4f       	sbci	r31, 0xFD	; 253
    13c2:	20 83       	st	Z, r18
    13c4:	01 c0       	rjmp	.+2      	; 0x13c8 <__vector_54+0x42>
    13c6:	82 e0       	ldi	r24, 0x02	; 2
    13c8:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <UART3_LastRxError>
    13cc:	89 2b       	or	r24, r25
    13ce:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <UART3_LastRxError>
    13d2:	ff 91       	pop	r31
    13d4:	ef 91       	pop	r30
    13d6:	9f 91       	pop	r25
    13d8:	8f 91       	pop	r24
    13da:	2f 91       	pop	r18
    13dc:	0f 90       	pop	r0
    13de:	0b be       	out	0x3b, r0	; 59
    13e0:	0f 90       	pop	r0
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	0f 90       	pop	r0
    13e6:	1f 90       	pop	r1
    13e8:	18 95       	reti

000013ea <__vector_55>:
    13ea:	1f 92       	push	r1
    13ec:	0f 92       	push	r0
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	0f 92       	push	r0
    13f2:	11 24       	eor	r1, r1
    13f4:	0b b6       	in	r0, 0x3b	; 59
    13f6:	0f 92       	push	r0
    13f8:	8f 93       	push	r24
    13fa:	9f 93       	push	r25
    13fc:	ef 93       	push	r30
    13fe:	ff 93       	push	r31
    1400:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <UART3_TxHead>
    1404:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <UART3_TxTail>
    1408:	98 17       	cp	r25, r24
    140a:	61 f0       	breq	.+24     	; 0x1424 <__vector_55+0x3a>
    140c:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <UART3_TxTail>
    1410:	ef 5f       	subi	r30, 0xFF	; 255
    1412:	e0 93 46 02 	sts	0x0246, r30	; 0x800246 <UART3_TxTail>
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	e8 57       	subi	r30, 0x78	; 120
    141a:	fd 4f       	sbci	r31, 0xFD	; 253
    141c:	80 81       	ld	r24, Z
    141e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    1422:	05 c0       	rjmp	.+10     	; 0x142e <__vector_55+0x44>
    1424:	e1 e3       	ldi	r30, 0x31	; 49
    1426:	f1 e0       	ldi	r31, 0x01	; 1
    1428:	80 81       	ld	r24, Z
    142a:	8f 7d       	andi	r24, 0xDF	; 223
    142c:	80 83       	st	Z, r24
    142e:	ff 91       	pop	r31
    1430:	ef 91       	pop	r30
    1432:	9f 91       	pop	r25
    1434:	8f 91       	pop	r24
    1436:	0f 90       	pop	r0
    1438:	0b be       	out	0x3b, r0	; 59
    143a:	0f 90       	pop	r0
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	0f 90       	pop	r0
    1440:	1f 90       	pop	r1
    1442:	18 95       	reti

00001444 <uart3_init>:
    1444:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <UART3_TxHead>
    1448:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <UART3_TxTail>
    144c:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <UART3_RxHead>
    1450:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <UART3_RxTail>
    1454:	28 2f       	mov	r18, r24
    1456:	39 2f       	mov	r19, r25
    1458:	33 23       	and	r19, r19
    145a:	1c f4       	brge	.+6      	; 0x1462 <uart3_init+0x1e>
    145c:	22 e0       	ldi	r18, 0x02	; 2
    145e:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
    1462:	90 78       	andi	r25, 0x80	; 128
    1464:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
    1468:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
    146c:	88 e9       	ldi	r24, 0x98	; 152
    146e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
    1472:	86 e0       	ldi	r24, 0x06	; 6
    1474:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>
    1478:	08 95       	ret

0000147a <uart3_getc>:
    147a:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <UART3_RxHead>
    147e:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <UART3_RxTail>
    1482:	98 17       	cp	r25, r24
    1484:	a1 f0       	breq	.+40     	; 0x14ae <uart3_getc+0x34>
    1486:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <UART3_RxTail>
    148a:	8f 5f       	subi	r24, 0xFF	; 255
    148c:	8f 73       	andi	r24, 0x3F	; 63
    148e:	e8 2f       	mov	r30, r24
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	e8 5b       	subi	r30, 0xB8	; 184
    1494:	fd 4f       	sbci	r31, 0xFD	; 253
    1496:	20 81       	ld	r18, Z
    1498:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <UART3_LastRxError>
    149c:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <UART3_RxTail>
    14a0:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <UART3_LastRxError>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	93 2f       	mov	r25, r19
    14a8:	82 0f       	add	r24, r18
    14aa:	91 1d       	adc	r25, r1
    14ac:	08 95       	ret
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	91 e0       	ldi	r25, 0x01	; 1
    14b2:	08 95       	ret

000014b4 <uart3_putc>:
    14b4:	20 91 47 02 	lds	r18, 0x0247	; 0x800247 <UART3_TxHead>
    14b8:	2f 5f       	subi	r18, 0xFF	; 255
    14ba:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <UART3_TxTail>
    14be:	29 17       	cp	r18, r25
    14c0:	e1 f3       	breq	.-8      	; 0x14ba <uart3_putc+0x6>
    14c2:	e2 2f       	mov	r30, r18
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	e8 57       	subi	r30, 0x78	; 120
    14c8:	fd 4f       	sbci	r31, 0xFD	; 253
    14ca:	80 83       	st	Z, r24
    14cc:	20 93 47 02 	sts	0x0247, r18	; 0x800247 <UART3_TxHead>
    14d0:	e1 e3       	ldi	r30, 0x31	; 49
    14d2:	f1 e0       	ldi	r31, 0x01	; 1
    14d4:	80 81       	ld	r24, Z
    14d6:	80 62       	ori	r24, 0x20	; 32
    14d8:	80 83       	st	Z, r24
    14da:	08 95       	ret

000014dc <uart3_getrxcount>:
/*
 * Returns current filling of the buffer in byte
 */
uint16_t uart3_getrxcount()
{
	return BUFFER_FILLING(UART3_RxHead, UART3_RxTail, UART3_RX_BUFFER_SIZE);
    14dc:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <UART3_RxTail>
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <UART3_RxHead>
    14e6:	90 e0       	ldi	r25, 0x00	; 0
#define cbi(x, b) (x &= ~(1 << (b)))
#endif

inline uint16_t BUFFER_FILLING(uint16_t head, uint16_t tail, uint16_t size)
{
	if (head >= tail) { return head - tail; }
    14e8:	82 17       	cp	r24, r18
    14ea:	93 07       	cpc	r25, r19
    14ec:	18 f0       	brcs	.+6      	; 0x14f4 <uart3_getrxcount+0x18>
    14ee:	82 1b       	sub	r24, r18
    14f0:	93 0b       	sbc	r25, r19
    14f2:	08 95       	ret
	return size - tail + head;
    14f4:	40 e4       	ldi	r20, 0x40	; 64
    14f6:	50 e0       	ldi	r21, 0x00	; 0
    14f8:	ba 01       	movw	r22, r20
    14fa:	62 1b       	sub	r22, r18
    14fc:	73 0b       	sbc	r23, r19
    14fe:	86 0f       	add	r24, r22
    1500:	97 1f       	adc	r25, r23
 * Returns current filling of the buffer in byte
 */
uint16_t uart3_getrxcount()
{
	return BUFFER_FILLING(UART3_RxHead, UART3_RxTail, UART3_RX_BUFFER_SIZE);
}
    1502:	08 95       	ret

00001504 <__vector_21>:

/*!
 *  ISR that counts the number of occurred Timer 0 compare matches for the getSystemTime function mainly used in delayMs.
 */
ISR(TIMER0_COMPA_vect)
{
    1504:	1f 92       	push	r1
    1506:	0f 92       	push	r0
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	0f 92       	push	r0
    150c:	11 24       	eor	r1, r1
    150e:	8f 93       	push	r24
    1510:	9f 93       	push	r25
    1512:	af 93       	push	r26
    1514:	bf 93       	push	r27
	++os_coarseSystemTime;
    1516:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <os_coarseSystemTime>
    151a:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <os_coarseSystemTime+0x1>
    151e:	a0 91 1d 04 	lds	r26, 0x041D	; 0x80041d <os_coarseSystemTime+0x2>
    1522:	b0 91 1e 04 	lds	r27, 0x041E	; 0x80041e <os_coarseSystemTime+0x3>
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	a1 1d       	adc	r26, r1
    152a:	b1 1d       	adc	r27, r1
    152c:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <os_coarseSystemTime>
    1530:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <os_coarseSystemTime+0x1>
    1534:	a0 93 1d 04 	sts	0x041D, r26	; 0x80041d <os_coarseSystemTime+0x2>
    1538:	b0 93 1e 04 	sts	0x041E, r27	; 0x80041e <os_coarseSystemTime+0x3>
}
    153c:	bf 91       	pop	r27
    153e:	af 91       	pop	r26
    1540:	9f 91       	pop	r25
    1542:	8f 91       	pop	r24
    1544:	0f 90       	pop	r0
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	0f 90       	pop	r0
    154a:	1f 90       	pop	r1
    154c:	18 95       	reti

0000154e <initSystemTime>:
/*!
 *  Initializes Timer 0 as system clock
 */
void initSystemTime(void)
{
	os_coarseSystemTime = 0;
    154e:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <os_coarseSystemTime>
    1552:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <os_coarseSystemTime+0x1>
    1556:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <os_coarseSystemTime+0x2>
    155a:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <os_coarseSystemTime+0x3>

	// Init timer 0 with prescaler 64
	sbi(TCCR0B, CS00);
    155e:	85 b5       	in	r24, 0x25	; 37
    1560:	81 60       	ori	r24, 0x01	; 1
    1562:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS01);
    1564:	85 b5       	in	r24, 0x25	; 37
    1566:	82 60       	ori	r24, 0x02	; 2
    1568:	85 bd       	out	0x25, r24	; 37
	cbi(TCCR0B, CS02);
    156a:	85 b5       	in	r24, 0x25	; 37
    156c:	8b 7f       	andi	r24, 0xFB	; 251
    156e:	85 bd       	out	0x25, r24	; 37

	// CTC mode
	sbi(TCCR0A, WGM01);
    1570:	84 b5       	in	r24, 0x24	; 36
    1572:	82 60       	ori	r24, 0x02	; 2
    1574:	84 bd       	out	0x24, r24	; 36

	// Compare Match after 61 timer ticks = 1ms
	OCR0A = TIMER_OCR;
    1576:	89 ef       	ldi	r24, 0xF9	; 249
    1578:	87 bd       	out	0x27, r24	; 39
	sbi(TIMSK0, OCIE0A);
    157a:	ee e6       	ldi	r30, 0x6E	; 110
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	82 60       	ori	r24, 0x02	; 2
    1582:	80 83       	st	Z, r24
    1584:	08 95       	ret

00001586 <getSystemTime_ms>:
 */
time_t getSystemTime_ms(void)
{
	// In case interrupts are off we check the OCF manually, clear it and
	// increment os_coarseSystemTime to avoid freezing the system time
	if (!gbi(SREG, 7) && gbi(TIFR0, OCF0A))
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	07 fc       	sbrc	r0, 7
    158a:	18 c0       	rjmp	.+48     	; 0x15bc <getSystemTime_ms+0x36>
    158c:	a9 9b       	sbis	0x15, 1	; 21
    158e:	16 c0       	rjmp	.+44     	; 0x15bc <getSystemTime_ms+0x36>
	{
		sbi(TIFR0, OCF0A);
    1590:	85 b3       	in	r24, 0x15	; 21
    1592:	82 60       	ori	r24, 0x02	; 2
    1594:	85 bb       	out	0x15, r24	; 21
		++os_coarseSystemTime;
    1596:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <os_coarseSystemTime>
    159a:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <os_coarseSystemTime+0x1>
    159e:	a0 91 1d 04 	lds	r26, 0x041D	; 0x80041d <os_coarseSystemTime+0x2>
    15a2:	b0 91 1e 04 	lds	r27, 0x041E	; 0x80041e <os_coarseSystemTime+0x3>
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	a1 1d       	adc	r26, r1
    15aa:	b1 1d       	adc	r27, r1
    15ac:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <os_coarseSystemTime>
    15b0:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <os_coarseSystemTime+0x1>
    15b4:	a0 93 1d 04 	sts	0x041D, r26	; 0x80041d <os_coarseSystemTime+0x2>
    15b8:	b0 93 1e 04 	sts	0x041E, r27	; 0x80041e <os_coarseSystemTime+0x3>
	}

	// Synchronize access to os_coarseSystemTime
	uint8_t ie = gbi(SREG, 7);
    15bc:	8f b7       	in	r24, 0x3f	; 63
    15be:	28 2f       	mov	r18, r24
    15c0:	22 1f       	adc	r18, r18
    15c2:	22 27       	eor	r18, r18
    15c4:	22 1f       	adc	r18, r18
	cli();
    15c6:	f8 94       	cli
	time_t t = os_coarseSystemTime;
    15c8:	60 91 1b 04 	lds	r22, 0x041B	; 0x80041b <os_coarseSystemTime>
    15cc:	70 91 1c 04 	lds	r23, 0x041C	; 0x80041c <os_coarseSystemTime+0x1>
    15d0:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <os_coarseSystemTime+0x2>
    15d4:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <os_coarseSystemTime+0x3>
	if (ie)
    15d8:	22 23       	and	r18, r18
    15da:	09 f0       	breq	.+2      	; 0x15de <getSystemTime_ms+0x58>
	{
		sei();
    15dc:	78 94       	sei
	}

	return t;
}
    15de:	08 95       	ret

000015e0 <delayMs>:
 *  in order to get the destination time. Then, we wait until a temporary variable reaches this value.
 *
 *  \param ms  The time to be waited in milliseconds (max. 65535)
 */
void delayMs(uint16_t ms)
{
    15e0:	cf 92       	push	r12
    15e2:	df 92       	push	r13
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
#ifdef RUNNING_WITH_SIMULATOR
	return;
#endif

	if (ms == 0)
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	d1 f0       	breq	.+52     	; 0x1628 <delayMs+0x48>
    15f4:	ec 01       	movw	r28, r24
	{
		return;
	}
	time_t startTime = getSystemTime_ms();
    15f6:	c7 df       	rcall	.-114    	; 0x1586 <getSystemTime_ms>
    15f8:	6b 01       	movw	r12, r22
    15fa:	7c 01       	movw	r14, r24

	while (getSystemTime_ms() - startTime < ms)
    15fc:	06 c0       	rjmp	.+12     	; 0x160a <delayMs+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15fe:	8f e8       	ldi	r24, 0x8F	; 143
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <delayMs+0x22>
    1606:	00 c0       	rjmp	.+0      	; 0x1608 <delayMs+0x28>
    1608:	00 00       	nop
    160a:	bd df       	rcall	.-134    	; 0x1586 <getSystemTime_ms>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	8c 19       	sub	r24, r12
    1612:	9d 09       	sbc	r25, r13
    1614:	ae 09       	sbc	r26, r14
    1616:	bf 09       	sbc	r27, r15
    1618:	8e 01       	movw	r16, r28
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	80 17       	cp	r24, r16
    1620:	91 07       	cpc	r25, r17
    1622:	a2 07       	cpc	r26, r18
    1624:	b3 07       	cpc	r27, r19
    1626:	58 f3       	brcs	.-42     	; 0x15fe <delayMs+0x1e>
	{
		_delay_us(100);
	}
}
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	ff 90       	pop	r15
    1632:	ef 90       	pop	r14
    1634:	df 90       	pop	r13
    1636:	cf 90       	pop	r12
    1638:	08 95       	ret

0000163a <assertPstr>:
 *
 *  \param exp The boolean expression that is expected to be true.
 *  \param errormsg The string that shall be shown as an error message if the given expression is false as progmem string.
 */
void assertPstr(bool exp, const char *errormsg, ...)
{
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	9f 81       	ldd	r25, Y+7	; 0x07
    1644:	28 85       	ldd	r18, Y+8	; 0x08
	if (!exp)
    1646:	8e 81       	ldd	r24, Y+6	; 0x06
    1648:	81 11       	cpse	r24, r1
    164a:	0c c0       	rjmp	.+24     	; 0x1664 <assertPstr+0x2a>
	{
		va_list args;
		va_start(args, errormsg);
    164c:	ae 01       	movw	r20, r28
    164e:	47 5f       	subi	r20, 0xF7	; 247
    1650:	5f 4f       	sbci	r21, 0xFF	; 255
		os_errorPstr(errormsg, args);
    1652:	5f 93       	push	r21
    1654:	4f 93       	push	r20
    1656:	2f 93       	push	r18
    1658:	9f 93       	push	r25
    165a:	6a d0       	rcall	.+212    	; 0x1730 <os_errorPstr>
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
		va_end(args);
	}
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	08 95       	ret

0000166a <main>:
//! Program's entry point
int main(void)
{
	// Give the operating system a chance to initialize its private data.
	// This also registers and starts the idle program.
	os_init();
    166a:	21 d0       	rcall	.+66     	; 0x16ae <os_init>

	// os_init shows a boot message
	// Wait and clear the LCD
	delayMs(600);
    166c:	88 e5       	ldi	r24, 0x58	; 88
    166e:	92 e0       	ldi	r25, 0x02	; 2
	lcd_clear();
    1670:	b7 df       	rcall	.-146    	; 0x15e0 <delayMs>
    1672:	05 db       	rcall	.-2550   	; 0xc7e <lcd_clear>

	// Start the operating system
	os_startScheduler();
    1674:	35 d1       	rcall	.+618    	; 0x18e0 <os_startScheduler>
    1676:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	08 95       	ret

0000167c <os_initTimer>:
    167c:	e0 eb       	ldi	r30, 0xB0	; 176
 *  Initializes the used timers.
 */
void os_initTimer(void)
{
	// Init timer 2 (Scheduler)
	sbi(TCCR2A, WGM21); // Clear on timer compare match
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	82 60       	ori	r24, 0x02	; 2
    1684:	80 83       	st	Z, r24

	sbi(TCCR2B, CS22);	 // Prescaler 1024  1
    1686:	e1 eb       	ldi	r30, 0xB1	; 177
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	84 60       	ori	r24, 0x04	; 4
    168e:	80 83       	st	Z, r24
	sbi(TCCR2B, CS21);	 // Prescaler 1024  1
    1690:	80 81       	ld	r24, Z
    1692:	82 60       	ori	r24, 0x02	; 2
    1694:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20);	 // Prescaler 1024  1
    1696:	80 81       	ld	r24, Z
    1698:	81 60       	ori	r24, 0x01	; 1
    169a:	80 83       	st	Z, r24
	sbi(TIMSK2, OCIE2A); // Enable interrupt
    169c:	e0 e7       	ldi	r30, 0x70	; 112
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	82 60       	ori	r24, 0x02	; 2
    16a4:	80 83       	st	Z, r24
	OCR2A = 60;
    16a6:	8c e3       	ldi	r24, 0x3C	; 60
    16a8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
    16ac:	08 95       	ret

000016ae <os_init>:
 *  Readies stack, scheduler and heap for first use. Additionally, the LCD is initialized. In order to do those tasks,
 *  it calls the subfunction os_initScheduler().
 */
void os_init()
{
	initSystemTime();
    16ae:	4f df       	rcall	.-354    	; 0x154e <initSystemTime>
	os_initTimer();
    16b0:	e5 df       	rcall	.-54     	; 0x167c <os_initTimer>
	stopWatch_init();
    16b2:	ac dc       	rcall	.-1704   	; 0x100c <stopWatch_init>

	// Init LCD display
	lcd_init();
    16b4:	9f da       	rcall	.-2754   	; 0xbf4 <lcd_init>
	terminal_init();
    16b6:	f7 dc       	rcall	.-1554   	; 0x10a6 <terminal_init>

	// display on
	lcd_displayOn();
    16b8:	ef da       	rcall	.-2594   	; 0xc98 <lcd_displayOn>
    16ba:	e1 da       	rcall	.-2622   	; 0xc7e <lcd_clear>
	lcd_clear();
    16bc:	84 e7       	ldi	r24, 0x74	; 116

	lcd_writeProgString(PSTR("Booting DEOS ..."));
    16be:	92 e0       	ldi	r25, 0x02	; 2
    16c0:	7c db       	rcall	.-2312   	; 0xdba <lcd_writeProgString>
    16c2:	8e e3       	ldi	r24, 0x3E	; 62
    16c4:	92 e0       	ldi	r25, 0x02	; 2

	terminal_writeProgString(PSTR("\n\n##################################################\n"));
    16c6:	01 dd       	rcall	.-1534   	; 0x10ca <terminal_writeProgString>
    16c8:	8d e2       	ldi	r24, 0x2D	; 45
    16ca:	92 e0       	ldi	r25, 0x02	; 2
	INFO("Booting DEOS ...");
    16cc:	9f 93       	push	r25
    16ce:	8f 93       	push	r24
    16d0:	84 e2       	ldi	r24, 0x24	; 36
    16d2:	92 e0       	ldi	r25, 0x02	; 2
    16d4:	9f 93       	push	r25
    16d6:	8f 93       	push	r24
    16d8:	0c dd       	rcall	.-1512   	; 0x10f2 <terminal_log_printf_p>
    16da:	83 e0       	ldi	r24, 0x03	; 3
    16dc:	8f 93       	push	r24
    16de:	88 ee       	ldi	r24, 0xE8	; 232
	INFO("Used global vars: %d/%d bytes", (uint16_t)&__heap_start - AVR_SRAM_START, STACK_OFFSET);
    16e0:	8f 93       	push	r24
    16e2:	88 e9       	ldi	r24, 0x98	; 152
    16e4:	92 e0       	ldi	r25, 0x02	; 2
    16e6:	9f 93       	push	r25
    16e8:	8f 93       	push	r24
    16ea:	86 e0       	ldi	r24, 0x06	; 6
    16ec:	92 e0       	ldi	r25, 0x02	; 2
    16ee:	9f 93       	push	r25
    16f0:	8f 93       	push	r24
    16f2:	8d ef       	ldi	r24, 0xFD	; 253
    16f4:	91 e0       	ldi	r25, 0x01	; 1
    16f6:	9f 93       	push	r25
    16f8:	8f 93       	push	r24
    16fa:	fb dc       	rcall	.-1546   	; 0x10f2 <terminal_log_printf_p>
    16fc:	89 ec       	ldi	r24, 0xC9	; 201
    16fe:	91 e0       	ldi	r25, 0x01	; 1
	terminal_writeProgString(PSTR("--------------------------------------------------\n"));
    1700:	e4 dc       	rcall	.-1592   	; 0x10ca <terminal_writeProgString>
    1702:	88 ea       	ldi	r24, 0xA8	; 168
    1704:	91 e0       	ldi	r25, 0x01	; 1
    1706:	9f 93       	push	r25

	// Security check if the stack crushes global variables
	assert((uint16_t)&__heap_start < AVR_SRAM_START + STACK_OFFSET, " Stack collides with global vars");
    1708:	8f 93       	push	r24
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	28 e9       	ldi	r18, 0x98	; 152
    170e:	34 e0       	ldi	r19, 0x04	; 4
    1710:	28 3e       	cpi	r18, 0xE8	; 232
    1712:	35 40       	sbci	r19, 0x05	; 5
    1714:	08 f0       	brcs	.+2      	; 0x1718 <os_init+0x6a>
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	8f 93       	push	r24
    171a:	8f df       	rcall	.-226    	; 0x163a <assertPstr>
    171c:	f4 d1       	rcall	.+1000   	; 0x1b06 <os_initScheduler>
    171e:	8d b7       	in	r24, 0x3d	; 61

	os_initScheduler();
    1720:	9e b7       	in	r25, 0x3e	; 62
    1722:	0f 96       	adiw	r24, 0x0f	; 15
}
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	9e bf       	out	0x3e, r25	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	8d bf       	out	0x3d, r24	; 61
    172e:	08 95       	ret

00001730 <os_errorPstr>:
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	cd b7       	in	r28, 0x3d	; 61
 *
 *  \param msg The error to be displayed as progmem string
 *  \param ... Formatting arguments for the error message
 */
void os_errorPstr(const char *msg, ...)
{
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	1e 81       	ldd	r17, Y+6	; 0x06
    173a:	0f 81       	ldd	r16, Y+7	; 0x07
	cli();
    173c:	f8 94       	cli

	// Make sure we have enough stack left for sure (we can mess with it because we won't go out of this function)
	SP = BOTTOM_OF_MAIN_STACK;
    173e:	8f ef       	ldi	r24, 0xFF	; 255
    1740:	91 e2       	ldi	r25, 0x21	; 33
    1742:	9e bf       	out	0x3e, r25	; 62
    1744:	8d bf       	out	0x3d, r24	; 61

	// Clear display and write error message
	lcd_clear();
    1746:	9b da       	rcall	.-2762   	; 0xc7e <lcd_clear>

	// Print error message to lcd (variadic arguments)
	va_list args;
	va_start(args, msg);
    1748:	ce 01       	movw	r24, r28
    174a:	08 96       	adiw	r24, 0x08	; 8
	lcd_printf_p(msg, args);
    174c:	9f 93       	push	r25
    174e:	8f 93       	push	r24
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	12 da       	rcall	.-3036   	; 0xb7a <lcd_printf_p>
	va_end(args);

	// Print error message to terminal (variadic arguments)
	va_start(args, msg);
    1756:	ce 01       	movw	r24, r28
    1758:	08 96       	adiw	r24, 0x08	; 8
	terminal_log_printf_p(PSTR("[ERROR] "), msg, args);
    175a:	9f 93       	push	r25
    175c:	8f 93       	push	r24
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	8f e9       	ldi	r24, 0x9F	; 159
    1764:	91 e0       	ldi	r25, 0x01	; 1
    1766:	9f 93       	push	r25
    1768:	8f 93       	push	r24
    176a:	c3 dc       	rcall	.-1658   	; 0x10f2 <terminal_log_printf_p>
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
	va_end(args);

	// Catch system in this infinite loop and play a small animation to indicate an error
	while (1)
	{
		lcd_displayOn();
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	90 da       	rcall	.-2784   	; 0xc98 <lcd_displayOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1778:	9f ef       	ldi	r25, 0xFF	; 255
    177a:	2d e3       	ldi	r18, 0x3D	; 61
    177c:	89 e4       	ldi	r24, 0x49	; 73
    177e:	91 50       	subi	r25, 0x01	; 1
    1780:	20 40       	sbci	r18, 0x00	; 0
    1782:	80 40       	sbci	r24, 0x00	; 0
    1784:	e1 f7       	brne	.-8      	; 0x177e <os_errorPstr+0x4e>
    1786:	00 c0       	rjmp	.+0      	; 0x1788 <os_errorPstr+0x58>
		_delay_ms(1500);
		lcd_displayOff();
    1788:	00 00       	nop
    178a:	89 da       	rcall	.-2798   	; 0xc9e <lcd_displayOff>
    178c:	9f ef       	ldi	r25, 0xFF	; 255
    178e:	21 ee       	ldi	r18, 0xE1	; 225
    1790:	84 e0       	ldi	r24, 0x04	; 4
    1792:	91 50       	subi	r25, 0x01	; 1
    1794:	20 40       	sbci	r18, 0x00	; 0
    1796:	80 40       	sbci	r24, 0x00	; 0
    1798:	e1 f7       	brne	.-8      	; 0x1792 <os_errorPstr+0x62>
    179a:	00 c0       	rjmp	.+0      	; 0x179c <os_errorPstr+0x6c>
    179c:	00 00       	nop
    179e:	eb cf       	rjmp	.-42     	; 0x1776 <os_errorPstr+0x46>

000017a0 <prog0>:

/*!
 *  This is the idle program. The idle process owns all the memory
 *  and processor time no other process wants to have.
 */
PROGRAM(0, AUTOSTART)
    17a0:	c0 e0       	ldi	r28, 0x00	; 0
    17a2:	d0 e0       	ldi	r29, 0x00	; 0
    17a4:	06 c0       	rjmp	.+12     	; 0x17b2 <prog0+0x12>
    17a6:	8e e2       	ldi	r24, 0x2E	; 46
    17a8:	b3 da       	rcall	.-2714   	; 0xd10 <lcd_writeChar>
    17aa:	84 e6       	ldi	r24, 0x64	; 100
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	18 df       	rcall	.-464    	; 0x15e0 <delayMs>
    17b0:	21 96       	adiw	r28, 0x01	; 1
    17b2:	c3 30       	cpi	r28, 0x03	; 3
    17b4:	d1 05       	cpc	r29, r1
    17b6:	bc f3       	brlt	.-18     	; 0x17a6 <prog0+0x6>
    17b8:	62 da       	rcall	.-2876   	; 0xc7e <lcd_clear>
    17ba:	84 e6       	ldi	r24, 0x64	; 100
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	10 df       	rcall	.-480    	; 0x15e0 <delayMs>
    17c0:	ef cf       	rjmp	.-34     	; 0x17a0 <prog0>

000017c2 <addressOfProgram>:
    17c2:	bc 01       	movw	r22, r24
    17c4:	99 0f       	add	r25, r25
    17c6:	88 0b       	sbc	r24, r24
    17c8:	99 0b       	sbc	r25, r25
    17ca:	08 95       	ret

000017cc <os_checkAutostartProgram>:
    17cc:	21 e0       	ldi	r18, 0x01	; 1
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <os_checkAutostartProgram+0xa>
    17d2:	22 0f       	add	r18, r18
    17d4:	33 1f       	adc	r19, r19
    17d6:	8a 95       	dec	r24
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <os_checkAutostartProgram+0x6>
    17da:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <os_autostart>
    17de:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <os_autostart+0x1>
    17e2:	28 23       	and	r18, r24
    17e4:	39 23       	and	r19, r25
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	23 2b       	or	r18, r19
    17ea:	09 f4       	brne	.+2      	; 0x17ee <os_checkAutostartProgram+0x22>
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	08 95       	ret

000017f0 <os_lookupProgramFunction>:
    17f0:	80 31       	cpi	r24, 0x10	; 16
    17f2:	48 f4       	brcc	.+18     	; 0x1806 <os_lookupProgramFunction+0x16>
    17f4:	e8 2f       	mov	r30, r24
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	ee 0f       	add	r30, r30
    17fa:	ff 1f       	adc	r31, r31
    17fc:	e1 5b       	subi	r30, 0xB1	; 177
    17fe:	fb 4f       	sbci	r31, 0xFB	; 251
    1800:	80 81       	ld	r24, Z
    1802:	91 81       	ldd	r25, Z+1	; 0x01
    1804:	08 95       	ret
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	08 95       	ret

0000180c <os_getProcessSlot>:
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	9c 01       	movw	r18, r24
    1810:	22 0f       	add	r18, r18
    1812:	33 1f       	adc	r19, r19
    1814:	82 0f       	add	r24, r18
    1816:	93 1f       	adc	r25, r19
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	81 5e       	subi	r24, 0xE1	; 225
    181e:	9b 4f       	sbci	r25, 0xFB	; 251
    1820:	08 95       	ret

00001822 <os_getProgramSlot>:
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	81 5b       	subi	r24, 0xB1	; 177
    182a:	9b 4f       	sbci	r25, 0xFB	; 251
    182c:	08 95       	ret

0000182e <os_getCurrentProc>:
    182e:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <currentProc>
    1832:	08 95       	ret

00001834 <os_getSchedulingStrategy>:
    1834:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <currSchedStrat>
    1838:	08 95       	ret

0000183a <os_enterCriticalSection>:
    183a:	cf 93       	push	r28
    183c:	cf b7       	in	r28, 0x3f	; 63
    183e:	cc 1f       	adc	r28, r28
    1840:	cc 27       	eor	r28, r28
    1842:	cc 1f       	adc	r28, r28
    1844:	f8 94       	cli
    1846:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <criticalSectionCount>
    184a:	8f 3f       	cpi	r24, 0xFF	; 255
    184c:	41 f4       	brne	.+16     	; 0x185e <os_enterCriticalSection+0x24>
    184e:	86 e6       	ldi	r24, 0x66	; 102
    1850:	93 e0       	ldi	r25, 0x03	; 3
    1852:	9f 93       	push	r25
    1854:	8f 93       	push	r24
    1856:	6c df       	rcall	.-296    	; 0x1730 <os_errorPstr>
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	03 c0       	rjmp	.+6      	; 0x1864 <os_enterCriticalSection+0x2a>
    185e:	8f 5f       	subi	r24, 0xFF	; 255
    1860:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <criticalSectionCount>
    1864:	e0 e7       	ldi	r30, 0x70	; 112
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	8d 7f       	andi	r24, 0xFD	; 253
    186c:	80 83       	st	Z, r24
    186e:	cc 23       	and	r28, r28
    1870:	09 f0       	breq	.+2      	; 0x1874 <os_enterCriticalSection+0x3a>
    1872:	78 94       	sei
    1874:	cf 91       	pop	r28
    1876:	08 95       	ret

00001878 <os_leaveCriticalSection>:
    1878:	cf 93       	push	r28
    187a:	cf b7       	in	r28, 0x3f	; 63
    187c:	cc 1f       	adc	r28, r28
    187e:	cc 27       	eor	r28, r28
    1880:	cc 1f       	adc	r28, r28
    1882:	f8 94       	cli
    1884:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <criticalSectionCount>
    1888:	81 11       	cpse	r24, r1
    188a:	08 c0       	rjmp	.+16     	; 0x189c <os_leaveCriticalSection+0x24>
    188c:	8c e4       	ldi	r24, 0x4C	; 76
    188e:	93 e0       	ldi	r25, 0x03	; 3
    1890:	9f 93       	push	r25
    1892:	8f 93       	push	r24
    1894:	4d df       	rcall	.-358    	; 0x1730 <os_errorPstr>
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	03 c0       	rjmp	.+6      	; 0x18a2 <os_leaveCriticalSection+0x2a>
    189c:	81 50       	subi	r24, 0x01	; 1
    189e:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <criticalSectionCount>
    18a2:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <criticalSectionCount>
    18a6:	81 11       	cpse	r24, r1
    18a8:	05 c0       	rjmp	.+10     	; 0x18b4 <os_leaveCriticalSection+0x3c>
    18aa:	e0 e7       	ldi	r30, 0x70	; 112
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	82 60       	ori	r24, 0x02	; 2
    18b2:	80 83       	st	Z, r24
    18b4:	cc 23       	and	r28, r28
    18b6:	09 f0       	breq	.+2      	; 0x18ba <os_leaveCriticalSection+0x42>
    18b8:	78 94       	sei
    18ba:	cf 91       	pop	r28
    18bc:	08 95       	ret

000018be <registerProgram0>:
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	b0 df       	rcall	.-160    	; 0x1822 <os_getProgramSlot>
    18c2:	20 ed       	ldi	r18, 0xD0	; 208
    18c4:	3b e0       	ldi	r19, 0x0B	; 11
    18c6:	fc 01       	movw	r30, r24
    18c8:	31 83       	std	Z+1, r19	; 0x01
    18ca:	20 83       	st	Z, r18
    18cc:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <os_autostart>
    18d0:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <os_autostart+0x1>
    18d4:	81 60       	ori	r24, 0x01	; 1
    18d6:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <os_autostart+0x1>
    18da:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <os_autostart>
    18de:	08 95       	ret

000018e0 <os_startScheduler>:
 *  function to start the concurrent execution of the applications.
 */
void os_startScheduler(void)
{
	 // Set currentProc to idle process
	 currentProc = 0;
    18e0:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <currentProc>

	 // Set the state of the now chosen process to running
	 os_processes[currentProc].state = OS_PS_RUNNING;
    18e4:	ef e1       	ldi	r30, 0x1F	; 31
    18e6:	f4 e0       	ldi	r31, 0x04	; 4
    18e8:	82 e0       	ldi	r24, 0x02	; 2
    18ea:	81 83       	std	Z+1, r24	; 0x01

	 // Set SP on the stack of the idle process, this will cause the idle process to start running,
	 // as the SP now points onto the idle functions address
	 SP = os_processes[currentProc].sp.as_int;
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	93 81       	ldd	r25, Z+3	; 0x03
    18f0:	9e bf       	out	0x3e, r25	; 62
    18f2:	8d bf       	out	0x3d, r24	; 61

	 // Load initial context and start the idle process
	 restoreContext();
    18f4:	0f 90       	pop	r0
    18f6:	1f 90       	pop	r1
    18f8:	2f 90       	pop	r2
    18fa:	3f 90       	pop	r3
    18fc:	4f 90       	pop	r4
    18fe:	5f 90       	pop	r5
    1900:	6f 90       	pop	r6
    1902:	7f 90       	pop	r7
    1904:	8f 90       	pop	r8
    1906:	9f 90       	pop	r9
    1908:	af 90       	pop	r10
    190a:	bf 90       	pop	r11
    190c:	cf 90       	pop	r12
    190e:	df 90       	pop	r13
    1910:	ef 90       	pop	r14
    1912:	ff 90       	pop	r15
    1914:	0f 91       	pop	r16
    1916:	1f 91       	pop	r17
    1918:	2f 91       	pop	r18
    191a:	3f 91       	pop	r19
    191c:	4f 91       	pop	r20
    191e:	5f 91       	pop	r21
    1920:	6f 91       	pop	r22
    1922:	7f 91       	pop	r23
    1924:	8f 91       	pop	r24
    1926:	9f 91       	pop	r25
    1928:	af 91       	pop	r26
    192a:	bf 91       	pop	r27
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	ef 91       	pop	r30
    1932:	ff 91       	pop	r31
    1934:	ff bf       	out	0x3f, r31	; 63
    1936:	ff 91       	pop	r31
    1938:	18 95       	reti

	 os_error("os_startScheduler() terminated against all odds - scary stuff...");
    193a:	85 e8       	ldi	r24, 0x85	; 133
    193c:	92 e0       	ldi	r25, 0x02	; 2
    193e:	9f 93       	push	r25
    1940:	8f 93       	push	r24
    1942:	f6 de       	rcall	.-532    	; 0x1730 <os_errorPstr>
	 // You should never get here, as the scheduler must not terminate
	

}
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	08 95       	ret

0000194a <os_getStackChecksum>:
	// Be aware of cases where the whole stack is less than 10 bytes
	// (although this actually won't happen due to the call to saveContext() beforehand, which always puts 33 bytes on to the stack already)
	
	
	stack_checksum_t checksum = 0;
	uint8_t *stack_bottom = (uint8_t *)(uintptr_t)PROCESS_STACK_BOTTOM(pid);
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	27 e6       	ldi	r18, 0x67	; 103
    194e:	33 e0       	ldi	r19, 0x03	; 3
    1950:	82 9f       	mul	r24, r18
    1952:	a0 01       	movw	r20, r0
    1954:	83 9f       	mul	r24, r19
    1956:	50 0d       	add	r21, r0
    1958:	92 9f       	mul	r25, r18
    195a:	50 0d       	add	r21, r0
    195c:	11 24       	eor	r1, r1
    195e:	2f e1       	ldi	r18, 0x1F	; 31
    1960:	31 e2       	ldi	r19, 0x21	; 33
    1962:	24 1b       	sub	r18, r20
    1964:	35 0b       	sbc	r19, r21
	uint8_t *stack_top = (uint8_t *)(uintptr_t)(os_processes[pid].sp.as_int);
    1966:	fc 01       	movw	r30, r24
    1968:	ee 0f       	add	r30, r30
    196a:	ff 1f       	adc	r31, r31
    196c:	e8 0f       	add	r30, r24
    196e:	f9 1f       	adc	r31, r25
    1970:	ee 0f       	add	r30, r30
    1972:	ff 1f       	adc	r31, r31
    1974:	e1 5e       	subi	r30, 0xE1	; 225
    1976:	fb 4f       	sbci	r31, 0xFB	; 251
    1978:	42 81       	ldd	r20, Z+2	; 0x02
    197a:	53 81       	ldd	r21, Z+3	; 0x03
	uint8_t stack_size = stack_bottom - stack_top;
    197c:	24 1b       	sub	r18, r20

	if (stack_size >= 16)
    197e:	20 31       	cpi	r18, 0x10	; 16
    1980:	78 f4       	brcc	.+30     	; 0x19a0 <os_getStackChecksum+0x56>
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	17 c0       	rjmp	.+46     	; 0x19b6 <os_getStackChecksum+0x6c>
	{
		for (uint8_t i = 0; i < 16; i++)
		{
			checksum ^= stack_top[i * (stack_size / 16)];
    1988:	32 2f       	mov	r19, r18
    198a:	32 95       	swap	r19
    198c:	3f 70       	andi	r19, 0x0F	; 15
    198e:	fa 01       	movw	r30, r20
    1990:	39 9f       	mul	r19, r25
    1992:	e0 0d       	add	r30, r0
    1994:	f1 1d       	adc	r31, r1
    1996:	11 24       	eor	r1, r1
    1998:	30 81       	ld	r19, Z
    199a:	83 27       	eor	r24, r19
	uint8_t *stack_top = (uint8_t *)(uintptr_t)(os_processes[pid].sp.as_int);
	uint8_t stack_size = stack_bottom - stack_top;

	if (stack_size >= 16)
	{
		for (uint8_t i = 0; i < 16; i++)
    199c:	9f 5f       	subi	r25, 0xFF	; 255
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <os_getStackChecksum+0x5a>
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 31       	cpi	r25, 0x10	; 16
    19a6:	80 f3       	brcs	.-32     	; 0x1988 <os_getStackChecksum+0x3e>
    19a8:	08 95       	ret
	}
	else
	{
		for (uint8_t i = 0; i < stack_size; i++)
		{
			checksum ^= stack_top[i];
    19aa:	fa 01       	movw	r30, r20
    19ac:	e9 0f       	add	r30, r25
    19ae:	f1 1d       	adc	r31, r1
    19b0:	30 81       	ld	r19, Z
    19b2:	83 27       	eor	r24, r19
			checksum ^= stack_top[i * (stack_size / 16)];
		}
	}
	else
	{
		for (uint8_t i = 0; i < stack_size; i++)
    19b4:	9f 5f       	subi	r25, 0xFF	; 255
    19b6:	92 17       	cp	r25, r18
    19b8:	c0 f3       	brcs	.-16     	; 0x19aa <os_getStackChecksum+0x60>
		}
	}

	return checksum;

}
    19ba:	08 95       	ret

000019bc <os_exec>:
 *                  strategies.
 *  \return The index of the new process (throws error on failure and returns
 *          INVALID_PROCESS as specified in defines.h).
 */
process_id_t os_exec(program_id_t programID, priority_t priority)
{
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	e8 2e       	mov	r14, r24
    19ca:	f6 2e       	mov	r15, r22
	// 1. Enter a critical section
	os_enterCriticalSection();
    19cc:	36 df       	rcall	.-404    	; 0x183a <os_enterCriticalSection>

	// 2. Find free slot in os_processes array
	int free_slot = -1;

	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    19ce:	c0 e0       	ldi	r28, 0x00	; 0
    19d0:	d0 e0       	ldi	r29, 0x00	; 0
    19d2:	0d c0       	rjmp	.+26     	; 0x19ee <os_exec+0x32>
	{
		if (os_processes[i].state == OS_PS_UNUSED)
    19d4:	fe 01       	movw	r30, r28
    19d6:	ee 0f       	add	r30, r30
    19d8:	ff 1f       	adc	r31, r31
    19da:	ec 0f       	add	r30, r28
    19dc:	fd 1f       	adc	r31, r29
    19de:	ee 0f       	add	r30, r30
    19e0:	ff 1f       	adc	r31, r31
    19e2:	e1 5e       	subi	r30, 0xE1	; 225
    19e4:	fb 4f       	sbci	r31, 0xFB	; 251
    19e6:	81 81       	ldd	r24, Z+1	; 0x01
    19e8:	88 23       	and	r24, r24
    19ea:	31 f0       	breq	.+12     	; 0x19f8 <os_exec+0x3c>
	os_enterCriticalSection();

	// 2. Find free slot in os_processes array
	int free_slot = -1;

	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    19ec:	21 96       	adiw	r28, 0x01	; 1
    19ee:	c8 30       	cpi	r28, 0x08	; 8
    19f0:	d1 05       	cpc	r29, r1
    19f2:	84 f3       	brlt	.-32     	; 0x19d4 <os_exec+0x18>
{
	// 1. Enter a critical section
	os_enterCriticalSection();

	// 2. Find free slot in os_processes array
	int free_slot = -1;
    19f4:	cf ef       	ldi	r28, 0xFF	; 255
    19f6:	df ef       	ldi	r29, 0xFF	; 255
			break;
		}
	}


	if (free_slot == -1)
    19f8:	cf 3f       	cpi	r28, 0xFF	; 255
    19fa:	8f ef       	ldi	r24, 0xFF	; 255
    19fc:	d8 07       	cpc	r29, r24
    19fe:	81 f4       	brne	.+32     	; 0x1a20 <os_exec+0x64>
	{
		// os_error("No free slot available");
		terminal_log_printf_p(PSTR("os_exec() -> "), PSTR("No free slot available\n"));
    1a00:	8a ee       	ldi	r24, 0xEA	; 234
    1a02:	92 e0       	ldi	r25, 0x02	; 2
    1a04:	9f 93       	push	r25
    1a06:	8f 93       	push	r24
    1a08:	8c ed       	ldi	r24, 0xDC	; 220
    1a0a:	92 e0       	ldi	r25, 0x02	; 2
    1a0c:	9f 93       	push	r25
    1a0e:	8f 93       	push	r24
		os_leaveCriticalSection();
    1a10:	70 db       	rcall	.-2336   	; 0x10f2 <terminal_log_printf_p>
    1a12:	32 df       	rcall	.-412    	; 0x1878 <os_leaveCriticalSection>
		return INVALID_PROCESS;
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	1f ef       	ldi	r17, 0xFF	; 255
    1a1e:	6b c0       	rjmp	.+214    	; 0x1af6 <os_exec+0x13a>
		os_leaveCriticalSection();
		return INVALID_PROCESS;
	}

	// 4. Save ProgramID and the process' state (and some more)
	os_processes[free_slot].progID = programID;
    1a20:	8e 01       	movw	r16, r28
    1a22:	00 0f       	add	r16, r16
    1a24:	11 1f       	adc	r17, r17
    1a26:	0c 0f       	add	r16, r28
    1a28:	1d 1f       	adc	r17, r29
    1a2a:	00 0f       	add	r16, r16
    1a2c:	11 1f       	adc	r17, r17
    1a2e:	01 5e       	subi	r16, 0xE1	; 225
    1a30:	1b 4f       	sbci	r17, 0xFB	; 251
    1a32:	d8 01       	movw	r26, r16
    1a34:	ec 92       	st	X, r14
	os_processes[free_slot].state = OS_PS_READY;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	11 96       	adiw	r26, 0x01	; 1
    1a3a:	8c 93       	st	X, r24
    1a3c:	11 97       	sbiw	r26, 0x01	; 1
	os_processes[free_slot].priority = priority;
    1a3e:	14 96       	adiw	r26, 0x04	; 4
    1a40:	fc 92       	st	X, r15
    1a42:	14 97       	sbiw	r26, 0x04	; 4

	// Initialize the stack pointer
	os_processes[free_slot].sp.as_int = PROCESS_STACK_BOTTOM(free_slot);
    1a44:	87 e6       	ldi	r24, 0x67	; 103
    1a46:	93 e0       	ldi	r25, 0x03	; 3
    1a48:	c8 9f       	mul	r28, r24
    1a4a:	90 01       	movw	r18, r0
    1a4c:	c9 9f       	mul	r28, r25
    1a4e:	30 0d       	add	r19, r0
    1a50:	d8 9f       	mul	r29, r24
    1a52:	30 0d       	add	r19, r0
    1a54:	11 24       	eor	r1, r1
    1a56:	8f e1       	ldi	r24, 0x1F	; 31
    1a58:	91 e2       	ldi	r25, 0x21	; 33
    1a5a:	7c 01       	movw	r14, r24
    1a5c:	e2 1a       	sub	r14, r18
    1a5e:	f3 0a       	sbc	r15, r19

	// 5.1 push the address of the function to the stack
	// Note for task 2: use address of os_dispatcher instead

	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)(addressOfProgram(function));
    1a60:	c7 01       	movw	r24, r14
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	13 96       	adiw	r26, 0x03	; 3
    1a66:	9c 93       	st	X, r25
    1a68:	8e 93       	st	-X, r24
    1a6a:	12 97       	sbiw	r26, 0x02	; 2
    1a6c:	81 e2       	ldi	r24, 0x21	; 33
    1a6e:	9f e0       	ldi	r25, 0x0F	; 15
    1a70:	a8 de       	rcall	.-688    	; 0x17c2 <addressOfProgram>
    1a72:	f7 01       	movw	r30, r14
    1a74:	60 83       	st	Z, r22
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 8));
    1a76:	d8 01       	movw	r26, r16
    1a78:	12 96       	adiw	r26, 0x02	; 2
    1a7a:	ed 91       	ld	r30, X+
    1a7c:	fc 91       	ld	r31, X
    1a7e:	13 97       	sbiw	r26, 0x03	; 3
    1a80:	9f 01       	movw	r18, r30
    1a82:	21 50       	subi	r18, 0x01	; 1
    1a84:	31 09       	sbc	r19, r1
    1a86:	13 96       	adiw	r26, 0x03	; 3
    1a88:	3c 93       	st	X, r19
    1a8a:	2e 93       	st	-X, r18
    1a8c:	12 97       	sbiw	r26, 0x02	; 2
    1a8e:	70 83       	st	Z, r23
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 16));
    1a90:	12 96       	adiw	r26, 0x02	; 2
    1a92:	ed 91       	ld	r30, X+
    1a94:	fc 91       	ld	r31, X
    1a96:	13 97       	sbiw	r26, 0x03	; 3
    1a98:	9f 01       	movw	r18, r30
    1a9a:	21 50       	subi	r18, 0x01	; 1
    1a9c:	31 09       	sbc	r19, r1
    1a9e:	13 96       	adiw	r26, 0x03	; 3
    1aa0:	3c 93       	st	X, r19
    1aa2:	2e 93       	st	-X, r18
    1aa4:	12 97       	sbiw	r26, 0x02	; 2
    1aa6:	80 83       	st	Z, r24

	// 5.2 leave space on the process stack for register entries
	for (uint8_t i = 0; i < 33; i++)
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	12 c0       	rjmp	.+36     	; 0x1ad0 <os_exec+0x114>
	{
		*os_processes[free_slot].sp.as_ptr-- = 0;
    1aac:	fe 01       	movw	r30, r28
    1aae:	ee 0f       	add	r30, r30
    1ab0:	ff 1f       	adc	r31, r31
    1ab2:	ec 0f       	add	r30, r28
    1ab4:	fd 1f       	adc	r31, r29
    1ab6:	ee 0f       	add	r30, r30
    1ab8:	ff 1f       	adc	r31, r31
    1aba:	e1 5e       	subi	r30, 0xE1	; 225
    1abc:	fb 4f       	sbci	r31, 0xFB	; 251
    1abe:	a2 81       	ldd	r26, Z+2	; 0x02
    1ac0:	b3 81       	ldd	r27, Z+3	; 0x03
    1ac2:	9d 01       	movw	r18, r26
    1ac4:	21 50       	subi	r18, 0x01	; 1
    1ac6:	31 09       	sbc	r19, r1
    1ac8:	33 83       	std	Z+3, r19	; 0x03
    1aca:	22 83       	std	Z+2, r18	; 0x02
    1acc:	1c 92       	st	X, r1
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)(addressOfProgram(function));
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 8));
	*os_processes[free_slot].sp.as_ptr-- = (uint8_t)((addressOfProgram(function) >> 16));

	// 5.2 leave space on the process stack for register entries
	for (uint8_t i = 0; i < 33; i++)
    1ace:	8f 5f       	subi	r24, 0xFF	; 255
    1ad0:	81 32       	cpi	r24, 0x21	; 33
	{
		*os_processes[free_slot].sp.as_ptr-- = 0;
	}

	// For task 2: Save the stack checksum
	os_processes[free_slot].checksum = os_getStackChecksum(free_slot);
    1ad2:	60 f3       	brcs	.-40     	; 0x1aac <os_exec+0xf0>
    1ad4:	1c 2f       	mov	r17, r28
    1ad6:	8c 2f       	mov	r24, r28
    1ad8:	38 df       	rcall	.-400    	; 0x194a <os_getStackChecksum>
    1ada:	fe 01       	movw	r30, r28
    1adc:	ee 0f       	add	r30, r30
    1ade:	ff 1f       	adc	r31, r31
    1ae0:	ec 0f       	add	r30, r28
    1ae2:	fd 1f       	adc	r31, r29
    1ae4:	ee 0f       	add	r30, r30
    1ae6:	ff 1f       	adc	r31, r31
    1ae8:	e1 5e       	subi	r30, 0xE1	; 225

	os_resetProcessSchedulingInformation(os_getSchedulingStrategy(), free_slot);
    1aea:	fb 4f       	sbci	r31, 0xFB	; 251
    1aec:	85 83       	std	Z+5, r24	; 0x05
    1aee:	a2 de       	rcall	.-700    	; 0x1834 <os_getSchedulingStrategy>
    1af0:	6c 2f       	mov	r22, r28
    1af2:	fe d1       	rcall	.+1020   	; 0x1ef0 <os_resetProcessSchedulingInformation>

	// 6. Leave Critical Section
	os_leaveCriticalSection();
    1af4:	c1 de       	rcall	.-638    	; 0x1878 <os_leaveCriticalSection>
    1af6:	81 2f       	mov	r24, r17
	return free_slot;
	
	
	

}
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	ff 90       	pop	r15
    1b02:	ef 90       	pop	r14
    1b04:	08 95       	ret

00001b06 <os_initScheduler>:
    1b06:	cf 93       	push	r28
 *  In order for the scheduler to work properly, it must have the chance to
 *  initialize its internal data-structures and register and start the idle
 *  program.
 */
void os_initScheduler(void)
{
    1b08:	df 93       	push	r29
	// 1.
	// As the processes are just being initialized, all slots should be unused so far.
	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	0b c0       	rjmp	.+22     	; 0x1b26 <os_initScheduler+0x20>
	{
		os_processes[i].state = OS_PS_UNUSED;
    1b10:	fc 01       	movw	r30, r24
    1b12:	ee 0f       	add	r30, r30
    1b14:	ff 1f       	adc	r31, r31
    1b16:	e8 0f       	add	r30, r24
    1b18:	f9 1f       	adc	r31, r25
    1b1a:	ee 0f       	add	r30, r30
    1b1c:	ff 1f       	adc	r31, r31
    1b1e:	e1 5e       	subi	r30, 0xE1	; 225
    1b20:	fb 4f       	sbci	r31, 0xFB	; 251
    1b22:	11 82       	std	Z+1, r1	; 0x01
 */
void os_initScheduler(void)
{
	// 1.
	// As the processes are just being initialized, all slots should be unused so far.
	for (int i = 0; i < MAX_NUMBER_OF_PROCESSES; i++)
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	88 30       	cpi	r24, 0x08	; 8
    1b28:	91 05       	cpc	r25, r1
    1b2a:	94 f3       	brlt	.-28     	; 0x1b10 <os_initScheduler+0xa>
    1b2c:	c0 e0       	ldi	r28, 0x00	; 0
    1b2e:	d0 e0       	ldi	r29, 0x00	; 0
    1b30:	08 c0       	rjmp	.+16     	; 0x1b42 <os_initScheduler+0x3c>
	}

	// Start all registered programs, which a flagged as autostart (i.e. call os_exec on them).
	for (int i = 0; i < MAX_NUMBER_OF_PROGRAMS; i++)
	{
		if (os_checkAutostartProgram(i))
    1b32:	8c 2f       	mov	r24, r28
    1b34:	4b de       	rcall	.-874    	; 0x17cc <os_checkAutostartProgram>
    1b36:	88 23       	and	r24, r24
    1b38:	19 f0       	breq	.+6      	; 0x1b40 <os_initScheduler+0x3a>
		{
			os_exec(i, DEFAULT_PRIORITY);
    1b3a:	62 e0       	ldi	r22, 0x02	; 2
    1b3c:	8c 2f       	mov	r24, r28
    1b3e:	3e df       	rcall	.-388    	; 0x19bc <os_exec>
	{
		os_processes[i].state = OS_PS_UNUSED;
	}

	// Start all registered programs, which a flagged as autostart (i.e. call os_exec on them).
	for (int i = 0; i < MAX_NUMBER_OF_PROGRAMS; i++)
    1b40:	21 96       	adiw	r28, 0x01	; 1
    1b42:	c0 31       	cpi	r28, 0x10	; 16
    1b44:	d1 05       	cpc	r29, r1
    1b46:	ac f3       	brlt	.-22     	; 0x1b32 <os_initScheduler+0x2c>
		{
			os_exec(i, DEFAULT_PRIORITY);
		}

	}
	os_resetSchedulingInformation(currSchedStrat);
    1b48:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <currSchedStrat>
    1b4c:	f9 d1       	rcall	.+1010   	; 0x1f40 <os_resetSchedulingInformation>

	delayMs(3000);
    1b4e:	88 eb       	ldi	r24, 0xB8	; 184
    1b50:	9b e0       	ldi	r25, 0x0B	; 11
    1b52:	46 dd       	rcall	.-1396   	; 0x15e0 <delayMs>
    1b54:	20 91 4f 04 	lds	r18, 0x044F	; 0x80044f <os_programs>

	// Uncomment:
	assert(os_programs[0] != NULL, "There is no idle proc");
    1b58:	30 91 50 04 	lds	r19, 0x0450	; 0x800450 <os_programs+0x1>
    1b5c:	86 ec       	ldi	r24, 0xC6	; 198
    1b5e:	92 e0       	ldi	r25, 0x02	; 2
    1b60:	9f 93       	push	r25
    1b62:	8f 93       	push	r24
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	23 2b       	or	r18, r19
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <os_initScheduler+0x66>
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	8f 93       	push	r24
    1b6e:	65 dd       	rcall	.-1334   	; 0x163a <assertPstr>
    1b70:	0f 90       	pop	r0
}
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	df 91       	pop	r29
    1b78:	cf 91       	pop	r28
    1b7a:	08 95       	ret

00001b7c <os_isStackInBounds>:
    1b7c:	8f 92       	push	r8
 *
 *  \param pid The ID of the process for which the stack pointer has to be checked.
 *  \return True if the stack pointer is still in its bounds.
 */
bool os_isStackInBounds(process_id_t pid)
{
    1b7e:	9f 92       	push	r9
    1b80:	af 92       	push	r10
    1b82:	bf 92       	push	r11
    1b84:	cf 92       	push	r12
    1b86:	df 92       	push	r13
    1b88:	ef 92       	push	r14
    1b8a:	ff 92       	push	r15
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
	if (os_processes[pid].sp.as_int > PROCESS_STACK_BOTTOM(pid) || os_processes[pid].sp.as_int < PROCESS_STACK_BOTTOM(pid) - STACK_SIZE_PROC)
    1b90:	48 2f       	mov	r20, r24
    1b92:	50 e0       	ldi	r21, 0x00	; 0
    1b94:	fa 01       	movw	r30, r20
    1b96:	ee 0f       	add	r30, r30
    1b98:	ff 1f       	adc	r31, r31
    1b9a:	e4 0f       	add	r30, r20
    1b9c:	f5 1f       	adc	r31, r21
    1b9e:	ee 0f       	add	r30, r30
    1ba0:	ff 1f       	adc	r31, r31
    1ba2:	e1 5e       	subi	r30, 0xE1	; 225
    1ba4:	fb 4f       	sbci	r31, 0xFB	; 251
    1ba6:	c2 80       	ldd	r12, Z+2	; 0x02
    1ba8:	d3 80       	ldd	r13, Z+3	; 0x03
    1baa:	e1 2c       	mov	r14, r1
    1bac:	f1 2c       	mov	r15, r1
    1bae:	9a 01       	movw	r18, r20
    1bb0:	a7 e6       	ldi	r26, 0x67	; 103
    1bb2:	b3 e0       	ldi	r27, 0x03	; 3
    1bb4:	91 d3       	rcall	.+1826   	; 0x22d8 <__umulhisi3>
    1bb6:	0f e1       	ldi	r16, 0x1F	; 31
    1bb8:	11 e2       	ldi	r17, 0x21	; 33
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	06 1b       	sub	r16, r22
    1bc0:	17 0b       	sbc	r17, r23
    1bc2:	28 0b       	sbc	r18, r24
    1bc4:	39 0b       	sbc	r19, r25
    1bc6:	0c 15       	cp	r16, r12
    1bc8:	1d 05       	cpc	r17, r13
    1bca:	2e 05       	cpc	r18, r14
    1bcc:	3f 05       	cpc	r19, r15
    1bce:	88 f0       	brcs	.+34     	; 0x1bf2 <os_isStackInBounds+0x76>
    1bd0:	08 eb       	ldi	r16, 0xB8	; 184
    1bd2:	1d e1       	ldi	r17, 0x1D	; 29
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	48 01       	movw	r8, r16
    1bda:	59 01       	movw	r10, r18
    1bdc:	86 1a       	sub	r8, r22
    1bde:	97 0a       	sbc	r9, r23
    1be0:	a8 0a       	sbc	r10, r24
    1be2:	b9 0a       	sbc	r11, r25
    1be4:	c8 14       	cp	r12, r8
    1be6:	d9 04       	cpc	r13, r9
    1be8:	ea 04       	cpc	r14, r10
    1bea:	fb 04       	cpc	r15, r11
    1bec:	20 f4       	brcc	.+8      	; 0x1bf6 <os_isStackInBounds+0x7a>
	{
		return false;
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	03 c0       	rjmp	.+6      	; 0x1bf8 <os_isStackInBounds+0x7c>
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	01 c0       	rjmp	.+2      	; 0x1bf8 <os_isStackInBounds+0x7c>
	}
	return true;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
}
    1bf8:	1f 91       	pop	r17
    1bfa:	0f 91       	pop	r16
    1bfc:	ff 90       	pop	r15
    1bfe:	ef 90       	pop	r14
    1c00:	df 90       	pop	r13
    1c02:	cf 90       	pop	r12
    1c04:	bf 90       	pop	r11
    1c06:	af 90       	pop	r10
    1c08:	9f 90       	pop	r9
    1c0a:	8f 90       	pop	r8
    1c0c:	08 95       	ret

00001c0e <__vector_13>:
ISR(TIMER2_COMPA_vect)
{
	// 1. Is implicitly done

	// 2. Save runtime-context of recently current process using the well-known macro
	saveContext();
    1c0e:	ff 93       	push	r31
    1c10:	ff b7       	in	r31, 0x3f	; 63
    1c12:	ff 93       	push	r31
    1c14:	ef 93       	push	r30
    1c16:	df 93       	push	r29
    1c18:	cf 93       	push	r28
    1c1a:	bf 93       	push	r27
    1c1c:	af 93       	push	r26
    1c1e:	9f 93       	push	r25
    1c20:	8f 93       	push	r24
    1c22:	7f 93       	push	r23
    1c24:	6f 93       	push	r22
    1c26:	5f 93       	push	r21
    1c28:	4f 93       	push	r20
    1c2a:	3f 93       	push	r19
    1c2c:	2f 93       	push	r18
    1c2e:	1f 93       	push	r17
    1c30:	0f 93       	push	r16
    1c32:	ff 92       	push	r15
    1c34:	ef 92       	push	r14
    1c36:	df 92       	push	r13
    1c38:	cf 92       	push	r12
    1c3a:	bf 92       	push	r11
    1c3c:	af 92       	push	r10
    1c3e:	9f 92       	push	r9
    1c40:	8f 92       	push	r8
    1c42:	7f 92       	push	r7
    1c44:	6f 92       	push	r6
    1c46:	5f 92       	push	r5
    1c48:	4f 92       	push	r4
    1c4a:	3f 92       	push	r3
    1c4c:	2f 92       	push	r2
    1c4e:	1f 92       	push	r1
    1c50:	11 24       	eor	r1, r1
    1c52:	0f 92       	push	r0

	// 3. Save stack pointer of current process
	os_processes[currentProc].sp.as_int = SP;
    1c54:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <currentProc>
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	2d b7       	in	r18, 0x3d	; 61
    1c5c:	3e b7       	in	r19, 0x3e	; 62
    1c5e:	fc 01       	movw	r30, r24
    1c60:	ee 0f       	add	r30, r30
    1c62:	ff 1f       	adc	r31, r31
    1c64:	e8 0f       	add	r30, r24
    1c66:	f9 1f       	adc	r31, r25
    1c68:	ee 0f       	add	r30, r30
    1c6a:	ff 1f       	adc	r31, r31
    1c6c:	e1 5e       	subi	r30, 0xE1	; 225
    1c6e:	fb 4f       	sbci	r31, 0xFB	; 251
    1c70:	33 83       	std	Z+3, r19	; 0x03
    1c72:	22 83       	std	Z+2, r18	; 0x02

	// 4. Set stack pointer onto ISR-Stack
	SP = BOTTOM_OF_ISR_STACK;
    1c74:	8f ed       	ldi	r24, 0xDF	; 223
    1c76:	91 e2       	ldi	r25, 0x21	; 33
    1c78:	9e bf       	out	0x3e, r25	; 62
    1c7a:	8d bf       	out	0x3d, r24	; 61

	// 5. Set process state to ready
	if (os_processes[currentProc].state == OS_PS_RUNNING)
    1c7c:	10 91 19 04 	lds	r17, 0x0419	; 0x800419 <currentProc>
    1c80:	c1 2f       	mov	r28, r17
    1c82:	d0 e0       	ldi	r29, 0x00	; 0
    1c84:	fe 01       	movw	r30, r28
    1c86:	ee 0f       	add	r30, r30
    1c88:	ff 1f       	adc	r31, r31
    1c8a:	ec 0f       	add	r30, r28
    1c8c:	fd 1f       	adc	r31, r29
    1c8e:	ee 0f       	add	r30, r30
    1c90:	ff 1f       	adc	r31, r31
    1c92:	e1 5e       	subi	r30, 0xE1	; 225
    1c94:	fb 4f       	sbci	r31, 0xFB	; 251
    1c96:	81 81       	ldd	r24, Z+1	; 0x01
    1c98:	82 30       	cpi	r24, 0x02	; 2
    1c9a:	59 f4       	brne	.+22     	; 0x1cb2 <__vector_13+0xa4>
	{
		os_processes[currentProc].state = OS_PS_READY;
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	ee 0f       	add	r30, r30
    1ca0:	ff 1f       	adc	r31, r31
    1ca2:	ec 0f       	add	r30, r28
    1ca4:	fd 1f       	adc	r31, r29
    1ca6:	ee 0f       	add	r30, r30
    1ca8:	ff 1f       	adc	r31, r31
    1caa:	e1 5e       	subi	r30, 0xE1	; 225
    1cac:	fb 4f       	sbci	r31, 0xFB	; 251
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	81 83       	std	Z+1, r24	; 0x01
	}
	// Note for task 2: Only set to ready if it is currently running because of os_kill

	// In task 2: Save the processes stack checksum
	os_processes[currentProc].checksum = os_getStackChecksum(currentProc);
    1cb2:	81 2f       	mov	r24, r17
    1cb4:	4a de       	rcall	.-876    	; 0x194a <os_getStackChecksum>
    1cb6:	9e 01       	movw	r18, r28
    1cb8:	22 0f       	add	r18, r18
    1cba:	33 1f       	adc	r19, r19
    1cbc:	c2 0f       	add	r28, r18
    1cbe:	d3 1f       	adc	r29, r19
    1cc0:	cc 0f       	add	r28, r28
    1cc2:	dd 1f       	adc	r29, r29
    1cc4:	c1 5e       	subi	r28, 0xE1	; 225
    1cc6:	db 4f       	sbci	r29, 0xFB	; 251
    1cc8:	8d 83       	std	Y+5, r24	; 0x05

	// In task 2: Check if the stack pointer has an invalid value
	if (!os_isStackInBounds(currentProc))
    1cca:	81 2f       	mov	r24, r17
    1ccc:	57 df       	rcall	.-338    	; 0x1b7c <os_isStackInBounds>
    1cce:	81 11       	cpse	r24, r1
    1cd0:	0b c0       	rjmp	.+22     	; 0x1ce8 <__vector_13+0xda>
	{
		os_error("Stack pointer out of bounds in process %d", currentProc);
    1cd2:	1f 92       	push	r1
    1cd4:	1f 93       	push	r17
    1cd6:	82 e2       	ldi	r24, 0x22	; 34
    1cd8:	93 e0       	ldi	r25, 0x03	; 3
    1cda:	9f 93       	push	r25
    1cdc:	8f 93       	push	r24
    1cde:	28 dd       	rcall	.-1456   	; 0x1730 <os_errorPstr>
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
	}

	// 6. Find next process using the set scheduling strategy

	switch (os_getSchedulingStrategy())
    1ce6:	0f 90       	pop	r0
    1ce8:	a5 dd       	rcall	.-1206   	; 0x1834 <os_getSchedulingStrategy>
    1cea:	88 23       	and	r24, r24
    1cec:	19 f0       	breq	.+6      	; 0x1cf4 <__vector_13+0xe6>
    1cee:	81 30       	cpi	r24, 0x01	; 1
    1cf0:	49 f0       	breq	.+18     	; 0x1d04 <__vector_13+0xf6>
    1cf2:	10 c0       	rjmp	.+32     	; 0x1d14 <__vector_13+0x106>
	{
		case OS_SS_ROUND_ROBIN:
		currentProc = os_scheduler_RoundRobin(os_processes, currentProc);
    1cf4:	60 91 19 04 	lds	r22, 0x0419	; 0x800419 <currentProc>
    1cf8:	8f e1       	ldi	r24, 0x1F	; 31
    1cfa:	94 e0       	ldi	r25, 0x04	; 4
    1cfc:	bf d0       	rcall	.+382    	; 0x1e7c <os_scheduler_RoundRobin>
    1cfe:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <currentProc>
		break;
		case OS_SS_DYNAMIC_PRIORITY_ROUND_ROBIN:
		currentProc = os_scheduler_DynamicPriorityRoundRobin(os_processes, currentProc);
    1d02:	0a c0       	rjmp	.+20     	; 0x1d18 <__vector_13+0x10a>
    1d04:	60 91 19 04 	lds	r22, 0x0419	; 0x800419 <currentProc>
    1d08:	8f e1       	ldi	r24, 0x1F	; 31
    1d0a:	94 e0       	ldi	r25, 0x04	; 4
    1d0c:	43 d1       	rcall	.+646    	; 0x1f94 <os_scheduler_DynamicPriorityRoundRobin>
    1d0e:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <currentProc>
		break;
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <__vector_13+0x10a>
		default:
		currentProc = 0;
    1d14:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <currentProc>
		break;
	}

	// In task 2: Check if the checksum changed since the process was interrupted
	if (os_processes[currentProc].checksum != os_getStackChecksum(currentProc))
    1d18:	c0 91 19 04 	lds	r28, 0x0419	; 0x800419 <currentProc>
    1d1c:	8c 2f       	mov	r24, r28
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	fc 01       	movw	r30, r24
    1d22:	ee 0f       	add	r30, r30
    1d24:	ff 1f       	adc	r31, r31
    1d26:	e8 0f       	add	r30, r24
    1d28:	f9 1f       	adc	r31, r25
    1d2a:	ee 0f       	add	r30, r30
    1d2c:	ff 1f       	adc	r31, r31
    1d2e:	e1 5e       	subi	r30, 0xE1	; 225
    1d30:	fb 4f       	sbci	r31, 0xFB	; 251
    1d32:	d5 81       	ldd	r29, Z+5	; 0x05
    1d34:	8c 2f       	mov	r24, r28
    1d36:	09 de       	rcall	.-1006   	; 0x194a <os_getStackChecksum>
    1d38:	d8 17       	cp	r29, r24
    1d3a:	59 f0       	breq	.+22     	; 0x1d52 <__vector_13+0x144>
	{
		os_error("Checksum mismatch in process %d", currentProc);
    1d3c:	1f 92       	push	r1
    1d3e:	cf 93       	push	r28
    1d40:	82 e0       	ldi	r24, 0x02	; 2
    1d42:	93 e0       	ldi	r25, 0x03	; 3
    1d44:	9f 93       	push	r25
    1d46:	8f 93       	push	r24
    1d48:	f3 dc       	rcall	.-1562   	; 0x1730 <os_errorPstr>
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <currentProc>
	}

	// 7. Set the state of the now chosen process to running
	os_processes[currentProc].state = OS_PS_RUNNING;
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	fc 01       	movw	r30, r24
    1d5a:	ee 0f       	add	r30, r30
    1d5c:	ff 1f       	adc	r31, r31
    1d5e:	df 01       	movw	r26, r30
    1d60:	a8 0f       	add	r26, r24
    1d62:	b9 1f       	adc	r27, r25
    1d64:	aa 0f       	add	r26, r26
    1d66:	bb 1f       	adc	r27, r27
    1d68:	a1 5e       	subi	r26, 0xE1	; 225
    1d6a:	bb 4f       	sbci	r27, 0xFB	; 251
    1d6c:	22 e0       	ldi	r18, 0x02	; 2
    1d6e:	11 96       	adiw	r26, 0x01	; 1
    1d70:	2c 93       	st	X, r18
    1d72:	11 97       	sbiw	r26, 0x01	; 1
    1d74:	fd 01       	movw	r30, r26

	// 8. Set SP to where it was when the resuming process was interrupted
	SP = os_processes[currentProc].sp.as_int;
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	9e bf       	out	0x3e, r25	; 62
    1d7c:	8d bf       	out	0x3d, r24	; 61
    1d7e:	0f 90       	pop	r0

	// 9. Restore runtime context using the well-known macro.
	// This will cause the process to continue where it was interrupted.
	// Any code after the macro won't be executed as it has an reti() instruction at the end.
	restoreContext();
    1d80:	1f 90       	pop	r1
    1d82:	2f 90       	pop	r2
    1d84:	3f 90       	pop	r3
    1d86:	4f 90       	pop	r4
    1d88:	5f 90       	pop	r5
    1d8a:	6f 90       	pop	r6
    1d8c:	7f 90       	pop	r7
    1d8e:	8f 90       	pop	r8
    1d90:	9f 90       	pop	r9
    1d92:	af 90       	pop	r10
    1d94:	bf 90       	pop	r11
    1d96:	cf 90       	pop	r12
    1d98:	df 90       	pop	r13
    1d9a:	ef 90       	pop	r14
    1d9c:	ff 90       	pop	r15
    1d9e:	0f 91       	pop	r16
    1da0:	1f 91       	pop	r17
    1da2:	2f 91       	pop	r18
    1da4:	3f 91       	pop	r19
    1da6:	4f 91       	pop	r20
    1da8:	5f 91       	pop	r21
    1daa:	6f 91       	pop	r22
    1dac:	7f 91       	pop	r23
    1dae:	8f 91       	pop	r24
    1db0:	9f 91       	pop	r25
    1db2:	af 91       	pop	r26
    1db4:	bf 91       	pop	r27
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	ef 91       	pop	r30
    1dbc:	ff 91       	pop	r31
    1dbe:	ff bf       	out	0x3f, r31	; 63
    1dc0:	ff 91       	pop	r31
    1dc2:	18 95       	reti

00001dc4 <os_yield>:
    1dc4:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <criticalSectionCount>
/*!
 * Triggers scheduler to schedule another process.
 */
void os_yield()
{
	if (criticalSectionCount != 0)
    1dc8:	81 11       	cpse	r24, r1
    1dca:	04 c0       	rjmp	.+8      	; 0x1dd4 <os_yield+0x10>
	{
		return;
	}
	cli();
    1dcc:	f8 94       	cli
	TCNT2 = 0;
    1dce:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
	TIMER2_COMPA_vect();
    1dd2:	1d cf       	rjmp	.-454    	; 0x1c0e <__vector_13>
    1dd4:	08 95       	ret

00001dd6 <os_kill>:
 *
 *  \param pid The process id of the process to be killed
 *  \return True, if the killing process was successful
 */
bool os_kill(process_id_t pid)
{
    1dd6:	cf 93       	push	r28
	
	// If the pid is invalid, return false
	if (pid >= MAX_NUMBER_OF_PROCESSES || pid == 0 || os_processes[pid].state == OS_PS_UNUSED)
    1dd8:	9f ef       	ldi	r25, 0xFF	; 255
    1dda:	98 0f       	add	r25, r24
    1ddc:	97 30       	cpi	r25, 0x07	; 7
    1dde:	60 f5       	brcc	.+88     	; 0x1e38 <os_kill+0x62>
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	f9 01       	movw	r30, r18
    1de6:	ee 0f       	add	r30, r30
    1de8:	ff 1f       	adc	r31, r31
    1dea:	e2 0f       	add	r30, r18
    1dec:	f3 1f       	adc	r31, r19
    1dee:	ee 0f       	add	r30, r30
    1df0:	ff 1f       	adc	r31, r31
    1df2:	e1 5e       	subi	r30, 0xE1	; 225
    1df4:	fb 4f       	sbci	r31, 0xFB	; 251
    1df6:	91 81       	ldd	r25, Z+1	; 0x01
    1df8:	99 23       	and	r25, r25
    1dfa:	01 f1       	breq	.+64     	; 0x1e3c <os_kill+0x66>
    1dfc:	c8 2f       	mov	r28, r24
	{
		return false;
	}
	os_enterCriticalSection();
    1dfe:	1d dd       	rcall	.-1478   	; 0x183a <os_enterCriticalSection>

	os_getProcessSlot(pid)->state = OS_PS_UNUSED;
    1e00:	8c 2f       	mov	r24, r28
    1e02:	04 dd       	rcall	.-1528   	; 0x180c <os_getProcessSlot>
    1e04:	fc 01       	movw	r30, r24

	// Tidy up the scheduler
	// (Process needs to be removed from ready queue of DPRR)

	os_resetProcessSchedulingInformation(os_getSchedulingStrategy(), pid);
    1e06:	11 82       	std	Z+1, r1	; 0x01
    1e08:	15 dd       	rcall	.-1494   	; 0x1834 <os_getSchedulingStrategy>
    1e0a:	6c 2f       	mov	r22, r28

	// If the process kills itself, we mustn't return
	if (os_getCurrentProc() == pid)
    1e0c:	71 d0       	rcall	.+226    	; 0x1ef0 <os_resetProcessSchedulingInformation>
    1e0e:	0f dd       	rcall	.-1506   	; 0x182e <os_getCurrentProc>
    1e10:	c8 13       	cpse	r28, r24
	{
		criticalSectionCount = 1;
    1e12:	0e c0       	rjmp	.+28     	; 0x1e30 <os_kill+0x5a>
    1e14:	81 e0       	ldi	r24, 0x01	; 1
		os_leaveCriticalSection();
    1e16:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <criticalSectionCount>
		sei();
		os_yield();
    1e1a:	2e dd       	rcall	.-1444   	; 0x1878 <os_leaveCriticalSection>
    1e1c:	78 94       	sei
		while (1)
			printf("Penis");
    1e1e:	d2 df       	rcall	.-92     	; 0x1dc4 <os_yield>
    1e20:	89 e2       	ldi	r24, 0x29	; 41
    1e22:	92 e0       	ldi	r25, 0x02	; 2
    1e24:	9f 93       	push	r25
    1e26:	8f 93       	push	r24
    1e28:	8d d2       	rcall	.+1306   	; 0x2344 <printf>
    1e2a:	0f 90       	pop	r0
	}
	os_leaveCriticalSection();
    1e2c:	0f 90       	pop	r0
    1e2e:	f8 cf       	rjmp	.-16     	; 0x1e20 <os_kill+0x4a>
	os_yield();
    1e30:	23 dd       	rcall	.-1466   	; 0x1878 <os_leaveCriticalSection>
    1e32:	c8 df       	rcall	.-112    	; 0x1dc4 <os_yield>

	return true;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	03 c0       	rjmp	.+6      	; 0x1e3e <os_kill+0x68>
{
	
	// If the pid is invalid, return false
	if (pid >= MAX_NUMBER_OF_PROCESSES || pid == 0 || os_processes[pid].state == OS_PS_UNUSED)
	{
		return false;
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <os_kill+0x68>
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
	os_leaveCriticalSection();
	os_yield();

	return true;

}
    1e3e:	cf 91       	pop	r28
    1e40:	08 95       	ret

00001e42 <os_dispatcher>:
 * This wrapper enables the possibility to perform a few necessary steps after the actual process
 * function has finished.
 */
void os_dispatcher()
{
	process_id_t currentProc = os_getCurrentProc();
    1e42:	f5 dc       	rcall	.-1558   	; 0x182e <os_getCurrentProc>
    1e44:	c8 2f       	mov	r28, r24
	program_t *function = os_lookupProgramFunction(os_processes[currentProc].progID);
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	fc 01       	movw	r30, r24
    1e4a:	ee 0f       	add	r30, r30
    1e4c:	ff 1f       	adc	r31, r31
    1e4e:	e8 0f       	add	r30, r24
    1e50:	f9 1f       	adc	r31, r25
    1e52:	ee 0f       	add	r30, r30
    1e54:	ff 1f       	adc	r31, r31
    1e56:	e1 5e       	subi	r30, 0xE1	; 225
    1e58:	fb 4f       	sbci	r31, 0xFB	; 251
    1e5a:	80 81       	ld	r24, Z
    1e5c:	c9 dc       	rcall	.-1646   	; 0x17f0 <os_lookupProgramFunction>
	
	if (function != NULL)
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	11 f0       	breq	.+4      	; 0x1e66 <os_dispatcher+0x24>
	function();
    1e62:	fc 01       	movw	r30, r24


	os_kill(currentProc);
    1e64:	19 95       	eicall
    1e66:	8c 2f       	mov	r24, r28


	os_yield();
    1e68:	b6 df       	rcall	.-148    	; 0x1dd6 <os_kill>
    1e6a:	ac df       	rcall	.-168    	; 0x1dc4 <os_yield>
	while (1)
		printf("Penis");
    1e6c:	89 e2       	ldi	r24, 0x29	; 41
    1e6e:	92 e0       	ldi	r25, 0x02	; 2
    1e70:	9f 93       	push	r25
    1e72:	8f 93       	push	r24
    1e74:	67 d2       	rcall	.+1230   	; 0x2344 <printf>
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	f8 cf       	rjmp	.-16     	; 0x1e6c <os_dispatcher+0x2a>

00001e7c <os_scheduler_RoundRobin>:
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the even strategy.
 */
process_id_t os_scheduler_RoundRobin(process_t const processes[], process_id_t current)
{
    1e7c:	cf 93       	push	r28
    1e7e:	df 93       	push	r29
    1e80:	ec 01       	movw	r28, r24

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process

	// Return resulting process id
	
	process_id_t currentProc = os_getCurrentProc();
    1e82:	d5 dc       	rcall	.-1622   	; 0x182e <os_getCurrentProc>

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	98 0f       	add	r25, r24
    1e88:	0f c0       	rjmp	.+30     	; 0x1ea8 <os_scheduler_RoundRobin+0x2c>
	{
		if (processes[i].state == OS_PS_READY)
    1e8a:	29 2f       	mov	r18, r25
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	f9 01       	movw	r30, r18
    1e90:	ee 0f       	add	r30, r30
    1e92:	ff 1f       	adc	r31, r31
    1e94:	e2 0f       	add	r30, r18
    1e96:	f3 1f       	adc	r31, r19
    1e98:	ee 0f       	add	r30, r30
    1e9a:	ff 1f       	adc	r31, r31
    1e9c:	ec 0f       	add	r30, r28
    1e9e:	fd 1f       	adc	r31, r29
    1ea0:	21 81       	ldd	r18, Z+1	; 0x01
    1ea2:	21 30       	cpi	r18, 0x01	; 1
    1ea4:	f9 f0       	breq	.+62     	; 0x1ee4 <os_scheduler_RoundRobin+0x68>
	// Return resulting process id
	
	process_id_t currentProc = os_getCurrentProc();

	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
    1ea6:	9f 5f       	subi	r25, 0xFF	; 255
    1ea8:	98 30       	cpi	r25, 0x08	; 8
    1eaa:	78 f3       	brcs	.-34     	; 0x1e8a <os_scheduler_RoundRobin+0xe>
    1eac:	91 e0       	ldi	r25, 0x01	; 1
    1eae:	0f c0       	rjmp	.+30     	; 0x1ece <os_scheduler_RoundRobin+0x52>
			return i; // Return resulting process id
		}
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
	{
		if (processes[i].state == OS_PS_READY)
    1eb0:	29 2f       	mov	r18, r25
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	f9 01       	movw	r30, r18
    1eb6:	ee 0f       	add	r30, r30
    1eb8:	ff 1f       	adc	r31, r31
    1eba:	e2 0f       	add	r30, r18
    1ebc:	f3 1f       	adc	r31, r19
    1ebe:	ee 0f       	add	r30, r30
    1ec0:	ff 1f       	adc	r31, r31
    1ec2:	ec 0f       	add	r30, r28
    1ec4:	fd 1f       	adc	r31, r29
    1ec6:	21 81       	ldd	r18, Z+1	; 0x01
    1ec8:	21 30       	cpi	r18, 0x01	; 1
    1eca:	71 f0       	breq	.+28     	; 0x1ee8 <os_scheduler_RoundRobin+0x6c>
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
		}
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
    1ecc:	9f 5f       	subi	r25, 0xFF	; 255
    1ece:	49 2f       	mov	r20, r25
    1ed0:	50 e0       	ldi	r21, 0x00	; 0
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	2f 5f       	subi	r18, 0xFF	; 255
    1ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eda:	42 17       	cp	r20, r18
    1edc:	53 07       	cpc	r21, r19
    1ede:	44 f3       	brlt	.-48     	; 0x1eb0 <os_scheduler_RoundRobin+0x34>
			return i; // Return resulting process id
		}
	}

	// If no process except idle process ready, choose idle process
	return 0; // Return resulting process id
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	03 c0       	rjmp	.+6      	; 0x1eea <os_scheduler_RoundRobin+0x6e>
	// Look for the next proc that is ready, there has to be at least one, this has been checked before. Don't choose 0 as it is the idle process
	for (uint8_t i = currentProc + 1; i < MAX_NUMBER_OF_PROCESSES; i++)
	{
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
    1ee4:	89 2f       	mov	r24, r25
    1ee6:	01 c0       	rjmp	.+2      	; 0x1eea <os_scheduler_RoundRobin+0x6e>
	}
	for (uint8_t i = 1; i < currentProc + 1; i++)
	{
		if (processes[i].state == OS_PS_READY)
		{
			return i; // Return resulting process id
    1ee8:	89 2f       	mov	r24, r25
	}

	// If no process except idle process ready, choose idle process
	return 0; // Return resulting process id

}
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	08 95       	ret

00001ef0 <os_resetProcessSchedulingInformation>:
 *
 * \param strategy The scheduling strategy currently in use
 * \param id  The process slot to erase state for
 */
void os_resetProcessSchedulingInformation(scheduling_strategy_t strategy, process_id_t id)
{
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
	
	if (strategy == OS_SS_ROUND_ROBIN)
    1ef4:	88 23       	and	r24, r24
    1ef6:	09 f1       	breq	.+66     	; 0x1f3a <os_resetProcessSchedulingInformation+0x4a>
    1ef8:	d6 2f       	mov	r29, r22
    1efa:	c0 e0       	ldi	r28, 0x00	; 0
    1efc:	09 c0       	rjmp	.+18     	; 0x1f10 <os_resetProcessSchedulingInformation+0x20>
		return;
	}

	for (uint8_t i = OS_PRIO_HIGH; i <= OS_PRIO_LOW; i++)
	{
		rq_remove(&(schedulingInfo.queues_ready[i]), id);
    1efe:	2b e0       	ldi	r18, 0x0B	; 11
    1f00:	c2 9f       	mul	r28, r18
    1f02:	c0 01       	movw	r24, r0
    1f04:	11 24       	eor	r1, r1
    1f06:	6d 2f       	mov	r22, r29
    1f08:	8f 58       	subi	r24, 0x8F	; 143
    1f0a:	9b 4f       	sbci	r25, 0xFB	; 251
    1f0c:	10 d8       	rcall	.-4064   	; 0xf2e <rq_remove>
	if (strategy == OS_SS_ROUND_ROBIN)
	{
		return;
	}

	for (uint8_t i = OS_PRIO_HIGH; i <= OS_PRIO_LOW; i++)
    1f0e:	cf 5f       	subi	r28, 0xFF	; 255
    1f10:	c3 30       	cpi	r28, 0x03	; 3
    1f12:	a8 f3       	brcs	.-22     	; 0x1efe <os_resetProcessSchedulingInformation+0xe>
	{
		rq_remove(&(schedulingInfo.queues_ready[i]), id);
	}
	if (os_getProcessSlot(id)->state == OS_PS_READY)
    1f14:	8d 2f       	mov	r24, r29
    1f16:	7a dc       	rcall	.-1804   	; 0x180c <os_getProcessSlot>
    1f18:	fc 01       	movw	r30, r24
    1f1a:	81 81       	ldd	r24, Z+1	; 0x01
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	69 f4       	brne	.+26     	; 0x1f3a <os_resetProcessSchedulingInformation+0x4a>
	rq_push(&(schedulingInfo.queues_ready[os_getProcessSlot(id)->priority]), id);
    1f20:	8d 2f       	mov	r24, r29
    1f22:	74 dc       	rcall	.-1816   	; 0x180c <os_getProcessSlot>
    1f24:	fc 01       	movw	r30, r24
    1f26:	84 81       	ldd	r24, Z+4	; 0x04
    1f28:	fb e0       	ldi	r31, 0x0B	; 11
    1f2a:	8f 9f       	mul	r24, r31
    1f2c:	c0 01       	movw	r24, r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	6d 2f       	mov	r22, r29
    1f32:	8f 58       	subi	r24, 0x8F	; 143
    1f34:	9b 4f       	sbci	r25, 0xFB	; 251
    1f36:	0e 94 72 07 	call	0xee4	; 0xee4 <rq_push>
}
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	08 95       	ret

00001f40 <os_resetSchedulingInformation>:
 *  and is done when the strategy is changed through os_setSchedulingStrategy
 *
 * \param strategy  The strategy to reset information for
 */
void os_resetSchedulingInformation(scheduling_strategy_t strategy)
{
    1f40:	cf 93       	push	r28
	 if (strategy == OS_SS_ROUND_ROBIN)
    1f42:	88 23       	and	r24, r24
    1f44:	29 f1       	breq	.+74     	; 0x1f90 <os_resetSchedulingInformation+0x50>
    1f46:	c0 e0       	ldi	r28, 0x00	; 0
    1f48:	09 c0       	rjmp	.+18     	; 0x1f5c <os_resetSchedulingInformation+0x1c>
	 else
	 //terminal_log_printf_p(PSTR("os_resetSchedulingInformation() -> "), PSTR("Resetting scheduling information\n"));

	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
	 {
		 rq_clear(&schedulingInfo.queues_ready[i]);
    1f4a:	2b e0       	ldi	r18, 0x0B	; 11
    1f4c:	c2 9f       	mul	r28, r18
    1f4e:	c0 01       	movw	r24, r0
    1f50:	11 24       	eor	r1, r1
    1f52:	8f 58       	subi	r24, 0x8F	; 143
    1f54:	9b 4f       	sbci	r25, 0xFB	; 251
    1f56:	0e 94 93 07 	call	0xf26	; 0xf26 <rq_clear>
		return;
	 }
	 else
	 //terminal_log_printf_p(PSTR("os_resetSchedulingInformation() -> "), PSTR("Resetting scheduling information\n"));

	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
    1f5a:	cf 5f       	subi	r28, 0xFF	; 255
    1f5c:	c3 30       	cpi	r28, 0x03	; 3
    1f5e:	a8 f3       	brcs	.-22     	; 0x1f4a <os_resetSchedulingInformation+0xa>
    1f60:	c1 e0       	ldi	r28, 0x01	; 1
    1f62:	14 c0       	rjmp	.+40     	; 0x1f8c <os_resetSchedulingInformation+0x4c>
		 rq_clear(&schedulingInfo.queues_ready[i]);
	 }

	 for (process_id_t pid = 1; pid < MAX_NUMBER_OF_PROCESSES; pid++)
	 {
		 if (os_getProcessSlot(pid)->state == OS_PS_READY)
    1f64:	8c 2f       	mov	r24, r28
    1f66:	52 dc       	rcall	.-1884   	; 0x180c <os_getProcessSlot>
    1f68:	fc 01       	movw	r30, r24
    1f6a:	81 81       	ldd	r24, Z+1	; 0x01
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	69 f4       	brne	.+26     	; 0x1f8a <os_resetSchedulingInformation+0x4a>
		 {
			 rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(pid)->priority], pid);
    1f70:	8c 2f       	mov	r24, r28
    1f72:	4c dc       	rcall	.-1896   	; 0x180c <os_getProcessSlot>
    1f74:	fc 01       	movw	r30, r24
    1f76:	84 81       	ldd	r24, Z+4	; 0x04
    1f78:	fb e0       	ldi	r31, 0x0B	; 11
    1f7a:	8f 9f       	mul	r24, r31
    1f7c:	c0 01       	movw	r24, r0
    1f7e:	11 24       	eor	r1, r1
    1f80:	6c 2f       	mov	r22, r28
    1f82:	8f 58       	subi	r24, 0x8F	; 143
    1f84:	9b 4f       	sbci	r25, 0xFB	; 251
    1f86:	0e 94 72 07 	call	0xee4	; 0xee4 <rq_push>
	 for (uint8_t i = 0; i <= OS_PRIO_LOW; i++)
	 {
		 rq_clear(&schedulingInfo.queues_ready[i]);
	 }

	 for (process_id_t pid = 1; pid < MAX_NUMBER_OF_PROCESSES; pid++)
    1f8a:	cf 5f       	subi	r28, 0xFF	; 255
    1f8c:	c8 30       	cpi	r28, 0x08	; 8
    1f8e:	50 f3       	brcs	.-44     	; 0x1f64 <os_resetSchedulingInformation+0x24>
		 if (os_getProcessSlot(pid)->state == OS_PS_READY)
		 {
			 rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(pid)->priority], pid);
		 }
	 }
}
    1f90:	cf 91       	pop	r28
    1f92:	08 95       	ret

00001f94 <os_scheduler_DynamicPriorityRoundRobin>:
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the dynamic priority round-robin strategy.
 */
process_id_t os_scheduler_DynamicPriorityRoundRobin(process_t const processes[], process_id_t current)
{
    1f94:	df 92       	push	r13
    1f96:	ef 92       	push	r14
    1f98:	ff 92       	push	r15
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	d6 2e       	mov	r13, r22

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    1fa4:	c0 e0       	ldi	r28, 0x00	; 0
    1fa6:	d0 e0       	ldi	r29, 0x00	; 0
    1fa8:	21 c0       	rjmp	.+66     	; 0x1fec <os_scheduler_DynamicPriorityRoundRobin+0x58>
	{

		if (!rq_isEmpty(&schedulingInfo.queues_ready[i + 1]))
    1faa:	7e 01       	movw	r14, r28
    1fac:	2f ef       	ldi	r18, 0xFF	; 255
    1fae:	e2 1a       	sub	r14, r18
    1fb0:	f2 0a       	sbc	r15, r18
    1fb2:	8b e0       	ldi	r24, 0x0B	; 11
    1fb4:	8e 9d       	mul	r24, r14
    1fb6:	80 01       	movw	r16, r0
    1fb8:	8f 9d       	mul	r24, r15
    1fba:	10 0d       	add	r17, r0
    1fbc:	11 24       	eor	r1, r1
    1fbe:	0f 58       	subi	r16, 0x8F	; 143
    1fc0:	1b 4f       	sbci	r17, 0xFB	; 251
    1fc2:	c8 01       	movw	r24, r16
    1fc4:	0e 94 38 07 	call	0xe70	; 0xe70 <rq_isEmpty>
    1fc8:	81 11       	cpse	r24, r1
    1fca:	0f c0       	rjmp	.+30     	; 0x1fea <os_scheduler_DynamicPriorityRoundRobin+0x56>
		{
			process_id_t pid = rq_pop(&schedulingInfo.queues_ready[i + 1]);
    1fcc:	c8 01       	movw	r24, r16
    1fce:	0e 94 3f 07 	call	0xe7e	; 0xe7e <rq_pop>

			rq_push(&schedulingInfo.queues_ready[i], pid);
    1fd2:	9b e0       	ldi	r25, 0x0B	; 11
    1fd4:	9c 9f       	mul	r25, r28
    1fd6:	90 01       	movw	r18, r0
    1fd8:	9d 9f       	mul	r25, r29
    1fda:	30 0d       	add	r19, r0
    1fdc:	11 24       	eor	r1, r1
    1fde:	68 2f       	mov	r22, r24
    1fe0:	c9 01       	movw	r24, r18
    1fe2:	8f 58       	subi	r24, 0x8F	; 143
    1fe4:	9b 4f       	sbci	r25, 0xFB	; 251
    1fe6:	0e 94 72 07 	call	0xee4	; 0xee4 <rq_push>
 *  \param processes An array holding the processes to choose the next process from.
 *  \param current The id of the current process.
 *  \return The next process to be executed determined on the basis of the dynamic priority round-robin strategy.
 */
process_id_t os_scheduler_DynamicPriorityRoundRobin(process_t const processes[], process_id_t current)
{
    1fea:	e7 01       	movw	r28, r14

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    1fec:	c2 30       	cpi	r28, 0x02	; 2
    1fee:	d1 05       	cpc	r29, r1
    1ff0:	e4 f2       	brlt	.-72     	; 0x1faa <os_scheduler_DynamicPriorityRoundRobin+0x16>
		else
		{		}
	}

	// 2. Push current process to the ready queue
	if (os_getProcessSlot(current)->state == OS_PS_READY)
    1ff2:	8d 2d       	mov	r24, r13
    1ff4:	0b dc       	rcall	.-2026   	; 0x180c <os_getProcessSlot>
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	81 81       	ldd	r24, Z+1	; 0x01
    1ffa:	81 30       	cpi	r24, 0x01	; 1
    1ffc:	69 f4       	brne	.+26     	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
	{
		rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(current)->priority], current);
    1ffe:	8d 2d       	mov	r24, r13
    2000:	05 dc       	rcall	.-2038   	; 0x180c <os_getProcessSlot>
    2002:	fc 01       	movw	r30, r24
    2004:	84 81       	ldd	r24, Z+4	; 0x04
    2006:	fb e0       	ldi	r31, 0x0B	; 11
    2008:	8f 9f       	mul	r24, r31
    200a:	c0 01       	movw	r24, r0
    200c:	11 24       	eor	r1, r1
    200e:	6d 2d       	mov	r22, r13
    2010:	8f 58       	subi	r24, 0x8F	; 143
    2012:	9b 4f       	sbci	r25, 0xFB	; 251
    2014:	0e 94 72 07 	call	0xee4	; 0xee4 <rq_push>

	// 3. Get next process from ready queue
	

	// 1. Move processes one higher in priority
	for (int i = 0; i < PRIORITY_COUNT - 1; i++)
    2018:	c0 e0       	ldi	r28, 0x00	; 0
    201a:	d0 e0       	ldi	r29, 0x00	; 0
    201c:	12 c0       	rjmp	.+36     	; 0x2042 <__DATA_REGION_LENGTH__+0x42>
	}
	
	// 3. Get next process from ready queue
	for (int i = 0; i < PRIORITY_COUNT; i++)
	{
		if (!rq_isEmpty(&schedulingInfo.queues_ready[i]))
    201e:	8b e0       	ldi	r24, 0x0B	; 11
    2020:	8c 9f       	mul	r24, r28
    2022:	80 01       	movw	r16, r0
    2024:	8d 9f       	mul	r24, r29
    2026:	10 0d       	add	r17, r0
    2028:	11 24       	eor	r1, r1
    202a:	0f 58       	subi	r16, 0x8F	; 143
    202c:	1b 4f       	sbci	r17, 0xFB	; 251
    202e:	c8 01       	movw	r24, r16
    2030:	0e 94 38 07 	call	0xe70	; 0xe70 <rq_isEmpty>
    2034:	81 11       	cpse	r24, r1
    2036:	04 c0       	rjmp	.+8      	; 0x2040 <__DATA_REGION_LENGTH__+0x40>
		{

			process_id_t next_pid = rq_pop(&schedulingInfo.queues_ready[i]);
    2038:	c8 01       	movw	r24, r16
    203a:	0e 94 3f 07 	call	0xe7e	; 0xe7e <rq_pop>
			return next_pid;
    203e:	05 c0       	rjmp	.+10     	; 0x204a <__DATA_REGION_LENGTH__+0x4a>
	{
		rq_push(&schedulingInfo.queues_ready[os_getProcessSlot(current)->priority], current);
	}
	
	// 3. Get next process from ready queue
	for (int i = 0; i < PRIORITY_COUNT; i++)
    2040:	21 96       	adiw	r28, 0x01	; 1
    2042:	c3 30       	cpi	r28, 0x03	; 3
    2044:	d1 05       	cpc	r29, r1
    2046:	5c f3       	brlt	.-42     	; 0x201e <__DATA_REGION_LENGTH__+0x1e>
		}

	}

	// If no process is ready, return idle process (0)
	return 0;
    2048:	80 e0       	ldi	r24, 0x00	; 0

}
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	1f 91       	pop	r17
    2050:	0f 91       	pop	r16
    2052:	ff 90       	pop	r15
    2054:	ef 90       	pop	r14
    2056:	df 90       	pop	r13
    2058:	08 95       	ret

0000205a <prog2>:
    lcd_writeProgString(PSTR(" Test finished"));
    while(1){}
}

//! This program includes the receiving procedure
PROGRAM(2, AUTOSTART)
    205a:	0e 94 3d 02 	call	0x47a	; 0x47a <rfAdapter_worker>
    205e:	fd cf       	rjmp	.-6      	; 0x205a <prog2>

00002060 <registerProgram1>:
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	df db       	rcall	.-2114   	; 0x1822 <os_getProgramSlot>
    2064:	2d e7       	ldi	r18, 0x7D	; 125
    2066:	30 e1       	ldi	r19, 0x10	; 16
    2068:	fc 01       	movw	r30, r24
    206a:	31 83       	std	Z+1, r19	; 0x01
    206c:	20 83       	st	Z, r18
    206e:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <os_autostart>
    2072:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <os_autostart+0x1>
    2076:	82 60       	ori	r24, 0x02	; 2
    2078:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <os_autostart+0x1>
    207c:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <os_autostart>
    2080:	08 95       	ret

00002082 <registerProgram2>:
    2082:	82 e0       	ldi	r24, 0x02	; 2
    2084:	ce db       	rcall	.-2148   	; 0x1822 <os_getProgramSlot>
    2086:	2d e2       	ldi	r18, 0x2D	; 45
    2088:	30 e1       	ldi	r19, 0x10	; 16
    208a:	fc 01       	movw	r30, r24
    208c:	31 83       	std	Z+1, r19	; 0x01
    208e:	20 83       	st	Z, r18
    2090:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <os_autostart>
    2094:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <os_autostart+0x1>
    2098:	84 60       	ori	r24, 0x04	; 4
    209a:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <os_autostart+0x1>
    209e:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <os_autostart>
    20a2:	08 95       	ret

000020a4 <displayCounter>:
/*!
 * Displays a counter in the right corner of the LCD.
 *
 * @param counter The counter value to display (0-99).
 */
void displayCounter(int counter){
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	ec 01       	movw	r28, r24
    if (counter >= 10){
    20aa:	0a 97       	sbiw	r24, 0x0a	; 10
    20ac:	3c f0       	brlt	.+14     	; 0x20bc <displayCounter+0x18>
        lcd_goto(2,14);
    20ae:	6e e0       	ldi	r22, 0x0E	; 14
    20b0:	82 e0       	ldi	r24, 0x02	; 2
    20b2:	0e 94 52 06 	call	0xca4	; 0xca4 <lcd_goto>
        lcd_writeDec(counter);
    20b6:	ce 01       	movw	r24, r28
    20b8:	0e 94 f3 06 	call	0xde6	; 0xde6 <lcd_writeDec>
    }

    //! Write 0 to the decade
    if(counter == 9){
    20bc:	c9 30       	cpi	r28, 0x09	; 9
    20be:	d1 05       	cpc	r29, r1
    20c0:	79 f4       	brne	.+30     	; 0x20e0 <displayCounter+0x3c>
        lcd_goto(2,14);
    20c2:	6e e0       	ldi	r22, 0x0E	; 14
    20c4:	82 e0       	ldi	r24, 0x02	; 2
    20c6:	0e 94 52 06 	call	0xca4	; 0xca4 <lcd_goto>
        lcd_writeDec(0);
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	0e 94 f3 06 	call	0xde6	; 0xde6 <lcd_writeDec>
        lcd_goto(2,15);
    20d2:	6f e0       	ldi	r22, 0x0F	; 15
    20d4:	82 e0       	ldi	r24, 0x02	; 2
    20d6:	0e 94 52 06 	call	0xca4	; 0xca4 <lcd_goto>
        lcd_writeDec(counter);
    20da:	ce 01       	movw	r24, r28
    20dc:	0e 94 f3 06 	call	0xde6	; 0xde6 <lcd_writeDec>
    }

    if(counter <= 9){
    20e0:	ca 30       	cpi	r28, 0x0A	; 10
    20e2:	d1 05       	cpc	r29, r1
    20e4:	3c f4       	brge	.+14     	; 0x20f4 <displayCounter+0x50>
        lcd_goto(2,15);
    20e6:	6f e0       	ldi	r22, 0x0F	; 15
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	0e 94 52 06 	call	0xca4	; 0xca4 <lcd_goto>
        lcd_writeDec(counter);
    20ee:	ce 01       	movw	r24, r28
    20f0:	0e 94 f3 06 	call	0xde6	; 0xde6 <lcd_writeDec>
    }
}
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	08 95       	ret

000020fa <prog1>:
//! Displays a counter in the right corner of the LCD.
void displayCounter(int i);

//! This program includes the sending procedure
PROGRAM(1, AUTOSTART)
{
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	2a 97       	sbiw	r28, 0x0a	; 10
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    rfAdapter_init();
    210e:	0e 94 35 02 	call	0x46a	; 0x46a <rfAdapter_init>
#if PHASE_1 == 1
    /*!
     * Sending Toggle LED to Board Address
     */

    lcd_writeProgString(PSTR("Phase 1: Toggle"));
    2112:	80 ef       	ldi	r24, 0xF0	; 240
    2114:	93 e0       	ldi	r25, 0x03	; 3
    2116:	0e 94 dd 06 	call	0xdba	; 0xdba <lcd_writeProgString>
    lcd_line2();
    211a:	0e 94 84 06 	call	0xd08	; 0xd08 <lcd_line2>
    lcd_writeProgString(PSTR("Onboard LED"));
    211e:	84 ee       	ldi	r24, 0xE4	; 228
    2120:	93 e0       	ldi	r25, 0x03	; 3
    2122:	0e 94 dd 06 	call	0xdba	; 0xdba <lcd_writeProgString>

    //! Toggle for 15 seconds and display Countdown
    for (int i = 15; i > 0; --i) {
    2126:	0f e0       	ldi	r16, 0x0F	; 15
    2128:	10 e0       	ldi	r17, 0x00	; 0
    212a:	0b c0       	rjmp	.+22     	; 0x2142 <prog1+0x48>
        displayCounter(i);
    212c:	c8 01       	movw	r24, r16
    212e:	ba df       	rcall	.-140    	; 0x20a4 <displayCounter>
        rfAdapter_sendToggleLed(serialAdapter_address);
    2130:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2134:	0e 94 ce 02 	call	0x59c	; 0x59c <rfAdapter_sendToggleLed>
        delayMs(3000);
    2138:	88 eb       	ldi	r24, 0xB8	; 184
    213a:	9b e0       	ldi	r25, 0x0B	; 11
    213c:	51 da       	rcall	.-2910   	; 0x15e0 <delayMs>
    lcd_writeProgString(PSTR("Phase 1: Toggle"));
    lcd_line2();
    lcd_writeProgString(PSTR("Onboard LED"));

    //! Toggle for 15 seconds and display Countdown
    for (int i = 15; i > 0; --i) {
    213e:	01 50       	subi	r16, 0x01	; 1
    2140:	11 09       	sbc	r17, r1
    2142:	10 16       	cp	r1, r16
    2144:	11 06       	cpc	r1, r17
    2146:	94 f3       	brlt	.-28     	; 0x212c <prog1+0x32>
#if PHASE_2 == 1
    /*!
     * Sending setLED to Board Address
     */

    lcd_clear();
    2148:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_clear>
    lcd_writeProgString(PSTR("Phase 2:"));
    214c:	8b ed       	ldi	r24, 0xDB	; 219
    214e:	93 e0       	ldi	r25, 0x03	; 3
    2150:	0e 94 dd 06 	call	0xdba	; 0xdba <lcd_writeProgString>

    //! LED on for 10 seconds and display Countdown
    lcd_line2();
    2154:	0e 94 84 06 	call	0xd08	; 0xd08 <lcd_line2>
    lcd_writeProgString(PSTR("LED On"));
    2158:	84 ed       	ldi	r24, 0xD4	; 212
    215a:	93 e0       	ldi	r25, 0x03	; 3
    215c:	0e 94 dd 06 	call	0xdba	; 0xdba <lcd_writeProgString>

    rfAdapter_sendSetLed(serialAdapter_address, 1);
    2160:	61 e0       	ldi	r22, 0x01	; 1
    2162:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2166:	0e 94 b3 02 	call	0x566	; 0x566 <rfAdapter_sendSetLed>
    for (int i = 10; i > 0; --i) {
    216a:	0a e0       	ldi	r16, 0x0A	; 10
    216c:	10 e0       	ldi	r17, 0x00	; 0
        displayCounter(i);
    216e:	07 c0       	rjmp	.+14     	; 0x217e <prog1+0x84>
    2170:	c8 01       	movw	r24, r16
        delayMs(3000);
    2172:	98 df       	rcall	.-208    	; 0x20a4 <displayCounter>
    2174:	88 eb       	ldi	r24, 0xB8	; 184
    2176:	9b e0       	ldi	r25, 0x0B	; 11
    2178:	33 da       	rcall	.-2970   	; 0x15e0 <delayMs>
    //! LED on for 10 seconds and display Countdown
    lcd_line2();
    lcd_writeProgString(PSTR("LED On"));

    rfAdapter_sendSetLed(serialAdapter_address, 1);
    for (int i = 10; i > 0; --i) {
    217a:	01 50       	subi	r16, 0x01	; 1
    217c:	11 09       	sbc	r17, r1
    217e:	10 16       	cp	r1, r16
    2180:	11 06       	cpc	r1, r17
    2182:	b4 f3       	brlt	.-20     	; 0x2170 <prog1+0x76>
        displayCounter(i);
        delayMs(3000);
    }

    //! LED off for 10 seconds and display Countdown
    lcd_line2();
    2184:	0e 94 84 06 	call	0xd08	; 0xd08 <lcd_line2>
    lcd_writeProgString(PSTR("LED Off"));
    2188:	8c ec       	ldi	r24, 0xCC	; 204
    218a:	93 e0       	ldi	r25, 0x03	; 3
    218c:	0e 94 dd 06 	call	0xdba	; 0xdba <lcd_writeProgString>

    rfAdapter_sendSetLed(serialAdapter_address, 0);
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2196:	0e 94 b3 02 	call	0x566	; 0x566 <rfAdapter_sendSetLed>
    for (int i = 10; i > 0; --i) {
    219a:	0a e0       	ldi	r16, 0x0A	; 10
    219c:	10 e0       	ldi	r17, 0x00	; 0
        displayCounter(i);
    219e:	07 c0       	rjmp	.+14     	; 0x21ae <prog1+0xb4>
    21a0:	c8 01       	movw	r24, r16
        delayMs(1000);
    21a2:	80 df       	rcall	.-256    	; 0x20a4 <displayCounter>
    21a4:	88 ee       	ldi	r24, 0xE8	; 232
    21a6:	93 e0       	ldi	r25, 0x03	; 3
    21a8:	1b da       	rcall	.-3018   	; 0x15e0 <delayMs>
    //! LED off for 10 seconds and display Countdown
    lcd_line2();
    lcd_writeProgString(PSTR("LED Off"));

    rfAdapter_sendSetLed(serialAdapter_address, 0);
    for (int i = 10; i > 0; --i) {
    21aa:	01 50       	subi	r16, 0x01	; 1
    21ac:	11 09       	sbc	r17, r1
    21ae:	10 16       	cp	r1, r16
    21b0:	11 06       	cpc	r1, r17
    21b2:	b4 f3       	brlt	.-20     	; 0x21a0 <prog1+0xa6>
#if PHASE_3 == 1
    /*!
     * Send LCD Print and LCD Clear to Board Address
     */

    lcd_clear();
    21b4:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_clear>
    lcd_writeProgString(PSTR("Phase 3:"));
    21b8:	83 ec       	ldi	r24, 0xC3	; 195
    21ba:	93 e0       	ldi	r25, 0x03	; 3
    21bc:	0e 94 dd 06 	call	0xdba	; 0xdba <lcd_writeProgString>
    delayMs(1000);
    21c0:	88 ee       	ldi	r24, 0xE8	; 232
    21c2:	93 e0       	ldi	r25, 0x03	; 3
    21c4:	0d da       	rcall	.-3046   	; 0x15e0 <delayMs>
    lcd_line2();
    21c6:	0e 94 84 06 	call	0xd08	; 0xd08 <lcd_line2>

    //! Sending Text
    rfAdapter_sendLcdPrint(serialAdapter_address, "lcd_clear() in");
    21ca:	6f e2       	ldi	r22, 0x2F	; 47
    21cc:	72 e0       	ldi	r23, 0x02	; 2
    21ce:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    21d2:	0e 94 1e 03 	call	0x63c	; 0x63c <rfAdapter_sendLcdPrint>
    delayMs(50);
    21d6:	82 e3       	ldi	r24, 0x32	; 50
    21d8:	90 e0       	ldi	r25, 0x00	; 0

    //! Countdown for Clear
    for (int i = 3; i >= 0; --i) {
    21da:	02 da       	rcall	.-3068   	; 0x15e0 <delayMs>
    21dc:	03 e0       	ldi	r16, 0x03	; 3
    21de:	10 e0       	ldi	r17, 0x00	; 0
        displayCounter(i);
    21e0:	07 c0       	rjmp	.+14     	; 0x21f0 <prog1+0xf6>
    21e2:	c8 01       	movw	r24, r16
    21e4:	5f df       	rcall	.-322    	; 0x20a4 <displayCounter>
        delayMs(1000);
    21e6:	88 ee       	ldi	r24, 0xE8	; 232
    21e8:	93 e0       	ldi	r25, 0x03	; 3
    21ea:	fa d9       	rcall	.-3084   	; 0x15e0 <delayMs>
    21ec:	01 50       	subi	r16, 0x01	; 1
    //! Sending Text
    rfAdapter_sendLcdPrint(serialAdapter_address, "lcd_clear() in");
    delayMs(50);

    //! Countdown for Clear
    for (int i = 3; i >= 0; --i) {
    21ee:	11 09       	sbc	r17, r1
    21f0:	11 23       	and	r17, r17
    21f2:	bc f7       	brge	.-18     	; 0x21e2 <prog1+0xe8>
        displayCounter(i);
        delayMs(1000);
    }

    //! Sending LCDClear
    rfAdapter_sendLcdClear(serialAdapter_address);
    21f4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    21f8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <rfAdapter_sendLcdClear>
    delayMs(2000);
    21fc:	80 ed       	ldi	r24, 0xD0	; 208
    21fe:	97 e0       	ldi	r25, 0x07	; 7
    2200:	ef d9       	rcall	.-3106   	; 0x15e0 <delayMs>
    2202:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_clear>
#if PHASE_4 == 1
    /*!
     * Send LCD GoTo and LCD Print ProcMem to Broadcast Address
     */

    lcd_clear();
    2206:	8a eb       	ldi	r24, 0xBA	; 186
    lcd_writeProgString(PSTR("Phase 4:"));
    2208:	93 e0       	ldi	r25, 0x03	; 3
    220a:	0e 94 dd 06 	call	0xdba	; 0xdba <lcd_writeProgString>
    lcd_line2();
    220e:	0e 94 84 06 	call	0xd08	; 0xd08 <lcd_line2>
    lcd_writeProgString(PSTR("    -->  <--"));
    2212:	8d ea       	ldi	r24, 0xAD	; 173
    2214:	93 e0       	ldi	r25, 0x03	; 3
    2216:	0e 94 dd 06 	call	0xdba	; 0xdba <lcd_writeProgString>
    delayMs(2000);
    221a:	80 ed       	ldi	r24, 0xD0	; 208
    221c:	97 e0       	ldi	r25, 0x07	; 7
    221e:	e0 d9       	rcall	.-3136   	; 0x15e0 <delayMs>
    2220:	47 e0       	ldi	r20, 0x07	; 7

    //! Sending Okay between the Errors
    rfAdapter_sendLcdGoto(ADDRESS_BROADCAST, 1, 7);
    2222:	61 e0       	ldi	r22, 0x01	; 1
    2224:	8f ef       	ldi	r24, 0xFF	; 255
    2226:	0e 94 02 03 	call	0x604	; 0x604 <rfAdapter_sendLcdGoto>
    rfAdapter_sendLcdPrintProcMem(ADDRESS_BROADCAST, PSTR("OK"));
    222a:	6a ea       	ldi	r22, 0xAA	; 170
    222c:	73 e0       	ldi	r23, 0x03	; 3
    222e:	8f ef       	ldi	r24, 0xFF	; 255
    2230:	0e 94 5e 03 	call	0x6bc	; 0x6bc <rfAdapter_sendLcdPrintProcMem>
    delayMs(3000);
    2234:	88 eb       	ldi	r24, 0xB8	; 184
    2236:	9b e0       	ldi	r25, 0x0B	; 11
    2238:	d3 d9       	rcall	.-3162   	; 0x15e0 <delayMs>
    /*!
     * Sends a reference frame to check compatibility with the other implementation.
     * Addressed to Broadcast Address
     */

    lcd_clear();
    223a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_clear>
    lcd_writeProgString(PSTR("Phase 5:  refer-ence frame "));
    223e:	8e e8       	ldi	r24, 0x8E	; 142
    2240:	93 e0       	ldi	r25, 0x03	; 3
    2242:	0e 94 dd 06 	call	0xdba	; 0xdba <lcd_writeProgString>
    lcd_goto(1,14);
    2246:	6e e0       	ldi	r22, 0x0E	; 14
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	0e 94 52 06 	call	0xca4	; 0xca4 <lcd_goto>
    delayMs(1000);
    224e:	88 ee       	ldi	r24, 0xE8	; 232
    2250:	93 e0       	ldi	r25, 0x03	; 3
    2252:	c6 d9       	rcall	.-3188   	; 0x15e0 <delayMs>
    2254:	8a e0       	ldi	r24, 0x0A	; 10

    //! The reference frame is equal to rfAdapter_sendLcdPrint(ADDRESS_BROADCAST, "OK");
    //! Created by using lcd_writeHexByte() in xbee_write().
    uint8_t data[] = {0x46, 0x52, 0x08, 0xFF, 0x04, 0x12, 0x02, 0x4F, 0x4B, 0xF3};
    2256:	ef e1       	ldi	r30, 0x1F	; 31
    2258:	f2 e0       	ldi	r31, 0x02	; 2
    225a:	de 01       	movw	r26, r28
    225c:	11 96       	adiw	r26, 0x01	; 1
    225e:	01 90       	ld	r0, Z+
    2260:	0d 92       	st	X+, r0
    2262:	8a 95       	dec	r24
    2264:	e1 f7       	brne	.-8      	; 0x225e <__stack+0x5f>
    uint8_t length = sizeof(data);

    //! Write directly to UART
    xbee_writeData(&data, length);
    2266:	6a e0       	ldi	r22, 0x0A	; 10
    2268:	ce 01       	movw	r24, r28
    226a:	01 96       	adiw	r24, 0x01	; 1
    226c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <xbee_writeData>

    delayMs(2000);
    2270:	80 ed       	ldi	r24, 0xD0	; 208
    2272:	97 e0       	ldi	r25, 0x07	; 7
    2274:	b5 d9       	rcall	.-3222   	; 0x15e0 <delayMs>
    2276:	0e 94 3f 06 	call	0xc7e	; 0xc7e <lcd_clear>

#endif

    //! Show finished screen
    lcd_clear();
    227a:	8f e7       	ldi	r24, 0x7F	; 127
    lcd_writeProgString(PSTR(" Test finished"));
    227c:	93 e0       	ldi	r25, 0x03	; 3
    227e:	0e 94 dd 06 	call	0xdba	; 0xdba <lcd_writeProgString>
    2282:	ff cf       	rjmp	.-2      	; 0x2282 <__stack+0x83>

00002284 <__udivmodsi4>:
    2284:	a1 e2       	ldi	r26, 0x21	; 33
    2286:	1a 2e       	mov	r1, r26
    2288:	aa 1b       	sub	r26, r26
    228a:	bb 1b       	sub	r27, r27
    228c:	fd 01       	movw	r30, r26
    228e:	0d c0       	rjmp	.+26     	; 0x22aa <__udivmodsi4_ep>

00002290 <__udivmodsi4_loop>:
    2290:	aa 1f       	adc	r26, r26
    2292:	bb 1f       	adc	r27, r27
    2294:	ee 1f       	adc	r30, r30
    2296:	ff 1f       	adc	r31, r31
    2298:	a2 17       	cp	r26, r18
    229a:	b3 07       	cpc	r27, r19
    229c:	e4 07       	cpc	r30, r20
    229e:	f5 07       	cpc	r31, r21
    22a0:	20 f0       	brcs	.+8      	; 0x22aa <__udivmodsi4_ep>
    22a2:	a2 1b       	sub	r26, r18
    22a4:	b3 0b       	sbc	r27, r19
    22a6:	e4 0b       	sbc	r30, r20
    22a8:	f5 0b       	sbc	r31, r21

000022aa <__udivmodsi4_ep>:
    22aa:	66 1f       	adc	r22, r22
    22ac:	77 1f       	adc	r23, r23
    22ae:	88 1f       	adc	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	1a 94       	dec	r1
    22b4:	69 f7       	brne	.-38     	; 0x2290 <__udivmodsi4_loop>
    22b6:	60 95       	com	r22
    22b8:	70 95       	com	r23
    22ba:	80 95       	com	r24
    22bc:	90 95       	com	r25
    22be:	9b 01       	movw	r18, r22
    22c0:	ac 01       	movw	r20, r24
    22c2:	bd 01       	movw	r22, r26
    22c4:	cf 01       	movw	r24, r30
    22c6:	08 95       	ret

000022c8 <__tablejump2__>:
    22c8:	ee 0f       	add	r30, r30
    22ca:	ff 1f       	adc	r31, r31
    22cc:	88 1f       	adc	r24, r24
    22ce:	8b bf       	out	0x3b, r24	; 59
    22d0:	07 90       	elpm	r0, Z+
    22d2:	f6 91       	elpm	r31, Z
    22d4:	e0 2d       	mov	r30, r0
    22d6:	19 94       	eijmp

000022d8 <__umulhisi3>:
    22d8:	a2 9f       	mul	r26, r18
    22da:	b0 01       	movw	r22, r0
    22dc:	b3 9f       	mul	r27, r19
    22de:	c0 01       	movw	r24, r0
    22e0:	a3 9f       	mul	r26, r19
    22e2:	70 0d       	add	r23, r0
    22e4:	81 1d       	adc	r24, r1
    22e6:	11 24       	eor	r1, r1
    22e8:	91 1d       	adc	r25, r1
    22ea:	b2 9f       	mul	r27, r18
    22ec:	70 0d       	add	r23, r0
    22ee:	81 1d       	adc	r24, r1
    22f0:	11 24       	eor	r1, r1
    22f2:	91 1d       	adc	r25, r1
    22f4:	08 95       	ret

000022f6 <strncpy_P>:
    22f6:	fb 01       	movw	r30, r22
    22f8:	dc 01       	movw	r26, r24
    22fa:	41 50       	subi	r20, 0x01	; 1
    22fc:	50 40       	sbci	r21, 0x00	; 0
    22fe:	48 f0       	brcs	.+18     	; 0x2312 <strncpy_P+0x1c>
    2300:	05 90       	lpm	r0, Z+
    2302:	0d 92       	st	X+, r0
    2304:	00 20       	and	r0, r0
    2306:	c9 f7       	brne	.-14     	; 0x22fa <strncpy_P+0x4>
    2308:	01 c0       	rjmp	.+2      	; 0x230c <strncpy_P+0x16>
    230a:	1d 92       	st	X+, r1
    230c:	41 50       	subi	r20, 0x01	; 1
    230e:	50 40       	sbci	r21, 0x00	; 0
    2310:	e0 f7       	brcc	.-8      	; 0x230a <strncpy_P+0x14>
    2312:	08 95       	ret

00002314 <memcpy>:
    2314:	fb 01       	movw	r30, r22
    2316:	dc 01       	movw	r26, r24
    2318:	02 c0       	rjmp	.+4      	; 0x231e <memcpy+0xa>
    231a:	01 90       	ld	r0, Z+
    231c:	0d 92       	st	X+, r0
    231e:	41 50       	subi	r20, 0x01	; 1
    2320:	50 40       	sbci	r21, 0x00	; 0
    2322:	d8 f7       	brcc	.-10     	; 0x231a <memcpy+0x6>
    2324:	08 95       	ret

00002326 <strncpy>:
    2326:	fb 01       	movw	r30, r22
    2328:	dc 01       	movw	r26, r24
    232a:	41 50       	subi	r20, 0x01	; 1
    232c:	50 40       	sbci	r21, 0x00	; 0
    232e:	48 f0       	brcs	.+18     	; 0x2342 <strncpy+0x1c>
    2330:	01 90       	ld	r0, Z+
    2332:	0d 92       	st	X+, r0
    2334:	00 20       	and	r0, r0
    2336:	c9 f7       	brne	.-14     	; 0x232a <strncpy+0x4>
    2338:	01 c0       	rjmp	.+2      	; 0x233c <strncpy+0x16>
    233a:	1d 92       	st	X+, r1
    233c:	41 50       	subi	r20, 0x01	; 1
    233e:	50 40       	sbci	r21, 0x00	; 0
    2340:	e0 f7       	brcc	.-8      	; 0x233a <strncpy+0x14>
    2342:	08 95       	ret

00002344 <printf>:
    2344:	cf 93       	push	r28
    2346:	df 93       	push	r29
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	ae 01       	movw	r20, r28
    234e:	4a 5f       	subi	r20, 0xFA	; 250
    2350:	5f 4f       	sbci	r21, 0xFF	; 255
    2352:	fa 01       	movw	r30, r20
    2354:	61 91       	ld	r22, Z+
    2356:	71 91       	ld	r23, Z+
    2358:	af 01       	movw	r20, r30
    235a:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <__iob+0x2>
    235e:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <__iob+0x3>
    2362:	11 d0       	rcall	.+34     	; 0x2386 <vfprintf>
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	08 95       	ret

0000236a <vfprintf_P>:
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	ec 01       	movw	r28, r24
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	88 60       	ori	r24, 0x08	; 8
    2374:	8b 83       	std	Y+3, r24	; 0x03
    2376:	ce 01       	movw	r24, r28
    2378:	06 d0       	rcall	.+12     	; 0x2386 <vfprintf>
    237a:	2b 81       	ldd	r18, Y+3	; 0x03
    237c:	27 7f       	andi	r18, 0xF7	; 247
    237e:	2b 83       	std	Y+3, r18	; 0x03
    2380:	df 91       	pop	r29
    2382:	cf 91       	pop	r28
    2384:	08 95       	ret

00002386 <vfprintf>:
    2386:	2f 92       	push	r2
    2388:	3f 92       	push	r3
    238a:	4f 92       	push	r4
    238c:	5f 92       	push	r5
    238e:	6f 92       	push	r6
    2390:	7f 92       	push	r7
    2392:	8f 92       	push	r8
    2394:	9f 92       	push	r9
    2396:	af 92       	push	r10
    2398:	bf 92       	push	r11
    239a:	cf 92       	push	r12
    239c:	df 92       	push	r13
    239e:	ef 92       	push	r14
    23a0:	ff 92       	push	r15
    23a2:	0f 93       	push	r16
    23a4:	1f 93       	push	r17
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	2b 97       	sbiw	r28, 0x0b	; 11
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	6c 01       	movw	r12, r24
    23bc:	7b 01       	movw	r14, r22
    23be:	8a 01       	movw	r16, r20
    23c0:	fc 01       	movw	r30, r24
    23c2:	17 82       	std	Z+7, r1	; 0x07
    23c4:	16 82       	std	Z+6, r1	; 0x06
    23c6:	83 81       	ldd	r24, Z+3	; 0x03
    23c8:	81 ff       	sbrs	r24, 1
    23ca:	bf c1       	rjmp	.+894    	; 0x274a <vfprintf+0x3c4>
    23cc:	ce 01       	movw	r24, r28
    23ce:	01 96       	adiw	r24, 0x01	; 1
    23d0:	3c 01       	movw	r6, r24
    23d2:	f6 01       	movw	r30, r12
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	f7 01       	movw	r30, r14
    23d8:	93 fd       	sbrc	r25, 3
    23da:	85 91       	lpm	r24, Z+
    23dc:	93 ff       	sbrs	r25, 3
    23de:	81 91       	ld	r24, Z+
    23e0:	7f 01       	movw	r14, r30
    23e2:	88 23       	and	r24, r24
    23e4:	09 f4       	brne	.+2      	; 0x23e8 <vfprintf+0x62>
    23e6:	ad c1       	rjmp	.+858    	; 0x2742 <vfprintf+0x3bc>
    23e8:	85 32       	cpi	r24, 0x25	; 37
    23ea:	39 f4       	brne	.+14     	; 0x23fa <vfprintf+0x74>
    23ec:	93 fd       	sbrc	r25, 3
    23ee:	85 91       	lpm	r24, Z+
    23f0:	93 ff       	sbrs	r25, 3
    23f2:	81 91       	ld	r24, Z+
    23f4:	7f 01       	movw	r14, r30
    23f6:	85 32       	cpi	r24, 0x25	; 37
    23f8:	21 f4       	brne	.+8      	; 0x2402 <vfprintf+0x7c>
    23fa:	b6 01       	movw	r22, r12
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	d6 d1       	rcall	.+940    	; 0x27ac <fputc>
    2400:	e8 cf       	rjmp	.-48     	; 0x23d2 <vfprintf+0x4c>
    2402:	91 2c       	mov	r9, r1
    2404:	21 2c       	mov	r2, r1
    2406:	31 2c       	mov	r3, r1
    2408:	ff e1       	ldi	r31, 0x1F	; 31
    240a:	f3 15       	cp	r31, r3
    240c:	d8 f0       	brcs	.+54     	; 0x2444 <vfprintf+0xbe>
    240e:	8b 32       	cpi	r24, 0x2B	; 43
    2410:	79 f0       	breq	.+30     	; 0x2430 <vfprintf+0xaa>
    2412:	38 f4       	brcc	.+14     	; 0x2422 <vfprintf+0x9c>
    2414:	80 32       	cpi	r24, 0x20	; 32
    2416:	79 f0       	breq	.+30     	; 0x2436 <vfprintf+0xb0>
    2418:	83 32       	cpi	r24, 0x23	; 35
    241a:	a1 f4       	brne	.+40     	; 0x2444 <vfprintf+0xbe>
    241c:	23 2d       	mov	r18, r3
    241e:	20 61       	ori	r18, 0x10	; 16
    2420:	1d c0       	rjmp	.+58     	; 0x245c <vfprintf+0xd6>
    2422:	8d 32       	cpi	r24, 0x2D	; 45
    2424:	61 f0       	breq	.+24     	; 0x243e <vfprintf+0xb8>
    2426:	80 33       	cpi	r24, 0x30	; 48
    2428:	69 f4       	brne	.+26     	; 0x2444 <vfprintf+0xbe>
    242a:	23 2d       	mov	r18, r3
    242c:	21 60       	ori	r18, 0x01	; 1
    242e:	16 c0       	rjmp	.+44     	; 0x245c <vfprintf+0xd6>
    2430:	83 2d       	mov	r24, r3
    2432:	82 60       	ori	r24, 0x02	; 2
    2434:	38 2e       	mov	r3, r24
    2436:	e3 2d       	mov	r30, r3
    2438:	e4 60       	ori	r30, 0x04	; 4
    243a:	3e 2e       	mov	r3, r30
    243c:	2a c0       	rjmp	.+84     	; 0x2492 <vfprintf+0x10c>
    243e:	f3 2d       	mov	r31, r3
    2440:	f8 60       	ori	r31, 0x08	; 8
    2442:	1d c0       	rjmp	.+58     	; 0x247e <vfprintf+0xf8>
    2444:	37 fc       	sbrc	r3, 7
    2446:	2d c0       	rjmp	.+90     	; 0x24a2 <vfprintf+0x11c>
    2448:	20 ed       	ldi	r18, 0xD0	; 208
    244a:	28 0f       	add	r18, r24
    244c:	2a 30       	cpi	r18, 0x0A	; 10
    244e:	40 f0       	brcs	.+16     	; 0x2460 <vfprintf+0xda>
    2450:	8e 32       	cpi	r24, 0x2E	; 46
    2452:	b9 f4       	brne	.+46     	; 0x2482 <vfprintf+0xfc>
    2454:	36 fc       	sbrc	r3, 6
    2456:	75 c1       	rjmp	.+746    	; 0x2742 <vfprintf+0x3bc>
    2458:	23 2d       	mov	r18, r3
    245a:	20 64       	ori	r18, 0x40	; 64
    245c:	32 2e       	mov	r3, r18
    245e:	19 c0       	rjmp	.+50     	; 0x2492 <vfprintf+0x10c>
    2460:	36 fe       	sbrs	r3, 6
    2462:	06 c0       	rjmp	.+12     	; 0x2470 <vfprintf+0xea>
    2464:	8a e0       	ldi	r24, 0x0A	; 10
    2466:	98 9e       	mul	r9, r24
    2468:	20 0d       	add	r18, r0
    246a:	11 24       	eor	r1, r1
    246c:	92 2e       	mov	r9, r18
    246e:	11 c0       	rjmp	.+34     	; 0x2492 <vfprintf+0x10c>
    2470:	ea e0       	ldi	r30, 0x0A	; 10
    2472:	2e 9e       	mul	r2, r30
    2474:	20 0d       	add	r18, r0
    2476:	11 24       	eor	r1, r1
    2478:	22 2e       	mov	r2, r18
    247a:	f3 2d       	mov	r31, r3
    247c:	f0 62       	ori	r31, 0x20	; 32
    247e:	3f 2e       	mov	r3, r31
    2480:	08 c0       	rjmp	.+16     	; 0x2492 <vfprintf+0x10c>
    2482:	8c 36       	cpi	r24, 0x6C	; 108
    2484:	21 f4       	brne	.+8      	; 0x248e <vfprintf+0x108>
    2486:	83 2d       	mov	r24, r3
    2488:	80 68       	ori	r24, 0x80	; 128
    248a:	38 2e       	mov	r3, r24
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <vfprintf+0x10c>
    248e:	88 36       	cpi	r24, 0x68	; 104
    2490:	41 f4       	brne	.+16     	; 0x24a2 <vfprintf+0x11c>
    2492:	f7 01       	movw	r30, r14
    2494:	93 fd       	sbrc	r25, 3
    2496:	85 91       	lpm	r24, Z+
    2498:	93 ff       	sbrs	r25, 3
    249a:	81 91       	ld	r24, Z+
    249c:	7f 01       	movw	r14, r30
    249e:	81 11       	cpse	r24, r1
    24a0:	b3 cf       	rjmp	.-154    	; 0x2408 <vfprintf+0x82>
    24a2:	98 2f       	mov	r25, r24
    24a4:	9f 7d       	andi	r25, 0xDF	; 223
    24a6:	95 54       	subi	r25, 0x45	; 69
    24a8:	93 30       	cpi	r25, 0x03	; 3
    24aa:	28 f4       	brcc	.+10     	; 0x24b6 <vfprintf+0x130>
    24ac:	0c 5f       	subi	r16, 0xFC	; 252
    24ae:	1f 4f       	sbci	r17, 0xFF	; 255
    24b0:	9f e3       	ldi	r25, 0x3F	; 63
    24b2:	99 83       	std	Y+1, r25	; 0x01
    24b4:	0d c0       	rjmp	.+26     	; 0x24d0 <vfprintf+0x14a>
    24b6:	83 36       	cpi	r24, 0x63	; 99
    24b8:	31 f0       	breq	.+12     	; 0x24c6 <vfprintf+0x140>
    24ba:	83 37       	cpi	r24, 0x73	; 115
    24bc:	71 f0       	breq	.+28     	; 0x24da <vfprintf+0x154>
    24be:	83 35       	cpi	r24, 0x53	; 83
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <vfprintf+0x13e>
    24c2:	55 c0       	rjmp	.+170    	; 0x256e <vfprintf+0x1e8>
    24c4:	20 c0       	rjmp	.+64     	; 0x2506 <vfprintf+0x180>
    24c6:	f8 01       	movw	r30, r16
    24c8:	80 81       	ld	r24, Z
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	0e 5f       	subi	r16, 0xFE	; 254
    24ce:	1f 4f       	sbci	r17, 0xFF	; 255
    24d0:	88 24       	eor	r8, r8
    24d2:	83 94       	inc	r8
    24d4:	91 2c       	mov	r9, r1
    24d6:	53 01       	movw	r10, r6
    24d8:	12 c0       	rjmp	.+36     	; 0x24fe <vfprintf+0x178>
    24da:	28 01       	movw	r4, r16
    24dc:	f2 e0       	ldi	r31, 0x02	; 2
    24de:	4f 0e       	add	r4, r31
    24e0:	51 1c       	adc	r5, r1
    24e2:	f8 01       	movw	r30, r16
    24e4:	a0 80       	ld	r10, Z
    24e6:	b1 80       	ldd	r11, Z+1	; 0x01
    24e8:	36 fe       	sbrs	r3, 6
    24ea:	03 c0       	rjmp	.+6      	; 0x24f2 <vfprintf+0x16c>
    24ec:	69 2d       	mov	r22, r9
    24ee:	70 e0       	ldi	r23, 0x00	; 0
    24f0:	02 c0       	rjmp	.+4      	; 0x24f6 <vfprintf+0x170>
    24f2:	6f ef       	ldi	r22, 0xFF	; 255
    24f4:	7f ef       	ldi	r23, 0xFF	; 255
    24f6:	c5 01       	movw	r24, r10
    24f8:	4e d1       	rcall	.+668    	; 0x2796 <strnlen>
    24fa:	4c 01       	movw	r8, r24
    24fc:	82 01       	movw	r16, r4
    24fe:	f3 2d       	mov	r31, r3
    2500:	ff 77       	andi	r31, 0x7F	; 127
    2502:	3f 2e       	mov	r3, r31
    2504:	15 c0       	rjmp	.+42     	; 0x2530 <vfprintf+0x1aa>
    2506:	28 01       	movw	r4, r16
    2508:	22 e0       	ldi	r18, 0x02	; 2
    250a:	42 0e       	add	r4, r18
    250c:	51 1c       	adc	r5, r1
    250e:	f8 01       	movw	r30, r16
    2510:	a0 80       	ld	r10, Z
    2512:	b1 80       	ldd	r11, Z+1	; 0x01
    2514:	36 fe       	sbrs	r3, 6
    2516:	03 c0       	rjmp	.+6      	; 0x251e <vfprintf+0x198>
    2518:	69 2d       	mov	r22, r9
    251a:	70 e0       	ldi	r23, 0x00	; 0
    251c:	02 c0       	rjmp	.+4      	; 0x2522 <vfprintf+0x19c>
    251e:	6f ef       	ldi	r22, 0xFF	; 255
    2520:	7f ef       	ldi	r23, 0xFF	; 255
    2522:	c5 01       	movw	r24, r10
    2524:	2d d1       	rcall	.+602    	; 0x2780 <strnlen_P>
    2526:	4c 01       	movw	r8, r24
    2528:	f3 2d       	mov	r31, r3
    252a:	f0 68       	ori	r31, 0x80	; 128
    252c:	3f 2e       	mov	r3, r31
    252e:	82 01       	movw	r16, r4
    2530:	33 fc       	sbrc	r3, 3
    2532:	19 c0       	rjmp	.+50     	; 0x2566 <vfprintf+0x1e0>
    2534:	82 2d       	mov	r24, r2
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	88 16       	cp	r8, r24
    253a:	99 06       	cpc	r9, r25
    253c:	a0 f4       	brcc	.+40     	; 0x2566 <vfprintf+0x1e0>
    253e:	b6 01       	movw	r22, r12
    2540:	80 e2       	ldi	r24, 0x20	; 32
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	33 d1       	rcall	.+614    	; 0x27ac <fputc>
    2546:	2a 94       	dec	r2
    2548:	f5 cf       	rjmp	.-22     	; 0x2534 <vfprintf+0x1ae>
    254a:	f5 01       	movw	r30, r10
    254c:	37 fc       	sbrc	r3, 7
    254e:	85 91       	lpm	r24, Z+
    2550:	37 fe       	sbrs	r3, 7
    2552:	81 91       	ld	r24, Z+
    2554:	5f 01       	movw	r10, r30
    2556:	b6 01       	movw	r22, r12
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	28 d1       	rcall	.+592    	; 0x27ac <fputc>
    255c:	21 10       	cpse	r2, r1
    255e:	2a 94       	dec	r2
    2560:	21 e0       	ldi	r18, 0x01	; 1
    2562:	82 1a       	sub	r8, r18
    2564:	91 08       	sbc	r9, r1
    2566:	81 14       	cp	r8, r1
    2568:	91 04       	cpc	r9, r1
    256a:	79 f7       	brne	.-34     	; 0x254a <vfprintf+0x1c4>
    256c:	e1 c0       	rjmp	.+450    	; 0x2730 <vfprintf+0x3aa>
    256e:	84 36       	cpi	r24, 0x64	; 100
    2570:	11 f0       	breq	.+4      	; 0x2576 <vfprintf+0x1f0>
    2572:	89 36       	cpi	r24, 0x69	; 105
    2574:	39 f5       	brne	.+78     	; 0x25c4 <vfprintf+0x23e>
    2576:	f8 01       	movw	r30, r16
    2578:	37 fe       	sbrs	r3, 7
    257a:	07 c0       	rjmp	.+14     	; 0x258a <vfprintf+0x204>
    257c:	60 81       	ld	r22, Z
    257e:	71 81       	ldd	r23, Z+1	; 0x01
    2580:	82 81       	ldd	r24, Z+2	; 0x02
    2582:	93 81       	ldd	r25, Z+3	; 0x03
    2584:	0c 5f       	subi	r16, 0xFC	; 252
    2586:	1f 4f       	sbci	r17, 0xFF	; 255
    2588:	08 c0       	rjmp	.+16     	; 0x259a <vfprintf+0x214>
    258a:	60 81       	ld	r22, Z
    258c:	71 81       	ldd	r23, Z+1	; 0x01
    258e:	07 2e       	mov	r0, r23
    2590:	00 0c       	add	r0, r0
    2592:	88 0b       	sbc	r24, r24
    2594:	99 0b       	sbc	r25, r25
    2596:	0e 5f       	subi	r16, 0xFE	; 254
    2598:	1f 4f       	sbci	r17, 0xFF	; 255
    259a:	f3 2d       	mov	r31, r3
    259c:	ff 76       	andi	r31, 0x6F	; 111
    259e:	3f 2e       	mov	r3, r31
    25a0:	97 ff       	sbrs	r25, 7
    25a2:	09 c0       	rjmp	.+18     	; 0x25b6 <vfprintf+0x230>
    25a4:	90 95       	com	r25
    25a6:	80 95       	com	r24
    25a8:	70 95       	com	r23
    25aa:	61 95       	neg	r22
    25ac:	7f 4f       	sbci	r23, 0xFF	; 255
    25ae:	8f 4f       	sbci	r24, 0xFF	; 255
    25b0:	9f 4f       	sbci	r25, 0xFF	; 255
    25b2:	f0 68       	ori	r31, 0x80	; 128
    25b4:	3f 2e       	mov	r3, r31
    25b6:	2a e0       	ldi	r18, 0x0A	; 10
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	a3 01       	movw	r20, r6
    25bc:	33 d1       	rcall	.+614    	; 0x2824 <__ultoa_invert>
    25be:	88 2e       	mov	r8, r24
    25c0:	86 18       	sub	r8, r6
    25c2:	44 c0       	rjmp	.+136    	; 0x264c <vfprintf+0x2c6>
    25c4:	85 37       	cpi	r24, 0x75	; 117
    25c6:	31 f4       	brne	.+12     	; 0x25d4 <vfprintf+0x24e>
    25c8:	23 2d       	mov	r18, r3
    25ca:	2f 7e       	andi	r18, 0xEF	; 239
    25cc:	b2 2e       	mov	r11, r18
    25ce:	2a e0       	ldi	r18, 0x0A	; 10
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	25 c0       	rjmp	.+74     	; 0x261e <vfprintf+0x298>
    25d4:	93 2d       	mov	r25, r3
    25d6:	99 7f       	andi	r25, 0xF9	; 249
    25d8:	b9 2e       	mov	r11, r25
    25da:	8f 36       	cpi	r24, 0x6F	; 111
    25dc:	c1 f0       	breq	.+48     	; 0x260e <vfprintf+0x288>
    25de:	18 f4       	brcc	.+6      	; 0x25e6 <vfprintf+0x260>
    25e0:	88 35       	cpi	r24, 0x58	; 88
    25e2:	79 f0       	breq	.+30     	; 0x2602 <vfprintf+0x27c>
    25e4:	ae c0       	rjmp	.+348    	; 0x2742 <vfprintf+0x3bc>
    25e6:	80 37       	cpi	r24, 0x70	; 112
    25e8:	19 f0       	breq	.+6      	; 0x25f0 <vfprintf+0x26a>
    25ea:	88 37       	cpi	r24, 0x78	; 120
    25ec:	21 f0       	breq	.+8      	; 0x25f6 <vfprintf+0x270>
    25ee:	a9 c0       	rjmp	.+338    	; 0x2742 <vfprintf+0x3bc>
    25f0:	e9 2f       	mov	r30, r25
    25f2:	e0 61       	ori	r30, 0x10	; 16
    25f4:	be 2e       	mov	r11, r30
    25f6:	b4 fe       	sbrs	r11, 4
    25f8:	0d c0       	rjmp	.+26     	; 0x2614 <vfprintf+0x28e>
    25fa:	fb 2d       	mov	r31, r11
    25fc:	f4 60       	ori	r31, 0x04	; 4
    25fe:	bf 2e       	mov	r11, r31
    2600:	09 c0       	rjmp	.+18     	; 0x2614 <vfprintf+0x28e>
    2602:	34 fe       	sbrs	r3, 4
    2604:	0a c0       	rjmp	.+20     	; 0x261a <vfprintf+0x294>
    2606:	29 2f       	mov	r18, r25
    2608:	26 60       	ori	r18, 0x06	; 6
    260a:	b2 2e       	mov	r11, r18
    260c:	06 c0       	rjmp	.+12     	; 0x261a <vfprintf+0x294>
    260e:	28 e0       	ldi	r18, 0x08	; 8
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	05 c0       	rjmp	.+10     	; 0x261e <vfprintf+0x298>
    2614:	20 e1       	ldi	r18, 0x10	; 16
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	02 c0       	rjmp	.+4      	; 0x261e <vfprintf+0x298>
    261a:	20 e1       	ldi	r18, 0x10	; 16
    261c:	32 e0       	ldi	r19, 0x02	; 2
    261e:	f8 01       	movw	r30, r16
    2620:	b7 fe       	sbrs	r11, 7
    2622:	07 c0       	rjmp	.+14     	; 0x2632 <vfprintf+0x2ac>
    2624:	60 81       	ld	r22, Z
    2626:	71 81       	ldd	r23, Z+1	; 0x01
    2628:	82 81       	ldd	r24, Z+2	; 0x02
    262a:	93 81       	ldd	r25, Z+3	; 0x03
    262c:	0c 5f       	subi	r16, 0xFC	; 252
    262e:	1f 4f       	sbci	r17, 0xFF	; 255
    2630:	06 c0       	rjmp	.+12     	; 0x263e <vfprintf+0x2b8>
    2632:	60 81       	ld	r22, Z
    2634:	71 81       	ldd	r23, Z+1	; 0x01
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	0e 5f       	subi	r16, 0xFE	; 254
    263c:	1f 4f       	sbci	r17, 0xFF	; 255
    263e:	a3 01       	movw	r20, r6
    2640:	f1 d0       	rcall	.+482    	; 0x2824 <__ultoa_invert>
    2642:	88 2e       	mov	r8, r24
    2644:	86 18       	sub	r8, r6
    2646:	fb 2d       	mov	r31, r11
    2648:	ff 77       	andi	r31, 0x7F	; 127
    264a:	3f 2e       	mov	r3, r31
    264c:	36 fe       	sbrs	r3, 6
    264e:	0d c0       	rjmp	.+26     	; 0x266a <vfprintf+0x2e4>
    2650:	23 2d       	mov	r18, r3
    2652:	2e 7f       	andi	r18, 0xFE	; 254
    2654:	a2 2e       	mov	r10, r18
    2656:	89 14       	cp	r8, r9
    2658:	58 f4       	brcc	.+22     	; 0x2670 <vfprintf+0x2ea>
    265a:	34 fe       	sbrs	r3, 4
    265c:	0b c0       	rjmp	.+22     	; 0x2674 <vfprintf+0x2ee>
    265e:	32 fc       	sbrc	r3, 2
    2660:	09 c0       	rjmp	.+18     	; 0x2674 <vfprintf+0x2ee>
    2662:	83 2d       	mov	r24, r3
    2664:	8e 7e       	andi	r24, 0xEE	; 238
    2666:	a8 2e       	mov	r10, r24
    2668:	05 c0       	rjmp	.+10     	; 0x2674 <vfprintf+0x2ee>
    266a:	b8 2c       	mov	r11, r8
    266c:	a3 2c       	mov	r10, r3
    266e:	03 c0       	rjmp	.+6      	; 0x2676 <vfprintf+0x2f0>
    2670:	b8 2c       	mov	r11, r8
    2672:	01 c0       	rjmp	.+2      	; 0x2676 <vfprintf+0x2f0>
    2674:	b9 2c       	mov	r11, r9
    2676:	a4 fe       	sbrs	r10, 4
    2678:	0f c0       	rjmp	.+30     	; 0x2698 <vfprintf+0x312>
    267a:	fe 01       	movw	r30, r28
    267c:	e8 0d       	add	r30, r8
    267e:	f1 1d       	adc	r31, r1
    2680:	80 81       	ld	r24, Z
    2682:	80 33       	cpi	r24, 0x30	; 48
    2684:	21 f4       	brne	.+8      	; 0x268e <vfprintf+0x308>
    2686:	9a 2d       	mov	r25, r10
    2688:	99 7e       	andi	r25, 0xE9	; 233
    268a:	a9 2e       	mov	r10, r25
    268c:	09 c0       	rjmp	.+18     	; 0x26a0 <vfprintf+0x31a>
    268e:	a2 fe       	sbrs	r10, 2
    2690:	06 c0       	rjmp	.+12     	; 0x269e <vfprintf+0x318>
    2692:	b3 94       	inc	r11
    2694:	b3 94       	inc	r11
    2696:	04 c0       	rjmp	.+8      	; 0x26a0 <vfprintf+0x31a>
    2698:	8a 2d       	mov	r24, r10
    269a:	86 78       	andi	r24, 0x86	; 134
    269c:	09 f0       	breq	.+2      	; 0x26a0 <vfprintf+0x31a>
    269e:	b3 94       	inc	r11
    26a0:	a3 fc       	sbrc	r10, 3
    26a2:	10 c0       	rjmp	.+32     	; 0x26c4 <vfprintf+0x33e>
    26a4:	a0 fe       	sbrs	r10, 0
    26a6:	06 c0       	rjmp	.+12     	; 0x26b4 <vfprintf+0x32e>
    26a8:	b2 14       	cp	r11, r2
    26aa:	80 f4       	brcc	.+32     	; 0x26cc <vfprintf+0x346>
    26ac:	28 0c       	add	r2, r8
    26ae:	92 2c       	mov	r9, r2
    26b0:	9b 18       	sub	r9, r11
    26b2:	0d c0       	rjmp	.+26     	; 0x26ce <vfprintf+0x348>
    26b4:	b2 14       	cp	r11, r2
    26b6:	58 f4       	brcc	.+22     	; 0x26ce <vfprintf+0x348>
    26b8:	b6 01       	movw	r22, r12
    26ba:	80 e2       	ldi	r24, 0x20	; 32
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	76 d0       	rcall	.+236    	; 0x27ac <fputc>
    26c0:	b3 94       	inc	r11
    26c2:	f8 cf       	rjmp	.-16     	; 0x26b4 <vfprintf+0x32e>
    26c4:	b2 14       	cp	r11, r2
    26c6:	18 f4       	brcc	.+6      	; 0x26ce <vfprintf+0x348>
    26c8:	2b 18       	sub	r2, r11
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <vfprintf+0x34a>
    26cc:	98 2c       	mov	r9, r8
    26ce:	21 2c       	mov	r2, r1
    26d0:	a4 fe       	sbrs	r10, 4
    26d2:	0f c0       	rjmp	.+30     	; 0x26f2 <vfprintf+0x36c>
    26d4:	b6 01       	movw	r22, r12
    26d6:	80 e3       	ldi	r24, 0x30	; 48
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	68 d0       	rcall	.+208    	; 0x27ac <fputc>
    26dc:	a2 fe       	sbrs	r10, 2
    26de:	16 c0       	rjmp	.+44     	; 0x270c <vfprintf+0x386>
    26e0:	a1 fc       	sbrc	r10, 1
    26e2:	03 c0       	rjmp	.+6      	; 0x26ea <vfprintf+0x364>
    26e4:	88 e7       	ldi	r24, 0x78	; 120
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <vfprintf+0x368>
    26ea:	88 e5       	ldi	r24, 0x58	; 88
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	b6 01       	movw	r22, r12
    26f0:	0c c0       	rjmp	.+24     	; 0x270a <vfprintf+0x384>
    26f2:	8a 2d       	mov	r24, r10
    26f4:	86 78       	andi	r24, 0x86	; 134
    26f6:	51 f0       	breq	.+20     	; 0x270c <vfprintf+0x386>
    26f8:	a1 fe       	sbrs	r10, 1
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <vfprintf+0x37a>
    26fc:	8b e2       	ldi	r24, 0x2B	; 43
    26fe:	01 c0       	rjmp	.+2      	; 0x2702 <vfprintf+0x37c>
    2700:	80 e2       	ldi	r24, 0x20	; 32
    2702:	a7 fc       	sbrc	r10, 7
    2704:	8d e2       	ldi	r24, 0x2D	; 45
    2706:	b6 01       	movw	r22, r12
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	50 d0       	rcall	.+160    	; 0x27ac <fputc>
    270c:	89 14       	cp	r8, r9
    270e:	30 f4       	brcc	.+12     	; 0x271c <vfprintf+0x396>
    2710:	b6 01       	movw	r22, r12
    2712:	80 e3       	ldi	r24, 0x30	; 48
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	4a d0       	rcall	.+148    	; 0x27ac <fputc>
    2718:	9a 94       	dec	r9
    271a:	f8 cf       	rjmp	.-16     	; 0x270c <vfprintf+0x386>
    271c:	8a 94       	dec	r8
    271e:	f3 01       	movw	r30, r6
    2720:	e8 0d       	add	r30, r8
    2722:	f1 1d       	adc	r31, r1
    2724:	80 81       	ld	r24, Z
    2726:	b6 01       	movw	r22, r12
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	40 d0       	rcall	.+128    	; 0x27ac <fputc>
    272c:	81 10       	cpse	r8, r1
    272e:	f6 cf       	rjmp	.-20     	; 0x271c <vfprintf+0x396>
    2730:	22 20       	and	r2, r2
    2732:	09 f4       	brne	.+2      	; 0x2736 <vfprintf+0x3b0>
    2734:	4e ce       	rjmp	.-868    	; 0x23d2 <vfprintf+0x4c>
    2736:	b6 01       	movw	r22, r12
    2738:	80 e2       	ldi	r24, 0x20	; 32
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	37 d0       	rcall	.+110    	; 0x27ac <fputc>
    273e:	2a 94       	dec	r2
    2740:	f7 cf       	rjmp	.-18     	; 0x2730 <vfprintf+0x3aa>
    2742:	f6 01       	movw	r30, r12
    2744:	86 81       	ldd	r24, Z+6	; 0x06
    2746:	97 81       	ldd	r25, Z+7	; 0x07
    2748:	02 c0       	rjmp	.+4      	; 0x274e <vfprintf+0x3c8>
    274a:	8f ef       	ldi	r24, 0xFF	; 255
    274c:	9f ef       	ldi	r25, 0xFF	; 255
    274e:	2b 96       	adiw	r28, 0x0b	; 11
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	f8 94       	cli
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	cd bf       	out	0x3d, r28	; 61
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	1f 91       	pop	r17
    2760:	0f 91       	pop	r16
    2762:	ff 90       	pop	r15
    2764:	ef 90       	pop	r14
    2766:	df 90       	pop	r13
    2768:	cf 90       	pop	r12
    276a:	bf 90       	pop	r11
    276c:	af 90       	pop	r10
    276e:	9f 90       	pop	r9
    2770:	8f 90       	pop	r8
    2772:	7f 90       	pop	r7
    2774:	6f 90       	pop	r6
    2776:	5f 90       	pop	r5
    2778:	4f 90       	pop	r4
    277a:	3f 90       	pop	r3
    277c:	2f 90       	pop	r2
    277e:	08 95       	ret

00002780 <strnlen_P>:
    2780:	fc 01       	movw	r30, r24
    2782:	05 90       	lpm	r0, Z+
    2784:	61 50       	subi	r22, 0x01	; 1
    2786:	70 40       	sbci	r23, 0x00	; 0
    2788:	01 10       	cpse	r0, r1
    278a:	d8 f7       	brcc	.-10     	; 0x2782 <strnlen_P+0x2>
    278c:	80 95       	com	r24
    278e:	90 95       	com	r25
    2790:	8e 0f       	add	r24, r30
    2792:	9f 1f       	adc	r25, r31
    2794:	08 95       	ret

00002796 <strnlen>:
    2796:	fc 01       	movw	r30, r24
    2798:	61 50       	subi	r22, 0x01	; 1
    279a:	70 40       	sbci	r23, 0x00	; 0
    279c:	01 90       	ld	r0, Z+
    279e:	01 10       	cpse	r0, r1
    27a0:	d8 f7       	brcc	.-10     	; 0x2798 <strnlen+0x2>
    27a2:	80 95       	com	r24
    27a4:	90 95       	com	r25
    27a6:	8e 0f       	add	r24, r30
    27a8:	9f 1f       	adc	r25, r31
    27aa:	08 95       	ret

000027ac <fputc>:
    27ac:	0f 93       	push	r16
    27ae:	1f 93       	push	r17
    27b0:	cf 93       	push	r28
    27b2:	df 93       	push	r29
    27b4:	fb 01       	movw	r30, r22
    27b6:	23 81       	ldd	r18, Z+3	; 0x03
    27b8:	21 fd       	sbrc	r18, 1
    27ba:	03 c0       	rjmp	.+6      	; 0x27c2 <fputc+0x16>
    27bc:	8f ef       	ldi	r24, 0xFF	; 255
    27be:	9f ef       	ldi	r25, 0xFF	; 255
    27c0:	2c c0       	rjmp	.+88     	; 0x281a <fputc+0x6e>
    27c2:	22 ff       	sbrs	r18, 2
    27c4:	16 c0       	rjmp	.+44     	; 0x27f2 <fputc+0x46>
    27c6:	46 81       	ldd	r20, Z+6	; 0x06
    27c8:	57 81       	ldd	r21, Z+7	; 0x07
    27ca:	24 81       	ldd	r18, Z+4	; 0x04
    27cc:	35 81       	ldd	r19, Z+5	; 0x05
    27ce:	42 17       	cp	r20, r18
    27d0:	53 07       	cpc	r21, r19
    27d2:	44 f4       	brge	.+16     	; 0x27e4 <fputc+0x38>
    27d4:	a0 81       	ld	r26, Z
    27d6:	b1 81       	ldd	r27, Z+1	; 0x01
    27d8:	9d 01       	movw	r18, r26
    27da:	2f 5f       	subi	r18, 0xFF	; 255
    27dc:	3f 4f       	sbci	r19, 0xFF	; 255
    27de:	31 83       	std	Z+1, r19	; 0x01
    27e0:	20 83       	st	Z, r18
    27e2:	8c 93       	st	X, r24
    27e4:	26 81       	ldd	r18, Z+6	; 0x06
    27e6:	37 81       	ldd	r19, Z+7	; 0x07
    27e8:	2f 5f       	subi	r18, 0xFF	; 255
    27ea:	3f 4f       	sbci	r19, 0xFF	; 255
    27ec:	37 83       	std	Z+7, r19	; 0x07
    27ee:	26 83       	std	Z+6, r18	; 0x06
    27f0:	14 c0       	rjmp	.+40     	; 0x281a <fputc+0x6e>
    27f2:	8b 01       	movw	r16, r22
    27f4:	ec 01       	movw	r28, r24
    27f6:	fb 01       	movw	r30, r22
    27f8:	00 84       	ldd	r0, Z+8	; 0x08
    27fa:	f1 85       	ldd	r31, Z+9	; 0x09
    27fc:	e0 2d       	mov	r30, r0
    27fe:	19 95       	eicall
    2800:	89 2b       	or	r24, r25
    2802:	e1 f6       	brne	.-72     	; 0x27bc <fputc+0x10>
    2804:	d8 01       	movw	r26, r16
    2806:	16 96       	adiw	r26, 0x06	; 6
    2808:	8d 91       	ld	r24, X+
    280a:	9c 91       	ld	r25, X
    280c:	17 97       	sbiw	r26, 0x07	; 7
    280e:	01 96       	adiw	r24, 0x01	; 1
    2810:	17 96       	adiw	r26, 0x07	; 7
    2812:	9c 93       	st	X, r25
    2814:	8e 93       	st	-X, r24
    2816:	16 97       	sbiw	r26, 0x06	; 6
    2818:	ce 01       	movw	r24, r28
    281a:	df 91       	pop	r29
    281c:	cf 91       	pop	r28
    281e:	1f 91       	pop	r17
    2820:	0f 91       	pop	r16
    2822:	08 95       	ret

00002824 <__ultoa_invert>:
    2824:	fa 01       	movw	r30, r20
    2826:	aa 27       	eor	r26, r26
    2828:	28 30       	cpi	r18, 0x08	; 8
    282a:	51 f1       	breq	.+84     	; 0x2880 <__ultoa_invert+0x5c>
    282c:	20 31       	cpi	r18, 0x10	; 16
    282e:	81 f1       	breq	.+96     	; 0x2890 <__ultoa_invert+0x6c>
    2830:	e8 94       	clt
    2832:	6f 93       	push	r22
    2834:	6e 7f       	andi	r22, 0xFE	; 254
    2836:	6e 5f       	subi	r22, 0xFE	; 254
    2838:	7f 4f       	sbci	r23, 0xFF	; 255
    283a:	8f 4f       	sbci	r24, 0xFF	; 255
    283c:	9f 4f       	sbci	r25, 0xFF	; 255
    283e:	af 4f       	sbci	r26, 0xFF	; 255
    2840:	b1 e0       	ldi	r27, 0x01	; 1
    2842:	3e d0       	rcall	.+124    	; 0x28c0 <__ultoa_invert+0x9c>
    2844:	b4 e0       	ldi	r27, 0x04	; 4
    2846:	3c d0       	rcall	.+120    	; 0x28c0 <__ultoa_invert+0x9c>
    2848:	67 0f       	add	r22, r23
    284a:	78 1f       	adc	r23, r24
    284c:	89 1f       	adc	r24, r25
    284e:	9a 1f       	adc	r25, r26
    2850:	a1 1d       	adc	r26, r1
    2852:	68 0f       	add	r22, r24
    2854:	79 1f       	adc	r23, r25
    2856:	8a 1f       	adc	r24, r26
    2858:	91 1d       	adc	r25, r1
    285a:	a1 1d       	adc	r26, r1
    285c:	6a 0f       	add	r22, r26
    285e:	71 1d       	adc	r23, r1
    2860:	81 1d       	adc	r24, r1
    2862:	91 1d       	adc	r25, r1
    2864:	a1 1d       	adc	r26, r1
    2866:	20 d0       	rcall	.+64     	; 0x28a8 <__ultoa_invert+0x84>
    2868:	09 f4       	brne	.+2      	; 0x286c <__ultoa_invert+0x48>
    286a:	68 94       	set
    286c:	3f 91       	pop	r19
    286e:	2a e0       	ldi	r18, 0x0A	; 10
    2870:	26 9f       	mul	r18, r22
    2872:	11 24       	eor	r1, r1
    2874:	30 19       	sub	r19, r0
    2876:	30 5d       	subi	r19, 0xD0	; 208
    2878:	31 93       	st	Z+, r19
    287a:	de f6       	brtc	.-74     	; 0x2832 <__ultoa_invert+0xe>
    287c:	cf 01       	movw	r24, r30
    287e:	08 95       	ret
    2880:	46 2f       	mov	r20, r22
    2882:	47 70       	andi	r20, 0x07	; 7
    2884:	40 5d       	subi	r20, 0xD0	; 208
    2886:	41 93       	st	Z+, r20
    2888:	b3 e0       	ldi	r27, 0x03	; 3
    288a:	0f d0       	rcall	.+30     	; 0x28aa <__ultoa_invert+0x86>
    288c:	c9 f7       	brne	.-14     	; 0x2880 <__ultoa_invert+0x5c>
    288e:	f6 cf       	rjmp	.-20     	; 0x287c <__ultoa_invert+0x58>
    2890:	46 2f       	mov	r20, r22
    2892:	4f 70       	andi	r20, 0x0F	; 15
    2894:	40 5d       	subi	r20, 0xD0	; 208
    2896:	4a 33       	cpi	r20, 0x3A	; 58
    2898:	18 f0       	brcs	.+6      	; 0x28a0 <__ultoa_invert+0x7c>
    289a:	49 5d       	subi	r20, 0xD9	; 217
    289c:	31 fd       	sbrc	r19, 1
    289e:	40 52       	subi	r20, 0x20	; 32
    28a0:	41 93       	st	Z+, r20
    28a2:	02 d0       	rcall	.+4      	; 0x28a8 <__ultoa_invert+0x84>
    28a4:	a9 f7       	brne	.-22     	; 0x2890 <__ultoa_invert+0x6c>
    28a6:	ea cf       	rjmp	.-44     	; 0x287c <__ultoa_invert+0x58>
    28a8:	b4 e0       	ldi	r27, 0x04	; 4
    28aa:	a6 95       	lsr	r26
    28ac:	97 95       	ror	r25
    28ae:	87 95       	ror	r24
    28b0:	77 95       	ror	r23
    28b2:	67 95       	ror	r22
    28b4:	ba 95       	dec	r27
    28b6:	c9 f7       	brne	.-14     	; 0x28aa <__ultoa_invert+0x86>
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	61 05       	cpc	r22, r1
    28bc:	71 05       	cpc	r23, r1
    28be:	08 95       	ret
    28c0:	9b 01       	movw	r18, r22
    28c2:	ac 01       	movw	r20, r24
    28c4:	0a 2e       	mov	r0, r26
    28c6:	06 94       	lsr	r0
    28c8:	57 95       	ror	r21
    28ca:	47 95       	ror	r20
    28cc:	37 95       	ror	r19
    28ce:	27 95       	ror	r18
    28d0:	ba 95       	dec	r27
    28d2:	c9 f7       	brne	.-14     	; 0x28c6 <__ultoa_invert+0xa2>
    28d4:	62 0f       	add	r22, r18
    28d6:	73 1f       	adc	r23, r19
    28d8:	84 1f       	adc	r24, r20
    28da:	95 1f       	adc	r25, r21
    28dc:	a0 1d       	adc	r26, r0
    28de:	08 95       	ret

000028e0 <_exit>:
    28e0:	f8 94       	cli

000028e2 <__stop_program>:
    28e2:	ff cf       	rjmp	.-2      	; 0x28e2 <__stop_program>
